
sound_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0b4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800e260  0800e260  0001e260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e32c  0800e32c  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e32c  0800e32c  0001e32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e334  0800e334  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e334  0800e334  0001e334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e338  0800e338  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800e33c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004908  2000018c  0800e4c8  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a94  0800e4c8  00024a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e6f7  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000050d5  00000000  00000000  0004e8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002510  00000000  00000000  00053988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022c0  00000000  00000000  00055e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033061  00000000  00000000  00058158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fca4  00000000  00000000  0008b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123d28  00000000  00000000  000aae5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ceb85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f10  00000000  00000000  001cec00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000018c 	.word	0x2000018c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800e248 	.word	0x0800e248

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000190 	.word	0x20000190
 80001e8:	0800e248 	.word	0x0800e248

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_DFSDM_FilterRegConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	sprintf(tab, "DFSDM complete!");
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>)
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>)
 8000508:	4614      	mov	r4, r2
 800050a:	461d      	mov	r5, r3
 800050c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050e:	6020      	str	r0, [r4, #0]
 8000510:	6061      	str	r1, [r4, #4]
 8000512:	60a2      	str	r2, [r4, #8]
 8000514:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit_DMA(&huart2, tab, strlen(tab));
 8000516:	4807      	ldr	r0, [pc, #28]	; (8000534 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>)
 8000518:	f7ff fe68 	bl	80001ec <strlen>
 800051c:	4603      	mov	r3, r0
 800051e:	b29b      	uxth	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4904      	ldr	r1, [pc, #16]	; (8000534 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>)
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <HAL_DFSDM_FilterRegConvCpltCallback+0x40>)
 8000526:	f008 fe99 	bl	800925c <HAL_UART_Transmit_DMA>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bdb0      	pop	{r4, r5, r7, pc}
 8000532:	bf00      	nop
 8000534:	200007c8 	.word	0x200007c8
 8000538:	0800e260 	.word	0x0800e260
 800053c:	200030e8 	.word	0x200030e8

08000540 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800054e:	f004 fa3b 	bl	80049c8 <HAL_GPIO_TogglePin>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	48000400 	.word	0x48000400

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f001 ff81 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f89d 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fec1 	bl	80012f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000572:	f000 fde7 	bl	8001144 <MX_DMA_Init>
  MX_ADC1_Init();
 8000576:	f000 f949 	bl	800080c <MX_ADC1_Init>
  MX_ADC2_Init();
 800057a:	f000 f9bf 	bl	80008fc <MX_ADC2_Init>
  MX_ADC3_Init();
 800057e:	f000 fa21 	bl	80009c4 <MX_ADC3_Init>
  MX_DCMI_Init();
 8000582:	f000 fa83 	bl	8000a8c <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8000586:	f000 fab5 	bl	8000af4 <MX_DFSDM1_Init>
  MX_FMC_Init();
 800058a:	f000 fe01 	bl	8001190 <MX_FMC_Init>
  MX_I2C1_Init();
 800058e:	f000 fb4b 	bl	8000c28 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000592:	f000 fb89 	bl	8000ca8 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8000596:	f000 fbc7 	bl	8000d28 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800059a:	f000 fbf3 	bl	8000d84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800059e:	f000 fc21 	bl	8000de4 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 80005a2:	f000 fc4f 	bl	8000e44 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80005a6:	f000 fc79 	bl	8000e9c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80005aa:	f000 fd1f 	bl	8000fec <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80005ae:	f000 fd4d 	bl	800104c <MX_SPI1_Init>
  MX_SPI2_Init();
 80005b2:	f000 fd89 	bl	80010c8 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80005b6:	f00d f821 	bl	800d5fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  sprintf(tab, "Hello world 5!\n");
 80005ba:	4a32      	ldr	r2, [pc, #200]	; (8000684 <main+0x124>)
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <main+0x128>)
 80005be:	4614      	mov	r4, r2
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	6020      	str	r0, [r4, #0]
 80005c6:	6061      	str	r1, [r4, #4]
 80005c8:	60a2      	str	r2, [r4, #8]
 80005ca:	60e3      	str	r3, [r4, #12]
  HAL_UART_Transmit_DMA(&huart2, tab, strlen(tab));
 80005cc:	482d      	ldr	r0, [pc, #180]	; (8000684 <main+0x124>)
 80005ce:	f7ff fe0d 	bl	80001ec <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	492a      	ldr	r1, [pc, #168]	; (8000684 <main+0x124>)
 80005da:	482c      	ldr	r0, [pc, #176]	; (800068c <main+0x12c>)
 80005dc:	f008 fe3e 	bl	800925c <HAL_UART_Transmit_DMA>

  HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f001 ffb2 	bl	800254c <HAL_Delay>

  if (HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0) == HAL_OK)
 80005e8:	4829      	ldr	r0, [pc, #164]	; (8000690 <main+0x130>)
 80005ea:	f003 fa98 	bl	8003b1e <HAL_DFSDM_FilterRegularStart>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d124      	bne.n	800063e <main+0xde>
  {
	  if ((hal_status = HAL_DFSDM_FilterPollForRegConversion(&hdfsdm1_filter0, 1000)) == HAL_OK)
 80005f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f8:	4825      	ldr	r0, [pc, #148]	; (8000690 <main+0x130>)
 80005fa:	f003 faab 	bl	8003b54 <HAL_DFSDM_FilterPollForRegConversion>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d108      	bne.n	800061a <main+0xba>
	  {
		  audio_data[0] = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &hdfsdm1_channel1);
 8000608:	4922      	ldr	r1, [pc, #136]	; (8000694 <main+0x134>)
 800060a:	4821      	ldr	r0, [pc, #132]	; (8000690 <main+0x130>)
 800060c:	f003 fb7a 	bl	8003d04 <HAL_DFSDM_FilterGetRegularValue>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <main+0x138>)
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	e011      	b.n	800063e <main+0xde>
	  }
	  else
	  {
		  sprintf(tab, "Poll error!");
 800061a:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <main+0x124>)
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <main+0x13c>)
 800061e:	4614      	mov	r4, r2
 8000620:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000622:	6020      	str	r0, [r4, #0]
 8000624:	6061      	str	r1, [r4, #4]
 8000626:	60a2      	str	r2, [r4, #8]
		  HAL_UART_Transmit(&huart2, tab, strlen(tab), 1000);
 8000628:	4816      	ldr	r0, [pc, #88]	; (8000684 <main+0x124>)
 800062a:	f7ff fddf 	bl	80001ec <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	4913      	ldr	r1, [pc, #76]	; (8000684 <main+0x124>)
 8000638:	4814      	ldr	r0, [pc, #80]	; (800068c <main+0x12c>)
 800063a:	f008 fd7b 	bl	8009134 <HAL_UART_Transmit>
	  }
  }

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, audio_data, AUDIO_DATA_LENGTH) == HAL_OK)
 800063e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000642:	4915      	ldr	r1, [pc, #84]	; (8000698 <main+0x138>)
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <main+0x130>)
 8000646:	f003 fadb 	bl	8003c00 <HAL_DFSDM_FilterRegularStart_DMA>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d105      	bne.n	800065c <main+0xfc>
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <main+0x140>)
 8000656:	f004 f9b7 	bl	80049c8 <HAL_GPIO_TogglePin>
 800065a:	e012      	b.n	8000682 <main+0x122>
  }
  else
  {
	  sprintf(tab, "DFSDM error!");
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <main+0x124>)
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <main+0x144>)
 8000660:	4614      	mov	r4, r2
 8000662:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000664:	6020      	str	r0, [r4, #0]
 8000666:	6061      	str	r1, [r4, #4]
 8000668:	60a2      	str	r2, [r4, #8]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	7323      	strb	r3, [r4, #12]
	  HAL_UART_Transmit_DMA(&huart2, tab, strlen(tab));
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <main+0x124>)
 8000670:	f7ff fdbc 	bl	80001ec <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	b29b      	uxth	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	4902      	ldr	r1, [pc, #8]	; (8000684 <main+0x124>)
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <main+0x12c>)
 800067e:	f008 fded 	bl	800925c <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x122>
 8000684:	200007c8 	.word	0x200007c8
 8000688:	0800e270 	.word	0x0800e270
 800068c:	200030e8 	.word	0x200030e8
 8000690:	200005a0 	.word	0x200005a0
 8000694:	20000404 	.word	0x20000404
 8000698:	20000a34 	.word	0x20000a34
 800069c:	0800e280 	.word	0x0800e280
 80006a0:	48000400 	.word	0x48000400
 80006a4:	0800e28c 	.word	0x0800e28c

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b0ba      	sub	sp, #232	; 0xe8
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006b2:	2244      	movs	r2, #68	; 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00d fdbe 	bl	800e238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	228c      	movs	r2, #140	; 0x8c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00d fdb0 	bl	800e238 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006d8:	f005 fb32 	bl	8005d40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006dc:	4b48      	ldr	r3, [pc, #288]	; (8000800 <SystemClock_Config+0x158>)
 80006de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006e2:	4a47      	ldr	r2, [pc, #284]	; (8000800 <SystemClock_Config+0x158>)
 80006e4:	f023 0318 	bic.w	r3, r3, #24
 80006e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006ec:	2314      	movs	r3, #20
 80006ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000710:	2301      	movs	r3, #1
 8000712:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000716:	2305      	movs	r3, #5
 8000718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 48;
 800071c:	2330      	movs	r3, #48	; 0x30
 800071e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000738:	4618      	mov	r0, r3
 800073a:	f005 fc63 	bl	8006004 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000744:	f000 ff4c 	bl	80015e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000754:	2390      	movs	r3, #144	; 0x90
 8000756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000766:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800076a:	2101      	movs	r1, #1
 800076c:	4618      	mov	r0, r3
 800076e:	f006 f837 	bl	80067e0 <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000778:	f000 ff32 	bl	80015e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <SystemClock_Config+0x15c>)
 800077e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000784:	2300      	movs	r3, #0
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000790:	2300      	movs	r3, #0
 8000792:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000794:	2300      	movs	r3, #0
 8000796:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000798:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800079c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 80007a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80007a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007ac:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80007ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007b2:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80007b8:	2305      	movs	r3, #5
 80007ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 30;
 80007bc:	231e      	movs	r3, #30
 80007be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <SystemClock_Config+0x160>)
 80007ce:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 fa08 	bl	8006be8 <HAL_RCCEx_PeriphCLKConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 80007de:	f000 feff 	bl	80015e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e6:	f005 fac9 	bl	8005d7c <HAL_PWREx_ControlVoltageScaling>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 80007f0:	f000 fef6 	bl	80015e0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007f4:	f007 f9a6 	bl	8007b44 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007f8:	bf00      	nop
 80007fa:	37e8      	adds	r7, #232	; 0xe8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000
 8000804:	000968e3 	.word	0x000968e3
 8000808:	01110000 	.word	0x01110000

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000830:	4a30      	ldr	r2, [pc, #192]	; (80008f4 <MX_ADC1_Init+0xe8>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000834:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000836:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800083a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083c:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_ADC1_Init+0xe4>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_ADC1_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000850:	2204      	movs	r2, #4
 8000852:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000856:	2200      	movs	r2, #0
 8000858:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <MX_ADC1_Init+0xe4>)
 800085c:	2200      	movs	r2, #0
 800085e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000862:	2201      	movs	r2, #1
 8000864:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_ADC1_Init+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000884:	2200      	movs	r2, #0
 8000886:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_ADC1_Init+0xe4>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000890:	4817      	ldr	r0, [pc, #92]	; (80008f0 <MX_ADC1_Init+0xe4>)
 8000892:	f002 f80f 	bl	80028b4 <HAL_ADC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800089c:	f000 fea0 	bl	80015e0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <MX_ADC1_Init+0xe4>)
 80008ac:	f002 fd00 	bl	80032b0 <HAL_ADCEx_MultiModeConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008b6:	f000 fe93 	bl	80015e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_ADC1_Init+0xec>)
 80008bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008be:	2306      	movs	r3, #6
 80008c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008c6:	237f      	movs	r3, #127	; 0x7f
 80008c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ca:	2304      	movs	r3, #4
 80008cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <MX_ADC1_Init+0xe4>)
 80008d8:	f002 f944 	bl	8002b64 <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80008e2:	f000 fe7d 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200007fc 	.word	0x200007fc
 80008f4:	50040000 	.word	0x50040000
 80008f8:	10c00010 	.word	0x10c00010

080008fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000914:	4a29      	ldr	r2, [pc, #164]	; (80009bc <MX_ADC2_Init+0xc0>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_ADC2_Init+0xbc>)
 800091a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800091e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_ADC2_Init+0xbc>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000934:	2204      	movs	r2, #4
 8000936:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_ADC2_Init+0xbc>)
 800093a:	2200      	movs	r2, #0
 800093c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000940:	2200      	movs	r2, #0
 8000942:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000946:	2201      	movs	r2, #1
 8000948:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_ADC2_Init+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_ADC2_Init+0xbc>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_ADC2_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000974:	4810      	ldr	r0, [pc, #64]	; (80009b8 <MX_ADC2_Init+0xbc>)
 8000976:	f001 ff9d 	bl	80028b4 <HAL_ADC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000980:	f000 fe2e 	bl	80015e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_ADC2_Init+0xc4>)
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000988:	2306      	movs	r3, #6
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000990:	237f      	movs	r3, #127	; 0x7f
 8000992:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000994:	2304      	movs	r3, #4
 8000996:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_ADC2_Init+0xbc>)
 80009a2:	f002 f8df 	bl	8002b64 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80009ac:	f000 fe18 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200004a0 	.word	0x200004a0
 80009bc:	50040100 	.word	0x50040100
 80009c0:	25b00200 	.word	0x25b00200

080009c4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_ADC3_Init+0xbc>)
 80009dc:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <MX_ADC3_Init+0xc0>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_ADC3_Init+0xbc>)
 80009e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_ADC3_Init+0xbc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_ADC3_Init+0xbc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_ADC3_Init+0xbc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_ADC3_Init+0xbc>)
 80009fc:	2204      	movs	r2, #4
 80009fe:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a3c:	4810      	ldr	r0, [pc, #64]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a3e:	f001 ff39 	bl	80028b4 <HAL_ADC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000a48:	f000 fdca 	bl	80015e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_ADC3_Init+0xc4>)
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a50:	2306      	movs	r3, #6
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a58:	237f      	movs	r3, #127	; 0x7f
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_ADC3_Init+0xbc>)
 8000a6a:	f002 f87b 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000a74:	f000 fdb4 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000864 	.word	0x20000864
 8000a84:	50040200 	.word	0x50040200
 8000a88:	36902000 	.word	0x36902000

08000a8c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_DCMI_Init+0x60>)
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <MX_DCMI_Init+0x64>)
 8000a94:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_DCMI_Init+0x60>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_DCMI_Init+0x60>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_DCMI_Init+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_DCMI_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_DCMI_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <MX_DCMI_Init+0x60>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_DCMI_Init+0x60>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_DCMI_Init+0x60>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_DCMI_Init+0x60>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_DCMI_Init+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_DCMI_Init+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_DCMI_Init+0x60>)
 8000ada:	f002 fda7 	bl	800362c <HAL_DCMI_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000ae4:	f000 fd7c 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000914 	.word	0x20000914
 8000af0:	50050000 	.word	0x50050000

08000af4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000af8:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000afa:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <MX_DFSDM1_Init+0x11c>)
 8000afc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000afe:	4b43      	ldr	r3, [pc, #268]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000b04:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000b0a:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000b10:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000b12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b16:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000b18:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000b1a:	2240      	movs	r2, #64	; 0x40
 8000b1c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000b24:	4839      	ldr	r0, [pc, #228]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000b26:	f002 fedb 	bl	80038e0 <HAL_DFSDM_FilterInit>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000b30:	f000 fd56 	bl	80015e0 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b34:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b36:	4a38      	ldr	r2, [pc, #224]	; (8000c18 <MX_DFSDM1_Init+0x124>)
 8000b38:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b3a:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b40:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 25;
 8000b46:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b48:	2219      	movs	r2, #25
 8000b4a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b4c:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b52:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b58:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b64:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b82:	4824      	ldr	r0, [pc, #144]	; (8000c14 <MX_DFSDM1_Init+0x120>)
 8000b84:	f002 fdd8 	bl	8003738 <HAL_DFSDM_ChannelInit>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000b8e:	f000 fd27 	bl	80015e0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <MX_DFSDM1_Init+0x12c>)
 8000b96:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 25;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000ba6:	2219      	movs	r2, #25
 8000ba8:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bbc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <MX_DFSDM1_Init+0x128>)
 8000be4:	f002 fda8 	bl	8003738 <HAL_DFSDM_ChannelInit>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_DFSDM1_Init+0xfe>
  {
    Error_Handler();
 8000bee:	f000 fcf7 	bl	80015e0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	490b      	ldr	r1, [pc, #44]	; (8000c24 <MX_DFSDM1_Init+0x130>)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_DFSDM1_Init+0x118>)
 8000bf8:	f002 ff4c 	bl	8003a94 <HAL_DFSDM_FilterConfigRegChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_DFSDM1_Init+0x112>
  {
    Error_Handler();
 8000c02:	f000 fced 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200005a0 	.word	0x200005a0
 8000c10:	40016100 	.word	0x40016100
 8000c14:	20000404 	.word	0x20000404
 8000c18:	40016020 	.word	0x40016020
 8000c1c:	20003168 	.word	0x20003168
 8000c20:	40016040 	.word	0x40016040
 8000c24:	00010002 	.word	0x00010002

08000c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <MX_I2C1_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0040496F;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c34:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <MX_I2C1_Init+0x7c>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c64:	f003 fec9 	bl	80049fa <HAL_I2C_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c6e:	f000 fcb7 	bl	80015e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c76:	f003 ff4f 	bl	8004b18 <HAL_I2CEx_ConfigAnalogFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c80:	f000 fcae 	bl	80015e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_I2C1_Init+0x74>)
 8000c88:	f003 ff91 	bl	8004bae <HAL_I2CEx_ConfigDigitalFilter>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f000 fca5 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000508 	.word	0x20000508
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	0040496f 	.word	0x0040496f

08000ca8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_I2C2_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0040496F;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <MX_I2C2_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000ce4:	f003 fe89 	bl	80049fa <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 fc77 	bl	80015e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000cf6:	f003 ff0f 	bl	8004b18 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 fc6e 	bl	80015e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_I2C2_Init+0x74>)
 8000d08:	f003 ff51 	bl	8004bae <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 fc65 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000554 	.word	0x20000554
 8000d20:	40005800 	.word	0x40005800
 8000d24:	0040496f 	.word	0x0040496f

08000d28 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_LPUART1_UART_Init+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_LPUART1_UART_Init+0x58>)
 8000d36:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_LPUART1_UART_Init+0x50>)
 8000d66:	f008 f997 	bl	8009098 <HAL_UART_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000d70:	f000 fc36 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200006c4 	.word	0x200006c4
 8000d7c:	40008000 	.word	0x40008000
 8000d80:	00033324 	.word	0x00033324

08000d84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <MX_USART1_UART_Init+0x5c>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000db0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000db4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000dca:	f008 f965 	bl	8009098 <HAL_UART_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000dd4:	f000 fc04 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000096c 	.word	0x2000096c
 8000de0:	40013800 	.word	0x40013800

08000de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000dea:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <MX_USART2_UART_Init+0x5c>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e28:	f008 f936 	bl	8009098 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 fbd5 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200030e8 	.word	0x200030e8
 8000e40:	40004400 	.word	0x40004400

08000e44 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e4a:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <MX_QUADSPI_Init+0x54>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e50:	22ff      	movs	r2, #255	; 0xff
 8000e52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_QUADSPI_Init+0x50>)
 8000e80:	f004 fff2 	bl	8005e68 <HAL_QSPI_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000e8a:	f000 fba9 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200031a0 	.word	0x200031a0
 8000e98:	a0001000 	.word	0xa0001000

08000e9c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ea0:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ea2:	4a4e      	ldr	r2, [pc, #312]	; (8000fdc <MX_SAI1_Init+0x140>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ea6:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000eac:	4b4a      	ldr	r3, [pc, #296]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000eb2:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000eb8:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ebe:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ec4:	4b44      	ldr	r3, [pc, #272]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000eca:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ed0:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000edc:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ede:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <MX_SAI1_Init+0x144>)
 8000ee0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ee8:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000eee:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ef4:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000efc:	2208      	movs	r2, #8
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000f18:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000f30:	4829      	ldr	r0, [pc, #164]	; (8000fd8 <MX_SAI1_Init+0x13c>)
 8000f32:	f007 f8cb 	bl	80080cc <HAL_SAI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000f3c:	f000 fb50 	bl	80015e0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f42:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <MX_SAI1_Init+0x14c>)
 8000f44:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f46:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f90:	2218      	movs	r2, #24
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000fc4:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <MX_SAI1_Init+0x148>)
 8000fc6:	f007 f881 	bl	80080cc <HAL_SAI_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000fd0:	f000 fb06 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20003064 	.word	0x20003064
 8000fdc:	40015404 	.word	0x40015404
 8000fe0:	0002ee00 	.word	0x0002ee00
 8000fe4:	20000744 	.word	0x20000744
 8000fe8:	40015424 	.word	0x40015424

08000fec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <MX_SDMMC1_SD_Init+0x5c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800101a:	480a      	ldr	r0, [pc, #40]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 800101c:	f007 f9f0 	bl	8008400 <HAL_SD_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8001026:	f000 fadb 	bl	80015e0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800102a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_SDMMC1_SD_Init+0x58>)
 8001030:	f007 fc2c 	bl	800888c <HAL_SD_ConfigWideBusOperation>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800103a:	f000 fad1 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200005f4 	.word	0x200005f4
 8001048:	40012800 	.word	0x40012800

0800104c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <MX_SPI1_Init+0x78>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001058:	f44f 7282 	mov.w	r2, #260	; 0x104
 800105c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001066:	f44f 7240 	mov.w	r2, #768	; 0x300
 800106a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_SPI1_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_SPI1_Init+0x74>)
 800107a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800107e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_SPI1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_SPI1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_SPI1_Init+0x74>)
 800109a:	2207      	movs	r2, #7
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_SPI1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_SPI1_Init+0x74>)
 80010a6:	2208      	movs	r2, #8
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_SPI1_Init+0x74>)
 80010ac:	f007 ff26 	bl	8008efc <HAL_SPI_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f000 fa93 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20003000 	.word	0x20003000
 80010c4:	40013000 	.word	0x40013000

080010c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_SPI2_Init+0x74>)
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <MX_SPI2_Init+0x78>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_SPI2_Init+0x74>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_SPI2_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_SPI2_Init+0x74>)
 80010e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_SPI2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_SPI2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI2_Init+0x74>)
 80010f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_SPI2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI2_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_SPI2_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI2_Init+0x74>)
 8001116:	2207      	movs	r2, #7
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_SPI2_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI2_Init+0x74>)
 8001122:	2208      	movs	r2, #8
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_SPI2_Init+0x74>)
 8001128:	f007 fee8 	bl	8008efc <HAL_SPI_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001132:	f000 fa55 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000043c 	.word	0x2000043c
 8001140:	40003800 	.word	0x40003800

08001144 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_DMA_Init+0x48>)
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_DMA_Init+0x48>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6493      	str	r3, [r2, #72]	; 0x48
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_DMA_Init+0x48>)
 8001158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200e      	movs	r0, #14
 8001168:	f002 fa29 	bl	80035be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800116c:	200e      	movs	r0, #14
 800116e:	f002 fa42 	bl	80035f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2011      	movs	r0, #17
 8001178:	f002 fa21 	bl	80035be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800117c:	2011      	movs	r0, #17
 800117e:	f002 fa3a 	bl	80035f6 <HAL_NVIC_EnableIRQ>

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80011a8:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <MX_FMC_Init+0x158>)
 80011aa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011ae:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80011b0:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <MX_FMC_Init+0x158>)
 80011b2:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <MX_FMC_Init+0x15c>)
 80011b4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <MX_FMC_Init+0x158>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80011bc:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <MX_FMC_Init+0x158>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <MX_FMC_Init+0x158>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011c8:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <MX_FMC_Init+0x158>)
 80011ca:	2210      	movs	r2, #16
 80011cc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80011ce:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <MX_FMC_Init+0x158>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <MX_FMC_Init+0x158>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80011da:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <MX_FMC_Init+0x158>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80011e0:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <MX_FMC_Init+0x158>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80011e6:	4b40      	ldr	r3, [pc, #256]	; (80012e8 <MX_FMC_Init+0x158>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <MX_FMC_Init+0x158>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011f2:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <MX_FMC_Init+0x158>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <MX_FMC_Init+0x158>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <MX_FMC_Init+0x158>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001204:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <MX_FMC_Init+0x158>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <MX_FMC_Init+0x158>)
 800120c:	2200      	movs	r2, #0
 800120e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001210:	230f      	movs	r3, #15
 8001212:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001214:	230f      	movs	r3, #15
 8001216:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800121c:	230f      	movs	r3, #15
 800121e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001220:	2310      	movs	r3, #16
 8001222:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001224:	2311      	movs	r3, #17
 8001226:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	482d      	ldr	r0, [pc, #180]	; (80012e8 <MX_FMC_Init+0x158>)
 8001234:	f007 feec 	bl	8009010 <HAL_SRAM_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 800123e:	f000 f9cf 	bl	80015e0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <MX_FMC_Init+0x160>)
 8001244:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001248:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <MX_FMC_Init+0x160>)
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <MX_FMC_Init+0x15c>)
 800124e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <MX_FMC_Init+0x160>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <MX_FMC_Init+0x160>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MX_FMC_Init+0x160>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <MX_FMC_Init+0x160>)
 8001264:	2210      	movs	r2, #16
 8001266:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_FMC_Init+0x160>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_FMC_Init+0x160>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_FMC_Init+0x160>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_FMC_Init+0x160>)
 800127c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_FMC_Init+0x160>)
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_FMC_Init+0x160>)
 800128a:	2200      	movs	r2, #0
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_FMC_Init+0x160>)
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_FMC_Init+0x160>)
 8001296:	2200      	movs	r2, #0
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_FMC_Init+0x160>)
 800129c:	2200      	movs	r2, #0
 800129e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_FMC_Init+0x160>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_FMC_Init+0x160>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80012ac:	230f      	movs	r3, #15
 80012ae:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80012b0:	230f      	movs	r3, #15
 80012b2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80012b8:	230f      	movs	r3, #15
 80012ba:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012bc:	2310      	movs	r3, #16
 80012be:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012c0:	2311      	movs	r3, #17
 80012c2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <MX_FMC_Init+0x160>)
 80012d0:	f007 fe9e 	bl	8009010 <HAL_SRAM_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_FMC_Init+0x14e>
  {
    Error_Handler( );
 80012da:	f000 f981 	bl	80015e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000678 	.word	0x20000678
 80012ec:	a0000104 	.word	0xa0000104
 80012f0:	20002fb4 	.word	0x20002fb4

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800130a:	4bad      	ldr	r3, [pc, #692]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4aac      	ldr	r2, [pc, #688]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4baa      	ldr	r3, [pc, #680]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	623b      	str	r3, [r7, #32]
 8001320:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001322:	4ba7      	ldr	r3, [pc, #668]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4aa6      	ldr	r2, [pc, #664]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4ba4      	ldr	r3, [pc, #656]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800133a:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4aa0      	ldr	r2, [pc, #640]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001346:	4b9e      	ldr	r3, [pc, #632]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b9b      	ldr	r3, [pc, #620]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a9a      	ldr	r2, [pc, #616]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b98      	ldr	r3, [pc, #608]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b95      	ldr	r3, [pc, #596]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a94      	ldr	r2, [pc, #592]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b92      	ldr	r3, [pc, #584]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001382:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a8e      	ldr	r2, [pc, #568]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800139a:	f004 fd55 	bl	8005e48 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a81      	ldr	r2, [pc, #516]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ce:	4b7c      	ldr	r3, [pc, #496]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a7b      	ldr	r2, [pc, #492]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b79      	ldr	r3, [pc, #484]	; (80015c0 <MX_GPIO_Init+0x2cc>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2101      	movs	r1, #1
 80013ea:	4876      	ldr	r0, [pc, #472]	; (80015c4 <MX_GPIO_Init+0x2d0>)
 80013ec:	f003 fad4 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2143      	movs	r1, #67	; 0x43
 80013f4:	4874      	ldr	r0, [pc, #464]	; (80015c8 <MX_GPIO_Init+0x2d4>)
 80013f6:	f003 facf 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	4873      	ldr	r0, [pc, #460]	; (80015cc <MX_GPIO_Init+0x2d8>)
 8001400:	f003 faca 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	4871      	ldr	r0, [pc, #452]	; (80015d0 <MX_GPIO_Init+0x2dc>)
 800140c:	f003 fac4 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8001410:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800141a:	2302      	movs	r3, #2
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	4867      	ldr	r0, [pc, #412]	; (80015c4 <MX_GPIO_Init+0x2d0>)
 8001426:	f003 f925 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800142a:	2304      	movs	r3, #4
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142e:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <MX_GPIO_Init+0x2e0>)
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	4862      	ldr	r0, [pc, #392]	; (80015c8 <MX_GPIO_Init+0x2d4>)
 800143e:	f003 f919 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001442:	2301      	movs	r3, #1
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	485a      	ldr	r0, [pc, #360]	; (80015c4 <MX_GPIO_Init+0x2d0>)
 800145a:	f003 f90b 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800146e:	2303      	movs	r3, #3
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4852      	ldr	r0, [pc, #328]	; (80015c4 <MX_GPIO_Init+0x2d0>)
 800147a:	f003 f8fb 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 800147e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001490:	2303      	movs	r3, #3
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	484b      	ldr	r0, [pc, #300]	; (80015c8 <MX_GPIO_Init+0x2d4>)
 800149c:	f003 f8ea 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80014a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014b2:	2302      	movs	r3, #2
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4844      	ldr	r0, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x2dc>)
 80014be:	f003 f8d9 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	483c      	ldr	r0, [pc, #240]	; (80015c8 <MX_GPIO_Init+0x2d4>)
 80014d6:	f003 f8cd 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80014da:	2343      	movs	r3, #67	; 0x43
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4835      	ldr	r0, [pc, #212]	; (80015c8 <MX_GPIO_Init+0x2d4>)
 80014f2:	f003 f8bf 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	482f      	ldr	r0, [pc, #188]	; (80015cc <MX_GPIO_Init+0x2d8>)
 800150e:	f003 f8b1 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001512:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <MX_GPIO_Init+0x2e0>)
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	482c      	ldr	r0, [pc, #176]	; (80015d8 <MX_GPIO_Init+0x2e4>)
 8001528:	f003 f8a4 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800152c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 800153e:	230e      	movs	r3, #14
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f003 f892 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001550:	2320      	movs	r3, #32
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_GPIO_Init+0x2e0>)
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	481a      	ldr	r0, [pc, #104]	; (80015cc <MX_GPIO_Init+0x2d8>)
 8001564:	f003 f886 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001572:	2302      	movs	r3, #2
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <MX_GPIO_Init+0x2e8>)
 800157e:	f003 f879 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001582:	2304      	movs	r3, #4
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	480e      	ldr	r0, [pc, #56]	; (80015d0 <MX_GPIO_Init+0x2dc>)
 8001596:	f003 f86d 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800159a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015a0:	2311      	movs	r3, #17
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_GPIO_Init+0x2dc>)
 80015b4:	f003 f85e 	bl	8004674 <HAL_GPIO_Init>

}
 80015b8:	bf00      	nop
 80015ba:	3738      	adds	r7, #56	; 0x38
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48002000 	.word	0x48002000
 80015c8:	48001c00 	.word	0x48001c00
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000400 	.word	0x48000400
 80015d4:	10110000 	.word	0x10110000
 80015d8:	48001800 	.word	0x48001800
 80015dc:	48001400 	.word	0x48001400

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_MspInit+0x44>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_MspInit+0x44>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6613      	str	r3, [r2, #96]	; 0x60
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_MspInit+0x44>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_MspInit+0x44>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_MspInit+0x44>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_MspInit+0x44>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	; 0x38
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a59      	ldr	r2, [pc, #356]	; (80017bc <HAL_ADC_MspInit+0x184>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12d      	bne.n	80016b6 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800165a:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 8001662:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001664:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10b      	bne.n	8001684 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800166c:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	4a54      	ldr	r2, [pc, #336]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001678:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001680:	623b      	str	r3, [r7, #32]
 8001682:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001684:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 800169c:	2318      	movs	r3, #24
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016a0:	230b      	movs	r3, #11
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4846      	ldr	r0, [pc, #280]	; (80017c8 <HAL_ADC_MspInit+0x190>)
 80016b0:	f002 ffe0 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80016b4:	e07e      	b.n	80017b4 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a44      	ldr	r2, [pc, #272]	; (80017cc <HAL_ADC_MspInit+0x194>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d146      	bne.n	800174e <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 80016c0:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 80016c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10b      	bne.n	80016ea <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 80016d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a35      	ldr	r2, [pc, #212]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a2f      	ldr	r2, [pc, #188]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800171a:	2303      	movs	r3, #3
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800171e:	230b      	movs	r3, #11
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172a:	4619      	mov	r1, r3
 800172c:	4826      	ldr	r0, [pc, #152]	; (80017c8 <HAL_ADC_MspInit+0x190>)
 800172e:	f002 ffa1 	bl	8004674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8001732:	2312      	movs	r3, #18
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001736:	230b      	movs	r3, #11
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f002 ff94 	bl	8004674 <HAL_GPIO_Init>
}
 800174c:	e032      	b.n	80017b4 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_ADC_MspInit+0x198>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d12d      	bne.n	80017b4 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 8001760:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_ADC_MspInit+0x188>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10b      	bne.n	8001782 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_ADC_MspInit+0x18c>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 800179a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017a0:	230b      	movs	r3, #11
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <HAL_ADC_MspInit+0x19c>)
 80017b0:	f002 ff60 	bl	8004674 <HAL_GPIO_Init>
}
 80017b4:	bf00      	nop
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	50040000 	.word	0x50040000
 80017c0:	200001a8 	.word	0x200001a8
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000800 	.word	0x48000800
 80017cc:	50040100 	.word	0x50040100
 80017d0:	50040200 	.word	0x50040200
 80017d4:	48001400 	.word	0x48001400

080017d8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a33      	ldr	r2, [pc, #204]	; (80018c4 <HAL_DCMI_MspInit+0xec>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d160      	bne.n	80018bc <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a32      	ldr	r2, [pc, #200]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a20      	ldr	r2, [pc, #128]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_DCMI_MspInit+0xf0>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 800185a:	f645 7320 	movw	r3, #24352	; 0x5f20
 800185e:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800186c:	230a      	movs	r3, #10
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	4815      	ldr	r0, [pc, #84]	; (80018cc <HAL_DCMI_MspInit+0xf4>)
 8001878:	f002 fefc 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800187c:	23b0      	movs	r3, #176	; 0xb0
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800188c:	230a      	movs	r3, #10
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <HAL_DCMI_MspInit+0xf8>)
 8001898:	f002 feec 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 800189c:	2320      	movs	r3, #32
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80018ac:	230a      	movs	r3, #10
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <HAL_DCMI_MspInit+0xfc>)
 80018b8:	f002 fedc 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3730      	adds	r7, #48	; 0x30
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	50050000 	.word	0x50050000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	48001c00 	.word	0x48001c00
 80018d0:	48002000 	.word	0x48002000
 80018d4:	48001000 	.word	0x48001000

080018d8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80018f0:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_DFSDM_FilterMspInit+0x144>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d155      	bne.n	80019a4 <HAL_DFSDM_FilterMspInit+0xcc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80018f8:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x148>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x148>)
 8001900:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_DFSDM_FilterMspInit+0x148>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d10b      	bne.n	8001922 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800190a:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	4a45      	ldr	r2, [pc, #276]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001910:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001914:	6613      	str	r3, [r2, #96]	; 0x60
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a3f      	ldr	r2, [pc, #252]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a39      	ldr	r2, [pc, #228]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001952:	2384      	movs	r3, #132	; 0x84
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001962:	2306      	movs	r3, #6
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	482e      	ldr	r0, [pc, #184]	; (8001a28 <HAL_DFSDM_FilterMspInit+0x150>)
 800196e:	f002 fe81 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001984:	2306      	movs	r3, #6
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4827      	ldr	r0, [pc, #156]	; (8001a2c <HAL_DFSDM_FilterMspInit+0x154>)
 8001990:	f002 fe70 	bl	8004674 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	203d      	movs	r0, #61	; 0x3d
 800199a:	f001 fe10 	bl	80035be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800199e:	203d      	movs	r0, #61	; 0x3d
 80019a0:	f001 fe29 	bl	80035f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <HAL_DFSDM_FilterMspInit+0x158>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d131      	bne.n	8001a12 <HAL_DFSDM_FilterMspInit+0x13a>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_DFSDM_FilterMspInit+0x160>)
 80019b2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019da:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019de:	2220      	movs	r2, #32
 80019e0:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80019ea:	4812      	ldr	r0, [pc, #72]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019ec:	f002 fc0a 	bl	8004204 <HAL_DMA_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_DFSDM_FilterMspInit+0x122>
    {
      Error_Handler();
 80019f6:	f7ff fdf3 	bl	80015e0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a00:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_DFSDM_FilterMspInit+0x15c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200001b0 	.word	0x200001b0
 8001a20:	200001ac 	.word	0x200001ac
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	40016100 	.word	0x40016100
 8001a34:	200009ec 	.word	0x200009ec
 8001a38:	40020044 	.word	0x40020044

08001a3c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d14d      	bne.n	8001af8 <HAL_DFSDM_ChannelMspInit+0xbc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_DFSDM_ChannelMspInit+0xc8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_DFSDM_ChannelMspInit+0xc8>)
 8001a64:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_DFSDM_ChannelMspInit+0xc8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d10b      	bne.n	8001a86 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	4a25      	ldr	r2, [pc, #148]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a78:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a1f      	ldr	r2, [pc, #124]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001ab6:	2384      	movs	r3, #132	; 0x84
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480e      	ldr	r0, [pc, #56]	; (8001b0c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001ad2:	f002 fdcf 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ae8:	2306      	movs	r3, #6
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001af4:	f002 fdbe 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200001b0 	.word	0x200001b0
 8001b04:	200001ac 	.word	0x200001ac
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000400 	.word	0x48000400

08001b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a3d      	ldr	r2, [pc, #244]	; (8001c28 <HAL_I2C_MspInit+0x114>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d129      	bne.n	8001b8a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001b4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b54:	2312      	movs	r3, #18
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b60:	2304      	movs	r3, #4
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4831      	ldr	r0, [pc, #196]	; (8001c30 <HAL_I2C_MspInit+0x11c>)
 8001b6c:	f002 fd82 	bl	8004674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001b76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b88:	e049      	b.n	8001c1e <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <HAL_I2C_MspInit+0x120>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d144      	bne.n	8001c1e <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc8:	2312      	movs	r3, #18
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <HAL_I2C_MspInit+0x124>)
 8001be0:	f002 fd48 	bl	8004674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bea:	2312      	movs	r3, #18
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <HAL_I2C_MspInit+0x11c>)
 8001c02:	f002 fd37 	bl	8004674 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_I2C_MspInit+0x118>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	3730      	adds	r7, #48	; 0x30
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40005400 	.word	0x40005400
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	40005800 	.word	0x40005800
 8001c38:	48001c00 	.word	0x48001c00

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	; 0x40
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a7d      	ldr	r2, [pc, #500]	; (8001e50 <HAL_UART_MspInit+0x214>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12b      	bne.n	8001cb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c5e:	4b7d      	ldr	r3, [pc, #500]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	4a7c      	ldr	r2, [pc, #496]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c76:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a76      	ldr	r2, [pc, #472]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b74      	ldr	r3, [pc, #464]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 8001c8e:	f004 f8db 	bl	8005e48 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001c92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	486a      	ldr	r0, [pc, #424]	; (8001e58 <HAL_UART_MspInit+0x21c>)
 8001cb0:	f002 fce0 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cb4:	e0c8      	b.n	8001e48 <HAL_UART_MspInit+0x20c>
  else if(huart->Instance==USART1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a68      	ldr	r2, [pc, #416]	; (8001e5c <HAL_UART_MspInit+0x220>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d147      	bne.n	8001d50 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc0:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	4a63      	ldr	r2, [pc, #396]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cca:	6613      	str	r3, [r2, #96]	; 0x60
 8001ccc:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	623b      	str	r3, [r7, #32]
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf0:	4b58      	ldr	r3, [pc, #352]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a57      	ldr	r2, [pc, #348]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001d08:	f004 f89e 	bl	8005e48 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001d0c:	2340      	movs	r3, #64	; 0x40
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d24:	4619      	mov	r1, r3
 8001d26:	484e      	ldr	r0, [pc, #312]	; (8001e60 <HAL_UART_MspInit+0x224>)
 8001d28:	f002 fca4 	bl	8004674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8001d2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d3e:	2307      	movs	r3, #7
 8001d40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d46:	4619      	mov	r1, r3
 8001d48:	4843      	ldr	r0, [pc, #268]	; (8001e58 <HAL_UART_MspInit+0x21c>)
 8001d4a:	f002 fc93 	bl	8004674 <HAL_GPIO_Init>
}
 8001d4e:	e07b      	b.n	8001e48 <HAL_UART_MspInit+0x20c>
  else if(huart->Instance==USART2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a43      	ldr	r2, [pc, #268]	; (8001e64 <HAL_UART_MspInit+0x228>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d176      	bne.n	8001e48 <HAL_UART_MspInit+0x20c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a37      	ldr	r2, [pc, #220]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b32      	ldr	r3, [pc, #200]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_UART_MspInit+0x218>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001da2:	2340      	movs	r3, #64	; 0x40
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db2:	2307      	movs	r3, #7
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	482a      	ldr	r0, [pc, #168]	; (8001e68 <HAL_UART_MspInit+0x22c>)
 8001dbe:	f002 fc59 	bl	8004674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de0:	f002 fc48 	bl	8004674 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001de6:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_UART_MspInit+0x234>)
 8001de8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001df2:	2210      	movs	r2, #16
 8001df4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e1c:	4813      	ldr	r0, [pc, #76]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001e1e:	f002 f9f1 	bl	8004204 <HAL_DMA_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8001e28:	f7ff fbda 	bl	80015e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001e30:	669a      	str	r2, [r3, #104]	; 0x68
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_UART_MspInit+0x230>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2026      	movs	r0, #38	; 0x26
 8001e3e:	f001 fbbe 	bl	80035be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e42:	2026      	movs	r0, #38	; 0x26
 8001e44:	f001 fbd7 	bl	80035f6 <HAL_NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3740      	adds	r7, #64	; 0x40
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40008000 	.word	0x40008000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	48001800 	.word	0x48001800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	48000400 	.word	0x48000400
 8001e64:	40004400 	.word	0x40004400
 8001e68:	48000c00 	.word	0x48000c00
 8001e6c:	200008cc 	.word	0x200008cc
 8001e70:	40020080 	.word	0x40020080

08001e74 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_QSPI_MspInit+0xb8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d145      	bne.n	8001f22 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6513      	str	r3, [r2, #80]	; 0x50
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_QSPI_MspInit+0xbc>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001ede:	f640 0303 	movw	r3, #2051	; 0x803
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480e      	ldr	r0, [pc, #56]	; (8001f34 <HAL_QSPI_MspInit+0xc0>)
 8001efc:	f002 fbba 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001f00:	23c8      	movs	r3, #200	; 0xc8
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f10:	230a      	movs	r3, #10
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1e:	f002 fba9 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	; 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	a0001000 	.word	0xa0001000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	48000400 	.word	0x48000400

08001f38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a25      	ldr	r2, [pc, #148]	; (8001fec <HAL_SD_MspInit+0xb4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d144      	bne.n	8001fe4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f64:	6613      	str	r3, [r2, #96]	; 0x60
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f72:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_SD_MspInit+0xb8>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <HAL_SD_MspInit+0xbc>)
 8001fbe:	f002 fb59 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 8001fc2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001fc6:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fd4:	230c      	movs	r3, #12
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <HAL_SD_MspInit+0xc0>)
 8001fe0:	f002 fb48 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40012800 	.word	0x40012800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48000c00 	.word	0x48000c00
 8001ff8:	48000800 	.word	0x48000800

08001ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4b      	ldr	r2, [pc, #300]	; (8002148 <HAL_SPI_MspInit+0x14c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d146      	bne.n	80020ac <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800201e:	4b4b      	ldr	r3, [pc, #300]	; (800214c <HAL_SPI_MspInit+0x150>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	4a4a      	ldr	r2, [pc, #296]	; (800214c <HAL_SPI_MspInit+0x150>)
 8002024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002028:	6613      	str	r3, [r2, #96]	; 0x60
 800202a:	4b48      	ldr	r3, [pc, #288]	; (800214c <HAL_SPI_MspInit+0x150>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	4b45      	ldr	r3, [pc, #276]	; (800214c <HAL_SPI_MspInit+0x150>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4a44      	ldr	r2, [pc, #272]	; (800214c <HAL_SPI_MspInit+0x150>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002042:	4b42      	ldr	r3, [pc, #264]	; (800214c <HAL_SPI_MspInit+0x150>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_SPI_MspInit+0x150>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a3e      	ldr	r2, [pc, #248]	; (800214c <HAL_SPI_MspInit+0x150>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205a:	4b3c      	ldr	r3, [pc, #240]	; (800214c <HAL_SPI_MspInit+0x150>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002066:	2330      	movs	r3, #48	; 0x30
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	4833      	ldr	r0, [pc, #204]	; (8002150 <HAL_SPI_MspInit+0x154>)
 8002082:	f002 faf7 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8002086:	f248 0320 	movw	r3, #32800	; 0x8020
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002098:	2305      	movs	r3, #5
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f002 fae5 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020aa:	e049      	b.n	8002140 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a28      	ldr	r2, [pc, #160]	; (8002154 <HAL_SPI_MspInit+0x158>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d144      	bne.n	8002140 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c0:	6593      	str	r3, [r2, #88]	; 0x58
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_SPI_MspInit+0x150>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80020fe:	2306      	movs	r3, #6
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800210e:	2305      	movs	r3, #5
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	4619      	mov	r1, r3
 8002118:	480f      	ldr	r0, [pc, #60]	; (8002158 <HAL_SPI_MspInit+0x15c>)
 800211a:	f002 faab 	bl	8004674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800211e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002130:	2305      	movs	r3, #5
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002138:	4619      	mov	r1, r3
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <HAL_SPI_MspInit+0x154>)
 800213c:	f002 fa9a 	bl	8004674 <HAL_GPIO_Init>
}
 8002140:	bf00      	nop
 8002142:	3738      	adds	r7, #56	; 0x38
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40013000 	.word	0x40013000
 800214c:	40021000 	.word	0x40021000
 8002150:	48000400 	.word	0x48000400
 8002154:	40003800 	.word	0x40003800
 8002158:	48002000 	.word	0x48002000

0800215c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_FMC_MspInit+0xc4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d14f      	bne.n	8002218 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_FMC_MspInit+0xc4>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_FMC_MspInit+0xc8>)
 8002180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002182:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_FMC_MspInit+0xc8>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6513      	str	r3, [r2, #80]	; 0x50
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_FMC_MspInit+0xc8>)
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 8002196:	f64f 7383 	movw	r3, #65411	; 0xff83
 800219a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021a8:	230c      	movs	r3, #12
 80021aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	481d      	ldr	r0, [pc, #116]	; (8002228 <HAL_FMC_MspInit+0xcc>)
 80021b2:	f002 fa5f 	bl	8004674 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 80021b6:	f240 233f 	movw	r3, #575	; 0x23f
 80021ba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021c8:	230c      	movs	r3, #12
 80021ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4816      	ldr	r0, [pc, #88]	; (800222c <HAL_FMC_MspInit+0xd0>)
 80021d2:	f002 fa4f 	bl	8004674 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 80021d6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80021da:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e8:	230c      	movs	r3, #12
 80021ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	480f      	ldr	r0, [pc, #60]	; (8002230 <HAL_FMC_MspInit+0xd4>)
 80021f2:	f002 fa3f 	bl	8004674 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 80021f6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80021fa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002208:	230c      	movs	r3, #12
 800220a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4808      	ldr	r0, [pc, #32]	; (8002234 <HAL_FMC_MspInit+0xd8>)
 8002212:	f002 fa2f 	bl	8004674 <HAL_GPIO_Init>
 8002216:	e000      	b.n	800221a <HAL_FMC_MspInit+0xbe>
    return;
 8002218:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200001b4 	.word	0x200001b4
 8002224:	40021000 	.word	0x40021000
 8002228:	48001000 	.word	0x48001000
 800222c:	48001800 	.word	0x48001800
 8002230:	48000c00 	.word	0x48000c00
 8002234:	48001400 	.word	0x48001400

08002238 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002240:	f7ff ff8c 	bl	800215c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a33      	ldr	r2, [pc, #204]	; (8002328 <HAL_SAI_MspInit+0xdc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d135      	bne.n	80022ca <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800225e:	4b33      	ldr	r3, [pc, #204]	; (800232c <HAL_SAI_MspInit+0xe0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10b      	bne.n	800227e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002266:	4b32      	ldr	r3, [pc, #200]	; (8002330 <HAL_SAI_MspInit+0xe4>)
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	4a31      	ldr	r2, [pc, #196]	; (8002330 <HAL_SAI_MspInit+0xe4>)
 800226c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002270:	6613      	str	r3, [r2, #96]	; 0x60
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_SAI_MspInit+0xe4>)
 8002274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_SAI_MspInit+0xe0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	4a29      	ldr	r2, [pc, #164]	; (800232c <HAL_SAI_MspInit+0xe0>)
 8002286:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8002288:	2354      	movs	r3, #84	; 0x54
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002298:	230d      	movs	r3, #13
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	4824      	ldr	r0, [pc, #144]	; (8002334 <HAL_SAI_MspInit+0xe8>)
 80022a4:	f002 f9e6 	bl	8004674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80022ba:	230d      	movs	r3, #13
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	481c      	ldr	r0, [pc, #112]	; (8002338 <HAL_SAI_MspInit+0xec>)
 80022c6:	f002 f9d5 	bl	8004674 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1b      	ldr	r2, [pc, #108]	; (800233c <HAL_SAI_MspInit+0xf0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d124      	bne.n	800231e <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_SAI_MspInit+0xe0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10b      	bne.n	80022f4 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_SAI_MspInit+0xe4>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_SAI_MspInit+0xe4>)
 80022e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e6:	6613      	str	r3, [r2, #96]	; 0x60
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_SAI_MspInit+0xe4>)
 80022ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_SAI_MspInit+0xe0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_SAI_MspInit+0xe0>)
 80022fc:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 80022fe:	2308      	movs	r3, #8
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800230e:	230d      	movs	r3, #13
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4806      	ldr	r0, [pc, #24]	; (8002334 <HAL_SAI_MspInit+0xe8>)
 800231a:	f002 f9ab 	bl	8004674 <HAL_GPIO_Init>

    }
}
 800231e:	bf00      	nop
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40015404 	.word	0x40015404
 800232c:	200001b8 	.word	0x200001b8
 8002330:	40021000 	.word	0x40021000
 8002334:	48001000 	.word	0x48001000
 8002338:	48000400 	.word	0x48000400
 800233c:	40015424 	.word	0x40015424

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <HardFault_Handler+0x4>

08002354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <MemManage_Handler+0x4>

0800235a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <UsageFault_Handler+0x4>

08002366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002394:	f000 f8bc 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <DMA1_Channel4_IRQHandler+0x10>)
 80023a2:	f002 f888 	bl	80044b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200009ec 	.word	0x200009ec

080023b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <DMA1_Channel7_IRQHandler+0x10>)
 80023b6:	f002 f87e 	bl	80044b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200008cc 	.word	0x200008cc

080023c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <USART2_IRQHandler+0x10>)
 80023ca:	f006 ffc3 	bl	8009354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200030e8 	.word	0x200030e8

080023d8 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <DFSDM1_FLT0_IRQHandler+0x10>)
 80023de:	f001 fcb1 	bl	8003d44 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200005a0 	.word	0x200005a0

080023ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <OTG_FS_IRQHandler+0x10>)
 80023f2:	f002 fd7b 	bl	8004eec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000468c 	.word	0x2000468c

08002400 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <SystemInit+0x64>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <SystemInit+0x64>)
 800240c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <SystemInit+0x68>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a13      	ldr	r2, [pc, #76]	; (8002468 <SystemInit+0x68>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <SystemInit+0x68>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <SystemInit+0x68>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <SystemInit+0x68>)
 800242c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002430:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002434:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <SystemInit+0x68>)
 8002438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800243c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <SystemInit+0x68>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <SystemInit+0x68>)
 8002444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002448:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <SystemInit+0x68>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SystemInit+0x64>)
 8002452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002456:	609a      	str	r2, [r3, #8]
#endif
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002476:	2003      	movs	r0, #3
 8002478:	f001 f896 	bl	80035a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247c:	2000      	movs	r0, #0
 800247e:	f000 f80d 	bl	800249c <HAL_InitTick>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	e001      	b.n	8002492 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800248e:	f7ff f8af 	bl	80015f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002492:	79fb      	ldrb	r3, [r7, #7]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_InitTick+0x68>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d022      	beq.n	80024f6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_InitTick+0x6c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_InitTick+0x68>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	4618      	mov	r0, r3
 80024c6:	f001 f8a4 	bl	8003612 <HAL_SYSTICK_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10f      	bne.n	80024f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b0f      	cmp	r3, #15
 80024d4:	d809      	bhi.n	80024ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d6:	2200      	movs	r2, #0
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024de:	f001 f86e 	bl	80035be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <HAL_InitTick+0x70>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e007      	b.n	80024fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e004      	b.n	80024fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e001      	b.n	80024fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000008 	.word	0x20000008
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x1c>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_IncTick+0x20>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4413      	add	r3, r2
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_IncTick+0x1c>)
 8002520:	6013      	str	r3, [r2, #0]
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	200031ec 	.word	0x200031ec
 8002530:	20000008 	.word	0x20000008

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200031ec 	.word	0x200031ec

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff ffee 	bl	8002534 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002564:	d004      	beq.n	8002570 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_Delay+0x40>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002570:	bf00      	nop
 8002572:	f7ff ffdf 	bl	8002534 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d8f7      	bhi.n	8002572 <HAL_Delay+0x26>
  {
  }
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000008 	.word	0x20000008

08002590 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	609a      	str	r2, [r3, #8]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025f8:	b490      	push	{r4, r7}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002614:	6822      	ldr	r2, [r4, #0]
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <LL_ADC_SetOffset+0x40>)
 8002618:	4013      	ands	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	4313      	orrs	r3, r2
 8002626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800262a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bc90      	pop	{r4, r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	03fff000 	.word	0x03fff000

0800263c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800263c:	b490      	push	{r4, r7}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	461a      	mov	r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bc90      	pop	{r4, r7}
 8002662:	4770      	bx	lr

08002664 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002664:	b490      	push	{r4, r7}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3360      	adds	r3, #96	; 0x60
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4313      	orrs	r3, r2
 8002688:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bc90      	pop	{r4, r7}
 8002692:	4770      	bx	lr

08002694 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	615a      	str	r2, [r3, #20]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ba:	b490      	push	{r4, r7}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3330      	adds	r3, #48	; 0x30
 80026ca:	461a      	mov	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	4413      	add	r3, r2
 80026d8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	211f      	movs	r1, #31
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 011f 	and.w	r1, r3, #31
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	4313      	orrs	r3, r2
 8002700:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bc90      	pop	{r4, r7}
 800270a:	4770      	bx	lr

0800270c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800270c:	b490      	push	{r4, r7}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3314      	adds	r3, #20
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0e5b      	lsrs	r3, r3, #25
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	4413      	add	r3, r2
 800272a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800272c:	6822      	ldr	r2, [r4, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	0d1b      	lsrs	r3, r3, #20
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2107      	movs	r1, #7
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0d1b      	lsrs	r3, r3, #20
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bc90      	pop	{r4, r7}
 800275a:	4770      	bx	lr

0800275c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0318 	and.w	r3, r3, #24
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002780:	40d9      	lsrs	r1, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	400b      	ands	r3, r1
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	431a      	orrs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	0007ffff 	.word	0x0007ffff

080027a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6093      	str	r3, [r2, #8]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027dc:	d101      	bne.n	80027e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002804:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800282c:	d101      	bne.n	8002832 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <LL_ADC_IsEnabled+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_IsEnabled+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d101      	bne.n	800287e <LL_ADC_REG_IsConversionOngoing+0x18>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b08      	cmp	r3, #8
 800289e:	d101      	bne.n	80028a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e137      	b.n	8002b3e <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7fe feab 	bl	8001638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff67 	bl	80027c8 <LL_ADC_IsDeepPowerDownEnabled>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff4d 	bl	80027a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff82 	bl	8002818 <LL_ADC_IsInternalRegulatorEnabled>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d113      	bne.n	8002942 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff ff66 	bl	80027f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002924:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_ADC_Init+0x294>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	4a88      	ldr	r2, [pc, #544]	; (8002b4c <HAL_ADC_Init+0x298>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002934:	e002      	b.n	800293c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3b01      	subs	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f9      	bne.n	8002936 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff66 	bl	8002818 <LL_ADC_IsInternalRegulatorEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	f043 0210 	orr.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ff77 	bl	8002866 <LL_ADC_REG_IsConversionOngoing>
 8002978:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 80d2 	bne.w	8002b2c <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 80ce 	bne.w	8002b2c <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002998:	f043 0202 	orr.w	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff4b 	bl	8002840 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d115      	bne.n	80029dc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b0:	4867      	ldr	r0, [pc, #412]	; (8002b50 <HAL_ADC_Init+0x29c>)
 80029b2:	f7ff ff45 	bl	8002840 <LL_ADC_IsEnabled>
 80029b6:	4604      	mov	r4, r0
 80029b8:	4866      	ldr	r0, [pc, #408]	; (8002b54 <HAL_ADC_Init+0x2a0>)
 80029ba:	f7ff ff41 	bl	8002840 <LL_ADC_IsEnabled>
 80029be:	4603      	mov	r3, r0
 80029c0:	431c      	orrs	r4, r3
 80029c2:	4865      	ldr	r0, [pc, #404]	; (8002b58 <HAL_ADC_Init+0x2a4>)
 80029c4:	f7ff ff3c 	bl	8002840 <LL_ADC_IsEnabled>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4619      	mov	r1, r3
 80029d6:	4861      	ldr	r0, [pc, #388]	; (8002b5c <HAL_ADC_Init+0x2a8>)
 80029d8:	f7ff fdda 	bl	8002590 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7e5b      	ldrb	r3, [r3, #25]
 80029e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80029ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80029f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d106      	bne.n	8002a18 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	045b      	lsls	r3, r3, #17
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <HAL_ADC_Init+0x2ac>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff0a 	bl	8002866 <LL_ADC_REG_IsConversionOngoing>
 8002a52:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff17 	bl	800288c <LL_ADC_INJ_IsConversionOngoing>
 8002a5e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d140      	bne.n	8002ae8 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d13d      	bne.n	8002ae8 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7e1b      	ldrb	r3, [r3, #24]
 8002a74:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a76:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a7e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a8e:	f023 0306 	bic.w	r3, r3, #6
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d118      	bne.n	8002ad8 <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002abc:	4311      	orrs	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	e007      	b.n	8002ae8 <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d10c      	bne.n	8002b0a <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f023 010f 	bic.w	r1, r3, #15
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
 8002b08:	e007      	b.n	8002b1a <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 020f 	bic.w	r2, r2, #15
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	659a      	str	r2, [r3, #88]	; 0x58
 8002b2a:	e007      	b.n	8002b3c <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd90      	pop	{r4, r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	053e2d63 	.word	0x053e2d63
 8002b50:	50040000 	.word	0x50040000
 8002b54:	50040100 	.word	0x50040100
 8002b58:	50040200 	.word	0x50040200
 8002b5c:	50040300 	.word	0x50040300
 8002b60:	fff0c007 	.word	0xfff0c007

08002b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0a6      	sub	sp, #152	; 0x98
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x22>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e364      	b.n	8003250 <HAL_ADC_ConfigChannel+0x6ec>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fe67 	bl	8002866 <LL_ADC_REG_IsConversionOngoing>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 8345 	bne.w	800322a <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	3b02      	subs	r3, #2
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d81b      	bhi.n	8002bea <HAL_ADC_ConfigChannel+0x86>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <HAL_ADC_ConfigChannel+0x54>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bd1 	.word	0x08002bd1
 8002bc0:	08002bd9 	.word	0x08002bd9
 8002bc4:	08002be1 	.word	0x08002be1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	220c      	movs	r2, #12
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	e011      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2212      	movs	r2, #18
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e00d      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2218      	movs	r2, #24
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	e009      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	e004      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2206      	movs	r2, #6
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002bf2:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f7ff fd5a 	bl	80026ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe2b 	bl	8002866 <LL_ADC_REG_IsConversionOngoing>
 8002c10:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fe37 	bl	800288c <LL_ADC_INJ_IsConversionOngoing>
 8002c1e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 8163 	bne.w	8002ef2 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 815e 	bne.w	8002ef2 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c3e:	d10f      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7ff fd5e 	bl	800270c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fd1b 	bl	8002694 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c5e:	e00e      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f7ff fd4d 	bl	800270c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fd0b 	bl	8002694 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6919      	ldr	r1, [r3, #16]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cb0:	f7ff fca2 	bl	80025f8 <LL_ADC_SetOffset>
 8002cb4:	e11d      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fcbd 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x17e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fcb2 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	e012      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x1a4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fca7 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1bc>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	e00a      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x1d2>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d106      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fc8e 	bl	8002664 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fc74 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x210>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fc69 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	e010      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x232>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fc5e 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x24a>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0e9b      	lsrs	r3, r3, #26
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	e00a      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x260>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d106      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fc47 	bl	8002664 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2102      	movs	r1, #2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fc2d 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x29e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fc22 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	e010      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x2c0>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2102      	movs	r1, #2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fc17 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x2d8>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	e00a      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x2ee>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d106      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fc00 	bl	8002664 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2103      	movs	r1, #3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fbe6 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x32c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2103      	movs	r1, #3
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fbdb 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	f003 021f 	and.w	r2, r3, #31
 8002e8e:	e010      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x34e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2103      	movs	r1, #3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fbd0 	bl	800263c <LL_ADC_GetOffsetChannel>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d105      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x366>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	e00a      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x37c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d106      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2103      	movs	r1, #3
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fbb9 	bl	8002664 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fca2 	bl	8002840 <LL_ADC_IsEnabled>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 810c 	bne.w	800311c <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6819      	ldr	r1, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f7ff fc23 	bl	800275c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4aae      	ldr	r2, [pc, #696]	; (80031d4 <HAL_ADC_ConfigChannel+0x670>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f040 80fd 	bne.w	800311c <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x3e6>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0e9b      	lsrs	r3, r3, #26
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2b09      	cmp	r3, #9
 8002f40:	bf94      	ite	ls
 8002f42:	2301      	movls	r3, #1
 8002f44:	2300      	movhi	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	e012      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x40c>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2b09      	cmp	r3, #9
 8002f68:	bf94      	ite	ls
 8002f6a:	2301      	movls	r3, #1
 8002f6c:	2300      	movhi	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d064      	beq.n	800303e <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x42c>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	3301      	adds	r3, #1
 8002f88:	069b      	lsls	r3, r3, #26
 8002f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f8e:	e00e      	b.n	8002fae <HAL_ADC_ConfigChannel+0x44a>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	069b      	lsls	r3, r3, #26
 8002faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x46a>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	e010      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x48c>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	ea42 0103 	orr.w	r1, r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x4b2>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	3301      	adds	r3, #1
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	051b      	lsls	r3, r3, #20
 8003014:	e011      	b.n	800303a <HAL_ADC_ConfigChannel+0x4d6>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f003 021f 	and.w	r2, r3, #31
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303a:	430b      	orrs	r3, r1
 800303c:	e069      	b.n	8003112 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_ADC_ConfigChannel+0x4f6>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	3301      	adds	r3, #1
 8003052:	069b      	lsls	r3, r3, #26
 8003054:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003058:	e00e      	b.n	8003078 <HAL_ADC_ConfigChannel+0x514>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	61fb      	str	r3, [r7, #28]
  return result;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	069b      	lsls	r3, r3, #26
 8003074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x534>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	3301      	adds	r3, #1
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	e010      	b.n	80030ba <HAL_ADC_ConfigChannel+0x556>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	617b      	str	r3, [r7, #20]
  return result;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	ea42 0103 	orr.w	r1, r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x582>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	3b1e      	subs	r3, #30
 80030de:	051b      	lsls	r3, r3, #20
 80030e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030e4:	e014      	b.n	8003110 <HAL_ADC_ConfigChannel+0x5ac>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	60fb      	str	r3, [r7, #12]
  return result;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	f003 021f 	and.w	r2, r3, #31
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	3b1e      	subs	r3, #30
 800310a:	051b      	lsls	r3, r3, #20
 800310c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003110:	430b      	orrs	r3, r1
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	6892      	ldr	r2, [r2, #8]
 8003116:	4619      	mov	r1, r3
 8003118:	f7ff faf8 	bl	800270c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_ADC_ConfigChannel+0x674>)
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 808d 	beq.w	8003244 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800312a:	482c      	ldr	r0, [pc, #176]	; (80031dc <HAL_ADC_ConfigChannel+0x678>)
 800312c:	f7ff fa56 	bl	80025dc <LL_ADC_GetCommonPathInternalCh>
 8003130:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_ADC_ConfigChannel+0x67c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d12b      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x632>
 800313e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d125      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a25      	ldr	r2, [pc, #148]	; (80031e4 <HAL_ADC_ConfigChannel+0x680>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_ADC_ConfigChannel+0x5fa>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a23      	ldr	r2, [pc, #140]	; (80031e8 <HAL_ADC_ConfigChannel+0x684>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d16f      	bne.n	800323e <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003162:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003166:	4619      	mov	r1, r3
 8003168:	481c      	ldr	r0, [pc, #112]	; (80031dc <HAL_ADC_ConfigChannel+0x678>)
 800316a:	f7ff fa24 	bl	80025b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800316e:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <HAL_ADC_ConfigChannel+0x688>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_ADC_ConfigChannel+0x68c>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	099a      	lsrs	r2, r3, #6
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003186:	e002      	b.n	800318e <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3b01      	subs	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f9      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003194:	e053      	b.n	800323e <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <HAL_ADC_ConfigChannel+0x690>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d12b      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x694>
 80031a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d125      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <HAL_ADC_ConfigChannel+0x680>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x65c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <HAL_ADC_ConfigChannel+0x684>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d140      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c8:	4619      	mov	r1, r3
 80031ca:	4804      	ldr	r0, [pc, #16]	; (80031dc <HAL_ADC_ConfigChannel+0x678>)
 80031cc:	f7ff f9f3 	bl	80025b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d0:	e037      	b.n	8003242 <HAL_ADC_ConfigChannel+0x6de>
 80031d2:	bf00      	nop
 80031d4:	407f0000 	.word	0x407f0000
 80031d8:	80080000 	.word	0x80080000
 80031dc:	50040300 	.word	0x50040300
 80031e0:	c7520000 	.word	0xc7520000
 80031e4:	50040000 	.word	0x50040000
 80031e8:	50040200 	.word	0x50040200
 80031ec:	20000000 	.word	0x20000000
 80031f0:	053e2d63 	.word	0x053e2d63
 80031f4:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_ADC_ConfigChannel+0x6f4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d120      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11a      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_ADC_ConfigChannel+0x6f8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d115      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003220:	4619      	mov	r1, r3
 8003222:	480f      	ldr	r0, [pc, #60]	; (8003260 <HAL_ADC_ConfigChannel+0x6fc>)
 8003224:	f7ff f9c7 	bl	80025b6 <LL_ADC_SetCommonPathInternalCh>
 8003228:	e00c      	b.n	8003244 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800323c:	e002      	b.n	8003244 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003242:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800324c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003250:	4618      	mov	r0, r3
 8003252:	3798      	adds	r7, #152	; 0x98
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	80000001 	.word	0x80000001
 800325c:	50040000 	.word	0x50040000
 8003260:	50040300 	.word	0x50040300

08003264 <LL_ADC_IsEnabled>:
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <LL_ADC_IsEnabled+0x18>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <LL_ADC_IsEnabled+0x1a>
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_ADC_REG_IsConversionOngoing>:
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d101      	bne.n	80032a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b0a1      	sub	sp, #132	; 0x84
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e08f      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e001      	b.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e072      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ffbd 	bl	800328a <LL_ADC_REG_IsConversionOngoing>
 8003310:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ffb7 	bl	800328a <LL_ADC_REG_IsConversionOngoing>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d154      	bne.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003324:	2b00      	cmp	r3, #0
 8003326:	d151      	bne.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003328:	4b35      	ldr	r3, [pc, #212]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800332a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02c      	beq.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003346:	035b      	lsls	r3, r3, #13
 8003348:	430b      	orrs	r3, r1
 800334a:	431a      	orrs	r2, r3
 800334c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003350:	4829      	ldr	r0, [pc, #164]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003352:	f7ff ff87 	bl	8003264 <LL_ADC_IsEnabled>
 8003356:	4604      	mov	r4, r0
 8003358:	4828      	ldr	r0, [pc, #160]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800335a:	f7ff ff83 	bl	8003264 <LL_ADC_IsEnabled>
 800335e:	4603      	mov	r3, r0
 8003360:	431c      	orrs	r4, r3
 8003362:	4828      	ldr	r0, [pc, #160]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003364:	f7ff ff7e 	bl	8003264 <LL_ADC_IsEnabled>
 8003368:	4603      	mov	r3, r0
 800336a:	4323      	orrs	r3, r4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d137      	bne.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003378:	f023 030f 	bic.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	6811      	ldr	r1, [r2, #0]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	6892      	ldr	r2, [r2, #8]
 8003384:	430a      	orrs	r2, r1
 8003386:	431a      	orrs	r2, r3
 8003388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800338c:	e028      	b.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800338e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003398:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800339a:	4817      	ldr	r0, [pc, #92]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800339c:	f7ff ff62 	bl	8003264 <LL_ADC_IsEnabled>
 80033a0:	4604      	mov	r4, r0
 80033a2:	4816      	ldr	r0, [pc, #88]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033a4:	f7ff ff5e 	bl	8003264 <LL_ADC_IsEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	431c      	orrs	r4, r3
 80033ac:	4815      	ldr	r0, [pc, #84]	; (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033ae:	f7ff ff59 	bl	8003264 <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4323      	orrs	r3, r4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d112      	bne.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033c2:	f023 030f 	bic.w	r3, r3, #15
 80033c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ca:	e009      	b.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033de:	e000      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80033ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3784      	adds	r7, #132	; 0x84
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	50040000 	.word	0x50040000
 80033fc:	50040100 	.word	0x50040100
 8003400:	50040300 	.word	0x50040300
 8003404:	50040200 	.word	0x50040200

08003408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343a:	4a04      	ldr	r2, [pc, #16]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	60d3      	str	r3, [r2, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db0b      	blt.n	8003496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4907      	ldr	r1, [pc, #28]	; (80034a4 <__NVIC_EnableIRQ+0x38>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e100 	.word	0xe000e100

080034a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	6039      	str	r1, [r7, #0]
 80034b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	db0a      	blt.n	80034d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	490c      	ldr	r1, [pc, #48]	; (80034f4 <__NVIC_SetPriority+0x4c>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	0112      	lsls	r2, r2, #4
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	440b      	add	r3, r1
 80034cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d0:	e00a      	b.n	80034e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4908      	ldr	r1, [pc, #32]	; (80034f8 <__NVIC_SetPriority+0x50>)
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	3b04      	subs	r3, #4
 80034e0:	0112      	lsls	r2, r2, #4
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	440b      	add	r3, r1
 80034e6:	761a      	strb	r2, [r3, #24]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000e100 	.word	0xe000e100
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f1c3 0307 	rsb	r3, r3, #7
 8003516:	2b04      	cmp	r3, #4
 8003518:	bf28      	it	cs
 800351a:	2304      	movcs	r3, #4
 800351c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3304      	adds	r3, #4
 8003522:	2b06      	cmp	r3, #6
 8003524:	d902      	bls.n	800352c <NVIC_EncodePriority+0x30>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3b03      	subs	r3, #3
 800352a:	e000      	b.n	800352e <NVIC_EncodePriority+0x32>
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	401a      	ands	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	43d9      	mvns	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003554:	4313      	orrs	r3, r2
         );
}
 8003556:	4618      	mov	r0, r3
 8003558:	3724      	adds	r7, #36	; 0x24
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003574:	d301      	bcc.n	800357a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003576:	2301      	movs	r3, #1
 8003578:	e00f      	b.n	800359a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <SysTick_Config+0x40>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003582:	210f      	movs	r1, #15
 8003584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003588:	f7ff ff8e 	bl	80034a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <SysTick_Config+0x40>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <SysTick_Config+0x40>)
 8003594:	2207      	movs	r2, #7
 8003596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	e000e010 	.word	0xe000e010

080035a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff29 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d0:	f7ff ff3e 	bl	8003450 <__NVIC_GetPriorityGrouping>
 80035d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	6978      	ldr	r0, [r7, #20]
 80035dc:	f7ff ff8e 	bl	80034fc <NVIC_EncodePriority>
 80035e0:	4602      	mov	r2, r0
 80035e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff5d 	bl	80034a8 <__NVIC_SetPriority>
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff31 	bl	800346c <__NVIC_EnableIRQ>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ffa2 	bl	8003564 <SysTick_Config>
 8003620:	4603      	mov	r3, r0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e075      	b.n	800372a <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe f8c0 	bl	80017d8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800366e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6819      	ldr	r1, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <HAL_DCMI_Init+0x108>)
 800368a:	400b      	ands	r3, r1
 800368c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80036a2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80036ae:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80036ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80036c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80036d2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d112      	bne.n	800370a <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	7f1b      	ldrb	r3, [r3, #28]
 80036e8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7f5b      	ldrb	r3, [r3, #29]
 80036ee:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80036f0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7f9b      	ldrb	r3, [r3, #30]
 80036f6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80036f8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7fdb      	ldrb	r3, [r3, #31]
 8003700:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003706:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003708:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 021f 	orr.w	r2, r2, #31
 8003718:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	ffe0f007 	.word	0xffe0f007

08003738 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0ac      	b.n	80038a4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fcac 	bl	80040ac <DFSDM_GetChannelFromInstance>
 8003754:	4602      	mov	r2, r0
 8003756:	4b55      	ldr	r3, [pc, #340]	; (80038ac <HAL_DFSDM_ChannelInit+0x174>)
 8003758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e09f      	b.n	80038a4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fe f969 	bl	8001a3c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800376a:	4b51      	ldr	r3, [pc, #324]	; (80038b0 <HAL_DFSDM_ChannelInit+0x178>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3301      	adds	r3, #1
 8003770:	4a4f      	ldr	r2, [pc, #316]	; (80038b0 <HAL_DFSDM_ChannelInit+0x178>)
 8003772:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003774:	4b4e      	ldr	r3, [pc, #312]	; (80038b0 <HAL_DFSDM_ChannelInit+0x178>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d125      	bne.n	80037c8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800377c:	4b4d      	ldr	r3, [pc, #308]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a4c      	ldr	r2, [pc, #304]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003782:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003786:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003788:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4948      	ldr	r1, [pc, #288]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a46      	ldr	r2, [pc, #280]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800379c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80037a0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	791b      	ldrb	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d108      	bne.n	80037bc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80037aa:	4b42      	ldr	r3, [pc, #264]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	493f      	ldr	r1, [pc, #252]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80037bc:	4b3d      	ldr	r3, [pc, #244]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80037c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037c6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80037d6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037e6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80037ec:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 020f 	bic.w	r2, r2, #15
 8003804:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800382c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f002 0207 	and.w	r2, r2, #7
 8003858:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003884:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fc0a 	bl	80040ac <DFSDM_GetChannelFromInstance>
 8003898:	4601      	mov	r1, r0
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_DFSDM_ChannelInit+0x174>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200001c0 	.word	0x200001c0
 80038b0:	200001bc 	.word	0x200001bc
 80038b4:	40016000 	.word	0x40016000

080038b8 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0ca      	b.n	8003a88 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a66      	ldr	r2, [pc, #408]	; (8003a90 <HAL_DFSDM_FilterInit+0x1b0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d109      	bne.n	8003910 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003900:	2b01      	cmp	r3, #1
 8003902:	d003      	beq.n	800390c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0bb      	b.n	8003a88 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fd ffd5 	bl	80018d8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800393c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	7a1b      	ldrb	r3, [r3, #8]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d108      	bne.n	8003958 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e007      	b.n	8003968 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003966:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7a5b      	ldrb	r3, [r3, #9]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d108      	bne.n	8003982 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e007      	b.n	8003992 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80039a0:	f023 0308 	bic.w	r3, r3, #8
 80039a4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d108      	bne.n	80039c0 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7c1b      	ldrb	r3, [r3, #16]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d108      	bne.n	80039da <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0210 	orr.w	r2, r2, #16
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e007      	b.n	80039ea <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0210 	bic.w	r2, r2, #16
 80039e8:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	7c5b      	ldrb	r3, [r3, #17]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d108      	bne.n	8003a04 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0220 	orr.w	r2, r2, #32
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e007      	b.n	8003a14 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0220 	bic.w	r2, r2, #32
 8003a12:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003a22:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003a26:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6959      	ldr	r1, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003a3a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003a42:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7c1a      	ldrb	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40016100 	.word	0x40016100

08003a94 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02e      	beq.n	8003b0c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003ab4:	2bff      	cmp	r3, #255	; 0xff
 8003ab6:	d029      	beq.n	8003b0c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10d      	bne.n	8003aee <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e00a      	b.n	8003b04 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
 8003b0a:	e001      	b.n	8003b10 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d004      	beq.n	8003b3e <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d103      	bne.n	8003b46 <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fb0a 	bl	8004158 <DFSDM_RegConvStart>
 8003b44:	e001      	b.n	8003b4a <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_DFSDM_FilterPollForRegConversion>:
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterPollForRegConversion(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                       uint32_t                    Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d006      	beq.n	8003b76 <HAL_DFSDM_FilterPollForRegConversion+0x22>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d001      	beq.n	8003b76 <HAL_DFSDM_FilterPollForRegConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e040      	b.n	8003bf8 <HAL_DFSDM_FilterPollForRegConversion+0xa4>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b76:	f7fe fcdd 	bl	8002534 <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]

    /* Wait end of regular conversion */
    while ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8003b7c:	e010      	b.n	8003ba0 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
    {
      /* Check the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b84:	d00c      	beq.n	8003ba0 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7fe fcd5 	bl	8002534 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <HAL_DFSDM_FilterPollForRegConversion+0x48>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_DFSDM_FilterPollForRegConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e02b      	b.n	8003bf8 <HAL_DFSDM_FilterPollForRegConversion+0xa4>
    while ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_REOCF) != DFSDM_FLTISR_REOCF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d1e7      	bne.n	8003b7e <HAL_DFSDM_FilterPollForRegConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_ROVRF) == DFSDM_FLTISR_ROVRF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d109      	bne.n	8003bd0 <HAL_DFSDM_FilterPollForRegConversion+0x7c>
    {
      /* Update error code and call error callback */
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
      hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
      HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa3a 	bl	800403c <HAL_DFSDM_FilterErrorCallback>
#endif

      /* Clear regular overrun flag */
      hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	60da      	str	r2, [r3, #12]
    }
    /* Update DFSDM filter state only if not continuous conversion and SW trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_DFSDM_FilterPollForRegConversion+0xa2>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <HAL_DFSDM_FilterPollForRegConversion+0xa2>
    {
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d101      	bne.n	8003bee <HAL_DFSDM_FilterPollForRegConversion+0x9a>
 8003bea:	2201      	movs	r2, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_DFSDM_FilterPollForRegConversion+0x9c>
 8003bee:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    /* Return function status */
    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
 8003c20:	e064      	b.n	8003cec <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c30:	d002      	beq.n	8003c38 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
 8003c36:	e059      	b.n	8003cec <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10e      	bne.n	8003c5e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d002      	beq.n	8003c5e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	75fb      	strb	r3, [r7, #23]
 8003c5c:	e046      	b.n	8003cec <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10b      	bne.n	8003c7e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d102      	bne.n	8003c7e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]
 8003c7c:	e036      	b.n	8003cec <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d004      	beq.n	8003c92 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d12a      	bne.n	8003ce8 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d101      	bne.n	8003cb0 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003cae:	e000      	b.n	8003cb2 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003cb0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	331c      	adds	r3, #28
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f000 fb54 	bl	8004374 <HAL_DMA_Start_IT>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003cde:	e005      	b.n	8003cec <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fa39 	bl	8004158 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003ce6:	e001      	b.n	8003cec <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	0800406d 	.word	0x0800406d
 8003cfc:	08004089 	.word	0x08004089
 8003d00:	08004051 	.word	0x08004051

08003d04 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0207 	and.w	r2, r3, #7
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d26:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	da00      	bge.n	8003d30 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 8003d2e:	33ff      	adds	r3, #255	; 0xff
 8003d30:	121b      	asrs	r3, r3, #8
 8003d32:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 8003d34:	68bb      	ldr	r3, [r7, #8]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08c      	sub	sp, #48	; 0x30
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00f      	beq.n	8003d86 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2208      	movs	r2, #8
 8003d76:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f95c 	bl	800403c <HAL_DFSDM_FilterErrorCallback>
 8003d84:	e13b      	b.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00f      	beq.n	8003db0 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f947 	bl	800403c <HAL_DFSDM_FilterErrorCallback>
 8003dae:	e126      	b.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d025      	beq.n	8003e06 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fc fb99 	bl	80004fc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 8114 	bne.w	8003ffc <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 810f 	bne.w	8003ffc <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0202 	bic.w	r2, r2, #2
 8003dec:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d101      	bne.n	8003dfc <HAL_DFSDM_IRQHandler+0xb8>
 8003df8:	2201      	movs	r2, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_DFSDM_IRQHandler+0xba>
 8003dfc:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003e04:	e0fa      	b.n	8003ffc <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d034      	beq.n	8003e7a <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d02f      	beq.n	8003e7a <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8f8 	bl	8004010 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e24:	1e5a      	subs	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f040 80e5 	bne.w	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d112      	bne.n	8003e62 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d101      	bne.n	8003e5a <HAL_DFSDM_IRQHandler+0x116>
 8003e56:	2201      	movs	r2, #1
 8003e58:	e000      	b.n	8003e5c <HAL_DFSDM_IRQHandler+0x118>
 8003e5a:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d102      	bne.n	8003e72 <HAL_DFSDM_IRQHandler+0x12e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	e000      	b.n	8003e74 <HAL_DFSDM_IRQHandler+0x130>
 8003e72:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8003e78:	e0c1      	b.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d03d      	beq.n	8003f00 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d038      	beq.n	8003f00 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_DFSDM_IRQHandler+0x162>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_DFSDM_IRQHandler+0x164>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003eb6:	e005      	b.n	8003ec4 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	3301      	adds	r3, #1
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_DFSDM_IRQHandler+0x190>
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	2b06      	cmp	r3, #6
 8003ed2:	d9f1      	bls.n	8003eb8 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <HAL_DFSDM_IRQHandler+0x1a2>
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	3308      	adds	r3, #8
 8003ede:	2201      	movs	r2, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	e003      	b.n	8003eee <HAL_DFSDM_IRQHandler+0x1aa>
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f893 	bl	8004024 <HAL_DFSDM_FilterAwdCallback>
  {
 8003efe:	e07e      	b.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a40      	ldr	r2, [pc, #256]	; (8004008 <HAL_DFSDM_IRQHandler+0x2c4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d141      	bne.n	8003f8e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d03c      	beq.n	8003f8e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d037      	beq.n	8003f8e <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8003f2e:	e02a      	b.n	8003f86 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01f      	beq.n	8003f7a <HAL_DFSDM_IRQHandler+0x236>
 8003f3a:	4a34      	ldr	r2, [pc, #208]	; (800400c <HAL_DFSDM_IRQHandler+0x2c8>)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d019      	beq.n	8003f7a <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8003f46:	4a31      	ldr	r2, [pc, #196]	; (800400c <HAL_DFSDM_IRQHandler+0x2c8>)
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00f      	beq.n	8003f7a <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f103 0210 	add.w	r2, r3, #16
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6a:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8003f6c:	4a27      	ldr	r2, [pc, #156]	; (800400c <HAL_DFSDM_IRQHandler+0x2c8>)
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fc9f 	bl	80038b8 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d9d1      	bls.n	8003f30 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8003f8c:	e037      	b.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <HAL_DFSDM_IRQHandler+0x2c4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d132      	bne.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02d      	beq.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d028      	beq.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0e1b      	lsrs	r3, r3, #24
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003fbc:	e005      	b.n	8003fca <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <HAL_DFSDM_IRQHandler+0x296>
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d9f1      	bls.n	8003fbe <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f103 0218 	add.w	r2, r3, #24
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fea:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8003fec:	4a07      	ldr	r2, [pc, #28]	; (800400c <HAL_DFSDM_IRQHandler+0x2c8>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fc69 	bl	80038cc <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8003ffa:	e000      	b.n	8003ffe <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003ffc:	bf00      	nop
}
 8003ffe:	bf00      	nop
 8004000:	3730      	adds	r7, #48	; 0x30
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40016100 	.word	0x40016100
 800400c:	200001c0 	.word	0x200001c0

08004010 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7fc fa6e 	bl	8000540 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7fc fa3e 	bl	80004fc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2203      	movs	r2, #3
 800409a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ffcd 	bl	800403c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a20      	ldr	r2, [pc, #128]	; (8004138 <DFSDM_GetChannelFromInstance+0x8c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d102      	bne.n	80040c2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e032      	b.n	8004128 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <DFSDM_GetChannelFromInstance+0x90>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d102      	bne.n	80040d0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e02b      	b.n	8004128 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <DFSDM_GetChannelFromInstance+0x94>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d102      	bne.n	80040de <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80040d8:	2302      	movs	r3, #2
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e024      	b.n	8004128 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a18      	ldr	r2, [pc, #96]	; (8004144 <DFSDM_GetChannelFromInstance+0x98>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d102      	bne.n	80040ec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80040e6:	2303      	movs	r3, #3
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e01d      	b.n	8004128 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a16      	ldr	r2, [pc, #88]	; (8004148 <DFSDM_GetChannelFromInstance+0x9c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d102      	bne.n	80040fa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80040f4:	2304      	movs	r3, #4
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e016      	b.n	8004128 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a13      	ldr	r2, [pc, #76]	; (800414c <DFSDM_GetChannelFromInstance+0xa0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d102      	bne.n	8004108 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8004102:	2305      	movs	r3, #5
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e00f      	b.n	8004128 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a11      	ldr	r2, [pc, #68]	; (8004150 <DFSDM_GetChannelFromInstance+0xa4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d102      	bne.n	8004116 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8004110:	2306      	movs	r3, #6
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e008      	b.n	8004128 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <DFSDM_GetChannelFromInstance+0xa8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d102      	bne.n	8004124 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 800411e:	2307      	movs	r3, #7
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e001      	b.n	8004128 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004128:	68fb      	ldr	r3, [r7, #12]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40016000 	.word	0x40016000
 800413c:	40016020 	.word	0x40016020
 8004140:	40016040 	.word	0x40016040
 8004144:	40016060 	.word	0x40016060
 8004148:	40016080 	.word	0x40016080
 800414c:	400160a0 	.word	0x400160a0
 8004150:	400160c0 	.word	0x400160c0
 8004154:	400160e0 	.word	0x400160e0

08004158 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	2b00      	cmp	r3, #0
 8004166:	d108      	bne.n	800417a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e033      	b.n	80041e2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004198:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d116      	bne.n	80041e2 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d107      	bne.n	80041cc <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0202 	orr.w	r2, r2, #2
 80041ca:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d102      	bne.n	80041dc <DFSDM_RegConvStart+0x84>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	e000      	b.n	80041de <DFSDM_RegConvStart+0x86>
 80041dc:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <DFSDM_RegConvStart+0x98>
 80041ec:	2202      	movs	r2, #2
 80041ee:	e000      	b.n	80041f2 <DFSDM_RegConvStart+0x9a>
 80041f0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e098      	b.n	8004348 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	4b4d      	ldr	r3, [pc, #308]	; (8004354 <HAL_DMA_Init+0x150>)
 800421e:	429a      	cmp	r2, r3
 8004220:	d80f      	bhi.n	8004242 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <HAL_DMA_Init+0x154>)
 800422a:	4413      	add	r3, r2
 800422c:	4a4b      	ldr	r2, [pc, #300]	; (800435c <HAL_DMA_Init+0x158>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	091b      	lsrs	r3, r3, #4
 8004234:	009a      	lsls	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a48      	ldr	r2, [pc, #288]	; (8004360 <HAL_DMA_Init+0x15c>)
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
 8004240:	e00e      	b.n	8004260 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	4b46      	ldr	r3, [pc, #280]	; (8004364 <HAL_DMA_Init+0x160>)
 800424a:	4413      	add	r3, r2
 800424c:	4a43      	ldr	r2, [pc, #268]	; (800435c <HAL_DMA_Init+0x158>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	009a      	lsls	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a42      	ldr	r2, [pc, #264]	; (8004368 <HAL_DMA_Init+0x164>)
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800429c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ba:	d039      	beq.n	8004330 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <HAL_DMA_Init+0x15c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d11a      	bne.n	80042fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <HAL_DMA_Init+0x168>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	f003 031c 	and.w	r3, r3, #28
 80042d2:	210f      	movs	r1, #15
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	4924      	ldr	r1, [pc, #144]	; (800436c <HAL_DMA_Init+0x168>)
 80042dc:	4013      	ands	r3, r2
 80042de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042e0:	4b22      	ldr	r3, [pc, #136]	; (800436c <HAL_DMA_Init+0x168>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	f003 031c 	and.w	r3, r3, #28
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	491d      	ldr	r1, [pc, #116]	; (800436c <HAL_DMA_Init+0x168>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
 80042fa:	e019      	b.n	8004330 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042fc:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <HAL_DMA_Init+0x16c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f003 031c 	and.w	r3, r3, #28
 8004308:	210f      	movs	r1, #15
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	4917      	ldr	r1, [pc, #92]	; (8004370 <HAL_DMA_Init+0x16c>)
 8004312:	4013      	ands	r3, r2
 8004314:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_DMA_Init+0x16c>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6859      	ldr	r1, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f003 031c 	and.w	r3, r3, #28
 8004326:	fa01 f303 	lsl.w	r3, r1, r3
 800432a:	4911      	ldr	r1, [pc, #68]	; (8004370 <HAL_DMA_Init+0x16c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40020407 	.word	0x40020407
 8004358:	bffdfff8 	.word	0xbffdfff8
 800435c:	cccccccd 	.word	0xcccccccd
 8004360:	40020000 	.word	0x40020000
 8004364:	bffdfbf8 	.word	0xbffdfbf8
 8004368:	40020400 	.word	0x40020400
 800436c:	400200a8 	.word	0x400200a8
 8004370:	400204a8 	.word	0x400204a8

08004374 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_DMA_Start_IT+0x20>
 8004390:	2302      	movs	r3, #2
 8004392:	e04b      	b.n	800442c <HAL_DMA_Start_IT+0xb8>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d13a      	bne.n	800441e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f921 	bl	8004614 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 020e 	orr.w	r2, r2, #14
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e00f      	b.n	800440c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 020a 	orr.w	r2, r2, #10
 800440a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e005      	b.n	800442a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004426:	2302      	movs	r3, #2
 8004428:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800442a:	7dfb      	ldrb	r3, [r7, #23]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d005      	beq.n	8004458 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2204      	movs	r2, #4
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e029      	b.n	80044ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 020e 	bic.w	r2, r2, #14
 8004466:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	f003 021c 	and.w	r2, r3, #28
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	2101      	movs	r1, #1
 8004486:	fa01 f202 	lsl.w	r2, r1, r2
 800448a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
    }
  }
  return status;
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	f003 031c 	and.w	r3, r3, #28
 80044d6:	2204      	movs	r2, #4
 80044d8:	409a      	lsls	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d026      	beq.n	8004530 <HAL_DMA_IRQHandler+0x7a>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d021      	beq.n	8004530 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0204 	bic.w	r2, r2, #4
 8004508:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	f003 021c 	and.w	r2, r3, #28
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2104      	movs	r1, #4
 8004518:	fa01 f202 	lsl.w	r2, r1, r2
 800451c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d071      	beq.n	800460a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800452e:	e06c      	b.n	800460a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	f003 031c 	and.w	r3, r3, #28
 8004538:	2202      	movs	r2, #2
 800453a:	409a      	lsls	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02e      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xec>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d029      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 020a 	bic.w	r2, r2, #10
 800456a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f003 021c 	and.w	r2, r3, #28
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	2102      	movs	r1, #2
 8004582:	fa01 f202 	lsl.w	r2, r1, r2
 8004586:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d038      	beq.n	800460a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045a0:	e033      	b.n	800460a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f003 031c 	and.w	r3, r3, #28
 80045aa:	2208      	movs	r2, #8
 80045ac:	409a      	lsls	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d02a      	beq.n	800460c <HAL_DMA_IRQHandler+0x156>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d025      	beq.n	800460c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 020e 	bic.w	r2, r2, #14
 80045ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	f003 021c 	and.w	r2, r3, #28
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f202 	lsl.w	r2, r1, r2
 80045e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800460a:	bf00      	nop
 800460c:	bf00      	nop
}
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f003 021c 	and.w	r2, r3, #28
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2101      	movs	r1, #1
 8004630:	fa01 f202 	lsl.w	r2, r1, r2
 8004634:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b10      	cmp	r3, #16
 8004644:	d108      	bne.n	8004658 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004656:	e007      	b.n	8004668 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004682:	e166      	b.n	8004952 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2101      	movs	r1, #1
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	4013      	ands	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8158 	beq.w	800494c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x38>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b12      	cmp	r3, #18
 80046aa:	d123      	bne.n	80046f4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	08da      	lsrs	r2, r3, #3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3208      	adds	r2, #8
 80046b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	220f      	movs	r2, #15
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	08da      	lsrs	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3208      	adds	r2, #8
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0203 	and.w	r2, r3, #3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d00b      	beq.n	8004748 <HAL_GPIO_Init+0xd4>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d007      	beq.n	8004748 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800473c:	2b11      	cmp	r3, #17
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b12      	cmp	r3, #18
 8004746:	d130      	bne.n	80047aa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800477e:	2201      	movs	r2, #1
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0201 	and.w	r2, r3, #1
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	2203      	movs	r2, #3
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80b2 	beq.w	800494c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e8:	4b61      	ldr	r3, [pc, #388]	; (8004970 <HAL_GPIO_Init+0x2fc>)
 80047ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ec:	4a60      	ldr	r2, [pc, #384]	; (8004970 <HAL_GPIO_Init+0x2fc>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6613      	str	r3, [r2, #96]	; 0x60
 80047f4:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <HAL_GPIO_Init+0x2fc>)
 80047f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004800:	4a5c      	ldr	r2, [pc, #368]	; (8004974 <HAL_GPIO_Init+0x300>)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	089b      	lsrs	r3, r3, #2
 8004806:	3302      	adds	r3, #2
 8004808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	220f      	movs	r2, #15
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800482a:	d02b      	beq.n	8004884 <HAL_GPIO_Init+0x210>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a52      	ldr	r2, [pc, #328]	; (8004978 <HAL_GPIO_Init+0x304>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d025      	beq.n	8004880 <HAL_GPIO_Init+0x20c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a51      	ldr	r2, [pc, #324]	; (800497c <HAL_GPIO_Init+0x308>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d01f      	beq.n	800487c <HAL_GPIO_Init+0x208>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a50      	ldr	r2, [pc, #320]	; (8004980 <HAL_GPIO_Init+0x30c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d019      	beq.n	8004878 <HAL_GPIO_Init+0x204>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a4f      	ldr	r2, [pc, #316]	; (8004984 <HAL_GPIO_Init+0x310>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_GPIO_Init+0x200>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a4e      	ldr	r2, [pc, #312]	; (8004988 <HAL_GPIO_Init+0x314>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00d      	beq.n	8004870 <HAL_GPIO_Init+0x1fc>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a4d      	ldr	r2, [pc, #308]	; (800498c <HAL_GPIO_Init+0x318>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <HAL_GPIO_Init+0x1f8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a4c      	ldr	r2, [pc, #304]	; (8004990 <HAL_GPIO_Init+0x31c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_GPIO_Init+0x1f4>
 8004864:	2307      	movs	r3, #7
 8004866:	e00e      	b.n	8004886 <HAL_GPIO_Init+0x212>
 8004868:	2308      	movs	r3, #8
 800486a:	e00c      	b.n	8004886 <HAL_GPIO_Init+0x212>
 800486c:	2306      	movs	r3, #6
 800486e:	e00a      	b.n	8004886 <HAL_GPIO_Init+0x212>
 8004870:	2305      	movs	r3, #5
 8004872:	e008      	b.n	8004886 <HAL_GPIO_Init+0x212>
 8004874:	2304      	movs	r3, #4
 8004876:	e006      	b.n	8004886 <HAL_GPIO_Init+0x212>
 8004878:	2303      	movs	r3, #3
 800487a:	e004      	b.n	8004886 <HAL_GPIO_Init+0x212>
 800487c:	2302      	movs	r3, #2
 800487e:	e002      	b.n	8004886 <HAL_GPIO_Init+0x212>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_GPIO_Init+0x212>
 8004884:	2300      	movs	r3, #0
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	f002 0203 	and.w	r2, r2, #3
 800488c:	0092      	lsls	r2, r2, #2
 800488e:	4093      	lsls	r3, r2
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004896:	4937      	ldr	r1, [pc, #220]	; (8004974 <HAL_GPIO_Init+0x300>)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	3302      	adds	r3, #2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048a4:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_GPIO_Init+0x320>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048c8:	4a32      	ldr	r2, [pc, #200]	; (8004994 <HAL_GPIO_Init+0x320>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_GPIO_Init+0x320>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	43db      	mvns	r3, r3
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4013      	ands	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048f2:	4a28      	ldr	r2, [pc, #160]	; (8004994 <HAL_GPIO_Init+0x320>)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048f8:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_GPIO_Init+0x320>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43db      	mvns	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800491c:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <HAL_GPIO_Init+0x320>)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <HAL_GPIO_Init+0x320>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004946:	4a13      	ldr	r2, [pc, #76]	; (8004994 <HAL_GPIO_Init+0x320>)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	3301      	adds	r3, #1
 8004950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	f47f ae91 	bne.w	8004684 <HAL_GPIO_Init+0x10>
  }
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	40010000 	.word	0x40010000
 8004978:	48000400 	.word	0x48000400
 800497c:	48000800 	.word	0x48000800
 8004980:	48000c00 	.word	0x48000c00
 8004984:	48001000 	.word	0x48001000
 8004988:	48001400 	.word	0x48001400
 800498c:	48001800 	.word	0x48001800
 8004990:	48001c00 	.word	0x48001c00
 8004994:	40010400 	.word	0x40010400

08004998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a8:	787b      	ldrb	r3, [r7, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049b4:	e002      	b.n	80049bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	887b      	ldrh	r3, [r7, #2]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049e0:	887a      	ldrh	r2, [r7, #2]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80049e6:	e002      	b.n	80049ee <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049e8:	887a      	ldrh	r2, [r7, #2]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	619a      	str	r2, [r3, #24]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e081      	b.n	8004b10 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fd f877 	bl	8001b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2224      	movs	r2, #36	; 0x24
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	e006      	b.n	8004a82 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d104      	bne.n	8004a94 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	ea42 0103 	orr.w	r1, r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	021a      	lsls	r2, r3, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69d9      	ldr	r1, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1a      	ldr	r2, [r3, #32]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d138      	bne.n	8004ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e032      	b.n	8004ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d139      	bne.n	8004c38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e033      	b.n	8004c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2224      	movs	r2, #36	; 0x24
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c48:	b08f      	sub	sp, #60	; 0x3c
 8004c4a:	af0a      	add	r7, sp, #40	; 0x28
 8004c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e116      	b.n	8004e86 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f008 fea0 	bl	800d9b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d102      	bne.n	8004c92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f006 f88f 	bl	800adba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	687e      	ldr	r6, [r7, #4]
 8004ca4:	466d      	mov	r5, sp
 8004ca6:	f106 0410 	add.w	r4, r6, #16
 8004caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cba:	1d33      	adds	r3, r6, #4
 8004cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cbe:	6838      	ldr	r0, [r7, #0]
 8004cc0:	f005 ff7c 	bl	800abbc <USB_CoreInit>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0d7      	b.n	8004e86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f006 f87d 	bl	800addc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	e04a      	b.n	8004d7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ce8:	7bfa      	ldrb	r2, [r7, #15]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	333d      	adds	r3, #61	; 0x3d
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	333c      	adds	r3, #60	; 0x3c
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d10:	7bfa      	ldrb	r2, [r7, #15]
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	b298      	uxth	r0, r3
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	3342      	adds	r3, #66	; 0x42
 8004d24:	4602      	mov	r2, r0
 8004d26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d28:	7bfa      	ldrb	r2, [r7, #15]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	333f      	adds	r3, #63	; 0x3f
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d3c:	7bfa      	ldrb	r2, [r7, #15]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	3344      	adds	r3, #68	; 0x44
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d50:	7bfa      	ldrb	r2, [r7, #15]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3348      	adds	r3, #72	; 0x48
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d64:	7bfa      	ldrb	r2, [r7, #15]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	3350      	adds	r3, #80	; 0x50
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
 8004d7e:	7bfa      	ldrb	r2, [r7, #15]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d3af      	bcc.n	8004ce8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e044      	b.n	8004e18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004da4:	7bfa      	ldrb	r2, [r7, #15]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004db6:	7bfa      	ldrb	r2, [r7, #15]
 8004db8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dfc:	7bfa      	ldrb	r2, [r7, #15]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	3301      	adds	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d3b5      	bcc.n	8004d8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	687e      	ldr	r6, [r7, #4]
 8004e2a:	466d      	mov	r5, sp
 8004e2c:	f106 0410 	add.w	r4, r6, #16
 8004e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e40:	1d33      	adds	r3, r6, #4
 8004e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e44:	6838      	ldr	r0, [r7, #0]
 8004e46:	f005 fff3 	bl	800ae30 <USB_DevInit>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e014      	b.n	8004e86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d102      	bne.n	8004e7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 ff3f 	bl	8005cf8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f006 ff0a 	bl	800bc98 <USB_DevDisconnect>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_PCD_Start+0x1c>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e01c      	b.n	8004ee4 <HAL_PCD_Start+0x56>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d105      	bne.n	8004ec6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f006 fecc 	bl	800bc68 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f005 ff5f 	bl	800ad98 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b08d      	sub	sp, #52	; 0x34
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f006 ff71 	bl	800bdee <USB_GetMode>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 836b 	bne.w	80055ea <HAL_PCD_IRQHandler+0x6fe>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f006 fed5 	bl	800bcc8 <USB_ReadInterrupts>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8361 	beq.w	80055e8 <HAL_PCD_IRQHandler+0x6fc>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f006 fecc 	bl	800bcc8 <USB_ReadInterrupts>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d107      	bne.n	8004f4a <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f002 0202 	and.w	r2, r2, #2
 8004f48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f006 feba 	bl	800bcc8 <USB_ReadInterrupts>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f5e:	d16e      	bne.n	800503e <HAL_PCD_IRQHandler+0x152>
    {
      epnum = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f006 fec0 	bl	800bcee <USB_ReadDevAllOutEpInterrupt>
 8004f6e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f70:	e062      	b.n	8005038 <HAL_PCD_IRQHandler+0x14c>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d057      	beq.n	800502c <HAL_PCD_IRQHandler+0x140>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	4611      	mov	r1, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f006 fee5 	bl	800bd56 <USB_ReadDevOutEPInterrupt>
 8004f8c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fdc9 	bl	8005b44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fe0e 	bl	8005be0 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	461a      	mov	r2, r3
 8004fee:	2310      	movs	r3, #16
 8004ff0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_PCD_IRQHandler+0x122>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	461a      	mov	r2, r3
 800500a:	2320      	movs	r3, #32
 800500c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <HAL_PCD_IRQHandler+0x140>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	461a      	mov	r2, r3
 8005026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800502a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	3301      	adds	r3, #1
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d199      	bne.n	8004f72 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f006 fe40 	bl	800bcc8 <USB_ReadInterrupts>
 8005048:	4603      	mov	r3, r0
 800504a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005052:	f040 8087 	bne.w	8005164 <HAL_PCD_IRQHandler+0x278>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f006 fe61 	bl	800bd22 <USB_ReadDevAllInEpInterrupt>
 8005060:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005066:	e07a      	b.n	800515e <HAL_PCD_IRQHandler+0x272>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d06f      	beq.n	8005152 <HAL_PCD_IRQHandler+0x266>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f006 fe88 	bl	800bd92 <USB_ReadDevInEPInterrupt>
 8005082:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d020      	beq.n	80050d0 <HAL_PCD_IRQHandler+0x1e4>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	2201      	movs	r2, #1
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69f9      	ldr	r1, [r7, #28]
 80050aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ae:	4013      	ands	r3, r2
 80050b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	461a      	mov	r2, r3
 80050c0:	2301      	movs	r3, #1
 80050c2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f008 fd07 	bl	800dade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_PCD_IRQHandler+0x200>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	461a      	mov	r2, r3
 80050e8:	2308      	movs	r3, #8
 80050ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_PCD_IRQHandler+0x21c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	461a      	mov	r2, r3
 8005104:	2310      	movs	r3, #16
 8005106:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <HAL_PCD_IRQHandler+0x238>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511e:	461a      	mov	r2, r3
 8005120:	2340      	movs	r3, #64	; 0x40
 8005122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_PCD_IRQHandler+0x254>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	461a      	mov	r2, r3
 800513c:	2302      	movs	r3, #2
 800513e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_PCD_IRQHandler+0x266>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800514a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fc71 	bl	8005a34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	3301      	adds	r3, #1
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	2b00      	cmp	r3, #0
 8005162:	d181      	bne.n	8005068 <HAL_PCD_IRQHandler+0x17c>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f006 fdad 	bl	800bcc8 <USB_ReadInterrupts>
 800516e:	4603      	mov	r3, r0
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005178:	d122      	bne.n	80051c0 <HAL_PCD_IRQHandler+0x2d4>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005194:	2b01      	cmp	r3, #1
 8005196:	d108      	bne.n	80051aa <HAL_PCD_IRQHandler+0x2be>
      {
        hpcd->LPM_State = LPM_L0;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051a0:	2100      	movs	r1, #0
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f008 ffb8 	bl	800e118 <HAL_PCDEx_LPM_Callback>
 80051a8:	e002      	b.n	80051b0 <HAL_PCD_IRQHandler+0x2c4>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f008 fd04 	bl	800dbb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f006 fd7f 	bl	800bcc8 <USB_ReadInterrupts>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d4:	d112      	bne.n	80051fc <HAL_PCD_IRQHandler+0x310>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d102      	bne.n	80051ec <HAL_PCD_IRQHandler+0x300>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f008 fcc0 	bl	800db6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80051fa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f006 fd61 	bl	800bcc8 <USB_ReadInterrupts>
 8005206:	4603      	mov	r3, r0
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005210:	d121      	bne.n	8005256 <HAL_PCD_IRQHandler+0x36a>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005220:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d111      	bne.n	8005250 <HAL_PCD_IRQHandler+0x364>
      {
        hpcd->LPM_State = LPM_L1;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	f003 020f 	and.w	r2, r3, #15
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005246:	2101      	movs	r1, #1
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f008 ff65 	bl	800e118 <HAL_PCDEx_LPM_Callback>
 800524e:	e002      	b.n	8005256 <HAL_PCD_IRQHandler+0x36a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f008 fc8b 	bl	800db6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f006 fd34 	bl	800bcc8 <USB_ReadInterrupts>
 8005260:	4603      	mov	r3, r0
 8005262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	f040 80a5 	bne.w	80053b8 <HAL_PCD_IRQHandler+0x4cc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2110      	movs	r1, #16
 8005288:	4618      	mov	r0, r3
 800528a:	f005 ff13 	bl	800b0b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800528e:	2300      	movs	r3, #0
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005292:	e036      	b.n	8005302 <HAL_PCD_IRQHandler+0x416>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	461a      	mov	r2, r3
 80052a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	3301      	adds	r3, #1
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005308:	429a      	cmp	r2, r3
 800530a:	d3c3      	bcc.n	8005294 <HAL_PCD_IRQHandler+0x3a8>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800531e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	2b00      	cmp	r3, #0
 8005326:	d016      	beq.n	8005356 <HAL_PCD_IRQHandler+0x46a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005338:	f043 030b 	orr.w	r3, r3, #11
 800533c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534e:	f043 030b 	orr.w	r3, r3, #11
 8005352:	6453      	str	r3, [r2, #68]	; 0x44
 8005354:	e015      	b.n	8005382 <HAL_PCD_IRQHandler+0x496>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005364:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005368:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800536c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537c:	f043 030b 	orr.w	r3, r3, #11
 8005380:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005390:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005394:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f006 fd66 	bl	800be74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f006 fc83 	bl	800bcc8 <USB_ReadInterrupts>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053cc:	d124      	bne.n	8005418 <HAL_PCD_IRQHandler+0x52c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f006 fd19 	bl	800be0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f005 feca 	bl	800b176 <USB_GetDevSpeed>
 80053e2:	4603      	mov	r3, r0
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681c      	ldr	r4, [r3, #0]
 80053ee:	f001 fb63 	bl	8006ab8 <HAL_RCC_GetHCLKFreq>
 80053f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	4620      	mov	r0, r4
 80053fe:	f005 fc2f 	bl	800ac60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f008 fb93 	bl	800db2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005416:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f006 fc53 	bl	800bcc8 <USB_ReadInterrupts>
 8005422:	4603      	mov	r3, r0
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b10      	cmp	r3, #16
 800542a:	d161      	bne.n	80054f0 <HAL_PCD_IRQHandler+0x604>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0210 	bic.w	r2, r2, #16
 800543a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f003 020f 	and.w	r2, r3, #15
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	3304      	adds	r3, #4
 800545a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	0c5b      	lsrs	r3, r3, #17
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	2b02      	cmp	r3, #2
 8005466:	d124      	bne.n	80054b2 <HAL_PCD_IRQHandler+0x5c6>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d035      	beq.n	80054e0 <HAL_PCD_IRQHandler+0x5f4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800547e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	6a38      	ldr	r0, [r7, #32]
 8005488:	f006 facb 	bl	800ba22 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	091b      	lsrs	r3, r3, #4
 8005494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005498:	441a      	add	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	091b      	lsrs	r3, r3, #4
 80054a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054aa:	441a      	add	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	619a      	str	r2, [r3, #24]
 80054b0:	e016      	b.n	80054e0 <HAL_PCD_IRQHandler+0x5f4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	0c5b      	lsrs	r3, r3, #17
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	2b06      	cmp	r3, #6
 80054bc:	d110      	bne.n	80054e0 <HAL_PCD_IRQHandler+0x5f4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054c4:	2208      	movs	r2, #8
 80054c6:	4619      	mov	r1, r3
 80054c8:	6a38      	ldr	r0, [r7, #32]
 80054ca:	f006 faaa 	bl	800ba22 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054da:	441a      	add	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0210 	orr.w	r2, r2, #16
 80054ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f006 fbe7 	bl	800bcc8 <USB_ReadInterrupts>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d10a      	bne.n	800551a <HAL_PCD_IRQHandler+0x62e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f008 fb04 	bl	800db12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f002 0208 	and.w	r2, r2, #8
 8005518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f006 fbd2 	bl	800bcc8 <USB_ReadInterrupts>
 8005524:	4603      	mov	r3, r0
 8005526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552e:	d10d      	bne.n	800554c <HAL_PCD_IRQHandler+0x660>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	b2db      	uxtb	r3, r3
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f008 fb78 	bl	800dc2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800554a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f006 fbb9 	bl	800bcc8 <USB_ReadInterrupts>
 8005556:	4603      	mov	r3, r0
 8005558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005560:	d10d      	bne.n	800557e <HAL_PCD_IRQHandler+0x692>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	b2db      	uxtb	r3, r3
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f008 fb4d 	bl	800dc08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800557c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f006 fba0 	bl	800bcc8 <USB_ReadInterrupts>
 8005588:	4603      	mov	r3, r0
 800558a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005592:	d10a      	bne.n	80055aa <HAL_PCD_IRQHandler+0x6be>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f008 fb5b 	bl	800dc50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f006 fb8a 	bl	800bcc8 <USB_ReadInterrupts>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d115      	bne.n	80055ea <HAL_PCD_IRQHandler+0x6fe>
    {
      temp = hpcd->Instance->GOTGINT;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x6ea>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f008 fb4b 	bl	800dc6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	e000      	b.n	80055ea <HAL_PCD_IRQHandler+0x6fe>
      return;
 80055e8:	bf00      	nop
    }
  }
}
 80055ea:	3734      	adds	r7, #52	; 0x34
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd90      	pop	{r4, r7, pc}

080055f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_PCD_SetAddress+0x1a>
 8005606:	2302      	movs	r3, #2
 8005608:	e013      	b.n	8005632 <HAL_PCD_SetAddress+0x42>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f006 fafa 	bl	800bc1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	461a      	mov	r2, r3
 8005648:	4603      	mov	r3, r0
 800564a:	70fb      	strb	r3, [r7, #3]
 800564c:	460b      	mov	r3, r1
 800564e:	803b      	strh	r3, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800565c:	2b00      	cmp	r3, #0
 800565e:	da0f      	bge.n	8005680 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	f003 020f 	and.w	r2, r3, #15
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	3338      	adds	r3, #56	; 0x38
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	705a      	strb	r2, [r3, #1]
 800567e:	e00f      	b.n	80056a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	f003 020f 	and.w	r2, r3, #15
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4413      	add	r3, r2
 8005696:	3304      	adds	r3, #4
 8005698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056ac:	883a      	ldrh	r2, [r7, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	78ba      	ldrb	r2, [r7, #2]
 80056b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056ca:	78bb      	ldrb	r3, [r7, #2]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d102      	bne.n	80056d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_PCD_EP_Open+0xaa>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e00e      	b.n	8005702 <HAL_PCD_EP_Open+0xc8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68f9      	ldr	r1, [r7, #12]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f005 fd5e 	bl	800b1b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005700:	7afb      	ldrb	r3, [r7, #11]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800571a:	2b00      	cmp	r3, #0
 800571c:	da0f      	bge.n	800573e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	f003 020f 	and.w	r2, r3, #15
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	3338      	adds	r3, #56	; 0x38
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	3304      	adds	r3, #4
 8005734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	705a      	strb	r2, [r3, #1]
 800573c:	e00f      	b.n	800575e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	f003 020f 	and.w	r2, r3, #15
 8005744:	4613      	mov	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	1a9b      	subs	r3, r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4413      	add	r3, r2
 8005754:	3304      	adds	r3, #4
 8005756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_PCD_EP_Close+0x6e>
 8005774:	2302      	movs	r3, #2
 8005776:	e00e      	b.n	8005796 <HAL_PCD_EP_Close+0x8c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68f9      	ldr	r1, [r7, #12]
 8005786:	4618      	mov	r0, r3
 8005788:	f005 fd9c 	bl	800b2c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	460b      	mov	r3, r1
 80057ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ae:	7afb      	ldrb	r3, [r7, #11]
 80057b0:	f003 020f 	and.w	r2, r3, #15
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	3304      	adds	r3, #4
 80057c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057e0:	7afb      	ldrb	r3, [r7, #11]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057ec:	7afb      	ldrb	r3, [r7, #11]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6979      	ldr	r1, [r7, #20]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f005 ffc1 	bl	800b784 <USB_EP0StartXfer>
 8005802:	e005      	b.n	8005810 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6979      	ldr	r1, [r7, #20]
 800580a:	4618      	mov	r0, r3
 800580c:	f005 fdde 	bl	800b3cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	f003 020f 	and.w	r2, r3, #15
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800583c:	681b      	ldr	r3, [r3, #0]
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	460b      	mov	r3, r1
 8005858:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800585a:	7afb      	ldrb	r3, [r7, #11]
 800585c:	f003 020f 	and.w	r2, r3, #15
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3338      	adds	r3, #56	; 0x38
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	3304      	adds	r3, #4
 8005870:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2201      	movs	r2, #1
 8005888:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800588a:	7afb      	ldrb	r3, [r7, #11]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	b2da      	uxtb	r2, r3
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005896:	7afb      	ldrb	r3, [r7, #11]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6979      	ldr	r1, [r7, #20]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f005 ff6c 	bl	800b784 <USB_EP0StartXfer>
 80058ac:	e005      	b.n	80058ba <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6979      	ldr	r1, [r7, #20]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f005 fd89 	bl	800b3cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	f003 020f 	and.w	r2, r3, #15
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d901      	bls.n	80058e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e04e      	b.n	8005980 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	da0f      	bge.n	800590a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	f003 020f 	and.w	r2, r3, #15
 80058f0:	4613      	mov	r3, r2
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	3338      	adds	r3, #56	; 0x38
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	3304      	adds	r3, #4
 8005900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	705a      	strb	r2, [r3, #1]
 8005908:	e00d      	b.n	8005926 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	3304      	adds	r3, #4
 800591e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_PCD_EP_SetStall+0x82>
 8005942:	2302      	movs	r3, #2
 8005944:	e01c      	b.n	8005980 <HAL_PCD_EP_SetStall+0xbc>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	4618      	mov	r0, r3
 8005956:	f006 f88d 	bl	800ba74 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	2b00      	cmp	r3, #0
 8005962:	d108      	bne.n	8005976 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f006 fa7f 	bl	800be74 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	f003 020f 	and.w	r2, r3, #15
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d901      	bls.n	80059a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e042      	b.n	8005a2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da0f      	bge.n	80059ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	f003 020f 	and.w	r2, r3, #15
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	3338      	adds	r3, #56	; 0x38
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	3304      	adds	r3, #4
 80059c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	705a      	strb	r2, [r3, #1]
 80059cc:	e00f      	b.n	80059ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	4613      	mov	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	4413      	add	r3, r2
 80059e4:	3304      	adds	r3, #4
 80059e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_PCD_EP_ClrStall+0x86>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e00e      	b.n	8005a2c <HAL_PCD_EP_ClrStall+0xa4>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f006 f897 	bl	800bb50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	3338      	adds	r3, #56	; 0x38
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	4413      	add	r3, r2
 8005a58:	3304      	adds	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d901      	bls.n	8005a6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e067      	b.n	8005b3c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d902      	bls.n	8005a88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	3303      	adds	r3, #3
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a90:	e026      	b.n	8005ae0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d902      	bls.n	8005aae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3303      	adds	r3, #3
 8005ab2:	089b      	lsrs	r3, r3, #2
 8005ab4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68d9      	ldr	r1, [r3, #12]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	6978      	ldr	r0, [r7, #20]
 8005ac4:	f005 ff7c 	bl	800b9c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	441a      	add	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	441a      	add	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d809      	bhi.n	8005b0a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d203      	bcs.n	8005b0a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1c3      	bne.n	8005a92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d811      	bhi.n	8005b3a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	6939      	ldr	r1, [r7, #16]
 8005b32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b36:	4013      	ands	r3, r2
 8005b38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	333c      	adds	r3, #60	; 0x3c
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <PCD_EP_OutXfrComplete_int+0x98>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d124      	bne.n	8005bc4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	6093      	str	r3, [r2, #8]
 8005b98:	e01a      	b.n	8005bd0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2320      	movs	r3, #32
 8005bb4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f007 ff73 	bl	800daa8 <HAL_PCD_DataOutStageCallback>
 8005bc2:	e005      	b.n	8005bd0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f007 ff6c 	bl	800daa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	4f54310a 	.word	0x4f54310a

08005be0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	333c      	adds	r3, #60	; 0x3c
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60bb      	str	r3, [r7, #8]


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <PCD_EP_OutSetupPacket_int+0x64>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10e      	bne.n	8005c34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f007 ff25 	bl	800da84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	4f54310a 	.word	0x4f54310a

08005c48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
 8005c54:	4613      	mov	r3, r2
 8005c56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d107      	bne.n	8005c76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c66:	883b      	ldrh	r3, [r7, #0]
 8005c68:	0419      	lsls	r1, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28
 8005c74:	e028      	b.n	8005cc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	4413      	add	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c84:	2300      	movs	r3, #0
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	e00d      	b.n	8005ca6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	3340      	adds	r3, #64	; 0x40
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
 8005ca6:	7bfa      	ldrb	r2, [r7, #15]
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d3ec      	bcc.n	8005c8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005cb0:	883b      	ldrh	r3, [r7, #0]
 8005cb2:	0418      	lsls	r0, r3, #16
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6819      	ldr	r1, [r3, #0]
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	4302      	orrs	r2, r0
 8005cc0:	3340      	adds	r3, #64	; 0x40
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2a:	f043 0303 	orr.w	r3, r3, #3
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a04      	ldr	r2, [pc, #16]	; (8005d5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4e:	6013      	str	r3, [r2, #0]
}
 8005d50:	bf00      	nop
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40007000 	.word	0x40007000

08005d60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d64:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40007000 	.word	0x40007000

08005d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d8a:	d130      	bne.n	8005dee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d8c:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d038      	beq.n	8005e0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005da2:	4a1e      	ldr	r2, [pc, #120]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005da8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005daa:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2232      	movs	r2, #50	; 0x32
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	4a1b      	ldr	r2, [pc, #108]	; (8005e24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	0c9b      	lsrs	r3, r3, #18
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dc0:	e002      	b.n	8005dc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dc8:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d102      	bne.n	8005ddc <HAL_PWREx_ControlVoltageScaling+0x60>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f2      	bne.n	8005dc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d110      	bne.n	8005e0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e00f      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dee:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dfa:	d007      	beq.n	8005e0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e04:	4a05      	ldr	r2, [pc, #20]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40007000 	.word	0x40007000
 8005e20:	20000000 	.word	0x20000000
 8005e24:	431bde83 	.word	0x431bde83

08005e28 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4a04      	ldr	r2, [pc, #16]	; (8005e44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e36:	6053      	str	r3, [r2, #4]
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40007000 	.word	0x40007000

08005e48 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a04      	ldr	r2, [pc, #16]	; (8005e64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e56:	6053      	str	r3, [r2, #4]
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40007000 	.word	0x40007000

08005e68 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005e70:	f7fc fb60 	bl	8002534 <HAL_GetTick>
 8005e74:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e075      	b.n	8005f6c <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_QSPI_Init+0x28>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e06d      	b.n	8005f6c <HAL_QSPI_Init+0x104>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7fb ffe1 	bl	8001e74 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005eb2:	f241 3188 	movw	r1, #5000	; 0x1388
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f85e 	bl	8005f78 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	021a      	lsls	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2120      	movs	r1, #32
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f856 	bl	8005f94 <QSPI_WaitFlagStateUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d137      	bne.n	8005f62 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005efc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6852      	ldr	r2, [r2, #4]
 8005f04:	0611      	lsls	r1, r2, #24
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	68d2      	ldr	r2, [r2, #12]
 8005f0a:	4311      	orrs	r1, r2
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	69d2      	ldr	r2, [r2, #28]
 8005f10:	4311      	orrs	r1, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6a12      	ldr	r2, [r2, #32]
 8005f16:	4311      	orrs	r1, r2
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <HAL_QSPI_Init+0x10c>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6912      	ldr	r2, [r2, #16]
 8005f2e:	0411      	lsls	r1, r2, #16
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6952      	ldr	r2, [r2, #20]
 8005f34:	4311      	orrs	r1, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6992      	ldr	r2, [r2, #24]
 8005f3a:	4311      	orrs	r1, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	ffe0f8fe 	.word	0xffe0f8fe

08005f78 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005fa4:	e01a      	b.n	8005fdc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fac:	d016      	beq.n	8005fdc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fc fac1 	bl	8002534 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd0:	f043 0201 	orr.w	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e00e      	b.n	8005ffa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bf14      	ite	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	2300      	moveq	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d1d6      	bne.n	8005fa6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e3db      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006016:	4ba4      	ldr	r3, [pc, #656]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006020:	4ba1      	ldr	r3, [pc, #644]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80e1 	beq.w	80061fa <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <HAL_RCC_OscConfig+0x4a>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b0c      	cmp	r3, #12
 8006042:	f040 8088 	bne.w	8006156 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b01      	cmp	r3, #1
 800604a:	f040 8084 	bne.w	8006156 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800604e:	4b96      	ldr	r3, [pc, #600]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <HAL_RCC_OscConfig+0x62>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e3b3      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	4b8f      	ldr	r3, [pc, #572]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <HAL_RCC_OscConfig+0x7c>
 8006076:	4b8c      	ldr	r3, [pc, #560]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800607e:	e005      	b.n	800608c <HAL_RCC_OscConfig+0x88>
 8006080:	4b89      	ldr	r3, [pc, #548]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006086:	091b      	lsrs	r3, r3, #4
 8006088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800608c:	4293      	cmp	r3, r2
 800608e:	d223      	bcs.n	80060d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fd47 	bl	8006b28 <RCC_SetFlashLatencyFromMSIRange>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e394      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060a4:	4b80      	ldr	r3, [pc, #512]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a7f      	ldr	r2, [pc, #508]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060aa:	f043 0308 	orr.w	r3, r3, #8
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	4b7d      	ldr	r3, [pc, #500]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	497a      	ldr	r1, [pc, #488]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060c2:	4b79      	ldr	r3, [pc, #484]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	4975      	ldr	r1, [pc, #468]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	604b      	str	r3, [r1, #4]
 80060d6:	e022      	b.n	800611e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060d8:	4b73      	ldr	r3, [pc, #460]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a72      	ldr	r2, [pc, #456]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060de:	f043 0308 	orr.w	r3, r3, #8
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b70      	ldr	r3, [pc, #448]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	496d      	ldr	r1, [pc, #436]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060f6:	4b6c      	ldr	r3, [pc, #432]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	4968      	ldr	r1, [pc, #416]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006106:	4313      	orrs	r3, r2
 8006108:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fd0a 	bl	8006b28 <RCC_SetFlashLatencyFromMSIRange>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e357      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800611e:	f000 fc41 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8006122:	4601      	mov	r1, r0
 8006124:	4b60      	ldr	r3, [pc, #384]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	4a5f      	ldr	r2, [pc, #380]	; (80062ac <HAL_RCC_OscConfig+0x2a8>)
 8006130:	5cd3      	ldrb	r3, [r2, r3]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	fa21 f303 	lsr.w	r3, r1, r3
 800613a:	4a5d      	ldr	r2, [pc, #372]	; (80062b0 <HAL_RCC_OscConfig+0x2ac>)
 800613c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800613e:	4b5d      	ldr	r3, [pc, #372]	; (80062b4 <HAL_RCC_OscConfig+0x2b0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fc f9aa 	bl	800249c <HAL_InitTick>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d052      	beq.n	80061f8 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	e33b      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d032      	beq.n	80061c4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800615e:	4b52      	ldr	r3, [pc, #328]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a51      	ldr	r2, [pc, #324]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800616a:	f7fc f9e3 	bl	8002534 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006172:	f7fc f9df 	bl	8002534 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e324      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006184:	4b48      	ldr	r3, [pc, #288]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006190:	4b45      	ldr	r3, [pc, #276]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a44      	ldr	r2, [pc, #272]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006196:	f043 0308 	orr.w	r3, r3, #8
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	4b42      	ldr	r3, [pc, #264]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	493f      	ldr	r1, [pc, #252]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ae:	4b3e      	ldr	r3, [pc, #248]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	493a      	ldr	r1, [pc, #232]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	604b      	str	r3, [r1, #4]
 80061c2:	e01a      	b.n	80061fa <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061c4:	4b38      	ldr	r3, [pc, #224]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a37      	ldr	r2, [pc, #220]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80061ca:	f023 0301 	bic.w	r3, r3, #1
 80061ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061d0:	f7fc f9b0 	bl	8002534 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061d8:	f7fc f9ac 	bl	8002534 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e2f1      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061ea:	4b2f      	ldr	r3, [pc, #188]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f0      	bne.n	80061d8 <HAL_RCC_OscConfig+0x1d4>
 80061f6:	e000      	b.n	80061fa <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d074      	beq.n	80062f0 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d005      	beq.n	8006218 <HAL_RCC_OscConfig+0x214>
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b0c      	cmp	r3, #12
 8006210:	d10e      	bne.n	8006230 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d10b      	bne.n	8006230 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006218:	4b23      	ldr	r3, [pc, #140]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d064      	beq.n	80062ee <HAL_RCC_OscConfig+0x2ea>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d160      	bne.n	80062ee <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e2ce      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d106      	bne.n	8006248 <HAL_RCC_OscConfig+0x244>
 800623a:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1a      	ldr	r2, [pc, #104]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e01d      	b.n	8006284 <HAL_RCC_OscConfig+0x280>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006250:	d10c      	bne.n	800626c <HAL_RCC_OscConfig+0x268>
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a14      	ldr	r2, [pc, #80]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a11      	ldr	r2, [pc, #68]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e00b      	b.n	8006284 <HAL_RCC_OscConfig+0x280>
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0d      	ldr	r2, [pc, #52]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 8006272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <HAL_RCC_OscConfig+0x2a4>)
 800627e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01c      	beq.n	80062c6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fc f952 	bl	8002534 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006292:	e011      	b.n	80062b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006294:	f7fc f94e 	bl	8002534 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	; 0x64
 80062a0:	d90a      	bls.n	80062b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e293      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
 80062a6:	bf00      	nop
 80062a8:	40021000 	.word	0x40021000
 80062ac:	0800e2e4 	.word	0x0800e2e4
 80062b0:	20000000 	.word	0x20000000
 80062b4:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062b8:	4bae      	ldr	r3, [pc, #696]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0e7      	beq.n	8006294 <HAL_RCC_OscConfig+0x290>
 80062c4:	e014      	b.n	80062f0 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fc f935 	bl	8002534 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ce:	f7fc f931 	bl	8002534 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b64      	cmp	r3, #100	; 0x64
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e276      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062e0:	4ba4      	ldr	r3, [pc, #656]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f0      	bne.n	80062ce <HAL_RCC_OscConfig+0x2ca>
 80062ec:	e000      	b.n	80062f0 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d060      	beq.n	80063be <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d005      	beq.n	800630e <HAL_RCC_OscConfig+0x30a>
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b0c      	cmp	r3, #12
 8006306:	d119      	bne.n	800633c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d116      	bne.n	800633c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800630e:	4b99      	ldr	r3, [pc, #612]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_RCC_OscConfig+0x322>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e253      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006326:	4b93      	ldr	r3, [pc, #588]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	061b      	lsls	r3, r3, #24
 8006334:	498f      	ldr	r1, [pc, #572]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006336:	4313      	orrs	r3, r2
 8006338:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800633a:	e040      	b.n	80063be <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d023      	beq.n	800638c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006344:	4b8b      	ldr	r3, [pc, #556]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a8a      	ldr	r2, [pc, #552]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 800634a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fc f8f0 	bl	8002534 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006358:	f7fc f8ec 	bl	8002534 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e231      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800636a:	4b82      	ldr	r3, [pc, #520]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006376:	4b7f      	ldr	r3, [pc, #508]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	061b      	lsls	r3, r3, #24
 8006384:	497b      	ldr	r1, [pc, #492]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006386:	4313      	orrs	r3, r2
 8006388:	604b      	str	r3, [r1, #4]
 800638a:	e018      	b.n	80063be <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800638c:	4b79      	ldr	r3, [pc, #484]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a78      	ldr	r2, [pc, #480]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006398:	f7fc f8cc 	bl	8002534 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a0:	f7fc f8c8 	bl	8002534 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e20d      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063b2:	4b70      	ldr	r3, [pc, #448]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d03c      	beq.n	8006444 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01c      	beq.n	800640c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063d2:	4b68      	ldr	r3, [pc, #416]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80063d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d8:	4a66      	ldr	r2, [pc, #408]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e2:	f7fc f8a7 	bl	8002534 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ea:	f7fc f8a3 	bl	8002534 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e1e8      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063fc:	4b5d      	ldr	r3, [pc, #372]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80063fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0ef      	beq.n	80063ea <HAL_RCC_OscConfig+0x3e6>
 800640a:	e01b      	b.n	8006444 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800640c:	4b59      	ldr	r3, [pc, #356]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 800640e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006412:	4a58      	ldr	r2, [pc, #352]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641c:	f7fc f88a 	bl	8002534 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006424:	f7fc f886 	bl	8002534 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e1cb      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006436:	4b4f      	ldr	r3, [pc, #316]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1ef      	bne.n	8006424 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80a5 	beq.w	800659c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006452:	2300      	movs	r3, #0
 8006454:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006456:	4b47      	ldr	r3, [pc, #284]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006462:	4b44      	ldr	r3, [pc, #272]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	4a43      	ldr	r2, [pc, #268]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800646c:	6593      	str	r3, [r2, #88]	; 0x58
 800646e:	4b41      	ldr	r3, [pc, #260]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800647a:	2301      	movs	r3, #1
 800647c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800647e:	4b3e      	ldr	r3, [pc, #248]	; (8006578 <HAL_RCC_OscConfig+0x574>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d118      	bne.n	80064bc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800648a:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <HAL_RCC_OscConfig+0x574>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a3a      	ldr	r2, [pc, #232]	; (8006578 <HAL_RCC_OscConfig+0x574>)
 8006490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006496:	f7fc f84d 	bl	8002534 <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800649e:	f7fc f849 	bl	8002534 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e18e      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064b0:	4b31      	ldr	r3, [pc, #196]	; (8006578 <HAL_RCC_OscConfig+0x574>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0f0      	beq.n	800649e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d108      	bne.n	80064d6 <HAL_RCC_OscConfig+0x4d2>
 80064c4:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	4a2a      	ldr	r2, [pc, #168]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80064cc:	f043 0301 	orr.w	r3, r3, #1
 80064d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064d4:	e024      	b.n	8006520 <HAL_RCC_OscConfig+0x51c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d110      	bne.n	8006500 <HAL_RCC_OscConfig+0x4fc>
 80064de:	4b25      	ldr	r3, [pc, #148]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e4:	4a23      	ldr	r2, [pc, #140]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80064e6:	f043 0304 	orr.w	r3, r3, #4
 80064ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064ee:	4b21      	ldr	r3, [pc, #132]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f4:	4a1f      	ldr	r2, [pc, #124]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064fe:	e00f      	b.n	8006520 <HAL_RCC_OscConfig+0x51c>
 8006500:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006510:	4b18      	ldr	r3, [pc, #96]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006516:	4a17      	ldr	r2, [pc, #92]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006518:	f023 0304 	bic.w	r3, r3, #4
 800651c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d016      	beq.n	8006556 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006528:	f7fc f804 	bl	8002534 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800652e:	e00a      	b.n	8006546 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006530:	f7fc f800 	bl	8002534 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f241 3288 	movw	r2, #5000	; 0x1388
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e143      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCC_OscConfig+0x570>)
 8006548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0ed      	beq.n	8006530 <HAL_RCC_OscConfig+0x52c>
 8006554:	e019      	b.n	800658a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006556:	f7fb ffed 	bl	8002534 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800655c:	e00e      	b.n	800657c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655e:	f7fb ffe9 	bl	8002534 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	f241 3288 	movw	r2, #5000	; 0x1388
 800656c:	4293      	cmp	r3, r2
 800656e:	d905      	bls.n	800657c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e12c      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
 8006574:	40021000 	.word	0x40021000
 8006578:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800657c:	4b96      	ldr	r3, [pc, #600]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 800657e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e9      	bne.n	800655e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800658a:	7ffb      	ldrb	r3, [r7, #31]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d105      	bne.n	800659c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006590:	4b91      	ldr	r3, [pc, #580]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006594:	4a90      	ldr	r2, [pc, #576]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800659a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d03c      	beq.n	8006622 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01c      	beq.n	80065ea <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065b0:	4b89      	ldr	r3, [pc, #548]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80065b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065b6:	4a88      	ldr	r2, [pc, #544]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c0:	f7fb ffb8 	bl	8002534 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065c8:	f7fb ffb4 	bl	8002534 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e0f9      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065da:	4b7f      	ldr	r3, [pc, #508]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80065dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0ef      	beq.n	80065c8 <HAL_RCC_OscConfig+0x5c4>
 80065e8:	e01b      	b.n	8006622 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065ea:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80065ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f0:	4a79      	ldr	r2, [pc, #484]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fa:	f7fb ff9b 	bl	8002534 <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006602:	f7fb ff97 	bl	8002534 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e0dc      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006614:	4b70      	ldr	r3, [pc, #448]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ef      	bne.n	8006602 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 80d0 	beq.w	80067cc <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b0c      	cmp	r3, #12
 8006630:	f000 808d 	beq.w	800674e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	2b02      	cmp	r3, #2
 800663a:	d15a      	bne.n	80066f2 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663c:	4b66      	ldr	r3, [pc, #408]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a65      	ldr	r2, [pc, #404]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fb ff74 	bl	8002534 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006650:	f7fb ff70 	bl	8002534 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e0b5      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006662:	4b5d      	ldr	r3, [pc, #372]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800666e:	4b5a      	ldr	r3, [pc, #360]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	4b5a      	ldr	r3, [pc, #360]	; (80067dc <HAL_RCC_OscConfig+0x7d8>)
 8006674:	4013      	ands	r3, r2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800667e:	3a01      	subs	r2, #1
 8006680:	0112      	lsls	r2, r2, #4
 8006682:	4311      	orrs	r1, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006688:	0212      	lsls	r2, r2, #8
 800668a:	4311      	orrs	r1, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006690:	0852      	lsrs	r2, r2, #1
 8006692:	3a01      	subs	r2, #1
 8006694:	0552      	lsls	r2, r2, #21
 8006696:	4311      	orrs	r1, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800669c:	0852      	lsrs	r2, r2, #1
 800669e:	3a01      	subs	r2, #1
 80066a0:	0652      	lsls	r2, r2, #25
 80066a2:	4311      	orrs	r1, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066a8:	06d2      	lsls	r2, r2, #27
 80066aa:	430a      	orrs	r2, r1
 80066ac:	494a      	ldr	r1, [pc, #296]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066b2:	4b49      	ldr	r3, [pc, #292]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a48      	ldr	r2, [pc, #288]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80066b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066bc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066be:	4b46      	ldr	r3, [pc, #280]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	4a45      	ldr	r2, [pc, #276]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80066c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ca:	f7fb ff33 	bl	8002534 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d2:	f7fb ff2f 	bl	8002534 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e074      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066e4:	4b3c      	ldr	r3, [pc, #240]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <HAL_RCC_OscConfig+0x6ce>
 80066f0:	e06c      	b.n	80067cc <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f2:	4b39      	ldr	r3, [pc, #228]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a38      	ldr	r2, [pc, #224]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 80066f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80066fe:	4b36      	ldr	r3, [pc, #216]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800670a:	4b33      	ldr	r3, [pc, #204]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	4a32      	ldr	r2, [pc, #200]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006710:	f023 0303 	bic.w	r3, r3, #3
 8006714:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006716:	4b30      	ldr	r3, [pc, #192]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	4a2f      	ldr	r2, [pc, #188]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 800671c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006724:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006726:	f7fb ff05 	bl	8002534 <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672e:	f7fb ff01 	bl	8002534 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e046      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006740:	4b25      	ldr	r3, [pc, #148]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f0      	bne.n	800672e <HAL_RCC_OscConfig+0x72a>
 800674c:	e03e      	b.n	80067cc <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e039      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800675a:	4b1f      	ldr	r3, [pc, #124]	; (80067d8 <HAL_RCC_OscConfig+0x7d4>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f003 0203 	and.w	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	429a      	cmp	r2, r3
 800676c:	d12c      	bne.n	80067c8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	3b01      	subs	r3, #1
 800677a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800677c:	429a      	cmp	r2, r3
 800677e:	d123      	bne.n	80067c8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800678c:	429a      	cmp	r2, r3
 800678e:	d11b      	bne.n	80067c8 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800679c:	429a      	cmp	r2, r3
 800679e:	d113      	bne.n	80067c8 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	3b01      	subs	r3, #1
 80067ae:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d109      	bne.n	80067c8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	3b01      	subs	r3, #1
 80067c2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d001      	beq.n	80067cc <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40021000 	.word	0x40021000
 80067dc:	019d808c 	.word	0x019d808c

080067e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e0c8      	b.n	8006986 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067f4:	4b66      	ldr	r3, [pc, #408]	; (8006990 <HAL_RCC_ClockConfig+0x1b0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d910      	bls.n	8006824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006802:	4b63      	ldr	r3, [pc, #396]	; (8006990 <HAL_RCC_ClockConfig+0x1b0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f023 0207 	bic.w	r2, r3, #7
 800680a:	4961      	ldr	r1, [pc, #388]	; (8006990 <HAL_RCC_ClockConfig+0x1b0>)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006812:	4b5f      	ldr	r3, [pc, #380]	; (8006990 <HAL_RCC_ClockConfig+0x1b0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e0b0      	b.n	8006986 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d04c      	beq.n	80068ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b03      	cmp	r3, #3
 8006836:	d107      	bne.n	8006848 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006838:	4b56      	ldr	r3, [pc, #344]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d121      	bne.n	8006888 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e09e      	b.n	8006986 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b02      	cmp	r3, #2
 800684e:	d107      	bne.n	8006860 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006850:	4b50      	ldr	r3, [pc, #320]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d115      	bne.n	8006888 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e092      	b.n	8006986 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d107      	bne.n	8006878 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006868:	4b4a      	ldr	r3, [pc, #296]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e086      	b.n	8006986 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006878:	4b46      	ldr	r3, [pc, #280]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e07e      	b.n	8006986 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006888:	4b42      	ldr	r3, [pc, #264]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f023 0203 	bic.w	r2, r3, #3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	493f      	ldr	r1, [pc, #252]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689a:	f7fb fe4b 	bl	8002534 <HAL_GetTick>
 800689e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a0:	e00a      	b.n	80068b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a2:	f7fb fe47 	bl	8002534 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e066      	b.n	8006986 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b8:	4b36      	ldr	r3, [pc, #216]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 020c 	and.w	r2, r3, #12
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d1eb      	bne.n	80068a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d6:	4b2f      	ldr	r3, [pc, #188]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	492c      	ldr	r1, [pc, #176]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068e8:	4b29      	ldr	r3, [pc, #164]	; (8006990 <HAL_RCC_ClockConfig+0x1b0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d210      	bcs.n	8006918 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b26      	ldr	r3, [pc, #152]	; (8006990 <HAL_RCC_ClockConfig+0x1b0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 0207 	bic.w	r2, r3, #7
 80068fe:	4924      	ldr	r1, [pc, #144]	; (8006990 <HAL_RCC_ClockConfig+0x1b0>)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006906:	4b22      	ldr	r3, [pc, #136]	; (8006990 <HAL_RCC_ClockConfig+0x1b0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d001      	beq.n	8006918 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e036      	b.n	8006986 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006924:	4b1b      	ldr	r3, [pc, #108]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	4918      	ldr	r1, [pc, #96]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 8006932:	4313      	orrs	r3, r2
 8006934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d009      	beq.n	8006956 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006942:	4b14      	ldr	r3, [pc, #80]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4910      	ldr	r1, [pc, #64]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 8006952:	4313      	orrs	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006956:	f000 f825 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 800695a:	4601      	mov	r1, r0
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <HAL_RCC_ClockConfig+0x1b4>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	091b      	lsrs	r3, r3, #4
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	4a0c      	ldr	r2, [pc, #48]	; (8006998 <HAL_RCC_ClockConfig+0x1b8>)
 8006968:	5cd3      	ldrb	r3, [r2, r3]
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	fa21 f303 	lsr.w	r3, r1, r3
 8006972:	4a0a      	ldr	r2, [pc, #40]	; (800699c <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7fb fd8e 	bl	800249c <HAL_InitTick>
 8006980:	4603      	mov	r3, r0
 8006982:	72fb      	strb	r3, [r7, #11]

  return status;
 8006984:	7afb      	ldrb	r3, [r7, #11]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40022000 	.word	0x40022000
 8006994:	40021000 	.word	0x40021000
 8006998:	0800e2e4 	.word	0x0800e2e4
 800699c:	20000000 	.word	0x20000000
 80069a0:	20000004 	.word	0x20000004

080069a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b089      	sub	sp, #36	; 0x24
 80069a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	2300      	movs	r3, #0
 80069b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069b2:	4b3d      	ldr	r3, [pc, #244]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
 80069ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069bc:	4b3a      	ldr	r3, [pc, #232]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0x34>
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d121      	bne.n	8006a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d11e      	bne.n	8006a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80069d8:	4b33      	ldr	r3, [pc, #204]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d107      	bne.n	80069f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80069e4:	4b30      	ldr	r3, [pc, #192]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 80069e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	e005      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069f4:	4b2c      	ldr	r3, [pc, #176]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a00:	4a2a      	ldr	r2, [pc, #168]	; (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10d      	bne.n	8006a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d102      	bne.n	8006a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a1c:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e004      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a28:	4b22      	ldr	r3, [pc, #136]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b0c      	cmp	r3, #12
 8006a30:	d133      	bne.n	8006a9a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d002      	beq.n	8006a48 <HAL_RCC_GetSysClockFreq+0xa4>
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d003      	beq.n	8006a4e <HAL_RCC_GetSysClockFreq+0xaa>
 8006a46:	e005      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006a48:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a4a:	617b      	str	r3, [r7, #20]
      break;
 8006a4c:	e005      	b.n	8006a5a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a4e:	4b19      	ldr	r3, [pc, #100]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a50:	617b      	str	r3, [r7, #20]
      break;
 8006a52:	e002      	b.n	8006a5a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	617b      	str	r3, [r7, #20]
      break;
 8006a58:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	091b      	lsrs	r3, r3, #4
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	3301      	adds	r3, #1
 8006a66:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	0a1b      	lsrs	r3, r3, #8
 8006a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	fb02 f203 	mul.w	r2, r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a80:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	0e5b      	lsrs	r3, r3, #25
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a98:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3724      	adds	r7, #36	; 0x24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	0800e2fc 	.word	0x0800e2fc
 8006ab0:	00f42400 	.word	0x00f42400
 8006ab4:	007a1200 	.word	0x007a1200

08006ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006abc:	4b03      	ldr	r3, [pc, #12]	; (8006acc <HAL_RCC_GetHCLKFreq+0x14>)
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000000 	.word	0x20000000

08006ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ad4:	f7ff fff0 	bl	8006ab8 <HAL_RCC_GetHCLKFreq>
 8006ad8:	4601      	mov	r1, r0
 8006ada:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ae6:	5cd3      	ldrb	r3, [r2, r3]
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40021000 	.word	0x40021000
 8006af8:	0800e2f4 	.word	0x0800e2f4

08006afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b00:	f7ff ffda 	bl	8006ab8 <HAL_RCC_GetHCLKFreq>
 8006b04:	4601      	mov	r1, r0
 8006b06:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	0adb      	lsrs	r3, r3, #11
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	4a04      	ldr	r2, [pc, #16]	; (8006b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b12:	5cd3      	ldrb	r3, [r2, r3]
 8006b14:	f003 031f 	and.w	r3, r3, #31
 8006b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40021000 	.word	0x40021000
 8006b24:	0800e2f4 	.word	0x0800e2f4

08006b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b34:	4b2a      	ldr	r3, [pc, #168]	; (8006be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b40:	f7ff f90e 	bl	8005d60 <HAL_PWREx_GetVoltageRange>
 8006b44:	6178      	str	r0, [r7, #20]
 8006b46:	e014      	b.n	8006b72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b48:	4b25      	ldr	r3, [pc, #148]	; (8006be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4c:	4a24      	ldr	r2, [pc, #144]	; (8006be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b52:	6593      	str	r3, [r2, #88]	; 0x58
 8006b54:	4b22      	ldr	r3, [pc, #136]	; (8006be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b60:	f7ff f8fe 	bl	8005d60 <HAL_PWREx_GetVoltageRange>
 8006b64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b66:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6a:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b78:	d10b      	bne.n	8006b92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d919      	bls.n	8006bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2ba0      	cmp	r3, #160	; 0xa0
 8006b84:	d902      	bls.n	8006b8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b86:	2302      	movs	r3, #2
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	e013      	b.n	8006bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	e010      	b.n	8006bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b80      	cmp	r3, #128	; 0x80
 8006b96:	d902      	bls.n	8006b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b98:	2303      	movs	r3, #3
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	e00a      	b.n	8006bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b80      	cmp	r3, #128	; 0x80
 8006ba2:	d102      	bne.n	8006baa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	e004      	b.n	8006bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b70      	cmp	r3, #112	; 0x70
 8006bae:	d101      	bne.n	8006bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f023 0207 	bic.w	r2, r3, #7
 8006bbc:	4909      	ldr	r1, [pc, #36]	; (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006bc4:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d001      	beq.n	8006bd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40022000 	.word	0x40022000

08006be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d03f      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c0c:	d01c      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c12:	d802      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00e      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006c18:	e01f      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c1e:	d003      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006c20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c24:	d01c      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006c26:	e018      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c28:	4b85      	ldr	r3, [pc, #532]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4a84      	ldr	r2, [pc, #528]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c34:	e015      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 ff91 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c46:	e00c      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3320      	adds	r3, #32
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f878 	bl	8007d44 <RCCEx_PLLSAI2_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c58:	e003      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	74fb      	strb	r3, [r7, #19]
      break;
 8006c5e:	e000      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c62:	7cfb      	ldrb	r3, [r7, #19]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c68:	4b75      	ldr	r3, [pc, #468]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c76:	4972      	ldr	r1, [pc, #456]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c7e:	e001      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	7cfb      	ldrb	r3, [r7, #19]
 8006c82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d03f      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c98:	d01c      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006c9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c9e:	d802      	bhi.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006ca4:	e01f      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006caa:	d003      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006cac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cb0:	d01c      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006cb2:	e018      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006cb4:	4b62      	ldr	r3, [pc, #392]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	4a61      	ldr	r2, [pc, #388]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006cc0:	e015      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 ff4b 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006cd2:	e00c      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3320      	adds	r3, #32
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 f832 	bl	8007d44 <RCCEx_PLLSAI2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ce4:	e003      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	74fb      	strb	r3, [r7, #19]
      break;
 8006cea:	e000      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cee:	7cfb      	ldrb	r3, [r7, #19]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10b      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cf4:	4b52      	ldr	r3, [pc, #328]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d02:	494f      	ldr	r1, [pc, #316]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006d0a:	e001      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0c:	7cfb      	ldrb	r3, [r7, #19]
 8006d0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80a0 	beq.w	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d22:	4b47      	ldr	r3, [pc, #284]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d38:	4b41      	ldr	r3, [pc, #260]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3c:	4a40      	ldr	r2, [pc, #256]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d42:	6593      	str	r3, [r2, #88]	; 0x58
 8006d44:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d50:	2301      	movs	r3, #1
 8006d52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d54:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a3a      	ldr	r2, [pc, #232]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d60:	f7fb fbe8 	bl	8002534 <HAL_GetTick>
 8006d64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d66:	e009      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d68:	f7fb fbe4 	bl	8002534 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d902      	bls.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	74fb      	strb	r3, [r7, #19]
        break;
 8006d7a:	e005      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d7c:	4b31      	ldr	r3, [pc, #196]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0ef      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006d88:	7cfb      	ldrb	r3, [r7, #19]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d15c      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d8e:	4b2c      	ldr	r3, [pc, #176]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01f      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d019      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006dac:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006db8:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	4a20      	ldr	r2, [pc, #128]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dce:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dd8:	4a19      	ldr	r2, [pc, #100]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dea:	f7fb fba3 	bl	8002534 <HAL_GetTick>
 8006dee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006df0:	e00b      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df2:	f7fb fb9f 	bl	8002534 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d902      	bls.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	74fb      	strb	r3, [r7, #19]
            break;
 8006e08:	e006      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ec      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006e18:	7cfb      	ldrb	r3, [r7, #19]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e1e:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2e:	4904      	ldr	r1, [pc, #16]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006e36:	e009      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e38:	7cfb      	ldrb	r3, [r7, #19]
 8006e3a:	74bb      	strb	r3, [r7, #18]
 8006e3c:	e006      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006e3e:	bf00      	nop
 8006e40:	40021000 	.word	0x40021000
 8006e44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e48:	7cfb      	ldrb	r3, [r7, #19]
 8006e4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e4c:	7c7b      	ldrb	r3, [r7, #17]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d105      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e52:	4ba6      	ldr	r3, [pc, #664]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e56:	4aa5      	ldr	r2, [pc, #660]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e6a:	4ba0      	ldr	r3, [pc, #640]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e70:	f023 0203 	bic.w	r2, r3, #3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	499c      	ldr	r1, [pc, #624]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e8c:	4b97      	ldr	r3, [pc, #604]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e92:	f023 020c 	bic.w	r2, r3, #12
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9a:	4994      	ldr	r1, [pc, #592]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006eae:	4b8f      	ldr	r3, [pc, #572]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	498b      	ldr	r1, [pc, #556]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ed0:	4b86      	ldr	r3, [pc, #536]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ede:	4983      	ldr	r1, [pc, #524]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ef2:	4b7e      	ldr	r3, [pc, #504]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f00:	497a      	ldr	r1, [pc, #488]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f14:	4b75      	ldr	r3, [pc, #468]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f22:	4972      	ldr	r1, [pc, #456]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f36:	4b6d      	ldr	r3, [pc, #436]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f44:	4969      	ldr	r1, [pc, #420]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f58:	4b64      	ldr	r3, [pc, #400]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f66:	4961      	ldr	r1, [pc, #388]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f7a:	4b5c      	ldr	r3, [pc, #368]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f88:	4958      	ldr	r1, [pc, #352]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f9c:	4b53      	ldr	r3, [pc, #332]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	4950      	ldr	r1, [pc, #320]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fbe:	4b4b      	ldr	r3, [pc, #300]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fcc:	4947      	ldr	r1, [pc, #284]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fe0:	4b42      	ldr	r3, [pc, #264]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fe6:	f023 0203 	bic.w	r2, r3, #3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fee:	493f      	ldr	r1, [pc, #252]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d028      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007002:	4b3a      	ldr	r3, [pc, #232]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007008:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007010:	4936      	ldr	r1, [pc, #216]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007012:	4313      	orrs	r3, r2
 8007014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007020:	d106      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007022:	4b32      	ldr	r3, [pc, #200]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	4a31      	ldr	r2, [pc, #196]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800702c:	60d3      	str	r3, [r2, #12]
 800702e:	e011      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007038:	d10c      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3304      	adds	r3, #4
 800703e:	2101      	movs	r1, #1
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fd8f 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 8007046:	4603      	mov	r3, r0
 8007048:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800704a:	7cfb      	ldrb	r3, [r7, #19]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8007050:	7cfb      	ldrb	r3, [r7, #19]
 8007052:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d028      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007060:	4b22      	ldr	r3, [pc, #136]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706e:	491f      	ldr	r1, [pc, #124]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800707e:	d106      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007080:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4a19      	ldr	r2, [pc, #100]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800708a:	60d3      	str	r3, [r2, #12]
 800708c:	e011      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007096:	d10c      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	2101      	movs	r1, #1
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fd60 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070a8:	7cfb      	ldrb	r3, [r7, #19]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80070ae:	7cfb      	ldrb	r3, [r7, #19]
 80070b0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d02a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070be:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070cc:	4907      	ldr	r1, [pc, #28]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070dc:	d108      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070de:	4b03      	ldr	r3, [pc, #12]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	4a02      	ldr	r2, [pc, #8]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070e8:	60d3      	str	r3, [r2, #12]
 80070ea:	e013      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80070ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070f8:	d10c      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3304      	adds	r3, #4
 80070fe:	2101      	movs	r1, #1
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fd2f 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800710a:	7cfb      	ldrb	r3, [r7, #19]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8007110:	7cfb      	ldrb	r3, [r7, #19]
 8007112:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d02f      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007120:	4b2c      	ldr	r3, [pc, #176]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007126:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712e:	4929      	ldr	r1, [pc, #164]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800713e:	d10d      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	2102      	movs	r1, #2
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fd0c 	bl	8007b64 <RCCEx_PLLSAI1_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007150:	7cfb      	ldrb	r3, [r7, #19]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d014      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8007156:	7cfb      	ldrb	r3, [r7, #19]
 8007158:	74bb      	strb	r3, [r7, #18]
 800715a:	e011      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007164:	d10c      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3320      	adds	r3, #32
 800716a:	2102      	movs	r1, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fde9 	bl	8007d44 <RCCEx_PLLSAI2_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007176:	7cfb      	ldrb	r3, [r7, #19]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800717c:	7cfb      	ldrb	r3, [r7, #19]
 800717e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800718c:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800718e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007192:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800719c:	490d      	ldr	r1, [pc, #52]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071b0:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80071b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c0:	4904      	ldr	r1, [pc, #16]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80071c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40021000 	.word	0x40021000

080071d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ea:	d137      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80071ec:	4ba8      	ldr	r3, [pc, #672]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fe:	d014      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007204:	d01e      	beq.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	d001      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800720c:	f000 bc90 	b.w	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007210:	4b9f      	ldr	r3, [pc, #636]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b02      	cmp	r3, #2
 800721c:	f040 8483 	bne.w	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
        frequency = LSE_VALUE;
 8007220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007224:	61fb      	str	r3, [r7, #28]
      break;
 8007226:	f000 bc7e 	b.w	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800722a:	4b99      	ldr	r3, [pc, #612]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800722c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	f040 8478 	bne.w	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
          frequency = LSI_VALUE;
 800723a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800723e:	61fb      	str	r3, [r7, #28]
      break;
 8007240:	f000 bc73 	b.w	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007244:	4b92      	ldr	r3, [pc, #584]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007250:	f040 846d 	bne.w	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        frequency = HSE_VALUE / 32U;
 8007254:	4b8f      	ldr	r3, [pc, #572]	; (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007256:	61fb      	str	r3, [r7, #28]
      break;
 8007258:	f000 bc69 	b.w	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800725c:	4b8c      	ldr	r3, [pc, #560]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0303 	and.w	r3, r3, #3
 8007264:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d023      	beq.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800726c:	2b03      	cmp	r3, #3
 800726e:	d02e      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007270:	2b01      	cmp	r3, #1
 8007272:	d139      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007274:	4b86      	ldr	r3, [pc, #536]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b02      	cmp	r3, #2
 800727e:	d116      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007280:	4b83      	ldr	r3, [pc, #524]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800728c:	4b80      	ldr	r3, [pc, #512]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	091b      	lsrs	r3, r3, #4
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	e005      	b.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007298:	4b7d      	ldr	r3, [pc, #500]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800729a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800729e:	0a1b      	lsrs	r3, r3, #8
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	4a7c      	ldr	r2, [pc, #496]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80072ac:	e01f      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
      break;
 80072b2:	e01c      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072b4:	4b76      	ldr	r3, [pc, #472]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c0:	d102      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 80072c2:	4b76      	ldr	r3, [pc, #472]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80072c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80072c6:	e012      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
      break;
 80072cc:	e00f      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072ce:	4b70      	ldr	r3, [pc, #448]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072da:	d102      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 80072dc:	4b70      	ldr	r3, [pc, #448]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80072de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80072e0:	e005      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61bb      	str	r3, [r7, #24]
      break;
 80072e6:	e002      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61bb      	str	r3, [r7, #24]
      break;
 80072ec:	bf00      	nop
    }

    switch(PeriphClk)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f4:	f000 8374 	beq.w	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80072f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072fc:	d827      	bhi.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80072fe:	2b10      	cmp	r3, #16
 8007300:	f000 81f9 	beq.w	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007304:	2b10      	cmp	r3, #16
 8007306:	d811      	bhi.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007308:	2b02      	cmp	r3, #2
 800730a:	f000 8142 	beq.w	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800730e:	2b02      	cmp	r3, #2
 8007310:	d804      	bhi.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007312:	2b01      	cmp	r3, #1
 8007314:	f000 8105 	beq.w	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007318:	f000 bc0a 	b.w	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800731c:	2b04      	cmp	r3, #4
 800731e:	f000 8182 	beq.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007322:	2b08      	cmp	r3, #8
 8007324:	f000 81b3 	beq.w	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
      break;
 8007328:	f000 bc02 	b.w	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	f000 82cd 	beq.w	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d803      	bhi.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007336:	2b20      	cmp	r3, #32
 8007338:	f000 821c 	beq.w	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
      break;
 800733c:	e3f8      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800733e:	2b80      	cmp	r3, #128	; 0x80
 8007340:	f000 82e7 	beq.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007348:	f000 8306 	beq.w	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
      break;
 800734c:	e3f0      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800734e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007352:	f000 8247 	beq.w	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800735a:	d811      	bhi.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800735c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007360:	d025      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8007362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007366:	d804      	bhi.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	f000 837e 	beq.w	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8007370:	e3de      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 8007372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007376:	d021      	beq.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 8007378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737c:	d025      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
      break;
 800737e:	e3d7      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 8007380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007384:	d021      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8007386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800738a:	d808      	bhi.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800738c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007390:	f000 83ad 	beq.w	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8007394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007398:	f000 8287 	beq.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
      break;
 800739c:	e3c8      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800739e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073a2:	d012      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 80073a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073a8:	f000 82f9 	beq.w	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      break;
 80073ac:	e3c0      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80073ae:	69b9      	ldr	r1, [r7, #24]
 80073b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80073b4:	f000 fda0 	bl	8007ef8 <RCCEx_GetSAIxPeriphCLKFreq>
 80073b8:	61f8      	str	r0, [r7, #28]
      break;
 80073ba:	e3b9      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80073bc:	69b9      	ldr	r1, [r7, #24]
 80073be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80073c2:	f000 fd99 	bl	8007ef8 <RCCEx_GetSAIxPeriphCLKFreq>
 80073c6:	61f8      	str	r0, [r7, #28]
      break;
 80073c8:	e3b2      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80073ca:	4b31      	ldr	r3, [pc, #196]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80073d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073dc:	d062      	beq.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80073de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073e2:	d803      	bhi.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 808a 	beq.w	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x326>
          break;
 80073ea:	e099      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        switch(srcclk)
 80073ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f0:	d021      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80073f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073f6:	d000      	beq.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          break;
 80073f8:	e092      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80073fa:	4b25      	ldr	r3, [pc, #148]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b02      	cmp	r3, #2
 8007404:	f040 8085 	bne.w	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007408:	4b21      	ldr	r3, [pc, #132]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007414:	4b1e      	ldr	r3, [pc, #120]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	091b      	lsrs	r3, r3, #4
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	e005      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007420:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007426:	0a1b      	lsrs	r3, r3, #8
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800742e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007432:	61fb      	str	r3, [r7, #28]
          break;
 8007434:	e06d      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007436:	4b16      	ldr	r3, [pc, #88]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007442:	d168      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007444:	4b12      	ldr	r3, [pc, #72]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007450:	d161      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800745c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	fb02 f203 	mul.w	r2, r2, r3
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	091b      	lsrs	r3, r3, #4
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	3301      	adds	r3, #1
 8007472:	fbb2 f3f3 	udiv	r3, r2, r3
 8007476:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	0d5b      	lsrs	r3, r3, #21
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	3301      	adds	r3, #1
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	fbb2 f3f3 	udiv	r3, r2, r3
 800748c:	61fb      	str	r3, [r7, #28]
          break;
 800748e:	e042      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
 8007490:	40021000 	.word	0x40021000
 8007494:	0003d090 	.word	0x0003d090
 8007498:	0800e2fc 	.word	0x0800e2fc
 800749c:	00f42400 	.word	0x00f42400
 80074a0:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80074a4:	4bb0      	ldr	r3, [pc, #704]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074b0:	d133      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80074b2:	4bad      	ldr	r3, [pc, #692]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074be:	d12c      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80074c0:	4ba9      	ldr	r3, [pc, #676]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	0a1b      	lsrs	r3, r3, #8
 80074c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ca:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	fb02 f203 	mul.w	r2, r2, r3
 80074d4:	4ba4      	ldr	r3, [pc, #656]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	3301      	adds	r3, #1
 80074e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80074e6:	4ba0      	ldr	r3, [pc, #640]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	0d5b      	lsrs	r3, r3, #21
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	3301      	adds	r3, #1
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fa:	61fb      	str	r3, [r7, #28]
          break;
 80074fc:	e00d      	b.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80074fe:	4b9a      	ldr	r3, [pc, #616]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b02      	cmp	r3, #2
 800750a:	d108      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            frequency = HSI48_VALUE;
 800750c:	4b97      	ldr	r3, [pc, #604]	; (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800750e:	61fb      	str	r3, [r7, #28]
          break;
 8007510:	e005      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          break;
 8007512:	bf00      	nop
 8007514:	e30c      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8007516:	bf00      	nop
 8007518:	e30a      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800751a:	bf00      	nop
 800751c:	e308      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800751e:	bf00      	nop
        break;
 8007520:	e306      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007522:	4b91      	ldr	r3, [pc, #580]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007528:	f003 0303 	and.w	r3, r3, #3
 800752c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d828      	bhi.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	0800754d 	.word	0x0800754d
 8007540:	08007555 	.word	0x08007555
 8007544:	0800755d 	.word	0x0800755d
 8007548:	08007571 	.word	0x08007571
          frequency = HAL_RCC_GetPCLK2Freq();
 800754c:	f7ff fad6 	bl	8006afc <HAL_RCC_GetPCLK2Freq>
 8007550:	61f8      	str	r0, [r7, #28]
          break;
 8007552:	e01d      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetSysClockFreq();
 8007554:	f7ff fa26 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8007558:	61f8      	str	r0, [r7, #28]
          break;
 800755a:	e019      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800755c:	4b82      	ldr	r3, [pc, #520]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007568:	d10f      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
            frequency = HSI_VALUE;
 800756a:	4b81      	ldr	r3, [pc, #516]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800756c:	61fb      	str	r3, [r7, #28]
          break;
 800756e:	e00c      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007570:	4b7d      	ldr	r3, [pc, #500]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b02      	cmp	r3, #2
 800757c:	d107      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = LSE_VALUE;
 800757e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007582:	61fb      	str	r3, [r7, #28]
          break;
 8007584:	e003      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          break;
 8007586:	bf00      	nop
 8007588:	e2d2      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800758a:	bf00      	nop
 800758c:	e2d0      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800758e:	bf00      	nop
        break;
 8007590:	e2ce      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007592:	4b75      	ldr	r3, [pc, #468]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007598:	f003 030c 	and.w	r3, r3, #12
 800759c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b0c      	cmp	r3, #12
 80075a2:	d83a      	bhi.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80075a4:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	080075e1 	.word	0x080075e1
 80075b0:	0800761b 	.word	0x0800761b
 80075b4:	0800761b 	.word	0x0800761b
 80075b8:	0800761b 	.word	0x0800761b
 80075bc:	080075e9 	.word	0x080075e9
 80075c0:	0800761b 	.word	0x0800761b
 80075c4:	0800761b 	.word	0x0800761b
 80075c8:	0800761b 	.word	0x0800761b
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	0800761b 	.word	0x0800761b
 80075d4:	0800761b 	.word	0x0800761b
 80075d8:	0800761b 	.word	0x0800761b
 80075dc:	08007605 	.word	0x08007605
          frequency = HAL_RCC_GetPCLK1Freq();
 80075e0:	f7ff fa76 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 80075e4:	61f8      	str	r0, [r7, #28]
          break;
 80075e6:	e01d      	b.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          frequency = HAL_RCC_GetSysClockFreq();
 80075e8:	f7ff f9dc 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 80075ec:	61f8      	str	r0, [r7, #28]
          break;
 80075ee:	e019      	b.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075f0:	4b5d      	ldr	r3, [pc, #372]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075fc:	d10f      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HSI_VALUE;
 80075fe:	4b5c      	ldr	r3, [pc, #368]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007600:	61fb      	str	r3, [r7, #28]
          break;
 8007602:	e00c      	b.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007604:	4b58      	ldr	r3, [pc, #352]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b02      	cmp	r3, #2
 8007610:	d107      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = LSE_VALUE;
 8007612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007616:	61fb      	str	r3, [r7, #28]
          break;
 8007618:	e003      	b.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          break;
 800761a:	bf00      	nop
 800761c:	e288      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800761e:	bf00      	nop
 8007620:	e286      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8007622:	bf00      	nop
        break;
 8007624:	e284      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007626:	4b50      	ldr	r3, [pc, #320]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007630:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b10      	cmp	r3, #16
 8007636:	d00d      	beq.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8007638:	2b10      	cmp	r3, #16
 800763a:	d802      	bhi.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          break;
 8007640:	e024      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        switch(srcclk)
 8007642:	2b20      	cmp	r3, #32
 8007644:	d00a      	beq.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007646:	2b30      	cmp	r3, #48	; 0x30
 8007648:	d012      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
          break;
 800764a:	e01f      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800764c:	f7ff fa40 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8007650:	61f8      	str	r0, [r7, #28]
          break;
 8007652:	e01b      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          frequency = HAL_RCC_GetSysClockFreq();
 8007654:	f7ff f9a6 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8007658:	61f8      	str	r0, [r7, #28]
          break;
 800765a:	e017      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800765c:	4b42      	ldr	r3, [pc, #264]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007668:	d10d      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
            frequency = HSI_VALUE;
 800766a:	4b41      	ldr	r3, [pc, #260]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800766c:	61fb      	str	r3, [r7, #28]
          break;
 800766e:	e00a      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007670:	4b3d      	ldr	r3, [pc, #244]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b02      	cmp	r3, #2
 800767c:	d105      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = LSE_VALUE;
 800767e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007682:	61fb      	str	r3, [r7, #28]
          break;
 8007684:	e001      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          break;
 8007686:	bf00      	nop
 8007688:	e252      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800768a:	bf00      	nop
        break;
 800768c:	e250      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800768e:	4b36      	ldr	r3, [pc, #216]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007694:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007698:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b40      	cmp	r3, #64	; 0x40
 800769e:	d00d      	beq.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	d802      	bhi.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
          break;
 80076a8:	e024      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        switch(srcclk)
 80076aa:	2b80      	cmp	r3, #128	; 0x80
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80076ae:	2bc0      	cmp	r3, #192	; 0xc0
 80076b0:	d012      	beq.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          break;
 80076b2:	e01f      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80076b4:	f7ff fa0c 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 80076b8:	61f8      	str	r0, [r7, #28]
          break;
 80076ba:	e01b      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          frequency = HAL_RCC_GetSysClockFreq();
 80076bc:	f7ff f972 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 80076c0:	61f8      	str	r0, [r7, #28]
          break;
 80076c2:	e017      	b.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076c4:	4b28      	ldr	r3, [pc, #160]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d0:	d10d      	bne.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSI_VALUE;
 80076d2:	4b27      	ldr	r3, [pc, #156]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076d4:	61fb      	str	r3, [r7, #28]
          break;
 80076d6:	e00a      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80076d8:	4b23      	ldr	r3, [pc, #140]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d105      	bne.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = LSE_VALUE;
 80076e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ea:	61fb      	str	r3, [r7, #28]
          break;
 80076ec:	e001      	b.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          break;
 80076ee:	bf00      	nop
 80076f0:	e21e      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80076f2:	bf00      	nop
        break;
 80076f4:	e21c      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80076f6:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007700:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007708:	d010      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800770a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770e:	d802      	bhi.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
          break;
 8007714:	e026      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
        switch(srcclk)
 8007716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771a:	d00b      	beq.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 800771c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007720:	d012      	beq.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          break;
 8007722:	e01f      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007724:	f7ff f9d4 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8007728:	61f8      	str	r0, [r7, #28]
          break;
 800772a:	e01b      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          frequency = HAL_RCC_GetSysClockFreq();
 800772c:	f7ff f93a 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8007730:	61f8      	str	r0, [r7, #28]
          break;
 8007732:	e017      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007734:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800773c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007740:	d10d      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
            frequency = HSI_VALUE;
 8007742:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007744:	61fb      	str	r3, [r7, #28]
          break;
 8007746:	e00a      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007748:	4b07      	ldr	r3, [pc, #28]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b02      	cmp	r3, #2
 8007754:	d105      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = LSE_VALUE;
 8007756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775a:	61fb      	str	r3, [r7, #28]
          break;
 800775c:	e001      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          break;
 800775e:	bf00      	nop
 8007760:	e1e6      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8007762:	bf00      	nop
        break;
 8007764:	e1e4      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007766:	bf00      	nop
 8007768:	40021000 	.word	0x40021000
 800776c:	02dc6c00 	.word	0x02dc6c00
 8007770:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007774:	4ba8      	ldr	r3, [pc, #672]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800777e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007786:	d010      	beq.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d802      	bhi.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
          break;
 8007792:	e026      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        switch(srcclk)
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007798:	d00b      	beq.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800779a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800779e:	d012      	beq.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          break;
 80077a0:	e01f      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80077a2:	f7ff f995 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 80077a6:	61f8      	str	r0, [r7, #28]
          break;
 80077a8:	e01b      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = HAL_RCC_GetSysClockFreq();
 80077aa:	f7ff f8fb 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 80077ae:	61f8      	str	r0, [r7, #28]
          break;
 80077b0:	e017      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077b2:	4b99      	ldr	r3, [pc, #612]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077be:	d10d      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
            frequency = HSI_VALUE;
 80077c0:	4b96      	ldr	r3, [pc, #600]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80077c2:	61fb      	str	r3, [r7, #28]
          break;
 80077c4:	e00a      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80077c6:	4b94      	ldr	r3, [pc, #592]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d105      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = LSE_VALUE;
 80077d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d8:	61fb      	str	r3, [r7, #28]
          break;
 80077da:	e001      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          break;
 80077dc:	bf00      	nop
 80077de:	e1a7      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80077e0:	bf00      	nop
        break;
 80077e2:	e1a5      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80077e4:	4b8c      	ldr	r3, [pc, #560]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077ee:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f6:	d02f      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80077f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077fc:	d003      	beq.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80077fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007802:	d004      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
          break;
 8007804:	e050      	b.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007806:	f7ff f8cd 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 800780a:	61f8      	str	r0, [r7, #28]
          break;
 800780c:	e04c      	b.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800780e:	4b82      	ldr	r3, [pc, #520]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d043      	beq.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800781a:	4b7f      	ldr	r3, [pc, #508]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007824:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	fb02 f203 	mul.w	r2, r2, r3
 800782e:	4b7a      	ldr	r3, [pc, #488]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	091b      	lsrs	r3, r3, #4
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	3301      	adds	r3, #1
 800783a:	fbb2 f3f3 	udiv	r3, r2, r3
 800783e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007840:	4b75      	ldr	r3, [pc, #468]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	0e5b      	lsrs	r3, r3, #25
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	3301      	adds	r3, #1
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	61fb      	str	r3, [r7, #28]
          break;
 8007856:	e024      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8007858:	4b6f      	ldr	r3, [pc, #444]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d020      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007864:	4b6c      	ldr	r3, [pc, #432]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	0a1b      	lsrs	r3, r3, #8
 800786a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	fb02 f203 	mul.w	r2, r2, r3
 8007878:	4b67      	ldr	r3, [pc, #412]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	091b      	lsrs	r3, r3, #4
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	3301      	adds	r3, #1
 8007884:	fbb2 f3f3 	udiv	r3, r2, r3
 8007888:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800788a:	4b63      	ldr	r3, [pc, #396]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	0e5b      	lsrs	r3, r3, #25
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	3301      	adds	r3, #1
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	fbb2 f3f3 	udiv	r3, r2, r3
 800789e:	61fb      	str	r3, [r7, #28]
          break;
 80078a0:	e001      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
          break;
 80078a2:	bf00      	nop
 80078a4:	e144      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80078a6:	bf00      	nop
        break;
 80078a8:	e142      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80078aa:	4b5b      	ldr	r3, [pc, #364]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = HAL_RCC_GetPCLK2Freq();
 80078bc:	f7ff f91e 	bl	8006afc <HAL_RCC_GetPCLK2Freq>
 80078c0:	61f8      	str	r0, [r7, #28]
        break;
 80078c2:	e135      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          frequency = HAL_RCC_GetSysClockFreq();
 80078c4:	f7ff f86e 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 80078c8:	61f8      	str	r0, [r7, #28]
        break;
 80078ca:	e131      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80078cc:	4b52      	ldr	r3, [pc, #328]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078d6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078de:	d009      	beq.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80078e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e4:	d00a      	beq.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d000      	beq.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x714>
          break;
 80078ea:	e011      	b.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          frequency = HAL_RCC_GetPCLK1Freq();
 80078ec:	f7ff f8f0 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 80078f0:	61f8      	str	r0, [r7, #28]
          break;
 80078f2:	e00d      	b.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          frequency = HAL_RCC_GetSysClockFreq();
 80078f4:	f7ff f856 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 80078f8:	61f8      	str	r0, [r7, #28]
          break;
 80078fa:	e009      	b.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078fc:	4b46      	ldr	r3, [pc, #280]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007908:	d101      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x736>
            frequency = HSI_VALUE;
 800790a:	4b44      	ldr	r3, [pc, #272]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800790c:	61fb      	str	r3, [r7, #28]
          break;
 800790e:	bf00      	nop
        break;
 8007910:	e10e      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007912:	4b41      	ldr	r3, [pc, #260]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800791c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007924:	d009      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
 8007926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800792a:	d00a      	beq.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d000      	beq.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          break;
 8007930:	e011      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007932:	f7ff f8cd 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8007936:	61f8      	str	r0, [r7, #28]
          break;
 8007938:	e00d      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          frequency = HAL_RCC_GetSysClockFreq();
 800793a:	f7ff f833 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 800793e:	61f8      	str	r0, [r7, #28]
          break;
 8007940:	e009      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007942:	4b35      	ldr	r3, [pc, #212]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800794a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794e:	d101      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
            frequency = HSI_VALUE;
 8007950:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007952:	61fb      	str	r3, [r7, #28]
          break;
 8007954:	bf00      	nop
        break;
 8007956:	e0eb      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007958:	4b2f      	ldr	r3, [pc, #188]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800795a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007962:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800796a:	d009      	beq.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800796c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007970:	d00a      	beq.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d000      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          break;
 8007976:	e011      	b.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007978:	f7ff f8aa 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 800797c:	61f8      	str	r0, [r7, #28]
          break;
 800797e:	e00d      	b.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8007980:	f7ff f810 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8007984:	61f8      	str	r0, [r7, #28]
          break;
 8007986:	e009      	b.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007988:	4b23      	ldr	r3, [pc, #140]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007994:	d101      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
            frequency = HSI_VALUE;
 8007996:	4b21      	ldr	r3, [pc, #132]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007998:	61fb      	str	r3, [r7, #28]
          break;
 800799a:	bf00      	nop
        break;
 800799c:	e0c8      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800799e:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d008      	beq.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d302      	bcc.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d008      	beq.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          break;
 80079b8:	e011      	b.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          frequency = HAL_RCC_GetPCLK1Freq();
 80079ba:	f7ff f889 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 80079be:	61f8      	str	r0, [r7, #28]
          break;
 80079c0:	e00d      	b.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          frequency = HAL_RCC_GetSysClockFreq();
 80079c2:	f7fe ffef 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 80079c6:	61f8      	str	r0, [r7, #28]
          break;
 80079c8:	e009      	b.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ca:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d6:	d101      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
            frequency = HSI_VALUE;
 80079d8:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80079da:	61fb      	str	r3, [r7, #28]
          break;
 80079dc:	bf00      	nop
        break;
 80079de:	e0a7      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80079e0:	4b0d      	ldr	r3, [pc, #52]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80079ea:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079f2:	d015      	beq.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80079f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079f8:	d802      	bhi.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
 80079fe:	e034      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        switch(srcclk)
 8007a00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a04:	d017      	beq.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007a06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007a0a:	d01e      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8007a0c:	e02d      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a0e:	f7ff f85f 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8007a12:	61f8      	str	r0, [r7, #28]
          break;
 8007a14:	e029      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8007a16:	bf00      	nop
 8007a18:	40021000 	.word	0x40021000
 8007a1c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007a20:	4b46      	ldr	r3, [pc, #280]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d118      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
              frequency = LSI_VALUE;
 8007a2e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007a32:	61fb      	str	r3, [r7, #28]
          break;
 8007a34:	e014      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a36:	4b41      	ldr	r3, [pc, #260]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a42:	d10f      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
            frequency = HSI_VALUE;
 8007a44:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8007a46:	61fb      	str	r3, [r7, #28]
          break;
 8007a48:	e00c      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a4a:	4b3c      	ldr	r3, [pc, #240]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d107      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
            frequency = LSE_VALUE;
 8007a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5c:	61fb      	str	r3, [r7, #28]
          break;
 8007a5e:	e003      	b.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          break;
 8007a60:	bf00      	nop
 8007a62:	e065      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8007a64:	bf00      	nop
 8007a66:	e063      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8007a68:	bf00      	nop
        break;
 8007a6a:	e061      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007a6c:	4b33      	ldr	r3, [pc, #204]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007a76:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a7e:	d010      	beq.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a84:	d802      	bhi.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d007      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          break;
 8007a8a:	e02f      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
        switch(srcclk)
 8007a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a90:	d012      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 8007a92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a96:	d019      	beq.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8007a98:	e028      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a9a:	f7ff f819 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8007a9e:	61f8      	str	r0, [r7, #28]
          break;
 8007aa0:	e024      	b.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007aa2:	4b26      	ldr	r3, [pc, #152]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d118      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
              frequency = LSI_VALUE;
 8007ab0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ab4:	61fb      	str	r3, [r7, #28]
          break;
 8007ab6:	e014      	b.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ab8:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac4:	d10f      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
            frequency = HSI_VALUE;
 8007ac6:	4b1e      	ldr	r3, [pc, #120]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8007ac8:	61fb      	str	r3, [r7, #28]
          break;
 8007aca:	e00c      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007acc:	4b1b      	ldr	r3, [pc, #108]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d107      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x912>
            frequency = LSE_VALUE;
 8007ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ade:	61fb      	str	r3, [r7, #28]
          break;
 8007ae0:	e003      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8007ae2:	bf00      	nop
 8007ae4:	e024      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8007ae6:	bf00      	nop
 8007ae8:	e022      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8007aea:	bf00      	nop
        break;
 8007aec:	e020      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8007aee:	4b13      	ldr	r3, [pc, #76]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007af8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8007b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b04:	d004      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8007b06:	e00d      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fe ffe2 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	61f8      	str	r0, [r7, #28]
          break;
 8007b0e:	e009      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1c:	d101      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            frequency = HSI_VALUE;
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8007b20:	61fb      	str	r3, [r7, #28]
          break;
 8007b22:	bf00      	nop
        break;
 8007b24:	e004      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8007b26:	bf00      	nop
 8007b28:	e002      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8007b2e:	bf00      	nop
    }
  }

  return(frequency);
 8007b30:	69fb      	ldr	r3, [r7, #28]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3720      	adds	r7, #32
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	00f42400 	.word	0x00f42400

08007b44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007b44:	b480      	push	{r7}
 8007b46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007b48:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a04      	ldr	r2, [pc, #16]	; (8007b60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007b4e:	f043 0304 	orr.w	r3, r3, #4
 8007b52:	6013      	str	r3, [r2, #0]
}
 8007b54:	bf00      	nop
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40021000 	.word	0x40021000

08007b64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b72:	4b73      	ldr	r3, [pc, #460]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d018      	beq.n	8007bb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b7e:	4b70      	ldr	r3, [pc, #448]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f003 0203 	and.w	r2, r3, #3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d10d      	bne.n	8007baa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
       ||
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d009      	beq.n	8007baa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007b96:	4b6a      	ldr	r3, [pc, #424]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	091b      	lsrs	r3, r3, #4
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
       ||
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d044      	beq.n	8007c34 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	73fb      	strb	r3, [r7, #15]
 8007bae:	e041      	b.n	8007c34 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d00c      	beq.n	8007bd2 <RCCEx_PLLSAI1_Config+0x6e>
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d013      	beq.n	8007be4 <RCCEx_PLLSAI1_Config+0x80>
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d120      	bne.n	8007c02 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007bc0:	4b5f      	ldr	r3, [pc, #380]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d11d      	bne.n	8007c08 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bd0:	e01a      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007bd2:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d116      	bne.n	8007c0c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007be2:	e013      	b.n	8007c0c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007be4:	4b56      	ldr	r3, [pc, #344]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10f      	bne.n	8007c10 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007bf0:	4b53      	ldr	r3, [pc, #332]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c00:	e006      	b.n	8007c10 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
      break;
 8007c06:	e004      	b.n	8007c12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007c08:	bf00      	nop
 8007c0a:	e002      	b.n	8007c12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007c0c:	bf00      	nop
 8007c0e:	e000      	b.n	8007c12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007c10:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10d      	bne.n	8007c34 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c18:	4b49      	ldr	r3, [pc, #292]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	4944      	ldr	r1, [pc, #272]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d17c      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c3a:	4b41      	ldr	r3, [pc, #260]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a40      	ldr	r2, [pc, #256]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c46:	f7fa fc75 	bl	8002534 <HAL_GetTick>
 8007c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c4c:	e009      	b.n	8007c62 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c4e:	f7fa fc71 	bl	8002534 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d902      	bls.n	8007c62 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	73fb      	strb	r3, [r7, #15]
        break;
 8007c60:	e005      	b.n	8007c6e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c62:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1ef      	bne.n	8007c4e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d15f      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d110      	bne.n	8007c9c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c7a:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007c82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6892      	ldr	r2, [r2, #8]
 8007c8a:	0211      	lsls	r1, r2, #8
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68d2      	ldr	r2, [r2, #12]
 8007c90:	06d2      	lsls	r2, r2, #27
 8007c92:	430a      	orrs	r2, r1
 8007c94:	492a      	ldr	r1, [pc, #168]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	610b      	str	r3, [r1, #16]
 8007c9a:	e027      	b.n	8007cec <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d112      	bne.n	8007cc8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ca2:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007caa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6892      	ldr	r2, [r2, #8]
 8007cb2:	0211      	lsls	r1, r2, #8
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6912      	ldr	r2, [r2, #16]
 8007cb8:	0852      	lsrs	r2, r2, #1
 8007cba:	3a01      	subs	r2, #1
 8007cbc:	0552      	lsls	r2, r2, #21
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	491f      	ldr	r1, [pc, #124]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	610b      	str	r3, [r1, #16]
 8007cc6:	e011      	b.n	8007cec <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007cd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6892      	ldr	r2, [r2, #8]
 8007cd8:	0211      	lsls	r1, r2, #8
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6952      	ldr	r2, [r2, #20]
 8007cde:	0852      	lsrs	r2, r2, #1
 8007ce0:	3a01      	subs	r2, #1
 8007ce2:	0652      	lsls	r2, r2, #25
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	4916      	ldr	r1, [pc, #88]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cec:	4b14      	ldr	r3, [pc, #80]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a13      	ldr	r2, [pc, #76]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf8:	f7fa fc1c 	bl	8002534 <HAL_GetTick>
 8007cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cfe:	e009      	b.n	8007d14 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d00:	f7fa fc18 	bl	8002534 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d902      	bls.n	8007d14 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	73fb      	strb	r3, [r7, #15]
          break;
 8007d12:	e005      	b.n	8007d20 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0ef      	beq.n	8007d00 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d26:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	4904      	ldr	r1, [pc, #16]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40021000 	.word	0x40021000

08007d44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d52:	4b68      	ldr	r3, [pc, #416]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d018      	beq.n	8007d90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007d5e:	4b65      	ldr	r3, [pc, #404]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0203 	and.w	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d10d      	bne.n	8007d8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
       ||
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007d76:	4b5f      	ldr	r3, [pc, #380]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	091b      	lsrs	r3, r3, #4
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
       ||
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d044      	beq.n	8007e14 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	e041      	b.n	8007e14 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d00c      	beq.n	8007db2 <RCCEx_PLLSAI2_Config+0x6e>
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d013      	beq.n	8007dc4 <RCCEx_PLLSAI2_Config+0x80>
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d120      	bne.n	8007de2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007da0:	4b54      	ldr	r3, [pc, #336]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d11d      	bne.n	8007de8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007db0:	e01a      	b.n	8007de8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007db2:	4b50      	ldr	r3, [pc, #320]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d116      	bne.n	8007dec <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dc2:	e013      	b.n	8007dec <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dc4:	4b4b      	ldr	r3, [pc, #300]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10f      	bne.n	8007df0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007dd0:	4b48      	ldr	r3, [pc, #288]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007de0:	e006      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	73fb      	strb	r3, [r7, #15]
      break;
 8007de6:	e004      	b.n	8007df2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007de8:	bf00      	nop
 8007dea:	e002      	b.n	8007df2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007dec:	bf00      	nop
 8007dee:	e000      	b.n	8007df2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007df0:	bf00      	nop
    }

    if(status == HAL_OK)
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10d      	bne.n	8007e14 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007df8:	4b3e      	ldr	r3, [pc, #248]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6819      	ldr	r1, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	4939      	ldr	r1, [pc, #228]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d166      	bne.n	8007ee8 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007e1a:	4b36      	ldr	r3, [pc, #216]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a35      	ldr	r2, [pc, #212]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e26:	f7fa fb85 	bl	8002534 <HAL_GetTick>
 8007e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e2c:	e009      	b.n	8007e42 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e2e:	f7fa fb81 	bl	8002534 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d902      	bls.n	8007e42 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8007e40:	e005      	b.n	8007e4e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e42:	4b2c      	ldr	r3, [pc, #176]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1ef      	bne.n	8007e2e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d149      	bne.n	8007ee8 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d110      	bne.n	8007e7c <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e5a:	4b26      	ldr	r3, [pc, #152]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007e62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6892      	ldr	r2, [r2, #8]
 8007e6a:	0211      	lsls	r1, r2, #8
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	68d2      	ldr	r2, [r2, #12]
 8007e70:	06d2      	lsls	r2, r2, #27
 8007e72:	430a      	orrs	r2, r1
 8007e74:	491f      	ldr	r1, [pc, #124]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	614b      	str	r3, [r1, #20]
 8007e7a:	e011      	b.n	8007ea0 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007e84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6892      	ldr	r2, [r2, #8]
 8007e8c:	0211      	lsls	r1, r2, #8
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6912      	ldr	r2, [r2, #16]
 8007e92:	0852      	lsrs	r2, r2, #1
 8007e94:	3a01      	subs	r2, #1
 8007e96:	0652      	lsls	r2, r2, #25
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	4916      	ldr	r1, [pc, #88]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007ea0:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a13      	ldr	r2, [pc, #76]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eac:	f7fa fb42 	bl	8002534 <HAL_GetTick>
 8007eb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007eb2:	e009      	b.n	8007ec8 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007eb4:	f7fa fb3e 	bl	8002534 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d902      	bls.n	8007ec8 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	73fb      	strb	r3, [r7, #15]
          break;
 8007ec6:	e005      	b.n	8007ed4 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0ef      	beq.n	8007eb4 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007eda:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	4904      	ldr	r1, [pc, #16]	; (8007ef4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40021000 	.word	0x40021000

08007ef8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b089      	sub	sp, #36	; 0x24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f14:	d10c      	bne.n	8007f30 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007f16:	4b6b      	ldr	r3, [pc, #428]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007f20:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f28:	d112      	bne.n	8007f50 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f2a:	4b67      	ldr	r3, [pc, #412]	; (80080c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d0>)
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	e00f      	b.n	8007f50 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f36:	d10b      	bne.n	8007f50 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007f38:	4b62      	ldr	r3, [pc, #392]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007f42:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f4a:	d101      	bne.n	8007f50 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007f4c:	4b5e      	ldr	r3, [pc, #376]	; (80080c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d0>)
 8007f4e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f040 80ae 	bne.w	80080b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
  {
    pllvco = InputFrequency;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f62:	d003      	beq.n	8007f6c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f6a:	d133      	bne.n	8007fd4 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8007f6c:	4b55      	ldr	r3, [pc, #340]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 809d 	beq.w	80080b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007f7a:	4b52      	ldr	r3, [pc, #328]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	091b      	lsrs	r3, r3, #4
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	3301      	adds	r3, #1
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007f8e:	4b4d      	ldr	r3, [pc, #308]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	0a1b      	lsrs	r3, r3, #8
 8007f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f98:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007f9a:	4b4a      	ldr	r3, [pc, #296]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	0edb      	lsrs	r3, r3, #27
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007fac:	4b45      	ldr	r3, [pc, #276]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
          {
            pllp = 17U;
 8007fb8:	2311      	movs	r3, #17
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	e001      	b.n	8007fc2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          }
          else
          {
            pllp = 7U;
 8007fbe:	2307      	movs	r3, #7
 8007fc0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	fb02 f203 	mul.w	r2, r2, r3
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd0:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8007fd2:	e06f      	b.n	80080b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d132      	bne.n	8008040 <RCCEx_GetSAIxPeriphCLKFreq+0x148>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8007fda:	4b3a      	ldr	r3, [pc, #232]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d066      	beq.n	80080b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007fe6:	4b37      	ldr	r3, [pc, #220]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	091b      	lsrs	r3, r3, #4
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff8:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007ffa:	4b32      	ldr	r3, [pc, #200]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008004:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008006:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	0edb      	lsrs	r3, r3, #27
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10a      	bne.n	800802e <RCCEx_GetSAIxPeriphCLKFreq+0x136>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008018:	4b2a      	ldr	r3, [pc, #168]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <RCCEx_GetSAIxPeriphCLKFreq+0x132>
          {
            pllp = 17U;
 8008024:	2311      	movs	r3, #17
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e001      	b.n	800802e <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          }
          else
          {
            pllp = 7U;
 800802a:	2307      	movs	r3, #7
 800802c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	fb02 f203 	mul.w	r2, r2, r3
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	fbb2 f3f3 	udiv	r3, r2, r3
 800803c:	61fb      	str	r3, [r7, #28]
 800803e:	e039      	b.n	80080b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008046:	d003      	beq.n	8008050 <RCCEx_GetSAIxPeriphCLKFreq+0x158>
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800804e:	d131      	bne.n	80080b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8008050:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d02b      	beq.n	80080b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800805c:	4b19      	ldr	r3, [pc, #100]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	091b      	lsrs	r3, r3, #4
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	3301      	adds	r3, #1
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	fbb2 f3f3 	udiv	r3, r2, r3
 800806e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008070:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	0a1b      	lsrs	r3, r3, #8
 8008076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800807c:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	0edb      	lsrs	r3, r3, #27
 8008082:	f003 031f 	and.w	r3, r3, #31
 8008086:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800808e:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>
          {
            pllp = 17U;
 800809a:	2311      	movs	r3, #17
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	e001      	b.n	80080a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>
          }
          else
          {
            pllp = 7U;
 80080a0:	2307      	movs	r3, #7
 80080a2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	fb02 f203 	mul.w	r2, r2, r3
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b2:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80080b4:	69fb      	ldr	r3, [r7, #28]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3724      	adds	r7, #36	; 0x24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40021000 	.word	0x40021000
 80080c8:	001fff68 	.word	0x001fff68

080080cc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e14a      	b.n	8008374 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7fa f8aa 	bl	800224c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f94d 	bl	8008398 <SAI_Disable>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e135      	b.n	8008374 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d007      	beq.n	8008128 <HAL_SAI_Init+0x5c>
 8008118:	2b01      	cmp	r3, #1
 800811a:	d302      	bcc.n	8008122 <HAL_SAI_Init+0x56>
 800811c:	2b02      	cmp	r3, #2
 800811e:	d006      	beq.n	800812e <HAL_SAI_Init+0x62>
 8008120:	e008      	b.n	8008134 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	61fb      	str	r3, [r7, #28]
      break;
 8008126:	e008      	b.n	800813a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008128:	2310      	movs	r3, #16
 800812a:	61fb      	str	r3, [r7, #28]
      break;
 800812c:	e005      	b.n	800813a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800812e:	2320      	movs	r3, #32
 8008130:	61fb      	str	r3, [r7, #28]
      break;
 8008132:	e002      	b.n	800813a <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	61fb      	str	r3, [r7, #28]
      break;
 8008138:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d81d      	bhi.n	800817e <HAL_SAI_Init+0xb2>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <HAL_SAI_Init+0x7c>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	08008159 	.word	0x08008159
 800814c:	0800815f 	.word	0x0800815f
 8008150:	08008167 	.word	0x08008167
 8008154:	0800816f 	.word	0x0800816f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
      break;
 800815c:	e012      	b.n	8008184 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800815e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008162:	617b      	str	r3, [r7, #20]
      break;
 8008164:	e00e      	b.n	8008184 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800816a:	617b      	str	r3, [r7, #20]
      break;
 800816c:	e00a      	b.n	8008184 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800816e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008172:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f043 0301 	orr.w	r3, r3, #1
 800817a:	61fb      	str	r3, [r7, #28]
      break;
 800817c:	e002      	b.n	8008184 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
      break;
 8008182:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a7c      	ldr	r2, [pc, #496]	; (800837c <HAL_SAI_Init+0x2b0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d004      	beq.n	8008198 <HAL_SAI_Init+0xcc>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a7b      	ldr	r2, [pc, #492]	; (8008380 <HAL_SAI_Init+0x2b4>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d103      	bne.n	80081a0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008198:	4a7a      	ldr	r2, [pc, #488]	; (8008384 <HAL_SAI_Init+0x2b8>)
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	e002      	b.n	80081a6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80081a0:	4a79      	ldr	r2, [pc, #484]	; (8008388 <HAL_SAI_Init+0x2bc>)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d038      	beq.n	8008220 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a72      	ldr	r2, [pc, #456]	; (800837c <HAL_SAI_Init+0x2b0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_SAI_Init+0xf6>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a70      	ldr	r2, [pc, #448]	; (8008380 <HAL_SAI_Init+0x2b4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d105      	bne.n	80081ce <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80081c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80081c6:	f7ff f807 	bl	80071d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80081ca:	6138      	str	r0, [r7, #16]
 80081cc:	e004      	b.n	80081d8 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80081ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80081d2:	f7ff f801 	bl	80071d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80081d6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4613      	mov	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	025b      	lsls	r3, r3, #9
 80081ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ee:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4a66      	ldr	r2, [pc, #408]	; (800838c <HAL_SAI_Init+0x2c0>)
 80081f4:	fba2 2303 	umull	r2, r3, r2, r3
 80081f8:	08da      	lsrs	r2, r3, #3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	4b62      	ldr	r3, [pc, #392]	; (800838c <HAL_SAI_Init+0x2c0>)
 8008202:	fba3 2301 	umull	r2, r3, r3, r1
 8008206:	08da      	lsrs	r2, r3, #3
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	1aca      	subs	r2, r1, r3
 8008212:	2a08      	cmp	r2, #8
 8008214:	d904      	bls.n	8008220 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <HAL_SAI_Init+0x164>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d109      	bne.n	8008244 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <HAL_SAI_Init+0x170>
 8008238:	2300      	movs	r3, #0
 800823a:	e001      	b.n	8008240 <HAL_SAI_Init+0x174>
 800823c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008240:	61bb      	str	r3, [r7, #24]
 8008242:	e008      	b.n	8008256 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008248:	2b01      	cmp	r3, #1
 800824a:	d102      	bne.n	8008252 <HAL_SAI_Init+0x186>
 800824c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008250:	e000      	b.n	8008254 <HAL_SAI_Init+0x188>
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6819      	ldr	r1, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	4b4b      	ldr	r3, [pc, #300]	; (8008390 <HAL_SAI_Init+0x2c4>)
 8008262:	400b      	ands	r3, r1
 8008264:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6819      	ldr	r1, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008274:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800827a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	431a      	orrs	r2, r3
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800828e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800829a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	051b      	lsls	r3, r3, #20
 80082a2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80082ba:	f023 030f 	bic.w	r3, r3, #15
 80082be:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6859      	ldr	r1, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	431a      	orrs	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6899      	ldr	r1, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	4b2a      	ldr	r3, [pc, #168]	; (8008394 <HAL_SAI_Init+0x2c8>)
 80082ea:	400b      	ands	r3, r1
 80082ec:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6899      	ldr	r1, [r3, #8]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80082fe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008304:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800830a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008310:	3b01      	subs	r3, #1
 8008312:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008314:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68d9      	ldr	r1, [r3, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	f24f 0320 	movw	r3, #61472	; 0xf020
 800832c:	400b      	ands	r3, r1
 800832e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68d9      	ldr	r1, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008344:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008346:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834c:	3b01      	subs	r3, #1
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40015404 	.word	0x40015404
 8008380:	40015424 	.word	0x40015424
 8008384:	40015400 	.word	0x40015400
 8008388:	40015800 	.word	0x40015800
 800838c:	cccccccd 	.word	0xcccccccd
 8008390:	ff05c010 	.word	0xff05c010
 8008394:	fff88000 	.word	0xfff88000

08008398 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008398:	b490      	push	{r4, r7}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80083a0:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <SAI_Disable+0x60>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a15      	ldr	r2, [pc, #84]	; (80083fc <SAI_Disable+0x64>)
 80083a6:	fba2 2303 	umull	r2, r3, r2, r3
 80083aa:	0b1b      	lsrs	r3, r3, #12
 80083ac:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80083c0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80083c2:	2c00      	cmp	r4, #0
 80083c4:	d10a      	bne.n	80083dc <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	73fb      	strb	r3, [r7, #15]
      break;
 80083da:	e007      	b.n	80083ec <SAI_Disable+0x54>
    }
    count--;
 80083dc:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1ea      	bne.n	80083c2 <SAI_Disable+0x2a>

  return status;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc90      	pop	{r4, r7}
 80083f6:	4770      	bx	lr
 80083f8:	20000000 	.word	0x20000000
 80083fc:	95cbec1b 	.word	0x95cbec1b

08008400 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e022      	b.n	8008458 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d105      	bne.n	800842a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7f9 fd87 	bl	8001f38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2203      	movs	r2, #3
 800842e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f814 	bl	8008460 <HAL_SD_InitCard>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e00a      	b.n	8008458 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008460:	b5b0      	push	{r4, r5, r7, lr}
 8008462:	b08e      	sub	sp, #56	; 0x38
 8008464:	af04      	add	r7, sp, #16
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008468:	2300      	movs	r3, #0
 800846a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008470:	2300      	movs	r3, #0
 8008472:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008478:	2300      	movs	r3, #0
 800847a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800847c:	2376      	movs	r3, #118	; 0x76
 800847e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681d      	ldr	r5, [r3, #0]
 8008484:	466c      	mov	r4, sp
 8008486:	f107 0314 	add.w	r3, r7, #20
 800848a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800848e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008492:	f107 0308 	add.w	r3, r7, #8
 8008496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008498:	4628      	mov	r0, r5
 800849a:	f001 ff05 	bl	800a2a8 <SDMMC_Init>
 800849e:	4603      	mov	r3, r0
 80084a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80084a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e044      	b.n	800853a <HAL_SD_InitCard+0xda>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084be:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 ff29 	bl	800a31c <SDMMC_PowerState_ON>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80084d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e02e      	b.n	800853a <HAL_SD_InitCard+0xda>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ea:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fb17 	bl	8008b20 <SD_PowerON>
 80084f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e013      	b.n	800853a <HAL_SD_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa36 	bl	8008984 <SD_InitCard>
 8008518:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <HAL_SD_InitCard+0xda>
  }

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3728      	adds	r7, #40	; 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008544 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008552:	0f9b      	lsrs	r3, r3, #30
 8008554:	b2da      	uxtb	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800855e:	0e9b      	lsrs	r3, r3, #26
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	b2da      	uxtb	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008570:	0e1b      	lsrs	r3, r3, #24
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	b2da      	uxtb	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008582:	0c1b      	lsrs	r3, r3, #16
 8008584:	b2da      	uxtb	r2, r3
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800858e:	0a1b      	lsrs	r3, r3, #8
 8008590:	b2da      	uxtb	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800859a:	b2da      	uxtb	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a4:	0d1b      	lsrs	r3, r3, #20
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 030f 	and.w	r3, r3, #15
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c2:	0bdb      	lsrs	r3, r3, #15
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d4:	0b9b      	lsrs	r3, r3, #14
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085e6:	0b5b      	lsrs	r3, r3, #13
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f8:	0b1b      	lsrs	r3, r3, #12
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	b2da      	uxtb	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2200      	movs	r2, #0
 800860a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008610:	2b00      	cmp	r3, #0
 8008612:	d163      	bne.n	80086dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008618:	009a      	lsls	r2, r3, #2
 800861a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800861e:	4013      	ands	r3, r2
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008624:	0f92      	lsrs	r2, r2, #30
 8008626:	431a      	orrs	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008630:	0edb      	lsrs	r3, r3, #27
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	b2da      	uxtb	r2, r3
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008642:	0e1b      	lsrs	r3, r3, #24
 8008644:	b2db      	uxtb	r3, r3
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	b2da      	uxtb	r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008654:	0d5b      	lsrs	r3, r3, #21
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	b2da      	uxtb	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008666:	0c9b      	lsrs	r3, r3, #18
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f003 0307 	and.w	r3, r3, #7
 800866e:	b2da      	uxtb	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008678:	0bdb      	lsrs	r3, r3, #15
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	b2da      	uxtb	r2, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	7e1b      	ldrb	r3, [r3, #24]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	3302      	adds	r3, #2
 800869c:	2201      	movs	r2, #1
 800869e:	fa02 f303 	lsl.w	r3, r2, r3
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80086a6:	fb02 f203 	mul.w	r2, r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	7a1b      	ldrb	r3, [r3, #8]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	2201      	movs	r2, #1
 80086ba:	409a      	lsls	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80086c8:	0a52      	lsrs	r2, r2, #9
 80086ca:	fb02 f203 	mul.w	r2, r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086d8:	661a      	str	r2, [r3, #96]	; 0x60
 80086da:	e031      	b.n	8008740 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d11d      	bne.n	8008720 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f2:	0c1b      	lsrs	r3, r3, #16
 80086f4:	431a      	orrs	r2, r3
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	3301      	adds	r3, #1
 8008700:	029a      	lsls	r2, r3, #10
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008714:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	661a      	str	r2, [r3, #96]	; 0x60
 800871e:	e00f      	b.n	8008740 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a58      	ldr	r2, [pc, #352]	; (8008888 <HAL_SD_GetCardCSD+0x344>)
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e09d      	b.n	800887c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008744:	0b9b      	lsrs	r3, r3, #14
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	b2da      	uxtb	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008756:	09db      	lsrs	r3, r3, #7
 8008758:	b2db      	uxtb	r3, r3
 800875a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875e:	b2da      	uxtb	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876e:	b2da      	uxtb	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008778:	0fdb      	lsrs	r3, r3, #31
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008784:	0f5b      	lsrs	r3, r3, #29
 8008786:	b2db      	uxtb	r3, r3
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	b2da      	uxtb	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008796:	0e9b      	lsrs	r3, r3, #26
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a8:	0d9b      	lsrs	r3, r3, #22
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 030f 	and.w	r3, r3, #15
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ba:	0d5b      	lsrs	r3, r3, #21
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d6:	0c1b      	lsrs	r3, r3, #16
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	0bdb      	lsrs	r3, r3, #15
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fe:	0b9b      	lsrs	r3, r3, #14
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	b2da      	uxtb	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008812:	0b5b      	lsrs	r3, r3, #13
 8008814:	b2db      	uxtb	r3, r3
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	b2da      	uxtb	r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	0b1b      	lsrs	r3, r3, #12
 8008828:	b2db      	uxtb	r3, r3
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	b2da      	uxtb	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883a:	0a9b      	lsrs	r3, r3, #10
 800883c:	b2db      	uxtb	r3, r3
 800883e:	f003 0303 	and.w	r3, r3, #3
 8008842:	b2da      	uxtb	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	b2db      	uxtb	r3, r3
 8008852:	f003 0303 	and.w	r3, r3, #3
 8008856:	b2da      	uxtb	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	b2db      	uxtb	r3, r3
 8008866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886a:	b2da      	uxtb	r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	004005ff 	.word	0x004005ff

0800888c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800888c:	b5b0      	push	{r4, r5, r7, lr}
 800888e:	b08e      	sub	sp, #56	; 0x38
 8008890:	af04      	add	r7, sp, #16
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2203      	movs	r2, #3
 800889a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d02e      	beq.n	8008904 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ac:	d106      	bne.n	80088bc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
 80088ba:	e029      	b.n	8008910 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088c2:	d10a      	bne.n	80088da <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f9b9 	bl	8008c3c <SD_WideBus_Enable>
 80088ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	431a      	orrs	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	639a      	str	r2, [r3, #56]	; 0x38
 80088d8:	e01a      	b.n	8008910 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f9f6 	bl	8008cd2 <SD_WideBus_Disable>
 80088e6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	639a      	str	r2, [r3, #56]	; 0x38
 80088f4:	e00c      	b.n	8008910 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
 8008902:	e005      	b.n	8008910 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008908:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	2b00      	cmp	r3, #0
 8008916:	d009      	beq.n	800892c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a18      	ldr	r2, [pc, #96]	; (8008980 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e024      	b.n	8008976 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	61fb      	str	r3, [r7, #28]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	623b      	str	r3, [r7, #32]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681d      	ldr	r5, [r3, #0]
 8008952:	466c      	mov	r4, sp
 8008954:	f107 0318 	add.w	r3, r7, #24
 8008958:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800895c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008960:	f107 030c 	add.w	r3, r7, #12
 8008964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008966:	4628      	mov	r0, r5
 8008968:	f001 fc9e 	bl	800a2a8 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3728      	adds	r7, #40	; 0x28
 800897a:	46bd      	mov	sp, r7
 800897c:	bdb0      	pop	{r4, r5, r7, pc}
 800897e:	bf00      	nop
 8008980:	004005ff 	.word	0x004005ff

08008984 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008984:	b5b0      	push	{r4, r5, r7, lr}
 8008986:	b094      	sub	sp, #80	; 0x50
 8008988:	af04      	add	r7, sp, #16
 800898a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800898c:	2301      	movs	r3, #1
 800898e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f001 fcd0 	bl	800a33a <SDMMC_GetPowerState>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80089a4:	e0b7      	b.n	8008b16 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d02f      	beq.n	8008a0e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 fe4f 	bl	800a656 <SDMMC_CmdSendCID>
 80089b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80089c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c2:	e0a8      	b.n	8008b16 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2100      	movs	r1, #0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 fcfa 	bl	800a3c4 <SDMMC_GetResponse>
 80089d0:	4602      	mov	r2, r0
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2104      	movs	r1, #4
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 fcf1 	bl	800a3c4 <SDMMC_GetResponse>
 80089e2:	4602      	mov	r2, r0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2108      	movs	r1, #8
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 fce8 	bl	800a3c4 <SDMMC_GetResponse>
 80089f4:	4602      	mov	r2, r0
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	210c      	movs	r1, #12
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 fcdf 	bl	800a3c4 <SDMMC_GetResponse>
 8008a06:	4602      	mov	r2, r0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d00d      	beq.n	8008a32 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f107 020e 	add.w	r2, r7, #14
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f001 fe55 	bl	800a6d0 <SDMMC_CmdSetRelAdd>
 8008a26:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <SD_InitCard+0xae>
    {
      return errorstate;
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a30:	e071      	b.n	8008b16 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d036      	beq.n	8008aa8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008a3a:	89fb      	ldrh	r3, [r7, #14]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4a:	041b      	lsls	r3, r3, #16
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f001 fe1f 	bl	800a692 <SDMMC_CmdSendCSD>
 8008a54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5e:	e05a      	b.n	8008b16 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2100      	movs	r1, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fcac 	bl	800a3c4 <SDMMC_GetResponse>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2104      	movs	r1, #4
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 fca3 	bl	800a3c4 <SDMMC_GetResponse>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2108      	movs	r1, #8
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 fc9a 	bl	800a3c4 <SDMMC_GetResponse>
 8008a90:	4602      	mov	r2, r0
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	210c      	movs	r1, #12
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f001 fc91 	bl	800a3c4 <SDMMC_GetResponse>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2104      	movs	r1, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 fc88 	bl	800a3c4 <SDMMC_GetResponse>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	0d1a      	lsrs	r2, r3, #20
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008abc:	f107 0310 	add.w	r3, r7, #16
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff fd3e 	bl	8008544 <HAL_SD_GetCardCSD>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ace:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ad2:	e020      	b.n	8008b16 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6819      	ldr	r1, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	f04f 0400 	mov.w	r4, #0
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	f001 fccd 	bl	800a486 <SDMMC_CmdSelDesel>
 8008aec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <SD_InitCard+0x174>
  {
    return errorstate;
 8008af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af6:	e00e      	b.n	8008b16 <SD_InitCard+0x192>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681d      	ldr	r5, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	466c      	mov	r4, sp
 8008b00:	f103 0210 	add.w	r2, r3, #16
 8008b04:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f001 fbca 	bl	800a2a8 <SDMMC_Init>
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3740      	adds	r7, #64	; 0x40
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008b20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	2300      	movs	r3, #0
 8008b32:	613b      	str	r3, [r7, #16]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 fcc7 	bl	800a4cc <SDMMC_CmdGoIdleState>
 8008b3e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	e072      	b.n	8008c30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fcda 	bl	800a508 <SDMMC_CmdOperCond>
 8008b54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00d      	beq.n	8008b78 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f001 fcb0 	bl	800a4cc <SDMMC_CmdGoIdleState>
 8008b6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d004      	beq.n	8008b7e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	e05b      	b.n	8008c30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d137      	bne.n	8008bf6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fcda 	bl	800a546 <SDMMC_CmdAppCommand>
 8008b92:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d02d      	beq.n	8008bf6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b9e:	e047      	b.n	8008c30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 fccd 	bl	800a546 <SDMMC_CmdAppCommand>
 8008bac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	e03b      	b.n	8008c30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	491e      	ldr	r1, [pc, #120]	; (8008c38 <SD_PowerON+0x118>)
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fce3 	bl	800a58a <SDMMC_CmdAppOperCommand>
 8008bc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bd0:	e02e      	b.n	8008c30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f001 fbf3 	bl	800a3c4 <SDMMC_GetResponse>
 8008bde:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	0fdb      	lsrs	r3, r3, #31
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <SD_PowerON+0xcc>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e000      	b.n	8008bee <SD_PowerON+0xce>
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]

    count++;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d802      	bhi.n	8008c06 <SD_PowerON+0xe6>
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0cc      	beq.n	8008ba0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d902      	bls.n	8008c16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c14:	e00c      	b.n	8008c30 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	645a      	str	r2, [r3, #68]	; 0x44
 8008c26:	e002      	b.n	8008c2e <SD_PowerON+0x10e>
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	c1100000 	.word	0xc1100000

08008c3c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2100      	movs	r1, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f001 fbb6 	bl	800a3c4 <SDMMC_GetResponse>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c62:	d102      	bne.n	8008c6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c68:	e02f      	b.n	8008cca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c6a:	f107 030c 	add.w	r3, r7, #12
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f879 	bl	8008d68 <SD_FindSCR>
 8008c76:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	e023      	b.n	8008cca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01c      	beq.n	8008cc6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	041b      	lsls	r3, r3, #16
 8008c96:	4619      	mov	r1, r3
 8008c98:	4610      	mov	r0, r2
 8008c9a:	f001 fc54 	bl	800a546 <SDMMC_CmdAppCommand>
 8008c9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	e00f      	b.n	8008cca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2102      	movs	r1, #2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f001 fc8d 	bl	800a5d0 <SDMMC_CmdBusWidth>
 8008cb6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	e003      	b.n	8008cca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e001      	b.n	8008cca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008cc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b086      	sub	sp, #24
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f001 fb6b 	bl	800a3c4 <SDMMC_GetResponse>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cf8:	d102      	bne.n	8008d00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cfe:	e02f      	b.n	8008d60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d00:	f107 030c 	add.w	r3, r7, #12
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f82e 	bl	8008d68 <SD_FindSCR>
 8008d0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	e023      	b.n	8008d60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d01c      	beq.n	8008d5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2a:	041b      	lsls	r3, r3, #16
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f001 fc09 	bl	800a546 <SDMMC_CmdAppCommand>
 8008d34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	e00f      	b.n	8008d60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2100      	movs	r1, #0
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 fc42 	bl	800a5d0 <SDMMC_CmdBusWidth>
 8008d4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	e003      	b.n	8008d60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e001      	b.n	8008d60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d68:	b590      	push	{r4, r7, lr}
 8008d6a:	b08f      	sub	sp, #60	; 0x3c
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d72:	f7f9 fbdf 	bl	8002534 <HAL_GetTick>
 8008d76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60bb      	str	r3, [r7, #8]
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2108      	movs	r1, #8
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 fb57 	bl	800a442 <SDMMC_CmdBlockLength>
 8008d94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	e0a9      	b.n	8008ef4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da8:	041b      	lsls	r3, r3, #16
 8008daa:	4619      	mov	r1, r3
 8008dac:	4610      	mov	r0, r2
 8008dae:	f001 fbca 	bl	800a546 <SDMMC_CmdAppCommand>
 8008db2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <SD_FindSCR+0x56>
  {
    return errorstate;
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	e09a      	b.n	8008ef4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dc2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008dc8:	2330      	movs	r3, #48	; 0x30
 8008dca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f107 0210 	add.w	r2, r7, #16
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f001 fb01 	bl	800a3ea <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 fc11 	bl	800a614 <SDMMC_CmdSendSCR>
 8008df2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d022      	beq.n	8008e40 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	e07a      	b.n	8008ef4 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00e      	beq.n	8008e2a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6819      	ldr	r1, [r3, #0]
 8008e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	f107 0208 	add.w	r2, r7, #8
 8008e18:	18d4      	adds	r4, r2, r3
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	f001 fa71 	bl	800a302 <SDMMC_ReadFIFO>
 8008e20:	4603      	mov	r3, r0
 8008e22:	6023      	str	r3, [r4, #0]
      index++;
 8008e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e26:	3301      	adds	r3, #1
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e2a:	f7f9 fb83 	bl	8002534 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e38:	d102      	bne.n	8008e40 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e3e:	e059      	b.n	8008ef4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e46:	f240 432a 	movw	r3, #1066	; 0x42a
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d0d6      	beq.n	8008dfe <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	f003 0308 	and.w	r3, r3, #8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2208      	movs	r2, #8
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e66:	2308      	movs	r3, #8
 8008e68:	e044      	b.n	8008ef4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e80:	2302      	movs	r3, #2
 8008e82:	e037      	b.n	8008ef4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2220      	movs	r2, #32
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008e9a:	2320      	movs	r3, #32
 8008e9c:	e02a      	b.n	8008ef4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	061a      	lsls	r2, r3, #24
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	021b      	lsls	r3, r3, #8
 8008eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eb4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	0a1b      	lsrs	r3, r3, #8
 8008eba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ebe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	0e1b      	lsrs	r3, r3, #24
 8008ec4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	601a      	str	r2, [r3, #0]
    scr++;
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	3304      	adds	r3, #4
 8008ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	061a      	lsls	r2, r3, #24
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008edc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	0a1b      	lsrs	r3, r3, #8
 8008ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ee6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	0e1b      	lsrs	r3, r3, #24
 8008eec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	373c      	adds	r7, #60	; 0x3c
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd90      	pop	{r4, r7, pc}

08008efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e07c      	b.n	8009008 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7f9 f867 	bl	8001ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f4e:	d902      	bls.n	8008f56 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e002      	b.n	8008f5c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f64:	d007      	beq.n	8008f76 <HAL_SPI_Init+0x7a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f6e:	d002      	beq.n	8008f76 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f86:	d903      	bls.n	8008f90 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8008f8e:	e002      	b.n	8008f96 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fb4:	431a      	orrs	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	ea42 0103 	orr.w	r1, r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	0c1b      	lsrs	r3, r3, #16
 8008fd6:	f003 0204 	and.w	r2, r3, #4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	ea42 0103 	orr.w	r1, r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e034      	b.n	8009090 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7f9 f8fc 	bl	8002238 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3308      	adds	r3, #8
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f001 f82a 	bl	800a0a4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	461a      	mov	r2, r3
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	f001 f89a 	bl	800a194 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6858      	ldr	r0, [r3, #4]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	6879      	ldr	r1, [r7, #4]
 800906e:	f001 f8e3 	bl	800a238 <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	6892      	ldr	r2, [r2, #8]
 800907a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	6892      	ldr	r2, [r2, #8]
 8009086:	f041 0101 	orr.w	r1, r1, #1
 800908a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e040      	b.n	800912c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7f8 fdbe 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2224      	movs	r2, #36	; 0x24
 80090c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0201 	bic.w	r2, r2, #1
 80090d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa8a 	bl	80095f0 <UART_SetConfig>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d101      	bne.n	80090e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e022      	b.n	800912c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fdc6 	bl	8009c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689a      	ldr	r2, [r3, #8]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fe4d 	bl	8009dc4 <UART_CheckIdleState>
 800912a:	4603      	mov	r3, r0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08a      	sub	sp, #40	; 0x28
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	4613      	mov	r3, r2
 8009142:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009148:	2b20      	cmp	r3, #32
 800914a:	f040 8081 	bne.w	8009250 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <HAL_UART_Transmit+0x26>
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e079      	b.n	8009252 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009164:	2b01      	cmp	r3, #1
 8009166:	d101      	bne.n	800916c <HAL_UART_Transmit+0x38>
 8009168:	2302      	movs	r3, #2
 800916a:	e072      	b.n	8009252 <HAL_UART_Transmit+0x11e>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2221      	movs	r2, #33	; 0x21
 800917e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009180:	f7f9 f9d8 	bl	8002534 <HAL_GetTick>
 8009184:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	88fa      	ldrh	r2, [r7, #6]
 8009192:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800919e:	d108      	bne.n	80091b2 <HAL_UART_Transmit+0x7e>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	e003      	b.n	80091ba <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091ba:	e02d      	b.n	8009218 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2200      	movs	r2, #0
 80091c4:	2180      	movs	r1, #128	; 0x80
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 fe41 	bl	8009e4e <UART_WaitOnFlagUntilTimeout>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e03d      	b.n	8009252 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10b      	bne.n	80091f4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	881a      	ldrh	r2, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091e8:	b292      	uxth	r2, r2
 80091ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	3302      	adds	r3, #2
 80091f0:	61bb      	str	r3, [r7, #24]
 80091f2:	e008      	b.n	8009206 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	781a      	ldrb	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	b292      	uxth	r2, r2
 80091fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	3301      	adds	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1cb      	bne.n	80091bc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2200      	movs	r2, #0
 800922c:	2140      	movs	r1, #64	; 0x40
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 fe0d 	bl	8009e4e <UART_WaitOnFlagUntilTimeout>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e009      	b.n	8009252 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2220      	movs	r2, #32
 8009242:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	e000      	b.n	8009252 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009250:	2302      	movs	r3, #2
  }
}
 8009252:	4618      	mov	r0, r3
 8009254:	3720      	adds	r7, #32
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	4613      	mov	r3, r2
 8009268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926e:	2b20      	cmp	r3, #32
 8009270:	d164      	bne.n	800933c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <HAL_UART_Transmit_DMA+0x22>
 8009278:	88fb      	ldrh	r3, [r7, #6]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e05d      	b.n	800933e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_UART_Transmit_DMA+0x34>
 800928c:	2302      	movs	r3, #2
 800928e:	e056      	b.n	800933e <HAL_UART_Transmit_DMA+0xe2>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	88fa      	ldrh	r2, [r7, #6]
 80092a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	88fa      	ldrh	r2, [r7, #6]
 80092aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2221      	movs	r2, #33	; 0x21
 80092b8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02a      	beq.n	8009318 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c6:	4a20      	ldr	r2, [pc, #128]	; (8009348 <HAL_UART_Transmit_DMA+0xec>)
 80092c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ce:	4a1f      	ldr	r2, [pc, #124]	; (800934c <HAL_UART_Transmit_DMA+0xf0>)
 80092d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d6:	4a1e      	ldr	r2, [pc, #120]	; (8009350 <HAL_UART_Transmit_DMA+0xf4>)
 80092d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092de:	2200      	movs	r2, #0
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ea:	4619      	mov	r1, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3328      	adds	r3, #40	; 0x28
 80092f2:	461a      	mov	r2, r3
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	f7fb f83d 	bl	8004374 <HAL_DMA_Start_IT>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2210      	movs	r2, #16
 8009304:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2220      	movs	r2, #32
 8009312:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e012      	b.n	800933e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2240      	movs	r2, #64	; 0x40
 800931e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009336:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	e000      	b.n	800933e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800933c:	2302      	movs	r3, #2
  }
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	08009f49 	.word	0x08009f49
 800934c:	08009f9d 	.word	0x08009f9d
 8009350:	08009fb9 	.word	0x08009fb9

08009354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d113      	bne.n	80093aa <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00e      	beq.n	80093aa <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b00      	cmp	r3, #0
 8009394:	d009      	beq.n	80093aa <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 80ff 	beq.w	800959e <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	4798      	blx	r3
      }
      return;
 80093a8:	e0f9      	b.n	800959e <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 80c1 	beq.w	8009534 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d105      	bne.n	80093c8 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f000 80b6 	beq.w	8009534 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00e      	beq.n	80093f0 <HAL_UART_IRQHandler+0x9c>
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d009      	beq.n	80093f0 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2201      	movs	r2, #1
 80093e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093e8:	f043 0201 	orr.w	r2, r3, #1
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00e      	beq.n	8009418 <HAL_UART_IRQHandler+0xc4>
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d009      	beq.n	8009418 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2202      	movs	r2, #2
 800940a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009410:	f043 0204 	orr.w	r2, r3, #4
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00e      	beq.n	8009440 <HAL_UART_IRQHandler+0xec>
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d009      	beq.n	8009440 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2204      	movs	r2, #4
 8009432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009438:	f043 0202 	orr.w	r2, r3, #2
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	f003 0308 	and.w	r3, r3, #8
 8009446:	2b00      	cmp	r3, #0
 8009448:	d013      	beq.n	8009472 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800945a:	2b00      	cmp	r3, #0
 800945c:	d009      	beq.n	8009472 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2208      	movs	r2, #8
 8009464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800946a:	f043 0208 	orr.w	r2, r3, #8
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 8093 	beq.w	80095a2 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00c      	beq.n	80094a0 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	f003 0320 	and.w	r3, r3, #32
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d004      	beq.n	80094be <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d031      	beq.n	8009522 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fd22 	bl	8009f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ce:	2b40      	cmp	r3, #64	; 0x40
 80094d0:	d123      	bne.n	800951a <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d013      	beq.n	8009512 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ee:	4a30      	ldr	r2, [pc, #192]	; (80095b0 <HAL_UART_IRQHandler+0x25c>)
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fa ff9c 	bl	8004434 <HAL_DMA_Abort_IT>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d016      	beq.n	8009530 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800950c:	4610      	mov	r0, r2
 800950e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009510:	e00e      	b.n	8009530 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f862 	bl	80095dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009518:	e00a      	b.n	8009530 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f85e 	bl	80095dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009520:	e006      	b.n	8009530 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f85a 	bl	80095dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800952e:	e038      	b.n	80095a2 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009530:	bf00      	nop
    return;
 8009532:	e036      	b.n	80095a2 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00d      	beq.n	800955a <HAL_UART_IRQHandler+0x206>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d008      	beq.n	800955a <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fd9b 	bl	800a08e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009558:	e026      	b.n	80095a8 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00d      	beq.n	8009580 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956a:	2b00      	cmp	r3, #0
 800956c:	d008      	beq.n	8009580 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009572:	2b00      	cmp	r3, #0
 8009574:	d017      	beq.n	80095a6 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	4798      	blx	r3
    }
    return;
 800957e:	e012      	b.n	80095a6 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00e      	beq.n	80095a8 <HAL_UART_IRQHandler+0x254>
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d009      	beq.n	80095a8 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fd61 	bl	800a05c <UART_EndTransmit_IT>
    return;
 800959a:	bf00      	nop
 800959c:	e004      	b.n	80095a8 <HAL_UART_IRQHandler+0x254>
      return;
 800959e:	bf00      	nop
 80095a0:	e002      	b.n	80095a8 <HAL_UART_IRQHandler+0x254>
    return;
 80095a2:	bf00      	nop
 80095a4:	e000      	b.n	80095a8 <HAL_UART_IRQHandler+0x254>
    return;
 80095a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80095a8:	3720      	adds	r7, #32
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	0800a031 	.word	0x0800a031

080095b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80095f4:	b088      	sub	sp, #32
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	689a      	ldr	r2, [r3, #8]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	4313      	orrs	r3, r2
 800961c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	4bac      	ldr	r3, [pc, #688]	; (80098d8 <UART_SetConfig+0x2e8>)
 8009626:	4013      	ands	r3, r2
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	6812      	ldr	r2, [r2, #0]
 800962c:	69f9      	ldr	r1, [r7, #28]
 800962e:	430b      	orrs	r3, r1
 8009630:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	430a      	orrs	r2, r1
 8009646:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4aa2      	ldr	r2, [pc, #648]	; (80098dc <UART_SetConfig+0x2ec>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d004      	beq.n	8009662 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a1b      	ldr	r3, [r3, #32]
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	4313      	orrs	r3, r2
 8009660:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	69fa      	ldr	r2, [r7, #28]
 8009672:	430a      	orrs	r2, r1
 8009674:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a99      	ldr	r2, [pc, #612]	; (80098e0 <UART_SetConfig+0x2f0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d121      	bne.n	80096c4 <UART_SetConfig+0xd4>
 8009680:	4b98      	ldr	r3, [pc, #608]	; (80098e4 <UART_SetConfig+0x2f4>)
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	2b03      	cmp	r3, #3
 800968c:	d816      	bhi.n	80096bc <UART_SetConfig+0xcc>
 800968e:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <UART_SetConfig+0xa4>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096a5 	.word	0x080096a5
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096ab 	.word	0x080096ab
 80096a0:	080096b7 	.word	0x080096b7
 80096a4:	2301      	movs	r3, #1
 80096a6:	76fb      	strb	r3, [r7, #27]
 80096a8:	e0e8      	b.n	800987c <UART_SetConfig+0x28c>
 80096aa:	2302      	movs	r3, #2
 80096ac:	76fb      	strb	r3, [r7, #27]
 80096ae:	e0e5      	b.n	800987c <UART_SetConfig+0x28c>
 80096b0:	2304      	movs	r3, #4
 80096b2:	76fb      	strb	r3, [r7, #27]
 80096b4:	e0e2      	b.n	800987c <UART_SetConfig+0x28c>
 80096b6:	2308      	movs	r3, #8
 80096b8:	76fb      	strb	r3, [r7, #27]
 80096ba:	e0df      	b.n	800987c <UART_SetConfig+0x28c>
 80096bc:	2310      	movs	r3, #16
 80096be:	76fb      	strb	r3, [r7, #27]
 80096c0:	bf00      	nop
 80096c2:	e0db      	b.n	800987c <UART_SetConfig+0x28c>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a87      	ldr	r2, [pc, #540]	; (80098e8 <UART_SetConfig+0x2f8>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d134      	bne.n	8009738 <UART_SetConfig+0x148>
 80096ce:	4b85      	ldr	r3, [pc, #532]	; (80098e4 <UART_SetConfig+0x2f4>)
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d4:	f003 030c 	and.w	r3, r3, #12
 80096d8:	2b0c      	cmp	r3, #12
 80096da:	d829      	bhi.n	8009730 <UART_SetConfig+0x140>
 80096dc:	a201      	add	r2, pc, #4	; (adr r2, 80096e4 <UART_SetConfig+0xf4>)
 80096de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e2:	bf00      	nop
 80096e4:	08009719 	.word	0x08009719
 80096e8:	08009731 	.word	0x08009731
 80096ec:	08009731 	.word	0x08009731
 80096f0:	08009731 	.word	0x08009731
 80096f4:	08009725 	.word	0x08009725
 80096f8:	08009731 	.word	0x08009731
 80096fc:	08009731 	.word	0x08009731
 8009700:	08009731 	.word	0x08009731
 8009704:	0800971f 	.word	0x0800971f
 8009708:	08009731 	.word	0x08009731
 800970c:	08009731 	.word	0x08009731
 8009710:	08009731 	.word	0x08009731
 8009714:	0800972b 	.word	0x0800972b
 8009718:	2300      	movs	r3, #0
 800971a:	76fb      	strb	r3, [r7, #27]
 800971c:	e0ae      	b.n	800987c <UART_SetConfig+0x28c>
 800971e:	2302      	movs	r3, #2
 8009720:	76fb      	strb	r3, [r7, #27]
 8009722:	e0ab      	b.n	800987c <UART_SetConfig+0x28c>
 8009724:	2304      	movs	r3, #4
 8009726:	76fb      	strb	r3, [r7, #27]
 8009728:	e0a8      	b.n	800987c <UART_SetConfig+0x28c>
 800972a:	2308      	movs	r3, #8
 800972c:	76fb      	strb	r3, [r7, #27]
 800972e:	e0a5      	b.n	800987c <UART_SetConfig+0x28c>
 8009730:	2310      	movs	r3, #16
 8009732:	76fb      	strb	r3, [r7, #27]
 8009734:	bf00      	nop
 8009736:	e0a1      	b.n	800987c <UART_SetConfig+0x28c>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a6b      	ldr	r2, [pc, #428]	; (80098ec <UART_SetConfig+0x2fc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d120      	bne.n	8009784 <UART_SetConfig+0x194>
 8009742:	4b68      	ldr	r3, [pc, #416]	; (80098e4 <UART_SetConfig+0x2f4>)
 8009744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009748:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800974c:	2b10      	cmp	r3, #16
 800974e:	d00f      	beq.n	8009770 <UART_SetConfig+0x180>
 8009750:	2b10      	cmp	r3, #16
 8009752:	d802      	bhi.n	800975a <UART_SetConfig+0x16a>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <UART_SetConfig+0x174>
 8009758:	e010      	b.n	800977c <UART_SetConfig+0x18c>
 800975a:	2b20      	cmp	r3, #32
 800975c:	d005      	beq.n	800976a <UART_SetConfig+0x17a>
 800975e:	2b30      	cmp	r3, #48	; 0x30
 8009760:	d009      	beq.n	8009776 <UART_SetConfig+0x186>
 8009762:	e00b      	b.n	800977c <UART_SetConfig+0x18c>
 8009764:	2300      	movs	r3, #0
 8009766:	76fb      	strb	r3, [r7, #27]
 8009768:	e088      	b.n	800987c <UART_SetConfig+0x28c>
 800976a:	2302      	movs	r3, #2
 800976c:	76fb      	strb	r3, [r7, #27]
 800976e:	e085      	b.n	800987c <UART_SetConfig+0x28c>
 8009770:	2304      	movs	r3, #4
 8009772:	76fb      	strb	r3, [r7, #27]
 8009774:	e082      	b.n	800987c <UART_SetConfig+0x28c>
 8009776:	2308      	movs	r3, #8
 8009778:	76fb      	strb	r3, [r7, #27]
 800977a:	e07f      	b.n	800987c <UART_SetConfig+0x28c>
 800977c:	2310      	movs	r3, #16
 800977e:	76fb      	strb	r3, [r7, #27]
 8009780:	bf00      	nop
 8009782:	e07b      	b.n	800987c <UART_SetConfig+0x28c>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a59      	ldr	r2, [pc, #356]	; (80098f0 <UART_SetConfig+0x300>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d120      	bne.n	80097d0 <UART_SetConfig+0x1e0>
 800978e:	4b55      	ldr	r3, [pc, #340]	; (80098e4 <UART_SetConfig+0x2f4>)
 8009790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009794:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009798:	2b40      	cmp	r3, #64	; 0x40
 800979a:	d00f      	beq.n	80097bc <UART_SetConfig+0x1cc>
 800979c:	2b40      	cmp	r3, #64	; 0x40
 800979e:	d802      	bhi.n	80097a6 <UART_SetConfig+0x1b6>
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <UART_SetConfig+0x1c0>
 80097a4:	e010      	b.n	80097c8 <UART_SetConfig+0x1d8>
 80097a6:	2b80      	cmp	r3, #128	; 0x80
 80097a8:	d005      	beq.n	80097b6 <UART_SetConfig+0x1c6>
 80097aa:	2bc0      	cmp	r3, #192	; 0xc0
 80097ac:	d009      	beq.n	80097c2 <UART_SetConfig+0x1d2>
 80097ae:	e00b      	b.n	80097c8 <UART_SetConfig+0x1d8>
 80097b0:	2300      	movs	r3, #0
 80097b2:	76fb      	strb	r3, [r7, #27]
 80097b4:	e062      	b.n	800987c <UART_SetConfig+0x28c>
 80097b6:	2302      	movs	r3, #2
 80097b8:	76fb      	strb	r3, [r7, #27]
 80097ba:	e05f      	b.n	800987c <UART_SetConfig+0x28c>
 80097bc:	2304      	movs	r3, #4
 80097be:	76fb      	strb	r3, [r7, #27]
 80097c0:	e05c      	b.n	800987c <UART_SetConfig+0x28c>
 80097c2:	2308      	movs	r3, #8
 80097c4:	76fb      	strb	r3, [r7, #27]
 80097c6:	e059      	b.n	800987c <UART_SetConfig+0x28c>
 80097c8:	2310      	movs	r3, #16
 80097ca:	76fb      	strb	r3, [r7, #27]
 80097cc:	bf00      	nop
 80097ce:	e055      	b.n	800987c <UART_SetConfig+0x28c>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a47      	ldr	r2, [pc, #284]	; (80098f4 <UART_SetConfig+0x304>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d124      	bne.n	8009824 <UART_SetConfig+0x234>
 80097da:	4b42      	ldr	r3, [pc, #264]	; (80098e4 <UART_SetConfig+0x2f4>)
 80097dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e8:	d012      	beq.n	8009810 <UART_SetConfig+0x220>
 80097ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ee:	d802      	bhi.n	80097f6 <UART_SetConfig+0x206>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d007      	beq.n	8009804 <UART_SetConfig+0x214>
 80097f4:	e012      	b.n	800981c <UART_SetConfig+0x22c>
 80097f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097fa:	d006      	beq.n	800980a <UART_SetConfig+0x21a>
 80097fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009800:	d009      	beq.n	8009816 <UART_SetConfig+0x226>
 8009802:	e00b      	b.n	800981c <UART_SetConfig+0x22c>
 8009804:	2300      	movs	r3, #0
 8009806:	76fb      	strb	r3, [r7, #27]
 8009808:	e038      	b.n	800987c <UART_SetConfig+0x28c>
 800980a:	2302      	movs	r3, #2
 800980c:	76fb      	strb	r3, [r7, #27]
 800980e:	e035      	b.n	800987c <UART_SetConfig+0x28c>
 8009810:	2304      	movs	r3, #4
 8009812:	76fb      	strb	r3, [r7, #27]
 8009814:	e032      	b.n	800987c <UART_SetConfig+0x28c>
 8009816:	2308      	movs	r3, #8
 8009818:	76fb      	strb	r3, [r7, #27]
 800981a:	e02f      	b.n	800987c <UART_SetConfig+0x28c>
 800981c:	2310      	movs	r3, #16
 800981e:	76fb      	strb	r3, [r7, #27]
 8009820:	bf00      	nop
 8009822:	e02b      	b.n	800987c <UART_SetConfig+0x28c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a2c      	ldr	r2, [pc, #176]	; (80098dc <UART_SetConfig+0x2ec>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d124      	bne.n	8009878 <UART_SetConfig+0x288>
 800982e:	4b2d      	ldr	r3, [pc, #180]	; (80098e4 <UART_SetConfig+0x2f4>)
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009834:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800983c:	d012      	beq.n	8009864 <UART_SetConfig+0x274>
 800983e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009842:	d802      	bhi.n	800984a <UART_SetConfig+0x25a>
 8009844:	2b00      	cmp	r3, #0
 8009846:	d007      	beq.n	8009858 <UART_SetConfig+0x268>
 8009848:	e012      	b.n	8009870 <UART_SetConfig+0x280>
 800984a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800984e:	d006      	beq.n	800985e <UART_SetConfig+0x26e>
 8009850:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009854:	d009      	beq.n	800986a <UART_SetConfig+0x27a>
 8009856:	e00b      	b.n	8009870 <UART_SetConfig+0x280>
 8009858:	2300      	movs	r3, #0
 800985a:	76fb      	strb	r3, [r7, #27]
 800985c:	e00e      	b.n	800987c <UART_SetConfig+0x28c>
 800985e:	2302      	movs	r3, #2
 8009860:	76fb      	strb	r3, [r7, #27]
 8009862:	e00b      	b.n	800987c <UART_SetConfig+0x28c>
 8009864:	2304      	movs	r3, #4
 8009866:	76fb      	strb	r3, [r7, #27]
 8009868:	e008      	b.n	800987c <UART_SetConfig+0x28c>
 800986a:	2308      	movs	r3, #8
 800986c:	76fb      	strb	r3, [r7, #27]
 800986e:	e005      	b.n	800987c <UART_SetConfig+0x28c>
 8009870:	2310      	movs	r3, #16
 8009872:	76fb      	strb	r3, [r7, #27]
 8009874:	bf00      	nop
 8009876:	e001      	b.n	800987c <UART_SetConfig+0x28c>
 8009878:	2310      	movs	r3, #16
 800987a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a16      	ldr	r2, [pc, #88]	; (80098dc <UART_SetConfig+0x2ec>)
 8009882:	4293      	cmp	r3, r2
 8009884:	f040 80fa 	bne.w	8009a7c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009888:	7efb      	ldrb	r3, [r7, #27]
 800988a:	2b08      	cmp	r3, #8
 800988c:	d836      	bhi.n	80098fc <UART_SetConfig+0x30c>
 800988e:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <UART_SetConfig+0x2a4>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098b9 	.word	0x080098b9
 8009898:	080098fd 	.word	0x080098fd
 800989c:	080098c1 	.word	0x080098c1
 80098a0:	080098fd 	.word	0x080098fd
 80098a4:	080098c7 	.word	0x080098c7
 80098a8:	080098fd 	.word	0x080098fd
 80098ac:	080098fd 	.word	0x080098fd
 80098b0:	080098fd 	.word	0x080098fd
 80098b4:	080098cf 	.word	0x080098cf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80098b8:	f7fd f90a 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 80098bc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80098be:	e020      	b.n	8009902 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80098c0:	4b0d      	ldr	r3, [pc, #52]	; (80098f8 <UART_SetConfig+0x308>)
 80098c2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80098c4:	e01d      	b.n	8009902 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80098c6:	f7fd f86d 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 80098ca:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80098cc:	e019      	b.n	8009902 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80098ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098d2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80098d4:	e015      	b.n	8009902 <UART_SetConfig+0x312>
 80098d6:	bf00      	nop
 80098d8:	efff69f3 	.word	0xefff69f3
 80098dc:	40008000 	.word	0x40008000
 80098e0:	40013800 	.word	0x40013800
 80098e4:	40021000 	.word	0x40021000
 80098e8:	40004400 	.word	0x40004400
 80098ec:	40004800 	.word	0x40004800
 80098f0:	40004c00 	.word	0x40004c00
 80098f4:	40005000 	.word	0x40005000
 80098f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	74fb      	strb	r3, [r7, #19]
        break;
 8009900:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 81ac 	beq.w	8009c62 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	4613      	mov	r3, r2
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4413      	add	r3, r2
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	429a      	cmp	r2, r3
 8009918:	d305      	bcc.n	8009926 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	429a      	cmp	r2, r3
 8009924:	d902      	bls.n	800992c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	74fb      	strb	r3, [r7, #19]
 800992a:	e19a      	b.n	8009c62 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800992c:	7efb      	ldrb	r3, [r7, #27]
 800992e:	2b08      	cmp	r3, #8
 8009930:	f200 8091 	bhi.w	8009a56 <UART_SetConfig+0x466>
 8009934:	a201      	add	r2, pc, #4	; (adr r2, 800993c <UART_SetConfig+0x34c>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009961 	.word	0x08009961
 8009940:	08009a57 	.word	0x08009a57
 8009944:	080099ad 	.word	0x080099ad
 8009948:	08009a57 	.word	0x08009a57
 800994c:	080099e1 	.word	0x080099e1
 8009950:	08009a57 	.word	0x08009a57
 8009954:	08009a57 	.word	0x08009a57
 8009958:	08009a57 	.word	0x08009a57
 800995c:	08009a2d 	.word	0x08009a2d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009960:	f7fd f8b6 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8009964:	4603      	mov	r3, r0
 8009966:	4619      	mov	r1, r3
 8009968:	f04f 0200 	mov.w	r2, #0
 800996c:	f04f 0300 	mov.w	r3, #0
 8009970:	f04f 0400 	mov.w	r4, #0
 8009974:	0214      	lsls	r4, r2, #8
 8009976:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800997a:	020b      	lsls	r3, r1, #8
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6852      	ldr	r2, [r2, #4]
 8009980:	0852      	lsrs	r2, r2, #1
 8009982:	4611      	mov	r1, r2
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	eb13 0b01 	adds.w	fp, r3, r1
 800998c:	eb44 0c02 	adc.w	ip, r4, r2
 8009990:	4658      	mov	r0, fp
 8009992:	4661      	mov	r1, ip
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f04f 0400 	mov.w	r4, #0
 800999c:	461a      	mov	r2, r3
 800999e:	4623      	mov	r3, r4
 80099a0:	f7f6 fc2c 	bl	80001fc <__aeabi_uldivmod>
 80099a4:	4603      	mov	r3, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80099aa:	e057      	b.n	8009a5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	085b      	lsrs	r3, r3, #1
 80099b2:	f04f 0400 	mov.w	r4, #0
 80099b6:	49b1      	ldr	r1, [pc, #708]	; (8009c7c <UART_SetConfig+0x68c>)
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	eb13 0b01 	adds.w	fp, r3, r1
 80099c0:	eb44 0c02 	adc.w	ip, r4, r2
 80099c4:	4658      	mov	r0, fp
 80099c6:	4661      	mov	r1, ip
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f04f 0400 	mov.w	r4, #0
 80099d0:	461a      	mov	r2, r3
 80099d2:	4623      	mov	r3, r4
 80099d4:	f7f6 fc12 	bl	80001fc <__aeabi_uldivmod>
 80099d8:	4603      	mov	r3, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80099de:	e03d      	b.n	8009a5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80099e0:	f7fc ffe0 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 80099e4:	4603      	mov	r3, r0
 80099e6:	4619      	mov	r1, r3
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	f04f 0300 	mov.w	r3, #0
 80099f0:	f04f 0400 	mov.w	r4, #0
 80099f4:	0214      	lsls	r4, r2, #8
 80099f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80099fa:	020b      	lsls	r3, r1, #8
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6852      	ldr	r2, [r2, #4]
 8009a00:	0852      	lsrs	r2, r2, #1
 8009a02:	4611      	mov	r1, r2
 8009a04:	f04f 0200 	mov.w	r2, #0
 8009a08:	eb13 0b01 	adds.w	fp, r3, r1
 8009a0c:	eb44 0c02 	adc.w	ip, r4, r2
 8009a10:	4658      	mov	r0, fp
 8009a12:	4661      	mov	r1, ip
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f04f 0400 	mov.w	r4, #0
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4623      	mov	r3, r4
 8009a20:	f7f6 fbec 	bl	80001fc <__aeabi_uldivmod>
 8009a24:	4603      	mov	r3, r0
 8009a26:	460c      	mov	r4, r1
 8009a28:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009a2a:	e017      	b.n	8009a5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	085b      	lsrs	r3, r3, #1
 8009a32:	f04f 0400 	mov.w	r4, #0
 8009a36:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8009a3a:	f144 0100 	adc.w	r1, r4, #0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f04f 0400 	mov.w	r4, #0
 8009a46:	461a      	mov	r2, r3
 8009a48:	4623      	mov	r3, r4
 8009a4a:	f7f6 fbd7 	bl	80001fc <__aeabi_uldivmod>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009a54:	e002      	b.n	8009a5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	74fb      	strb	r3, [r7, #19]
            break;
 8009a5a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a62:	d308      	bcc.n	8009a76 <UART_SetConfig+0x486>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a6a:	d204      	bcs.n	8009a76 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	60da      	str	r2, [r3, #12]
 8009a74:	e0f5      	b.n	8009c62 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	74fb      	strb	r3, [r7, #19]
 8009a7a:	e0f2      	b.n	8009c62 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a84:	d17f      	bne.n	8009b86 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8009a86:	7efb      	ldrb	r3, [r7, #27]
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	d85c      	bhi.n	8009b46 <UART_SetConfig+0x556>
 8009a8c:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <UART_SetConfig+0x4a4>)
 8009a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a92:	bf00      	nop
 8009a94:	08009ab9 	.word	0x08009ab9
 8009a98:	08009ad7 	.word	0x08009ad7
 8009a9c:	08009af5 	.word	0x08009af5
 8009aa0:	08009b47 	.word	0x08009b47
 8009aa4:	08009b11 	.word	0x08009b11
 8009aa8:	08009b47 	.word	0x08009b47
 8009aac:	08009b47 	.word	0x08009b47
 8009ab0:	08009b47 	.word	0x08009b47
 8009ab4:	08009b2f 	.word	0x08009b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009ab8:	f7fd f80a 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8009abc:	4603      	mov	r3, r0
 8009abe:	005a      	lsls	r2, r3, #1
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	085b      	lsrs	r3, r3, #1
 8009ac6:	441a      	add	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009ad4:	e03a      	b.n	8009b4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009ad6:	f7fd f811 	bl	8006afc <HAL_RCC_GetPCLK2Freq>
 8009ada:	4603      	mov	r3, r0
 8009adc:	005a      	lsls	r2, r3, #1
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	085b      	lsrs	r3, r3, #1
 8009ae4:	441a      	add	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009af2:	e02b      	b.n	8009b4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	085b      	lsrs	r3, r3, #1
 8009afa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8009afe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6852      	ldr	r2, [r2, #4]
 8009b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009b0e:	e01d      	b.n	8009b4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009b10:	f7fc ff48 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8009b14:	4603      	mov	r3, r0
 8009b16:	005a      	lsls	r2, r3, #1
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	085b      	lsrs	r3, r3, #1
 8009b1e:	441a      	add	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009b2c:	e00e      	b.n	8009b4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009b44:	e002      	b.n	8009b4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	74fb      	strb	r3, [r7, #19]
        break;
 8009b4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d916      	bls.n	8009b80 <UART_SetConfig+0x590>
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b58:	d212      	bcs.n	8009b80 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f023 030f 	bic.w	r3, r3, #15
 8009b62:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f003 0307 	and.w	r3, r3, #7
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	897b      	ldrh	r3, [r7, #10]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	897a      	ldrh	r2, [r7, #10]
 8009b7c:	60da      	str	r2, [r3, #12]
 8009b7e:	e070      	b.n	8009c62 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	74fb      	strb	r3, [r7, #19]
 8009b84:	e06d      	b.n	8009c62 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8009b86:	7efb      	ldrb	r3, [r7, #27]
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d859      	bhi.n	8009c40 <UART_SetConfig+0x650>
 8009b8c:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <UART_SetConfig+0x5a4>)
 8009b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b92:	bf00      	nop
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bd5 	.word	0x08009bd5
 8009b9c:	08009bf1 	.word	0x08009bf1
 8009ba0:	08009c41 	.word	0x08009c41
 8009ba4:	08009c0d 	.word	0x08009c0d
 8009ba8:	08009c41 	.word	0x08009c41
 8009bac:	08009c41 	.word	0x08009c41
 8009bb0:	08009c41 	.word	0x08009c41
 8009bb4:	08009c29 	.word	0x08009c29
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009bb8:	f7fc ff8a 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	441a      	add	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009bd2:	e038      	b.n	8009c46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009bd4:	f7fc ff92 	bl	8006afc <HAL_RCC_GetPCLK2Freq>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	085b      	lsrs	r3, r3, #1
 8009be0:	441a      	add	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009bee:	e02a      	b.n	8009c46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	085b      	lsrs	r3, r3, #1
 8009bf6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009bfa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	6852      	ldr	r2, [r2, #4]
 8009c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c0a:	e01c      	b.n	8009c46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009c0c:	f7fc feca 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8009c10:	4602      	mov	r2, r0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	085b      	lsrs	r3, r3, #1
 8009c18:	441a      	add	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c26:	e00e      	b.n	8009c46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	085b      	lsrs	r3, r3, #1
 8009c2e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c3e:	e002      	b.n	8009c46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	74fb      	strb	r3, [r7, #19]
        break;
 8009c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2b0f      	cmp	r3, #15
 8009c4a:	d908      	bls.n	8009c5e <UART_SetConfig+0x66e>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c52:	d204      	bcs.n	8009c5e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	60da      	str	r2, [r3, #12]
 8009c5c:	e001      	b.n	8009c62 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009c6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3720      	adds	r7, #32
 8009c74:	46bd      	mov	sp, r7
 8009c76:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009c7a:	bf00      	nop
 8009c7c:	f4240000 	.word	0xf4240000

08009c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00a      	beq.n	8009caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	f003 0304 	and.w	r3, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00a      	beq.n	8009cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	f003 0320 	and.w	r3, r3, #32
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01a      	beq.n	8009d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d7e:	d10a      	bne.n	8009d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]
  }
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af02      	add	r7, sp, #8
 8009dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009dd2:	f7f8 fbaf 	bl	8002534 <HAL_GetTick>
 8009dd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b08      	cmp	r3, #8
 8009de4:	d10e      	bne.n	8009e04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009de6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f82a 	bl	8009e4e <UART_WaitOnFlagUntilTimeout>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e020      	b.n	8009e46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b04      	cmp	r3, #4
 8009e10:	d10e      	bne.n	8009e30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f814 	bl	8009e4e <UART_WaitOnFlagUntilTimeout>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e00a      	b.n	8009e46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2220      	movs	r2, #32
 8009e34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	60f8      	str	r0, [r7, #12]
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	603b      	str	r3, [r7, #0]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e5e:	e02a      	b.n	8009eb6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e66:	d026      	beq.n	8009eb6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e68:	f7f8 fb64 	bl	8002534 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d302      	bcc.n	8009e7e <UART_WaitOnFlagUntilTimeout+0x30>
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d11b      	bne.n	8009eb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0201 	bic.w	r2, r2, #1
 8009e9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2220      	movs	r2, #32
 8009ea2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e00f      	b.n	8009ed6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	69da      	ldr	r2, [r3, #28]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	bf0c      	ite	eq
 8009ec6:	2301      	moveq	r3, #1
 8009ec8:	2300      	movne	r3, #0
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d0c5      	beq.n	8009e60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009ef4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f1e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689a      	ldr	r2, [r3, #8]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f022 0201 	bic.w	r2, r2, #1
 8009f2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2220      	movs	r2, #32
 8009f34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0320 	and.w	r3, r3, #32
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d114      	bne.n	8009f8e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f7a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f8a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f8c:	e002      	b.n	8009f94 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fb10 	bl	80095b4 <HAL_UART_TxCpltCallback>
}
 8009f94:	bf00      	nop
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff fb0c 	bl	80095c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb0:	bf00      	nop
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fd0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fdc:	2b80      	cmp	r3, #128	; 0x80
 8009fde:	d109      	bne.n	8009ff4 <UART_DMAError+0x3c>
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	2b21      	cmp	r3, #33	; 0x21
 8009fe4:	d106      	bne.n	8009ff4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009fee:	6978      	ldr	r0, [r7, #20]
 8009ff0:	f7ff ff75 	bl	8009ede <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffe:	2b40      	cmp	r3, #64	; 0x40
 800a000:	d109      	bne.n	800a016 <UART_DMAError+0x5e>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b22      	cmp	r3, #34	; 0x22
 800a006:	d106      	bne.n	800a016 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a010:	6978      	ldr	r0, [r7, #20]
 800a012:	f7ff ff79 	bl	8009f08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a01a:	f043 0210 	orr.w	r2, r3, #16
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a022:	6978      	ldr	r0, [r7, #20]
 800a024:	f7ff fada 	bl	80095dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a028:	bf00      	nop
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f7ff fac4 	bl	80095dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a054:	bf00      	nop
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a072:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2220      	movs	r2, #32
 800a078:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff fa97 	bl	80095b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a096:	bf00      	nop
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
	...

0800a0a4 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
#if defined(FMC_BCRx_NBLSET)
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
#endif /* FMC_BCRx_NBLSET */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	6812      	ldr	r2, [r2, #0]
 800a0bc:	f023 0101 	bic.w	r1, r3, #1
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	d102      	bne.n	800a0d4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a0ce:	2340      	movs	r3, #64	; 0x40
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	e001      	b.n	800a0d8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (flashaccess              |
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0e2:	4b2b      	ldr	r3, [pc, #172]	; (800a190 <FMC_NORSRAM_Init+0xec>)
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	6851      	ldr	r1, [r2, #4]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	4311      	orrs	r1, r2
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	6892      	ldr	r2, [r2, #8]
 800a0f2:	4311      	orrs	r1, r2
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	68d2      	ldr	r2, [r2, #12]
 800a0f8:	4311      	orrs	r1, r2
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	6912      	ldr	r2, [r2, #16]
 800a0fe:	4311      	orrs	r1, r2
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	6952      	ldr	r2, [r2, #20]
 800a104:	4311      	orrs	r1, r2
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	6992      	ldr	r2, [r2, #24]
 800a10a:	4311      	orrs	r1, r2
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	69d2      	ldr	r2, [r2, #28]
 800a110:	4311      	orrs	r1, r2
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	6a12      	ldr	r2, [r2, #32]
 800a116:	4311      	orrs	r1, r2
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a11c:	4311      	orrs	r1, r2
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a122:	4311      	orrs	r1, r2
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a128:	4311      	orrs	r1, r2
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a12e:	4311      	orrs	r1, r2
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a134:	4311      	orrs	r1, r2
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a13a:	4311      	orrs	r1, r2
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	4319      	orrs	r1, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                          Init->NBLSetupTime       |
#endif /* FMC_BCRx_NBLSET */
                                                          Init->PageSize));

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a150:	d10c      	bne.n	800a16c <FMC_NORSRAM_Init+0xc8>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d008      	beq.n	800a16c <FMC_NORSRAM_Init+0xc8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	431a      	orrs	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	601a      	str	r2, [r3, #0]
  }

#if defined(FMC_BCR1_WFDIS)
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <FMC_NORSRAM_Init+0xde>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a17c:	431a      	orrs	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	601a      	str	r2, [r3, #0]
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	ffc00480 	.word	0xffc00480

0800a194 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                             |
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ae:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	041b      	lsls	r3, r3, #16
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	051b      	lsls	r3, r3, #20
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	3b02      	subs	r3, #2
 800a1de:	061b      	lsls	r3, r3, #24
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	3201      	adds	r2, #1
 800a1ec:	4319      	orrs	r1, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        (((Timing->CLKDivision) - 1)      << FMC_BTRx_CLKDIV_Pos)        |
                        (((Timing->DataLatency) - 2)      << FMC_BTRx_DATLAT_Pos)        |
                        (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a200:	d113      	bne.n	800a22a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a20a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1) << FMC_BTRx_CLKDIV_Pos);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	3b01      	subs	r3, #1
 800a212:	051b      	lsls	r3, r3, #20
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	4313      	orrs	r3, r2
 800a218:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1], FMC_BTRx_CLKDIV, tmpr);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	431a      	orrs	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	371c      	adds	r7, #28
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a24c:	d11d      	bne.n	800a28a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                              |
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a256:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a258:	4013      	ands	r3, r2
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	6811      	ldr	r1, [r2, #0]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	6852      	ldr	r2, [r2, #4]
 800a262:	0112      	lsls	r2, r2, #4
 800a264:	4311      	orrs	r1, r2
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	6892      	ldr	r2, [r2, #8]
 800a26a:	0212      	lsls	r2, r2, #8
 800a26c:	4311      	orrs	r1, r2
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	6992      	ldr	r2, [r2, #24]
 800a272:	4311      	orrs	r1, r2
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	68d2      	ldr	r2, [r2, #12]
 800a278:	0412      	lsls	r2, r2, #16
 800a27a:	430a      	orrs	r2, r1
 800a27c:	ea43 0102 	orr.w	r1, r3, r2
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a288:	e005      	b.n	800a296 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                          Timing->AccessMode                                          |
                          ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	cff00000 	.word	0xcff00000

0800a2a8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	b480      	push	{r7}
 800a2ac:	b085      	sub	sp, #20
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	f107 001c 	add.w	r0, r7, #28
 800a2b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a2c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800a2ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a2ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a2d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a2d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a2e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	b004      	add	sp, #16
 800a300:	4770      	bx	lr

0800a302 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a310:	4618      	mov	r0, r3
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2203      	movs	r2, #3
 800a328:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a32a:	2002      	movs	r0, #2
 800a32c:	f7f8 f90e 	bl	800254c <HAL_Delay>

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0303 	and.w	r3, r3, #3
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a356:	b480      	push	{r7}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a374:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a37a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a380:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a390:	f023 030f 	bic.w	r3, r3, #15
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	b2db      	uxtb	r3, r3
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3314      	adds	r3, #20
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a410:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a416:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a41c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4313      	orrs	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	431a      	orrs	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a434:	2300      	movs	r3, #0

}
 800a436:	4618      	mov	r0, r3
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b088      	sub	sp, #32
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a450:	2310      	movs	r3, #16
 800a452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a454:	2340      	movs	r3, #64	; 0x40
 800a456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a45c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a462:	f107 0308 	add.w	r3, r7, #8
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ff74 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a46e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a472:	2110      	movs	r1, #16
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f975 	bl	800a764 <SDMMC_GetCmdResp1>
 800a47a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a47c:	69fb      	ldr	r3, [r7, #28]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3720      	adds	r7, #32
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b08a      	sub	sp, #40	; 0x28
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a496:	2307      	movs	r3, #7
 800a498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a49a:	2340      	movs	r3, #64	; 0x40
 800a49c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4a6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4a8:	f107 0310 	add.w	r3, r7, #16
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7ff ff51 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b8:	2107      	movs	r1, #7
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f952 	bl	800a764 <SDMMC_GetCmdResp1>
 800a4c0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3728      	adds	r7, #40	; 0x28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4ea:	f107 0308 	add.w	r3, r7, #8
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff ff30 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f90c 	bl	800a714 <SDMMC_GetCmdError>
 800a4fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3720      	adds	r7, #32
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b088      	sub	sp, #32
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a510:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a516:	2308      	movs	r3, #8
 800a518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a51a:	2340      	movs	r3, #64	; 0x40
 800a51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a51e:	2300      	movs	r3, #0
 800a520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a526:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff ff11 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 faf5 	bl	800ab24 <SDMMC_GetCmdResp7>
 800a53a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a53c:	69fb      	ldr	r3, [r7, #28]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3720      	adds	r7, #32
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b088      	sub	sp, #32
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a554:	2337      	movs	r3, #55	; 0x37
 800a556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a558:	2340      	movs	r3, #64	; 0x40
 800a55a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a55c:	2300      	movs	r3, #0
 800a55e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a566:	f107 0308 	add.w	r3, r7, #8
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7ff fef2 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a572:	f241 3288 	movw	r2, #5000	; 0x1388
 800a576:	2137      	movs	r1, #55	; 0x37
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f8f3 	bl	800a764 <SDMMC_GetCmdResp1>
 800a57e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a580:	69fb      	ldr	r3, [r7, #28]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3720      	adds	r7, #32
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b088      	sub	sp, #32
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a59a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a59e:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a5a0:	2329      	movs	r3, #41	; 0x29
 800a5a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5a4:	2340      	movs	r3, #64	; 0x40
 800a5a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5b2:	f107 0308 	add.w	r3, r7, #8
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff fecc 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fa02 	bl	800a9c8 <SDMMC_GetCmdResp3>
 800a5c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3720      	adds	r7, #32
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b088      	sub	sp, #32
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a5de:	2306      	movs	r3, #6
 800a5e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5e2:	2340      	movs	r3, #64	; 0x40
 800a5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff fead 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a600:	2106      	movs	r1, #6
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f8ae 	bl	800a764 <SDMMC_GetCmdResp1>
 800a608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a60a:	69fb      	ldr	r3, [r7, #28]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3720      	adds	r7, #32
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a61c:	2300      	movs	r3, #0
 800a61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a620:	2333      	movs	r3, #51	; 0x33
 800a622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a624:	2340      	movs	r3, #64	; 0x40
 800a626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a628:	2300      	movs	r3, #0
 800a62a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a630:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a632:	f107 0308 	add.w	r3, r7, #8
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff fe8c 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a63e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a642:	2133      	movs	r1, #51	; 0x33
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f88d 	bl	800a764 <SDMMC_GetCmdResp1>
 800a64a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a64c:	69fb      	ldr	r3, [r7, #28]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3720      	adds	r7, #32
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b088      	sub	sp, #32
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a65e:	2300      	movs	r3, #0
 800a660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a662:	2302      	movs	r3, #2
 800a664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a666:	23c0      	movs	r3, #192	; 0xc0
 800a668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a66a:	2300      	movs	r3, #0
 800a66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a674:	f107 0308 	add.w	r3, r7, #8
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fe6b 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f95b 	bl	800a93c <SDMMC_GetCmdResp2>
 800a686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a688:	69fb      	ldr	r3, [r7, #28]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b088      	sub	sp, #32
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a6a0:	2309      	movs	r3, #9
 800a6a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a6a4:	23c0      	movs	r3, #192	; 0xc0
 800a6a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6b2:	f107 0308 	add.w	r3, r7, #8
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff fe4c 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f93c 	bl	800a93c <SDMMC_GetCmdResp2>
 800a6c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6c6:	69fb      	ldr	r3, [r7, #28]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3720      	adds	r7, #32
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b088      	sub	sp, #32
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6e2:	2340      	movs	r3, #64	; 0x40
 800a6e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6f0:	f107 0308 	add.w	r3, r7, #8
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fe2d 	bl	800a356 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	2103      	movs	r1, #3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f99b 	bl	800aa3c <SDMMC_GetCmdResp6>
 800a706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a708:	69fb      	ldr	r3, [r7, #28]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3720      	adds	r7, #32
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a714:	b490      	push	{r4, r7}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a71c:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <SDMMC_GetCmdError+0x48>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a0f      	ldr	r2, [pc, #60]	; (800a760 <SDMMC_GetCmdError+0x4c>)
 800a722:	fba2 2303 	umull	r2, r3, r2, r3
 800a726:	0a5b      	lsrs	r3, r3, #9
 800a728:	f241 3288 	movw	r2, #5000	; 0x1388
 800a72c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a730:	4623      	mov	r3, r4
 800a732:	1e5c      	subs	r4, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d102      	bne.n	800a73e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a73c:	e009      	b.n	800a752 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0f2      	beq.n	800a730 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	22c5      	movs	r2, #197	; 0xc5
 800a74e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bc90      	pop	{r4, r7}
 800a75a:	4770      	bx	lr
 800a75c:	20000000 	.word	0x20000000
 800a760:	10624dd3 	.word	0x10624dd3

0800a764 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a764:	b590      	push	{r4, r7, lr}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	460b      	mov	r3, r1
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a772:	4b6f      	ldr	r3, [pc, #444]	; (800a930 <SDMMC_GetCmdResp1+0x1cc>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a6f      	ldr	r2, [pc, #444]	; (800a934 <SDMMC_GetCmdResp1+0x1d0>)
 800a778:	fba2 2303 	umull	r2, r3, r2, r3
 800a77c:	0a5b      	lsrs	r3, r3, #9
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a784:	4623      	mov	r3, r4
 800a786:	1e5c      	subs	r4, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a78c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a790:	e0c9      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a796:	617b      	str	r3, [r7, #20]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d0f0      	beq.n	800a784 <SDMMC_GetCmdResp1+0x20>
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1eb      	bne.n	800a784 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d004      	beq.n	800a7c2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2204      	movs	r2, #4
 800a7bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7be:	2304      	movs	r3, #4
 800a7c0:	e0b1      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d004      	beq.n	800a7d8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e0a6      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	22c5      	movs	r2, #197	; 0xc5
 800a7dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f7ff fde3 	bl	800a3aa <SDMMC_GetCommandResponse>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d001      	beq.n	800a7f2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e099      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff fde5 	bl	800a3c4 <SDMMC_GetResponse>
 800a7fa:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	4b4e      	ldr	r3, [pc, #312]	; (800a938 <SDMMC_GetCmdResp1+0x1d4>)
 800a800:	4013      	ands	r3, r2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a806:	2300      	movs	r3, #0
 800a808:	e08d      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	da02      	bge.n	800a816 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a814:	e087      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a820:	2340      	movs	r3, #64	; 0x40
 800a822:	e080      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a82e:	2380      	movs	r3, #128	; 0x80
 800a830:	e079      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a83c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a840:	e071      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a84c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a850:	e069      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a85c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a860:	e061      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a86c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a870:	e059      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a87c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a880:	e051      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a88c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a890:	e049      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a89c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a8a0:	e041      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a8ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8b0:	e039      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a8bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a8c0:	e031      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a8cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a8d0:	e029      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a8dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a8e0:	e021      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a8ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a8f0:	e019      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a8fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a900:	e011      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a90c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a910:	e009      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	f003 0308 	and.w	r3, r3, #8
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a91c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a920:	e001      	b.n	800a926 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a926:	4618      	mov	r0, r3
 800a928:	371c      	adds	r7, #28
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd90      	pop	{r4, r7, pc}
 800a92e:	bf00      	nop
 800a930:	20000000 	.word	0x20000000
 800a934:	10624dd3 	.word	0x10624dd3
 800a938:	fdffe008 	.word	0xfdffe008

0800a93c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a93c:	b490      	push	{r4, r7}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a944:	4b1e      	ldr	r3, [pc, #120]	; (800a9c0 <SDMMC_GetCmdResp2+0x84>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a1e      	ldr	r2, [pc, #120]	; (800a9c4 <SDMMC_GetCmdResp2+0x88>)
 800a94a:	fba2 2303 	umull	r2, r3, r2, r3
 800a94e:	0a5b      	lsrs	r3, r3, #9
 800a950:	f241 3288 	movw	r2, #5000	; 0x1388
 800a954:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a958:	4623      	mov	r3, r4
 800a95a:	1e5c      	subs	r4, r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d102      	bne.n	800a966 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a964:	e026      	b.n	800a9b4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0f0      	beq.n	800a958 <SDMMC_GetCmdResp2+0x1c>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1eb      	bne.n	800a958 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d004      	beq.n	800a996 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2204      	movs	r2, #4
 800a990:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a992:	2304      	movs	r3, #4
 800a994:	e00e      	b.n	800a9b4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e003      	b.n	800a9b4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	22c5      	movs	r2, #197	; 0xc5
 800a9b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc90      	pop	{r4, r7}
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	20000000 	.word	0x20000000
 800a9c4:	10624dd3 	.word	0x10624dd3

0800a9c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a9c8:	b490      	push	{r4, r7}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9d0:	4b18      	ldr	r3, [pc, #96]	; (800aa34 <SDMMC_GetCmdResp3+0x6c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a18      	ldr	r2, [pc, #96]	; (800aa38 <SDMMC_GetCmdResp3+0x70>)
 800a9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9da:	0a5b      	lsrs	r3, r3, #9
 800a9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a9e4:	4623      	mov	r3, r4
 800a9e6:	1e5c      	subs	r4, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d102      	bne.n	800a9f2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9f0:	e01b      	b.n	800aa2a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0f0      	beq.n	800a9e4 <SDMMC_GetCmdResp3+0x1c>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1eb      	bne.n	800a9e4 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2204      	movs	r2, #4
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa1e:	2304      	movs	r3, #4
 800aa20:	e003      	b.n	800aa2a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	22c5      	movs	r2, #197	; 0xc5
 800aa26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bc90      	pop	{r4, r7}
 800aa32:	4770      	bx	lr
 800aa34:	20000000 	.word	0x20000000
 800aa38:	10624dd3 	.word	0x10624dd3

0800aa3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aa3c:	b590      	push	{r4, r7, lr}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	460b      	mov	r3, r1
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa4a:	4b34      	ldr	r3, [pc, #208]	; (800ab1c <SDMMC_GetCmdResp6+0xe0>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a34      	ldr	r2, [pc, #208]	; (800ab20 <SDMMC_GetCmdResp6+0xe4>)
 800aa50:	fba2 2303 	umull	r2, r3, r2, r3
 800aa54:	0a5b      	lsrs	r3, r3, #9
 800aa56:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa5a:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800aa5e:	4623      	mov	r3, r4
 800aa60:	1e5c      	subs	r4, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d102      	bne.n	800aa6c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa6a:	e052      	b.n	800ab12 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa70:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0f0      	beq.n	800aa5e <SDMMC_GetCmdResp6+0x22>
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1eb      	bne.n	800aa5e <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa8a:	f003 0304 	and.w	r3, r3, #4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2204      	movs	r2, #4
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa98:	2304      	movs	r3, #4
 800aa9a:	e03a      	b.n	800ab12 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e02f      	b.n	800ab12 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7ff fc79 	bl	800a3aa <SDMMC_GetCommandResponse>
 800aab8:	4603      	mov	r3, r0
 800aaba:	461a      	mov	r2, r3
 800aabc:	7afb      	ldrb	r3, [r7, #11]
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d001      	beq.n	800aac6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e025      	b.n	800ab12 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	22c5      	movs	r2, #197	; 0xc5
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aacc:	2100      	movs	r1, #0
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7ff fc78 	bl	800a3c4 <SDMMC_GetResponse>
 800aad4:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	0c1b      	lsrs	r3, r3, #16
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800aaea:	2300      	movs	r3, #0
 800aaec:	e011      	b.n	800ab12 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aaf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aafc:	e009      	b.n	800ab12 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d002      	beq.n	800ab0e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab0c:	e001      	b.n	800ab12 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd90      	pop	{r4, r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000000 	.word	0x20000000
 800ab20:	10624dd3 	.word	0x10624dd3

0800ab24 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ab24:	b490      	push	{r4, r7}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab2c:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <SDMMC_GetCmdResp7+0x90>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a21      	ldr	r2, [pc, #132]	; (800abb8 <SDMMC_GetCmdResp7+0x94>)
 800ab32:	fba2 2303 	umull	r2, r3, r2, r3
 800ab36:	0a5b      	lsrs	r3, r3, #9
 800ab38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab3c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ab40:	4623      	mov	r3, r4
 800ab42:	1e5c      	subs	r4, r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d102      	bne.n	800ab4e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab4c:	e02c      	b.n	800aba8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab52:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0f0      	beq.n	800ab40 <SDMMC_GetCmdResp7+0x1c>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1eb      	bne.n	800ab40 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d004      	beq.n	800ab7e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2204      	movs	r2, #4
 800ab78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab7a:	2304      	movs	r3, #4
 800ab7c:	e014      	b.n	800aba8 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d004      	beq.n	800ab94 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e009      	b.n	800aba8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2240      	movs	r2, #64	; 0x40
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aba6:	2300      	movs	r3, #0

}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bc90      	pop	{r4, r7}
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20000000 	.word	0x20000000
 800abb8:	10624dd3 	.word	0x10624dd3

0800abbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abbc:	b084      	sub	sp, #16
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	f107 001c 	add.w	r0, r7, #28
 800abca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d122      	bne.n	800ac1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800abe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800abfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d105      	bne.n	800ac0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f001 f978 	bl	800bf04 <USB_CoreReset>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]
 800ac18:	e01a      	b.n	800ac50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 f96c 	bl	800bf04 <USB_CoreReset>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ac30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d106      	bne.n	800ac44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	639a      	str	r2, [r3, #56]	; 0x38
 800ac42:	e005      	b.n	800ac50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac5c:	b004      	add	sp, #16
 800ac5e:	4770      	bx	lr

0800ac60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ac6e:	79fb      	ldrb	r3, [r7, #7]
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d165      	bne.n	800ad40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	4a3e      	ldr	r2, [pc, #248]	; (800ad70 <USB_SetTurnaroundTime+0x110>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d906      	bls.n	800ac8a <USB_SetTurnaroundTime+0x2a>
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	4a3d      	ldr	r2, [pc, #244]	; (800ad74 <USB_SetTurnaroundTime+0x114>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d802      	bhi.n	800ac8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ac84:	230f      	movs	r3, #15
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	e05c      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	4a39      	ldr	r2, [pc, #228]	; (800ad74 <USB_SetTurnaroundTime+0x114>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d906      	bls.n	800aca0 <USB_SetTurnaroundTime+0x40>
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	4a38      	ldr	r2, [pc, #224]	; (800ad78 <USB_SetTurnaroundTime+0x118>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d802      	bhi.n	800aca0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ac9a:	230e      	movs	r3, #14
 800ac9c:	617b      	str	r3, [r7, #20]
 800ac9e:	e051      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	4a35      	ldr	r2, [pc, #212]	; (800ad78 <USB_SetTurnaroundTime+0x118>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d906      	bls.n	800acb6 <USB_SetTurnaroundTime+0x56>
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	4a34      	ldr	r2, [pc, #208]	; (800ad7c <USB_SetTurnaroundTime+0x11c>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d802      	bhi.n	800acb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800acb0:	230d      	movs	r3, #13
 800acb2:	617b      	str	r3, [r7, #20]
 800acb4:	e046      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	4a30      	ldr	r2, [pc, #192]	; (800ad7c <USB_SetTurnaroundTime+0x11c>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d906      	bls.n	800accc <USB_SetTurnaroundTime+0x6c>
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	4a2f      	ldr	r2, [pc, #188]	; (800ad80 <USB_SetTurnaroundTime+0x120>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d802      	bhi.n	800accc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800acc6:	230c      	movs	r3, #12
 800acc8:	617b      	str	r3, [r7, #20]
 800acca:	e03b      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	4a2c      	ldr	r2, [pc, #176]	; (800ad80 <USB_SetTurnaroundTime+0x120>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d906      	bls.n	800ace2 <USB_SetTurnaroundTime+0x82>
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	4a2b      	ldr	r2, [pc, #172]	; (800ad84 <USB_SetTurnaroundTime+0x124>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d802      	bhi.n	800ace2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800acdc:	230b      	movs	r3, #11
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	e030      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	4a27      	ldr	r2, [pc, #156]	; (800ad84 <USB_SetTurnaroundTime+0x124>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d906      	bls.n	800acf8 <USB_SetTurnaroundTime+0x98>
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	4a26      	ldr	r2, [pc, #152]	; (800ad88 <USB_SetTurnaroundTime+0x128>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d802      	bhi.n	800acf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800acf2:	230a      	movs	r3, #10
 800acf4:	617b      	str	r3, [r7, #20]
 800acf6:	e025      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	4a23      	ldr	r2, [pc, #140]	; (800ad88 <USB_SetTurnaroundTime+0x128>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d906      	bls.n	800ad0e <USB_SetTurnaroundTime+0xae>
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	4a22      	ldr	r2, [pc, #136]	; (800ad8c <USB_SetTurnaroundTime+0x12c>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d802      	bhi.n	800ad0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ad08:	2309      	movs	r3, #9
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	e01a      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	4a1e      	ldr	r2, [pc, #120]	; (800ad8c <USB_SetTurnaroundTime+0x12c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d906      	bls.n	800ad24 <USB_SetTurnaroundTime+0xc4>
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	4a1d      	ldr	r2, [pc, #116]	; (800ad90 <USB_SetTurnaroundTime+0x130>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d802      	bhi.n	800ad24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ad1e:	2308      	movs	r3, #8
 800ad20:	617b      	str	r3, [r7, #20]
 800ad22:	e00f      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	4a1a      	ldr	r2, [pc, #104]	; (800ad90 <USB_SetTurnaroundTime+0x130>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d906      	bls.n	800ad3a <USB_SetTurnaroundTime+0xda>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	4a19      	ldr	r2, [pc, #100]	; (800ad94 <USB_SetTurnaroundTime+0x134>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d802      	bhi.n	800ad3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ad34:	2307      	movs	r3, #7
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	e004      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ad3a:	2306      	movs	r3, #6
 800ad3c:	617b      	str	r3, [r7, #20]
 800ad3e:	e001      	b.n	800ad44 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ad40:	2309      	movs	r3, #9
 800ad42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	68da      	ldr	r2, [r3, #12]
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	029b      	lsls	r3, r3, #10
 800ad58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ad5c:	431a      	orrs	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	371c      	adds	r7, #28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	00d8acbf 	.word	0x00d8acbf
 800ad74:	00e4e1bf 	.word	0x00e4e1bf
 800ad78:	00f423ff 	.word	0x00f423ff
 800ad7c:	0106737f 	.word	0x0106737f
 800ad80:	011a499f 	.word	0x011a499f
 800ad84:	01312cff 	.word	0x01312cff
 800ad88:	014ca43f 	.word	0x014ca43f
 800ad8c:	016e35ff 	.word	0x016e35ff
 800ad90:	01a6ab1f 	.word	0x01a6ab1f
 800ad94:	01e847ff 	.word	0x01e847ff

0800ad98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f043 0201 	orr.w	r2, r3, #1
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f023 0201 	bic.w	r2, r3, #1
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	460b      	mov	r3, r1
 800ade6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d106      	bne.n	800ae08 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	60da      	str	r2, [r3, #12]
 800ae06:	e00b      	b.n	800ae20 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	60da      	str	r2, [r3, #12]
 800ae1a:	e001      	b.n	800ae20 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e003      	b.n	800ae28 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ae20:	2032      	movs	r0, #50	; 0x32
 800ae22:	f7f7 fb93 	bl	800254c <HAL_Delay>

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae30:	b084      	sub	sp, #16
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b086      	sub	sp, #24
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ae3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	613b      	str	r3, [r7, #16]
 800ae4e:	e009      	b.n	800ae64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	3340      	adds	r3, #64	; 0x40
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	3301      	adds	r3, #1
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b0e      	cmp	r3, #14
 800ae68:	d9f2      	bls.n	800ae50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ae6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d112      	bne.n	800ae96 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	e005      	b.n	800aea2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aea8:	461a      	mov	r2, r3
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aebc:	461a      	mov	r2, r3
 800aebe:	680b      	ldr	r3, [r1, #0]
 800aec0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aec2:	2103      	movs	r1, #3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f93d 	bl	800b144 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aeca:	2110      	movs	r1, #16
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f8f1 	bl	800b0b4 <USB_FlushTxFifo>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f90f 	bl	800b100 <USB_FlushRxFifo>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef2:	461a      	mov	r2, r3
 800aef4:	2300      	movs	r3, #0
 800aef6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefe:	461a      	mov	r2, r3
 800af00:	2300      	movs	r3, #0
 800af02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af0a:	461a      	mov	r2, r3
 800af0c:	2300      	movs	r3, #0
 800af0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af10:	2300      	movs	r3, #0
 800af12:	613b      	str	r3, [r7, #16]
 800af14:	e043      	b.n	800af9e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af2c:	d118      	bne.n	800af60 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10a      	bne.n	800af4a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af40:	461a      	mov	r2, r3
 800af42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	e013      	b.n	800af72 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	015a      	lsls	r2, r3, #5
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	4413      	add	r3, r2
 800af52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af56:	461a      	mov	r2, r3
 800af58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af5c:	6013      	str	r3, [r2, #0]
 800af5e:	e008      	b.n	800af72 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af6c:	461a      	mov	r2, r3
 800af6e:	2300      	movs	r3, #0
 800af70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7e:	461a      	mov	r2, r3
 800af80:	2300      	movs	r3, #0
 800af82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af90:	461a      	mov	r2, r3
 800af92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	3301      	adds	r3, #1
 800af9c:	613b      	str	r3, [r7, #16]
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d3b7      	bcc.n	800af16 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afa6:	2300      	movs	r3, #0
 800afa8:	613b      	str	r3, [r7, #16]
 800afaa:	e043      	b.n	800b034 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afc2:	d118      	bne.n	800aff6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10a      	bne.n	800afe0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd6:	461a      	mov	r2, r3
 800afd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afdc:	6013      	str	r3, [r2, #0]
 800afde:	e013      	b.n	800b008 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afec:	461a      	mov	r2, r3
 800afee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	e008      	b.n	800b008 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b002:	461a      	mov	r2, r3
 800b004:	2300      	movs	r3, #0
 800b006:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b014:	461a      	mov	r2, r3
 800b016:	2300      	movs	r3, #0
 800b018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b026:	461a      	mov	r2, r3
 800b028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b02c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	3301      	adds	r3, #1
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d3b7      	bcc.n	800afac <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b04a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b04e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b05c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	f043 0210 	orr.w	r2, r3, #16
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	4b10      	ldr	r3, [pc, #64]	; (800b0b0 <USB_DevInit+0x280>)
 800b070:	4313      	orrs	r3, r2
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	f043 0208 	orr.w	r2, r3, #8
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d107      	bne.n	800b09e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b096:	f043 0304 	orr.w	r3, r3, #4
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0aa:	b004      	add	sp, #16
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	803c3800 	.word	0x803c3800

0800b0b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	019b      	lsls	r3, r3, #6
 800b0c6:	f043 0220 	orr.w	r2, r3, #32
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4a09      	ldr	r2, [pc, #36]	; (800b0fc <USB_FlushTxFifo+0x48>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d901      	bls.n	800b0e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e006      	b.n	800b0ee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	f003 0320 	and.w	r3, r3, #32
 800b0e8:	2b20      	cmp	r3, #32
 800b0ea:	d0f0      	beq.n	800b0ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	00030d40 	.word	0x00030d40

0800b100 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2210      	movs	r2, #16
 800b110:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3301      	adds	r3, #1
 800b116:	60fb      	str	r3, [r7, #12]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4a09      	ldr	r2, [pc, #36]	; (800b140 <USB_FlushRxFifo+0x40>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d901      	bls.n	800b124 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b120:	2303      	movs	r3, #3
 800b122:	e006      	b.n	800b132 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	f003 0310 	and.w	r3, r3, #16
 800b12c:	2b10      	cmp	r3, #16
 800b12e:	d0f0      	beq.n	800b112 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	00030d40 	.word	0x00030d40

0800b144 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	78fb      	ldrb	r3, [r7, #3]
 800b15e:	68f9      	ldr	r1, [r7, #12]
 800b160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b164:	4313      	orrs	r3, r2
 800b166:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b176:	b480      	push	{r7}
 800b178:	b087      	sub	sp, #28
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f003 0306 	and.w	r3, r3, #6
 800b18e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2b02      	cmp	r3, #2
 800b194:	d002      	beq.n	800b19c <USB_GetDevSpeed+0x26>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b06      	cmp	r3, #6
 800b19a:	d102      	bne.n	800b1a2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b19c:	2302      	movs	r3, #2
 800b19e:	75fb      	strb	r3, [r7, #23]
 800b1a0:	e001      	b.n	800b1a6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b1a2:	230f      	movs	r3, #15
 800b1a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	371c      	adds	r7, #28
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	785b      	ldrb	r3, [r3, #1]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d13a      	bne.n	800b246 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1d6:	69da      	ldr	r2, [r3, #28]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	f003 030f 	and.w	r3, r3, #15
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	68f9      	ldr	r1, [r7, #12]
 800b1ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d155      	bne.n	800b2b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	78db      	ldrb	r3, [r3, #3]
 800b222:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b224:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	059b      	lsls	r3, r3, #22
 800b22a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b22c:	4313      	orrs	r3, r2
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	0151      	lsls	r1, r2, #5
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	440a      	add	r2, r1
 800b236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b23a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	e036      	b.n	800b2b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b24c:	69da      	ldr	r2, [r3, #28]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	f003 030f 	and.w	r3, r3, #15
 800b256:	2101      	movs	r1, #1
 800b258:	fa01 f303 	lsl.w	r3, r1, r3
 800b25c:	041b      	lsls	r3, r3, #16
 800b25e:	68f9      	ldr	r1, [r7, #12]
 800b260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b264:	4313      	orrs	r3, r2
 800b266:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d11a      	bne.n	800b2b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	015a      	lsls	r2, r3, #5
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	4413      	add	r3, r2
 800b286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	78db      	ldrb	r3, [r3, #3]
 800b298:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b29a:	430b      	orrs	r3, r1
 800b29c:	4313      	orrs	r3, r2
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	0151      	lsls	r1, r2, #5
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	440a      	add	r2, r1
 800b2a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
	...

0800b2c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d135      	bne.n	800b34c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	f003 030f 	and.w	r3, r3, #15
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	43db      	mvns	r3, r3
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b300:	4013      	ands	r3, r2
 800b302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b30a:	69da      	ldr	r2, [r3, #28]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	f003 030f 	and.w	r3, r3, #15
 800b314:	2101      	movs	r1, #1
 800b316:	fa01 f303 	lsl.w	r3, r1, r3
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	43db      	mvns	r3, r3
 800b31e:	68f9      	ldr	r1, [r7, #12]
 800b320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b324:	4013      	ands	r3, r2
 800b326:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	0159      	lsls	r1, r3, #5
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	440b      	add	r3, r1
 800b33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b342:	4619      	mov	r1, r3
 800b344:	4b1f      	ldr	r3, [pc, #124]	; (800b3c4 <USB_DeactivateEndpoint+0x100>)
 800b346:	4013      	ands	r3, r2
 800b348:	600b      	str	r3, [r1, #0]
 800b34a:	e034      	b.n	800b3b6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	f003 030f 	and.w	r3, r3, #15
 800b35c:	2101      	movs	r1, #1
 800b35e:	fa01 f303 	lsl.w	r3, r1, r3
 800b362:	041b      	lsls	r3, r3, #16
 800b364:	43db      	mvns	r3, r3
 800b366:	68f9      	ldr	r1, [r7, #12]
 800b368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b36c:	4013      	ands	r3, r2
 800b36e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b376:	69da      	ldr	r2, [r3, #28]
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	f003 030f 	and.w	r3, r3, #15
 800b380:	2101      	movs	r1, #1
 800b382:	fa01 f303 	lsl.w	r3, r1, r3
 800b386:	041b      	lsls	r3, r3, #16
 800b388:	43db      	mvns	r3, r3
 800b38a:	68f9      	ldr	r1, [r7, #12]
 800b38c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b390:	4013      	ands	r3, r2
 800b392:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	015a      	lsls	r2, r3, #5
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4413      	add	r3, r2
 800b39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	0159      	lsls	r1, r3, #5
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	440b      	add	r3, r1
 800b3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <USB_DeactivateEndpoint+0x104>)
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	ec337800 	.word	0xec337800
 800b3c8:	eff37800 	.word	0xeff37800

0800b3cc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	785b      	ldrb	r3, [r3, #1]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	f040 810a 	bne.w	800b5fe <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d132      	bne.n	800b458 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	0151      	lsls	r1, r2, #5
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	440a      	add	r2, r1
 800b408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b40c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b410:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	015a      	lsls	r2, r3, #5
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	0151      	lsls	r1, r2, #5
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	440a      	add	r2, r1
 800b42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	015a      	lsls	r2, r3, #5
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	0151      	lsls	r1, r2, #5
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	440a      	add	r2, r1
 800b44c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b450:	0cdb      	lsrs	r3, r3, #19
 800b452:	04db      	lsls	r3, r3, #19
 800b454:	6113      	str	r3, [r2, #16]
 800b456:	e074      	b.n	800b542 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	0151      	lsls	r1, r2, #5
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	440a      	add	r2, r1
 800b46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b472:	0cdb      	lsrs	r3, r3, #19
 800b474:	04db      	lsls	r3, r3, #19
 800b476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	015a      	lsls	r2, r3, #5
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	4413      	add	r3, r2
 800b480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	0151      	lsls	r1, r2, #5
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	440a      	add	r2, r1
 800b48e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b492:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b496:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b49a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	015a      	lsls	r2, r3, #5
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a8:	691a      	ldr	r2, [r3, #16]
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	6959      	ldr	r1, [r3, #20]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	440b      	add	r3, r1
 800b4b4:	1e59      	subs	r1, r3, #1
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	fbb1 f3f3 	udiv	r3, r1, r3
 800b4be:	04d9      	lsls	r1, r3, #19
 800b4c0:	4baf      	ldr	r3, [pc, #700]	; (800b780 <USB_EPStartXfer+0x3b4>)
 800b4c2:	400b      	ands	r3, r1
 800b4c4:	6939      	ldr	r1, [r7, #16]
 800b4c6:	0148      	lsls	r0, r1, #5
 800b4c8:	6979      	ldr	r1, [r7, #20]
 800b4ca:	4401      	add	r1, r0
 800b4cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e0:	691a      	ldr	r2, [r3, #16]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4ea:	6939      	ldr	r1, [r7, #16]
 800b4ec:	0148      	lsls	r0, r1, #5
 800b4ee:	6979      	ldr	r1, [r7, #20]
 800b4f0:	4401      	add	r1, r0
 800b4f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	78db      	ldrb	r3, [r3, #3]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d11f      	bne.n	800b542 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	015a      	lsls	r2, r3, #5
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	4413      	add	r3, r2
 800b50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	0151      	lsls	r1, r2, #5
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	440a      	add	r2, r1
 800b518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b51c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b520:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	0151      	lsls	r1, r2, #5
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	440a      	add	r2, r1
 800b538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b53c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b540:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	015a      	lsls	r2, r3, #5
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	4413      	add	r3, r2
 800b54a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	0151      	lsls	r1, r2, #5
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	440a      	add	r2, r1
 800b558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b560:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	78db      	ldrb	r3, [r3, #3]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d015      	beq.n	800b596 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 8100 	beq.w	800b774 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b57a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	f003 030f 	and.w	r3, r3, #15
 800b584:	2101      	movs	r1, #1
 800b586:	fa01 f303 	lsl.w	r3, r1, r3
 800b58a:	6979      	ldr	r1, [r7, #20]
 800b58c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b590:	4313      	orrs	r3, r2
 800b592:	634b      	str	r3, [r1, #52]	; 0x34
 800b594:	e0ee      	b.n	800b774 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d110      	bne.n	800b5c8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	015a      	lsls	r2, r3, #5
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	0151      	lsls	r1, r2, #5
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	440a      	add	r2, r1
 800b5bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	e00f      	b.n	800b5e8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	0151      	lsls	r1, r2, #5
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	440a      	add	r2, r1
 800b5de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	68d9      	ldr	r1, [r3, #12]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f9e2 	bl	800b9c0 <USB_WritePacket>
 800b5fc:	e0ba      	b.n	800b774 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	4413      	add	r3, r2
 800b606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	0151      	lsls	r1, r2, #5
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	440a      	add	r2, r1
 800b614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b618:	0cdb      	lsrs	r3, r3, #19
 800b61a:	04db      	lsls	r3, r3, #19
 800b61c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	015a      	lsls	r2, r3, #5
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	4413      	add	r3, r2
 800b626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	0151      	lsls	r1, r2, #5
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	440a      	add	r2, r1
 800b634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b63c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b640:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d123      	bne.n	800b692 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	4413      	add	r3, r2
 800b652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b656:	691a      	ldr	r2, [r3, #16]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b660:	6939      	ldr	r1, [r7, #16]
 800b662:	0148      	lsls	r0, r1, #5
 800b664:	6979      	ldr	r1, [r7, #20]
 800b666:	4401      	add	r1, r0
 800b668:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b66c:	4313      	orrs	r3, r2
 800b66e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	0151      	lsls	r1, r2, #5
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	440a      	add	r2, r1
 800b686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b68a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b68e:	6113      	str	r3, [r2, #16]
 800b690:	e033      	b.n	800b6fa <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	695a      	ldr	r2, [r3, #20]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	4413      	add	r3, r2
 800b69c:	1e5a      	subs	r2, r3, #1
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b4:	691a      	ldr	r2, [r3, #16]
 800b6b6:	89fb      	ldrh	r3, [r7, #14]
 800b6b8:	04d9      	lsls	r1, r3, #19
 800b6ba:	4b31      	ldr	r3, [pc, #196]	; (800b780 <USB_EPStartXfer+0x3b4>)
 800b6bc:	400b      	ands	r3, r1
 800b6be:	6939      	ldr	r1, [r7, #16]
 800b6c0:	0148      	lsls	r0, r1, #5
 800b6c2:	6979      	ldr	r1, [r7, #20]
 800b6c4:	4401      	add	r1, r0
 800b6c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6da:	691a      	ldr	r2, [r3, #16]
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	89f9      	ldrh	r1, [r7, #14]
 800b6e2:	fb01 f303 	mul.w	r3, r1, r3
 800b6e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ea:	6939      	ldr	r1, [r7, #16]
 800b6ec:	0148      	lsls	r0, r1, #5
 800b6ee:	6979      	ldr	r1, [r7, #20]
 800b6f0:	4401      	add	r1, r0
 800b6f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	78db      	ldrb	r3, [r3, #3]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d128      	bne.n	800b754 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d110      	bne.n	800b734 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b72c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	e00f      	b.n	800b754 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	015a      	lsls	r2, r3, #5
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	4413      	add	r3, r2
 800b73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	0151      	lsls	r1, r2, #5
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	440a      	add	r2, r1
 800b74a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b74e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b752:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	0151      	lsls	r1, r2, #5
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	440a      	add	r2, r1
 800b76a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b76e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	1ff80000 	.word	0x1ff80000

0800b784 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	785b      	ldrb	r3, [r3, #1]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	f040 80ab 	bne.w	800b8f8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d132      	bne.n	800b810 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	015a      	lsls	r2, r3, #5
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	0151      	lsls	r1, r2, #5
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	440a      	add	r2, r1
 800b7c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b7cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	0151      	lsls	r1, r2, #5
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	440a      	add	r2, r1
 800b7e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	015a      	lsls	r2, r3, #5
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	0151      	lsls	r1, r2, #5
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	440a      	add	r2, r1
 800b804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b808:	0cdb      	lsrs	r3, r3, #19
 800b80a:	04db      	lsls	r3, r3, #19
 800b80c:	6113      	str	r3, [r2, #16]
 800b80e:	e04e      	b.n	800b8ae <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	015a      	lsls	r2, r3, #5
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	4413      	add	r3, r2
 800b818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	0151      	lsls	r1, r2, #5
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	440a      	add	r2, r1
 800b826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b82a:	0cdb      	lsrs	r3, r3, #19
 800b82c:	04db      	lsls	r3, r3, #19
 800b82e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	015a      	lsls	r2, r3, #5
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	0151      	lsls	r1, r2, #5
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	440a      	add	r2, r1
 800b846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b84a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b84e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b852:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	695a      	ldr	r2, [r3, #20]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d903      	bls.n	800b868 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	689a      	ldr	r2, [r3, #8]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	015a      	lsls	r2, r3, #5
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	4413      	add	r3, r2
 800b870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	0151      	lsls	r1, r2, #5
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	440a      	add	r2, r1
 800b87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b886:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	015a      	lsls	r2, r3, #5
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b894:	691a      	ldr	r2, [r3, #16]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b89e:	68b9      	ldr	r1, [r7, #8]
 800b8a0:	0148      	lsls	r0, r1, #5
 800b8a2:	68f9      	ldr	r1, [r7, #12]
 800b8a4:	4401      	add	r1, r0
 800b8a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	015a      	lsls	r2, r3, #5
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	0151      	lsls	r1, r2, #5
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	440a      	add	r2, r1
 800b8c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8cc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d06d      	beq.n	800b9b2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ec:	68f9      	ldr	r1, [r7, #12]
 800b8ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	634b      	str	r3, [r1, #52]	; 0x34
 800b8f6:	e05c      	b.n	800b9b2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	015a      	lsls	r2, r3, #5
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	4413      	add	r3, r2
 800b900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	0151      	lsls	r1, r2, #5
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	440a      	add	r2, r1
 800b90e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b912:	0cdb      	lsrs	r3, r3, #19
 800b914:	04db      	lsls	r3, r3, #19
 800b916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	015a      	lsls	r2, r3, #5
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4413      	add	r3, r2
 800b920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	0151      	lsls	r1, r2, #5
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	440a      	add	r2, r1
 800b92e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b932:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b936:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b93a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d003      	beq.n	800b94c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	0151      	lsls	r1, r2, #5
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	440a      	add	r2, r1
 800b962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b96a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b978:	691a      	ldr	r2, [r3, #16]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	0148      	lsls	r0, r1, #5
 800b986:	68f9      	ldr	r1, [r7, #12]
 800b988:	4401      	add	r1, r0
 800b98a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b98e:	4313      	orrs	r3, r2
 800b990:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	0151      	lsls	r1, r2, #5
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	440a      	add	r2, r1
 800b9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b089      	sub	sp, #36	; 0x24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	71fb      	strb	r3, [r7, #7]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b9de:	88bb      	ldrh	r3, [r7, #4]
 800b9e0:	3303      	adds	r3, #3
 800b9e2:	089b      	lsrs	r3, r3, #2
 800b9e4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	61bb      	str	r3, [r7, #24]
 800b9ea:	e00f      	b.n	800ba0c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	031a      	lsls	r2, r3, #12
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	3304      	adds	r3, #4
 800ba04:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	61bb      	str	r3, [r7, #24]
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d3eb      	bcc.n	800b9ec <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3724      	adds	r7, #36	; 0x24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b089      	sub	sp, #36	; 0x24
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ba38:	88fb      	ldrh	r3, [r7, #6]
 800ba3a:	3303      	adds	r3, #3
 800ba3c:	089b      	lsrs	r3, r3, #2
 800ba3e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ba40:	2300      	movs	r3, #0
 800ba42:	61bb      	str	r3, [r7, #24]
 800ba44:	e00b      	b.n	800ba5e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	601a      	str	r2, [r3, #0]
    pDest++;
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	3304      	adds	r3, #4
 800ba56:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	61bb      	str	r3, [r7, #24]
 800ba5e:	69ba      	ldr	r2, [r7, #24]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d3ef      	bcc.n	800ba46 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ba66:	69fb      	ldr	r3, [r7, #28]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3724      	adds	r7, #36	; 0x24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	785b      	ldrb	r3, [r3, #1]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d12c      	bne.n	800baea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4413      	add	r3, r2
 800ba98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	db12      	blt.n	800bac8 <USB_EPSetStall+0x54>
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00f      	beq.n	800bac8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bac2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bac6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	0151      	lsls	r1, r2, #5
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	440a      	add	r2, r1
 800bade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	e02b      	b.n	800bb42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	db12      	blt.n	800bb22 <USB_EPSetStall+0xae>
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00f      	beq.n	800bb22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	0151      	lsls	r1, r2, #5
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	440a      	add	r2, r1
 800bb38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	785b      	ldrb	r3, [r3, #1]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d128      	bne.n	800bbbe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	0151      	lsls	r1, r2, #5
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	440a      	add	r2, r1
 800bb82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	78db      	ldrb	r3, [r3, #3]
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d003      	beq.n	800bb9c <USB_EPClearStall+0x4c>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	78db      	ldrb	r3, [r3, #3]
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d138      	bne.n	800bc0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	0151      	lsls	r1, r2, #5
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	440a      	add	r2, r1
 800bbb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	e027      	b.n	800bc0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	015a      	lsls	r2, r3, #5
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	0151      	lsls	r1, r2, #5
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	440a      	add	r2, r1
 800bbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbdc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	78db      	ldrb	r3, [r3, #3]
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d003      	beq.n	800bbee <USB_EPClearStall+0x9e>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	78db      	ldrb	r3, [r3, #3]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d10f      	bne.n	800bc0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	015a      	lsls	r2, r3, #5
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	0151      	lsls	r1, r2, #5
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	440a      	add	r2, r1
 800bc04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bc3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	011b      	lsls	r3, r3, #4
 800bc4c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bc50:	68f9      	ldr	r1, [r7, #12]
 800bc52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc56:	4313      	orrs	r3, r2
 800bc58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc82:	f023 0302 	bic.w	r3, r3, #2
 800bc86:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bc88:	2003      	movs	r0, #3
 800bc8a:	f7f6 fc5f 	bl	800254c <HAL_Delay>

  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcb2:	f043 0302 	orr.w	r3, r3, #2
 800bcb6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bcb8:	2003      	movs	r0, #3
 800bcba:	f7f6 fc47 	bl	800254c <HAL_Delay>

  return HAL_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	695b      	ldr	r3, [r3, #20]
 800bcd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4013      	ands	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bce0:	68fb      	ldr	r3, [r7, #12]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	4013      	ands	r3, r2
 800bd10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	0c1b      	lsrs	r3, r3, #16
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd22:	b480      	push	{r7}
 800bd24:	b085      	sub	sp, #20
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	4013      	ands	r3, r2
 800bd44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	b29b      	uxth	r3, r3
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b085      	sub	sp, #20
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bd66:	78fb      	ldrb	r3, [r7, #3]
 800bd68:	015a      	lsls	r2, r3, #5
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	4013      	ands	r3, r2
 800bd82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd84:	68bb      	ldr	r3, [r7, #8]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b087      	sub	sp, #28
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc2:	01db      	lsls	r3, r3, #7
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bdcc:	78fb      	ldrb	r3, [r7, #3]
 800bdce:	015a      	lsls	r2, r3, #5
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	4013      	ands	r3, r2
 800bdde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bde0:	68bb      	ldr	r3, [r7, #8]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b083      	sub	sp, #12
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	f003 0301 	and.w	r3, r3, #1
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b085      	sub	sp, #20
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800be28:	f023 0307 	bic.w	r3, r3, #7
 800be2c:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	f003 0306 	and.w	r3, r3, #6
 800be3a:	2b04      	cmp	r3, #4
 800be3c:	d109      	bne.n	800be52 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be4c:	f043 0303 	orr.w	r3, r3, #3
 800be50:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	333c      	adds	r3, #60	; 0x3c
 800be86:	3304      	adds	r3, #4
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	4a1c      	ldr	r2, [pc, #112]	; (800bf00 <USB_EP0_OutStart+0x8c>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d90a      	bls.n	800beaa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bea4:	d101      	bne.n	800beaa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	e024      	b.n	800bef4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb0:	461a      	mov	r2, r3
 800beb2:	2300      	movs	r3, #0
 800beb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bed8:	f043 0318 	orr.w	r3, r3, #24
 800bedc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bef0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	4f54300a 	.word	0x4f54300a

0800bf04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3301      	adds	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	4a13      	ldr	r2, [pc, #76]	; (800bf68 <USB_CoreReset+0x64>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d901      	bls.n	800bf22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e01b      	b.n	800bf5a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	daf2      	bge.n	800bf10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	f043 0201 	orr.w	r2, r3, #1
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	60fb      	str	r3, [r7, #12]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4a09      	ldr	r2, [pc, #36]	; (800bf68 <USB_CoreReset+0x64>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d901      	bls.n	800bf4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	e006      	b.n	800bf5a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d0f0      	beq.n	800bf3a <USB_CoreReset+0x36>

  return HAL_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3714      	adds	r7, #20
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	00030d40 	.word	0x00030d40

0800bf6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	460b      	mov	r3, r1
 800bf76:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	7c1b      	ldrb	r3, [r3, #16]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d115      	bne.n	800bfb0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf88:	2202      	movs	r2, #2
 800bf8a:	2181      	movs	r1, #129	; 0x81
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f001 fef9 	bl	800dd84 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2201      	movs	r2, #1
 800bf96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f001 feef 	bl	800dd84 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bfae:	e012      	b.n	800bfd6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bfb0:	2340      	movs	r3, #64	; 0x40
 800bfb2:	2202      	movs	r2, #2
 800bfb4:	2181      	movs	r1, #129	; 0x81
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f001 fee4 	bl	800dd84 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bfc2:	2340      	movs	r3, #64	; 0x40
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f001 fedb 	bl	800dd84 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfd6:	2308      	movs	r3, #8
 800bfd8:	2203      	movs	r2, #3
 800bfda:	2182      	movs	r1, #130	; 0x82
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 fed1 	bl	800dd84 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bfe8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bfec:	f002 f8e2 	bl	800e1b4 <USBD_static_malloc>
 800bff0:	4602      	mov	r2, r0
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d102      	bne.n	800c008 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c002:	2301      	movs	r3, #1
 800c004:	73fb      	strb	r3, [r7, #15]
 800c006:	e026      	b.n	800c056 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c00e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2200      	movs	r2, #0
 800c026:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	7c1b      	ldrb	r3, [r3, #16]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d109      	bne.n	800c046 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c03c:	2101      	movs	r1, #1
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f002 f81c 	bl	800e07c <USBD_LL_PrepareReceive>
 800c044:	e007      	b.n	800c056 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c04c:	2340      	movs	r3, #64	; 0x40
 800c04e:	2101      	movs	r1, #1
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f002 f813 	bl	800e07c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c056:	7bfb      	ldrb	r3, [r7, #15]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c070:	2181      	movs	r1, #129	; 0x81
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 fec4 	bl	800de00 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c07e:	2101      	movs	r1, #1
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f001 febd 	bl	800de00 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c08e:	2182      	movs	r1, #130	; 0x82
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 feb5 	bl	800de00 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00e      	beq.n	800c0c4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f002 f88a 	bl	800e1d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b086      	sub	sp, #24
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0de:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d039      	beq.n	800c16c <USBD_CDC_Setup+0x9e>
 800c0f8:	2b20      	cmp	r3, #32
 800c0fa:	d17c      	bne.n	800c1f6 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	88db      	ldrh	r3, [r3, #6]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d029      	beq.n	800c158 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	b25b      	sxtb	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	da11      	bge.n	800c132 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c11a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c11c:	683a      	ldr	r2, [r7, #0]
 800c11e:	88d2      	ldrh	r2, [r2, #6]
 800c120:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c122:	6939      	ldr	r1, [r7, #16]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	88db      	ldrh	r3, [r3, #6]
 800c128:	461a      	mov	r2, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f001 f9b8 	bl	800d4a0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c130:	e068      	b.n	800c204 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	785a      	ldrb	r2, [r3, #1]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	88db      	ldrh	r3, [r3, #6]
 800c140:	b2da      	uxtb	r2, r3
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c148:	6939      	ldr	r1, [r7, #16]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88db      	ldrh	r3, [r3, #6]
 800c14e:	461a      	mov	r2, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f001 f9d3 	bl	800d4fc <USBD_CtlPrepareRx>
    break;
 800c156:	e055      	b.n	800c204 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	683a      	ldr	r2, [r7, #0]
 800c162:	7850      	ldrb	r0, [r2, #1]
 800c164:	2200      	movs	r2, #0
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	4798      	blx	r3
    break;
 800c16a:	e04b      	b.n	800c204 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	785b      	ldrb	r3, [r3, #1]
 800c170:	2b0a      	cmp	r3, #10
 800c172:	d017      	beq.n	800c1a4 <USBD_CDC_Setup+0xd6>
 800c174:	2b0b      	cmp	r3, #11
 800c176:	d029      	beq.n	800c1cc <USBD_CDC_Setup+0xfe>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d133      	bne.n	800c1e4 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c182:	2b03      	cmp	r3, #3
 800c184:	d107      	bne.n	800c196 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c186:	f107 030c 	add.w	r3, r7, #12
 800c18a:	2202      	movs	r2, #2
 800c18c:	4619      	mov	r1, r3
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 f986 	bl	800d4a0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c194:	e02e      	b.n	800c1f4 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f001 f916 	bl	800d3ca <USBD_CtlError>
			  ret = USBD_FAIL;
 800c19e:	2302      	movs	r3, #2
 800c1a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c1a2:	e027      	b.n	800c1f4 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d107      	bne.n	800c1be <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c1ae:	f107 030f 	add.w	r3, r7, #15
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f001 f972 	bl	800d4a0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c1bc:	e01a      	b.n	800c1f4 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 f902 	bl	800d3ca <USBD_CtlError>
			  ret = USBD_FAIL;
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	75fb      	strb	r3, [r7, #23]
      break;
 800c1ca:	e013      	b.n	800c1f4 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	d00d      	beq.n	800c1f2 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f001 f8f6 	bl	800d3ca <USBD_CtlError>
			  ret = USBD_FAIL;
 800c1de:	2302      	movs	r3, #2
 800c1e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c1e2:	e006      	b.n	800c1f2 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f001 f8ef 	bl	800d3ca <USBD_CtlError>
      ret = USBD_FAIL;
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c1f0:	e000      	b.n	800c1f4 <USBD_CDC_Setup+0x126>
      break;
 800c1f2:	bf00      	nop
    }
    break;
 800c1f4:	e006      	b.n	800c204 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800c1f6:	6839      	ldr	r1, [r7, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f001 f8e6 	bl	800d3ca <USBD_CtlError>
    ret = USBD_FAIL;
 800c1fe:	2302      	movs	r3, #2
 800c200:	75fb      	strb	r3, [r7, #23]
    break;
 800c202:	bf00      	nop
  }

  return ret;
 800c204:	7dfb      	ldrb	r3, [r7, #23]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	460b      	mov	r3, r1
 800c218:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c220:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c228:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c230:	2b00      	cmp	r3, #0
 800c232:	d03a      	beq.n	800c2aa <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c234:	78fa      	ldrb	r2, [r7, #3]
 800c236:	6879      	ldr	r1, [r7, #4]
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	440b      	add	r3, r1
 800c242:	331c      	adds	r3, #28
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d029      	beq.n	800c29e <USBD_CDC_DataIn+0x90>
 800c24a:	78fa      	ldrb	r2, [r7, #3]
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	4613      	mov	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	440b      	add	r3, r1
 800c258:	331c      	adds	r3, #28
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	78f9      	ldrb	r1, [r7, #3]
 800c25e:	68b8      	ldr	r0, [r7, #8]
 800c260:	460b      	mov	r3, r1
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	1a5b      	subs	r3, r3, r1
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4403      	add	r3, r0
 800c26a:	3344      	adds	r3, #68	; 0x44
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	fbb2 f1f3 	udiv	r1, r2, r3
 800c272:	fb03 f301 	mul.w	r3, r3, r1
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d110      	bne.n	800c29e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c27c:	78fa      	ldrb	r2, [r7, #3]
 800c27e:	6879      	ldr	r1, [r7, #4]
 800c280:	4613      	mov	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	440b      	add	r3, r1
 800c28a:	331c      	adds	r3, #28
 800c28c:	2200      	movs	r2, #0
 800c28e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c290:	78f9      	ldrb	r1, [r7, #3]
 800c292:	2300      	movs	r3, #0
 800c294:	2200      	movs	r2, #0
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f001 feb6 	bl	800e008 <USBD_LL_Transmit>
 800c29c:	e003      	b.n	800c2a6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e000      	b.n	800c2ac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c2aa:	2302      	movs	r3, #2
  }
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c2c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c2c8:	78fb      	ldrb	r3, [r7, #3]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f001 ff0f 	bl	800e0f0 <USBD_LL_GetRxDataSize>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00d      	beq.n	800c300 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4798      	blx	r3

    return USBD_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	e000      	b.n	800c302 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c300:	2302      	movs	r3, #2
  }
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c318:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c320:	2b00      	cmp	r3, #0
 800c322:	d015      	beq.n	800c350 <USBD_CDC_EP0_RxReady+0x46>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c32a:	2bff      	cmp	r3, #255	; 0xff
 800c32c:	d010      	beq.n	800c350 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c33c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c344:	b292      	uxth	r2, r2
 800c346:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	22ff      	movs	r2, #255	; 0xff
 800c34c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
	...

0800c35c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2243      	movs	r2, #67	; 0x43
 800c368:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c36a:	4b03      	ldr	r3, [pc, #12]	; (800c378 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr
 800c378:	20000094 	.word	0x20000094

0800c37c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2243      	movs	r2, #67	; 0x43
 800c388:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c38a:	4b03      	ldr	r3, [pc, #12]	; (800c398 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	20000050 	.word	0x20000050

0800c39c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2243      	movs	r2, #67	; 0x43
 800c3a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c3aa:	4b03      	ldr	r3, [pc, #12]	; (800c3b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	200000d8 	.word	0x200000d8

0800c3bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	220a      	movs	r2, #10
 800c3c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c3ca:	4b03      	ldr	r3, [pc, #12]	; (800c3d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	2000000c 	.word	0x2000000c

0800c3dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	683a      	ldr	r2, [r7, #0]
 800c3f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c40a:	b480      	push	{r7}
 800c40c:	b087      	sub	sp, #28
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	4613      	mov	r3, r2
 800c416:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c41e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c428:	88fa      	ldrh	r2, [r7, #6]
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	371c      	adds	r7, #28
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr

0800c43e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c43e:	b480      	push	{r7}
 800c440:	b085      	sub	sp, #20
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c44e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b084      	sub	sp, #16
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c474:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d017      	beq.n	800c4b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	7c1b      	ldrb	r3, [r3, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c48e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c492:	2101      	movs	r1, #1
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f001 fdf1 	bl	800e07c <USBD_LL_PrepareReceive>
 800c49a:	e007      	b.n	800c4ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4a2:	2340      	movs	r3, #64	; 0x40
 800c4a4:	2101      	movs	r1, #1
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f001 fde8 	bl	800e07c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e000      	b.n	800c4b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c4b0:	2302      	movs	r3, #2
  }
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	60b9      	str	r1, [r7, #8]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c4ce:	2302      	movs	r3, #2
 800c4d0:	e01a      	b.n	800c508 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d003      	beq.n	800c4f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	79fa      	ldrb	r2, [r7, #7]
 800c4fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f001 fbc1 	bl	800dc88 <USBD_LL_Init>

  return USBD_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d006      	beq.n	800c532 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
 800c530:	e001      	b.n	800c536 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c532:	2302      	movs	r3, #2
 800c534:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c536:	7bfb      	ldrb	r3, [r7, #15]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f001 fbe7 	bl	800dd20 <USBD_LL_Start>

  return USBD_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b084      	sub	sp, #16
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	460b      	mov	r3, r1
 800c57c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c57e:	2302      	movs	r3, #2
 800c580:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00c      	beq.n	800c5a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	78fa      	ldrb	r2, [r7, #3]
 800c596:	4611      	mov	r1, r2
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	4798      	blx	r3
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	78fa      	ldrb	r2, [r7, #3]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	4798      	blx	r3
  return USBD_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b082      	sub	sp, #8
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 feb1 	bl	800d350 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c60a:	f003 031f 	and.w	r3, r3, #31
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d00c      	beq.n	800c62c <USBD_LL_SetupStage+0x56>
 800c612:	2b01      	cmp	r3, #1
 800c614:	d302      	bcc.n	800c61c <USBD_LL_SetupStage+0x46>
 800c616:	2b02      	cmp	r3, #2
 800c618:	d010      	beq.n	800c63c <USBD_LL_SetupStage+0x66>
 800c61a:	e017      	b.n	800c64c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fa05 	bl	800ca34 <USBD_StdDevReq>
    break;
 800c62a:	e01a      	b.n	800c662 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fa67 	bl	800cb08 <USBD_StdItfReq>
    break;
 800c63a:	e012      	b.n	800c662 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 faa5 	bl	800cb94 <USBD_StdEPReq>
    break;
 800c64a:	e00a      	b.n	800c662 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c652:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c656:	b2db      	uxtb	r3, r3
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f001 fc06 	bl	800de6c <USBD_LL_StallEP>
    break;
 800c660:	bf00      	nop
  }

  return USBD_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	460b      	mov	r3, r1
 800c676:	607a      	str	r2, [r7, #4]
 800c678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c67a:	7afb      	ldrb	r3, [r7, #11]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d14b      	bne.n	800c718 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c686:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d134      	bne.n	800c6fc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	68da      	ldr	r2, [r3, #12]
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d919      	bls.n	800c6d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	68da      	ldr	r2, [r3, #12]
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	1ad2      	subs	r2, r2, r3
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	68da      	ldr	r2, [r3, #12]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d203      	bcs.n	800c6c0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	e002      	b.n	800c6c6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f000 ff34 	bl	800d538 <USBD_CtlContinueRx>
 800c6d0:	e038      	b.n	800c744 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c6e4:	2b03      	cmp	r3, #3
 800c6e6:	d105      	bne.n	800c6f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 ff31 	bl	800d55c <USBD_CtlSendStatus>
 800c6fa:	e023      	b.n	800c744 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c702:	2b05      	cmp	r3, #5
 800c704:	d11e      	bne.n	800c744 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c70e:	2100      	movs	r1, #0
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f001 fbab 	bl	800de6c <USBD_LL_StallEP>
 800c716:	e015      	b.n	800c744 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00d      	beq.n	800c740 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	d108      	bne.n	800c740 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	7afa      	ldrb	r2, [r7, #11]
 800c738:	4611      	mov	r1, r2
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	4798      	blx	r3
 800c73e:	e001      	b.n	800c744 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c740:	2302      	movs	r3, #2
 800c742:	e000      	b.n	800c746 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b086      	sub	sp, #24
 800c752:	af00      	add	r7, sp, #0
 800c754:	60f8      	str	r0, [r7, #12]
 800c756:	460b      	mov	r3, r1
 800c758:	607a      	str	r2, [r7, #4]
 800c75a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c75c:	7afb      	ldrb	r3, [r7, #11]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d17f      	bne.n	800c862 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	3314      	adds	r3, #20
 800c766:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d15c      	bne.n	800c82c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	68da      	ldr	r2, [r3, #12]
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d915      	bls.n	800c7aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	68da      	ldr	r2, [r3, #12]
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	1ad2      	subs	r2, r2, r3
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	b29b      	uxth	r3, r3
 800c792:	461a      	mov	r2, r3
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f000 fe9e 	bl	800d4d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c79c:	2300      	movs	r3, #0
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f001 fc6a 	bl	800e07c <USBD_LL_PrepareReceive>
 800c7a8:	e04e      	b.n	800c848 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	6912      	ldr	r2, [r2, #16]
 800c7b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7b6:	fb02 f201 	mul.w	r2, r2, r1
 800c7ba:	1a9b      	subs	r3, r3, r2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d11c      	bne.n	800c7fa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d316      	bcc.n	800c7fa <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	689a      	ldr	r2, [r3, #8]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d20f      	bcs.n	800c7fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2100      	movs	r1, #0
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f000 fe7a 	bl	800d4d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f001 fc42 	bl	800e07c <USBD_LL_PrepareReceive>
 800c7f8:	e026      	b.n	800c848 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c80c:	2b03      	cmp	r3, #3
 800c80e:	d105      	bne.n	800c81c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c81c:	2180      	movs	r1, #128	; 0x80
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f001 fb24 	bl	800de6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f000 feac 	bl	800d582 <USBD_CtlReceiveStatus>
 800c82a:	e00d      	b.n	800c848 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c832:	2b04      	cmp	r3, #4
 800c834:	d004      	beq.n	800c840 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d103      	bne.n	800c848 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c840:	2180      	movs	r1, #128	; 0x80
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f001 fb12 	bl	800de6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d11d      	bne.n	800c88e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fe82 	bl	800c55c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c860:	e015      	b.n	800c88e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00d      	beq.n	800c88a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c874:	2b03      	cmp	r3, #3
 800c876:	d108      	bne.n	800c88a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	7afa      	ldrb	r2, [r7, #11]
 800c882:	4611      	mov	r1, r2
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	4798      	blx	r3
 800c888:	e001      	b.n	800c88e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c88a:	2302      	movs	r3, #2
 800c88c:	e000      	b.n	800c890 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8a0:	2340      	movs	r3, #64	; 0x40
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f001 fa6c 	bl	800dd84 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2240      	movs	r2, #64	; 0x40
 800c8b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8bc:	2340      	movs	r3, #64	; 0x40
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2180      	movs	r1, #128	; 0x80
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f001 fa5e 	bl	800dd84 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2240      	movs	r2, #64	; 0x40
 800c8d2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d009      	beq.n	800c910 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	6852      	ldr	r2, [r2, #4]
 800c908:	b2d2      	uxtb	r2, r2
 800c90a:	4611      	mov	r1, r2
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	4798      	blx	r3
  }

  return USBD_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c91a:	b480      	push	{r7}
 800c91c:	b083      	sub	sp, #12
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	460b      	mov	r3, r1
 800c924:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	78fa      	ldrb	r2, [r7, #3]
 800c92a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2204      	movs	r2, #4
 800c952:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c994:	2b03      	cmp	r3, #3
 800c996:	d10b      	bne.n	800c9b0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c99e:	69db      	ldr	r3, [r3, #28]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d005      	beq.n	800c9b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c9aa:	69db      	ldr	r3, [r3, #28]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b083      	sub	sp, #12
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	6852      	ldr	r2, [r2, #4]
 800ca20:	b2d2      	uxtb	r2, r2
 800ca22:	4611      	mov	r1, r2
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	4798      	blx	r3

  return USBD_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
	...

0800ca34 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca4a:	2b20      	cmp	r3, #32
 800ca4c:	d004      	beq.n	800ca58 <USBD_StdDevReq+0x24>
 800ca4e:	2b40      	cmp	r3, #64	; 0x40
 800ca50:	d002      	beq.n	800ca58 <USBD_StdDevReq+0x24>
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d008      	beq.n	800ca68 <USBD_StdDevReq+0x34>
 800ca56:	e04c      	b.n	800caf2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	4798      	blx	r3
    break;
 800ca66:	e049      	b.n	800cafc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	785b      	ldrb	r3, [r3, #1]
 800ca6c:	2b09      	cmp	r3, #9
 800ca6e:	d83a      	bhi.n	800cae6 <USBD_StdDevReq+0xb2>
 800ca70:	a201      	add	r2, pc, #4	; (adr r2, 800ca78 <USBD_StdDevReq+0x44>)
 800ca72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca76:	bf00      	nop
 800ca78:	0800cac9 	.word	0x0800cac9
 800ca7c:	0800cadd 	.word	0x0800cadd
 800ca80:	0800cae7 	.word	0x0800cae7
 800ca84:	0800cad3 	.word	0x0800cad3
 800ca88:	0800cae7 	.word	0x0800cae7
 800ca8c:	0800caab 	.word	0x0800caab
 800ca90:	0800caa1 	.word	0x0800caa1
 800ca94:	0800cae7 	.word	0x0800cae7
 800ca98:	0800cabf 	.word	0x0800cabf
 800ca9c:	0800cab5 	.word	0x0800cab5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f9d2 	bl	800ce4c <USBD_GetDescriptor>
      break;
 800caa8:	e022      	b.n	800caf0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fae3 	bl	800d078 <USBD_SetAddress>
      break;
 800cab2:	e01d      	b.n	800caf0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fb20 	bl	800d0fc <USBD_SetConfig>
      break;
 800cabc:	e018      	b.n	800caf0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 fba9 	bl	800d218 <USBD_GetConfig>
      break;
 800cac6:	e013      	b.n	800caf0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800cac8:	6839      	ldr	r1, [r7, #0]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fbd8 	bl	800d280 <USBD_GetStatus>
      break;
 800cad0:	e00e      	b.n	800caf0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fc06 	bl	800d2e6 <USBD_SetFeature>
      break;
 800cada:	e009      	b.n	800caf0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fc15 	bl	800d30e <USBD_ClrFeature>
      break;
 800cae4:	e004      	b.n	800caf0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fc6e 	bl	800d3ca <USBD_CtlError>
      break;
 800caee:	bf00      	nop
    }
    break;
 800caf0:	e004      	b.n	800cafc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fc68 	bl	800d3ca <USBD_CtlError>
    break;
 800cafa:	bf00      	nop
  }

  return ret;
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop

0800cb08 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb1e:	2b20      	cmp	r3, #32
 800cb20:	d003      	beq.n	800cb2a <USBD_StdItfReq+0x22>
 800cb22:	2b40      	cmp	r3, #64	; 0x40
 800cb24:	d001      	beq.n	800cb2a <USBD_StdItfReq+0x22>
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d12a      	bne.n	800cb80 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb30:	3b01      	subs	r3, #1
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d81d      	bhi.n	800cb72 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	889b      	ldrh	r3, [r3, #4]
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d813      	bhi.n	800cb68 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	4798      	blx	r3
 800cb4e:	4603      	mov	r3, r0
 800cb50:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	88db      	ldrh	r3, [r3, #6]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d110      	bne.n	800cb7c <USBD_StdItfReq+0x74>
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10d      	bne.n	800cb7c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fcfb 	bl	800d55c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cb66:	e009      	b.n	800cb7c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800cb68:	6839      	ldr	r1, [r7, #0]
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fc2d 	bl	800d3ca <USBD_CtlError>
      break;
 800cb70:	e004      	b.n	800cb7c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fc28 	bl	800d3ca <USBD_CtlError>
      break;
 800cb7a:	e000      	b.n	800cb7e <USBD_StdItfReq+0x76>
      break;
 800cb7c:	bf00      	nop
    }
    break;
 800cb7e:	e004      	b.n	800cb8a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fc21 	bl	800d3ca <USBD_CtlError>
    break;
 800cb88:	bf00      	nop
  }

  return USBD_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	889b      	ldrh	r3, [r3, #4]
 800cba6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbb0:	2b20      	cmp	r3, #32
 800cbb2:	d004      	beq.n	800cbbe <USBD_StdEPReq+0x2a>
 800cbb4:	2b40      	cmp	r3, #64	; 0x40
 800cbb6:	d002      	beq.n	800cbbe <USBD_StdEPReq+0x2a>
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d008      	beq.n	800cbce <USBD_StdEPReq+0x3a>
 800cbbc:	e13b      	b.n	800ce36 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	4798      	blx	r3
    break;
 800cbcc:	e138      	b.n	800ce40 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbd6:	2b20      	cmp	r3, #32
 800cbd8:	d10a      	bne.n	800cbf0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	4798      	blx	r3
 800cbe8:	4603      	mov	r3, r0
 800cbea:	73fb      	strb	r3, [r7, #15]

      return ret;
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
 800cbee:	e128      	b.n	800ce42 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	785b      	ldrb	r3, [r3, #1]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d03e      	beq.n	800cc76 <USBD_StdEPReq+0xe2>
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d002      	beq.n	800cc02 <USBD_StdEPReq+0x6e>
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d070      	beq.n	800cce2 <USBD_StdEPReq+0x14e>
 800cc00:	e113      	b.n	800ce2a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d002      	beq.n	800cc12 <USBD_StdEPReq+0x7e>
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d015      	beq.n	800cc3c <USBD_StdEPReq+0xa8>
 800cc10:	e02b      	b.n	800cc6a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00c      	beq.n	800cc32 <USBD_StdEPReq+0x9e>
 800cc18:	7bbb      	ldrb	r3, [r7, #14]
 800cc1a:	2b80      	cmp	r3, #128	; 0x80
 800cc1c:	d009      	beq.n	800cc32 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cc1e:	7bbb      	ldrb	r3, [r7, #14]
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f001 f922 	bl	800de6c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cc28:	2180      	movs	r1, #128	; 0x80
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f001 f91e 	bl	800de6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cc30:	e020      	b.n	800cc74 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fbc8 	bl	800d3ca <USBD_CtlError>
        break;
 800cc3a:	e01b      	b.n	800cc74 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	885b      	ldrh	r3, [r3, #2]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10e      	bne.n	800cc62 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00b      	beq.n	800cc62 <USBD_StdEPReq+0xce>
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	2b80      	cmp	r3, #128	; 0x80
 800cc4e:	d008      	beq.n	800cc62 <USBD_StdEPReq+0xce>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	88db      	ldrh	r3, [r3, #6]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d104      	bne.n	800cc62 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f001 f905 	bl	800de6c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fc7a 	bl	800d55c <USBD_CtlSendStatus>

        break;
 800cc68:	e004      	b.n	800cc74 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800cc6a:	6839      	ldr	r1, [r7, #0]
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 fbac 	bl	800d3ca <USBD_CtlError>
        break;
 800cc72:	bf00      	nop
      }
      break;
 800cc74:	e0de      	b.n	800ce34 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d002      	beq.n	800cc86 <USBD_StdEPReq+0xf2>
 800cc80:	2b03      	cmp	r3, #3
 800cc82:	d015      	beq.n	800ccb0 <USBD_StdEPReq+0x11c>
 800cc84:	e026      	b.n	800ccd4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc86:	7bbb      	ldrb	r3, [r7, #14]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00c      	beq.n	800cca6 <USBD_StdEPReq+0x112>
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
 800cc8e:	2b80      	cmp	r3, #128	; 0x80
 800cc90:	d009      	beq.n	800cca6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cc92:	7bbb      	ldrb	r3, [r7, #14]
 800cc94:	4619      	mov	r1, r3
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f001 f8e8 	bl	800de6c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cc9c:	2180      	movs	r1, #128	; 0x80
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f001 f8e4 	bl	800de6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cca4:	e01c      	b.n	800cce0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fb8e 	bl	800d3ca <USBD_CtlError>
        break;
 800ccae:	e017      	b.n	800cce0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	885b      	ldrh	r3, [r3, #2]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d112      	bne.n	800ccde <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ccb8:	7bbb      	ldrb	r3, [r7, #14]
 800ccba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d004      	beq.n	800cccc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ccc2:	7bbb      	ldrb	r3, [r7, #14]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f001 f906 	bl	800ded8 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fc45 	bl	800d55c <USBD_CtlSendStatus>
        }
        break;
 800ccd2:	e004      	b.n	800ccde <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fb77 	bl	800d3ca <USBD_CtlError>
        break;
 800ccdc:	e000      	b.n	800cce0 <USBD_StdEPReq+0x14c>
        break;
 800ccde:	bf00      	nop
      }
      break;
 800cce0:	e0a8      	b.n	800ce34 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d002      	beq.n	800ccf2 <USBD_StdEPReq+0x15e>
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d031      	beq.n	800cd54 <USBD_StdEPReq+0x1c0>
 800ccf0:	e095      	b.n	800ce1e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccf2:	7bbb      	ldrb	r3, [r7, #14]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d007      	beq.n	800cd08 <USBD_StdEPReq+0x174>
 800ccf8:	7bbb      	ldrb	r3, [r7, #14]
 800ccfa:	2b80      	cmp	r3, #128	; 0x80
 800ccfc:	d004      	beq.n	800cd08 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fb62 	bl	800d3ca <USBD_CtlError>
          break;
 800cd06:	e08f      	b.n	800ce28 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	da0b      	bge.n	800cd28 <USBD_StdEPReq+0x194>
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd16:	4613      	mov	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4413      	add	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	3310      	adds	r3, #16
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	4413      	add	r3, r2
 800cd24:	3304      	adds	r3, #4
 800cd26:	e00a      	b.n	800cd3e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd2e:	4613      	mov	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4413      	add	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	2202      	movs	r2, #2
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 fba7 	bl	800d4a0 <USBD_CtlSendData>
          break;
 800cd52:	e069      	b.n	800ce28 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800cd54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	da11      	bge.n	800cd80 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd5c:	7bbb      	ldrb	r3, [r7, #14]
 800cd5e:	f003 020f 	and.w	r2, r3, #15
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	440b      	add	r3, r1
 800cd6e:	3318      	adds	r3, #24
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d117      	bne.n	800cda6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fb26 	bl	800d3ca <USBD_CtlError>
            break;
 800cd7e:	e053      	b.n	800ce28 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd80:	7bbb      	ldrb	r3, [r7, #14]
 800cd82:	f003 020f 	and.w	r2, r3, #15
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	4413      	add	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	440b      	add	r3, r1
 800cd92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d104      	bne.n	800cda6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 fb13 	bl	800d3ca <USBD_CtlError>
            break;
 800cda4:	e040      	b.n	800ce28 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cda6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	da0b      	bge.n	800cdc6 <USBD_StdEPReq+0x232>
 800cdae:	7bbb      	ldrb	r3, [r7, #14]
 800cdb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	3310      	adds	r3, #16
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	e00a      	b.n	800cddc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cdc6:	7bbb      	ldrb	r3, [r7, #14]
 800cdc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cdcc:	4613      	mov	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4413      	add	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	4413      	add	r3, r2
 800cddc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdde:	7bbb      	ldrb	r3, [r7, #14]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <USBD_StdEPReq+0x256>
 800cde4:	7bbb      	ldrb	r3, [r7, #14]
 800cde6:	2b80      	cmp	r3, #128	; 0x80
 800cde8:	d103      	bne.n	800cdf2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	e00e      	b.n	800ce10 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800cdf2:	7bbb      	ldrb	r3, [r7, #14]
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f001 f8a4 	bl	800df44 <USBD_LL_IsStallEP>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d003      	beq.n	800ce0a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2201      	movs	r2, #1
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	e002      	b.n	800ce10 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	2202      	movs	r2, #2
 800ce14:	4619      	mov	r1, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 fb42 	bl	800d4a0 <USBD_CtlSendData>
          break;
 800ce1c:	e004      	b.n	800ce28 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fad2 	bl	800d3ca <USBD_CtlError>
        break;
 800ce26:	bf00      	nop
      }
      break;
 800ce28:	e004      	b.n	800ce34 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 facc 	bl	800d3ca <USBD_CtlError>
      break;
 800ce32:	bf00      	nop
    }
    break;
 800ce34:	e004      	b.n	800ce40 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fac6 	bl	800d3ca <USBD_CtlError>
    break;
 800ce3e:	bf00      	nop
  }

  return ret;
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
	...

0800ce4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	885b      	ldrh	r3, [r3, #2]
 800ce5a:	0a1b      	lsrs	r3, r3, #8
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	2b0e      	cmp	r3, #14
 800ce62:	f200 80e5 	bhi.w	800d030 <USBD_GetDescriptor+0x1e4>
 800ce66:	a201      	add	r2, pc, #4	; (adr r2, 800ce6c <USBD_GetDescriptor+0x20>)
 800ce68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6c:	0800cec1 	.word	0x0800cec1
 800ce70:	0800ced9 	.word	0x0800ced9
 800ce74:	0800cf19 	.word	0x0800cf19
 800ce78:	0800d031 	.word	0x0800d031
 800ce7c:	0800d031 	.word	0x0800d031
 800ce80:	0800cfdd 	.word	0x0800cfdd
 800ce84:	0800d003 	.word	0x0800d003
 800ce88:	0800d031 	.word	0x0800d031
 800ce8c:	0800d031 	.word	0x0800d031
 800ce90:	0800d031 	.word	0x0800d031
 800ce94:	0800d031 	.word	0x0800d031
 800ce98:	0800d031 	.word	0x0800d031
 800ce9c:	0800d031 	.word	0x0800d031
 800cea0:	0800d031 	.word	0x0800d031
 800cea4:	0800cea9 	.word	0x0800cea9
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ceae:	69db      	ldr	r3, [r3, #28]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	7c12      	ldrb	r2, [r2, #16]
 800ceb4:	f107 010a 	add.w	r1, r7, #10
 800ceb8:	4610      	mov	r0, r2
 800ceba:	4798      	blx	r3
 800cebc:	60f8      	str	r0, [r7, #12]
    break;
 800cebe:	e0bc      	b.n	800d03a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	7c12      	ldrb	r2, [r2, #16]
 800cecc:	f107 010a 	add.w	r1, r7, #10
 800ced0:	4610      	mov	r0, r2
 800ced2:	4798      	blx	r3
 800ced4:	60f8      	str	r0, [r7, #12]
    break;
 800ced6:	e0b0      	b.n	800d03a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7c1b      	ldrb	r3, [r3, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10d      	bne.n	800cefc <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee8:	f107 020a 	add.w	r2, r7, #10
 800ceec:	4610      	mov	r0, r2
 800ceee:	4798      	blx	r3
 800cef0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3301      	adds	r3, #1
 800cef6:	2202      	movs	r2, #2
 800cef8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cefa:	e09e      	b.n	800d03a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf04:	f107 020a 	add.w	r2, r7, #10
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3301      	adds	r3, #1
 800cf12:	2202      	movs	r2, #2
 800cf14:	701a      	strb	r2, [r3, #0]
    break;
 800cf16:	e090      	b.n	800d03a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	885b      	ldrh	r3, [r3, #2]
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	2b05      	cmp	r3, #5
 800cf20:	d856      	bhi.n	800cfd0 <USBD_GetDescriptor+0x184>
 800cf22:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <USBD_GetDescriptor+0xdc>)
 800cf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf28:	0800cf41 	.word	0x0800cf41
 800cf2c:	0800cf59 	.word	0x0800cf59
 800cf30:	0800cf71 	.word	0x0800cf71
 800cf34:	0800cf89 	.word	0x0800cf89
 800cf38:	0800cfa1 	.word	0x0800cfa1
 800cf3c:	0800cfb9 	.word	0x0800cfb9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	7c12      	ldrb	r2, [r2, #16]
 800cf4c:	f107 010a 	add.w	r1, r7, #10
 800cf50:	4610      	mov	r0, r2
 800cf52:	4798      	blx	r3
 800cf54:	60f8      	str	r0, [r7, #12]
      break;
 800cf56:	e040      	b.n	800cfda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	7c12      	ldrb	r2, [r2, #16]
 800cf64:	f107 010a 	add.w	r1, r7, #10
 800cf68:	4610      	mov	r0, r2
 800cf6a:	4798      	blx	r3
 800cf6c:	60f8      	str	r0, [r7, #12]
      break;
 800cf6e:	e034      	b.n	800cfda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	7c12      	ldrb	r2, [r2, #16]
 800cf7c:	f107 010a 	add.w	r1, r7, #10
 800cf80:	4610      	mov	r0, r2
 800cf82:	4798      	blx	r3
 800cf84:	60f8      	str	r0, [r7, #12]
      break;
 800cf86:	e028      	b.n	800cfda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	7c12      	ldrb	r2, [r2, #16]
 800cf94:	f107 010a 	add.w	r1, r7, #10
 800cf98:	4610      	mov	r0, r2
 800cf9a:	4798      	blx	r3
 800cf9c:	60f8      	str	r0, [r7, #12]
      break;
 800cf9e:	e01c      	b.n	800cfda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cfa6:	695b      	ldr	r3, [r3, #20]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	7c12      	ldrb	r2, [r2, #16]
 800cfac:	f107 010a 	add.w	r1, r7, #10
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	4798      	blx	r3
 800cfb4:	60f8      	str	r0, [r7, #12]
      break;
 800cfb6:	e010      	b.n	800cfda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cfbe:	699b      	ldr	r3, [r3, #24]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	7c12      	ldrb	r2, [r2, #16]
 800cfc4:	f107 010a 	add.w	r1, r7, #10
 800cfc8:	4610      	mov	r0, r2
 800cfca:	4798      	blx	r3
 800cfcc:	60f8      	str	r0, [r7, #12]
      break;
 800cfce:	e004      	b.n	800cfda <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800cfd0:	6839      	ldr	r1, [r7, #0]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f9f9 	bl	800d3ca <USBD_CtlError>
      return;
 800cfd8:	e04b      	b.n	800d072 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800cfda:	e02e      	b.n	800d03a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	7c1b      	ldrb	r3, [r3, #16]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d109      	bne.n	800cff8 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfec:	f107 020a 	add.w	r2, r7, #10
 800cff0:	4610      	mov	r0, r2
 800cff2:	4798      	blx	r3
 800cff4:	60f8      	str	r0, [r7, #12]
      break;
 800cff6:	e020      	b.n	800d03a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f9e5 	bl	800d3ca <USBD_CtlError>
      return;
 800d000:	e037      	b.n	800d072 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	7c1b      	ldrb	r3, [r3, #16]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d10d      	bne.n	800d026 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d012:	f107 020a 	add.w	r2, r7, #10
 800d016:	4610      	mov	r0, r2
 800d018:	4798      	blx	r3
 800d01a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3301      	adds	r3, #1
 800d020:	2207      	movs	r2, #7
 800d022:	701a      	strb	r2, [r3, #0]
      break;
 800d024:	e009      	b.n	800d03a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f9ce 	bl	800d3ca <USBD_CtlError>
      return;
 800d02e:	e020      	b.n	800d072 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f9c9 	bl	800d3ca <USBD_CtlError>
    return;
 800d038:	e01b      	b.n	800d072 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d03a:	897b      	ldrh	r3, [r7, #10]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d011      	beq.n	800d064 <USBD_GetDescriptor+0x218>
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	88db      	ldrh	r3, [r3, #6]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00d      	beq.n	800d064 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	88da      	ldrh	r2, [r3, #6]
 800d04c:	897b      	ldrh	r3, [r7, #10]
 800d04e:	4293      	cmp	r3, r2
 800d050:	bf28      	it	cs
 800d052:	4613      	movcs	r3, r2
 800d054:	b29b      	uxth	r3, r3
 800d056:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d058:	897b      	ldrh	r3, [r7, #10]
 800d05a:	461a      	mov	r2, r3
 800d05c:	68f9      	ldr	r1, [r7, #12]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fa1e 	bl	800d4a0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	88db      	ldrh	r3, [r3, #6]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fa75 	bl	800d55c <USBD_CtlSendStatus>
  }
}
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	889b      	ldrh	r3, [r3, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d130      	bne.n	800d0ec <USBD_SetAddress+0x74>
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	88db      	ldrh	r3, [r3, #6]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d12c      	bne.n	800d0ec <USBD_SetAddress+0x74>
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	885b      	ldrh	r3, [r3, #2]
 800d096:	2b7f      	cmp	r3, #127	; 0x7f
 800d098:	d828      	bhi.n	800d0ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	885b      	ldrh	r3, [r3, #2]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d0ac:	2b03      	cmp	r3, #3
 800d0ae:	d104      	bne.n	800d0ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f989 	bl	800d3ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b8:	e01c      	b.n	800d0f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	7bfa      	ldrb	r2, [r7, #15]
 800d0be:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 ff68 	bl	800df9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fa45 	bl	800d55c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d004      	beq.n	800d0e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2202      	movs	r2, #2
 800d0dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0e0:	e008      	b.n	800d0f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ea:	e003      	b.n	800d0f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f96b 	bl	800d3ca <USBD_CtlError>
  }
}
 800d0f4:	bf00      	nop
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	885b      	ldrh	r3, [r3, #2]
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	4b41      	ldr	r3, [pc, #260]	; (800d214 <USBD_SetConfig+0x118>)
 800d10e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d110:	4b40      	ldr	r3, [pc, #256]	; (800d214 <USBD_SetConfig+0x118>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d904      	bls.n	800d122 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f955 	bl	800d3ca <USBD_CtlError>
 800d120:	e075      	b.n	800d20e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d002      	beq.n	800d132 <USBD_SetConfig+0x36>
 800d12c:	2b03      	cmp	r3, #3
 800d12e:	d023      	beq.n	800d178 <USBD_SetConfig+0x7c>
 800d130:	e062      	b.n	800d1f8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d132:	4b38      	ldr	r3, [pc, #224]	; (800d214 <USBD_SetConfig+0x118>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d01a      	beq.n	800d170 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d13a:	4b36      	ldr	r3, [pc, #216]	; (800d214 <USBD_SetConfig+0x118>)
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	461a      	mov	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2203      	movs	r2, #3
 800d148:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d14c:	4b31      	ldr	r3, [pc, #196]	; (800d214 <USBD_SetConfig+0x118>)
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	4619      	mov	r1, r3
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7ff fa0d 	bl	800c572 <USBD_SetClassConfig>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d104      	bne.n	800d168 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 f932 	bl	800d3ca <USBD_CtlError>
          return;
 800d166:	e052      	b.n	800d20e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f9f7 	bl	800d55c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d16e:	e04e      	b.n	800d20e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f9f3 	bl	800d55c <USBD_CtlSendStatus>
      break;
 800d176:	e04a      	b.n	800d20e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d178:	4b26      	ldr	r3, [pc, #152]	; (800d214 <USBD_SetConfig+0x118>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d112      	bne.n	800d1a6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2202      	movs	r2, #2
 800d184:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d188:	4b22      	ldr	r3, [pc, #136]	; (800d214 <USBD_SetConfig+0x118>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d192:	4b20      	ldr	r3, [pc, #128]	; (800d214 <USBD_SetConfig+0x118>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff fa09 	bl	800c5b0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 f9dc 	bl	800d55c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d1a4:	e033      	b.n	800d20e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d1a6:	4b1b      	ldr	r3, [pc, #108]	; (800d214 <USBD_SetConfig+0x118>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d01d      	beq.n	800d1f0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff f9f7 	bl	800c5b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d1c2:	4b14      	ldr	r3, [pc, #80]	; (800d214 <USBD_SetConfig+0x118>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d1cc:	4b11      	ldr	r3, [pc, #68]	; (800d214 <USBD_SetConfig+0x118>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff f9cd 	bl	800c572 <USBD_SetClassConfig>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d104      	bne.n	800d1e8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f8f2 	bl	800d3ca <USBD_CtlError>
          return;
 800d1e6:	e012      	b.n	800d20e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f9b7 	bl	800d55c <USBD_CtlSendStatus>
      break;
 800d1ee:	e00e      	b.n	800d20e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f9b3 	bl	800d55c <USBD_CtlSendStatus>
      break;
 800d1f6:	e00a      	b.n	800d20e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f8e5 	bl	800d3ca <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d200:	4b04      	ldr	r3, [pc, #16]	; (800d214 <USBD_SetConfig+0x118>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7ff f9d2 	bl	800c5b0 <USBD_ClrClassConfig>
      break;
 800d20c:	bf00      	nop
    }
  }
}
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	200001e0 	.word	0x200001e0

0800d218 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	88db      	ldrh	r3, [r3, #6]
 800d226:	2b01      	cmp	r3, #1
 800d228:	d004      	beq.n	800d234 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f8cc 	bl	800d3ca <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d232:	e021      	b.n	800d278 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	db17      	blt.n	800d26e <USBD_GetConfig+0x56>
 800d23e:	2b02      	cmp	r3, #2
 800d240:	dd02      	ble.n	800d248 <USBD_GetConfig+0x30>
 800d242:	2b03      	cmp	r3, #3
 800d244:	d00b      	beq.n	800d25e <USBD_GetConfig+0x46>
 800d246:	e012      	b.n	800d26e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	3308      	adds	r3, #8
 800d252:	2201      	movs	r2, #1
 800d254:	4619      	mov	r1, r3
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f922 	bl	800d4a0 <USBD_CtlSendData>
      break;
 800d25c:	e00c      	b.n	800d278 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	3304      	adds	r3, #4
 800d262:	2201      	movs	r2, #1
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 f91a 	bl	800d4a0 <USBD_CtlSendData>
      break;
 800d26c:	e004      	b.n	800d278 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f8aa 	bl	800d3ca <USBD_CtlError>
      break;
 800d276:	bf00      	nop
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d290:	3b01      	subs	r3, #1
 800d292:	2b02      	cmp	r3, #2
 800d294:	d81e      	bhi.n	800d2d4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	88db      	ldrh	r3, [r3, #6]
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d004      	beq.n	800d2a8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f892 	bl	800d3ca <USBD_CtlError>
      break;
 800d2a6:	e01a      	b.n	800d2de <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d005      	beq.n	800d2c4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	f043 0202 	orr.w	r2, r3, #2
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	330c      	adds	r3, #12
 800d2c8:	2202      	movs	r2, #2
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f8e7 	bl	800d4a0 <USBD_CtlSendData>
    break;
 800d2d2:	e004      	b.n	800d2de <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d2d4:	6839      	ldr	r1, [r7, #0]
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 f877 	bl	800d3ca <USBD_CtlError>
    break;
 800d2dc:	bf00      	nop
  }
}
 800d2de:	bf00      	nop
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b082      	sub	sp, #8
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	885b      	ldrh	r3, [r3, #2]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d106      	bne.n	800d306 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 f92b 	bl	800d55c <USBD_CtlSendStatus>
  }

}
 800d306:	bf00      	nop
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b082      	sub	sp, #8
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d31e:	3b01      	subs	r3, #1
 800d320:	2b02      	cmp	r3, #2
 800d322:	d80b      	bhi.n	800d33c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	885b      	ldrh	r3, [r3, #2]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d10c      	bne.n	800d346 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 f911 	bl	800d55c <USBD_CtlSendStatus>
    }
    break;
 800d33a:	e004      	b.n	800d346 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f843 	bl	800d3ca <USBD_CtlError>
    break;
 800d344:	e000      	b.n	800d348 <USBD_ClrFeature+0x3a>
    break;
 800d346:	bf00      	nop
  }
}
 800d348:	bf00      	nop
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	781a      	ldrb	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	785a      	ldrb	r2, [r3, #1]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	3302      	adds	r3, #2
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	b29a      	uxth	r2, r3
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	3303      	adds	r3, #3
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	b29b      	uxth	r3, r3
 800d37a:	021b      	lsls	r3, r3, #8
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	4413      	add	r3, r2
 800d380:	b29a      	uxth	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	3304      	adds	r3, #4
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	3305      	adds	r3, #5
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	b29b      	uxth	r3, r3
 800d396:	021b      	lsls	r3, r3, #8
 800d398:	b29b      	uxth	r3, r3
 800d39a:	4413      	add	r3, r2
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	3306      	adds	r3, #6
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	3307      	adds	r3, #7
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	021b      	lsls	r3, r3, #8
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	4413      	add	r3, r2
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	80da      	strh	r2, [r3, #6]

}
 800d3be:	bf00      	nop
 800d3c0:	370c      	adds	r7, #12
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr

0800d3ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b082      	sub	sp, #8
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d3d4:	2180      	movs	r1, #128	; 0x80
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fd48 	bl	800de6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d3dc:	2100      	movs	r1, #0
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 fd44 	bl	800de6c <USBD_LL_StallEP>
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d032      	beq.n	800d468 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f000 f834 	bl	800d470 <USBD_GetLen>
 800d408:	4603      	mov	r3, r0
 800d40a:	3301      	adds	r3, #1
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	b29a      	uxth	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	75fa      	strb	r2, [r7, #23]
 800d41c:	461a      	mov	r2, r3
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	4413      	add	r3, r2
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	7812      	ldrb	r2, [r2, #0]
 800d426:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d428:	7dfb      	ldrb	r3, [r7, #23]
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	75fa      	strb	r2, [r7, #23]
 800d42e:	461a      	mov	r2, r3
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	4413      	add	r3, r2
 800d434:	2203      	movs	r2, #3
 800d436:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d438:	e012      	b.n	800d460 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	1c5a      	adds	r2, r3, #1
 800d43e:	60fa      	str	r2, [r7, #12]
 800d440:	7dfa      	ldrb	r2, [r7, #23]
 800d442:	1c51      	adds	r1, r2, #1
 800d444:	75f9      	strb	r1, [r7, #23]
 800d446:	4611      	mov	r1, r2
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	440a      	add	r2, r1
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	75fa      	strb	r2, [r7, #23]
 800d456:	461a      	mov	r2, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	4413      	add	r3, r2
 800d45c:	2200      	movs	r2, #0
 800d45e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1e8      	bne.n	800d43a <USBD_GetString+0x4e>
    }
  }
}
 800d468:	bf00      	nop
 800d46a:	3718      	adds	r7, #24
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d47c:	e005      	b.n	800d48a <USBD_GetLen+0x1a>
    {
        len++;
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	3301      	adds	r3, #1
 800d482:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	3301      	adds	r3, #1
 800d488:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1f5      	bne.n	800d47e <USBD_GetLen+0xe>
    }

    return len;
 800d492:	7bfb      	ldrb	r3, [r7, #15]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3714      	adds	r7, #20
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d4b6:	88fa      	ldrh	r2, [r7, #6]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d4bc:	88fa      	ldrh	r2, [r7, #6]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d4c2:	88fb      	ldrh	r3, [r7, #6]
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f000 fd9d 	bl	800e008 <USBD_LL_Transmit>

  return USBD_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d4e6:	88fb      	ldrh	r3, [r7, #6]
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f000 fd8b 	bl	800e008 <USBD_LL_Transmit>

  return USBD_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	4613      	mov	r3, r2
 800d508:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2203      	movs	r2, #3
 800d50e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d512:	88fa      	ldrh	r2, [r7, #6]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d51a:	88fa      	ldrh	r2, [r7, #6]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d522:	88fb      	ldrh	r3, [r7, #6]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	2100      	movs	r1, #0
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f000 fda7 	bl	800e07c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	4613      	mov	r3, r2
 800d544:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d546:	88fb      	ldrh	r3, [r7, #6]
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	2100      	movs	r1, #0
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	f000 fd95 	bl	800e07c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2204      	movs	r2, #4
 800d568:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d56c:	2300      	movs	r3, #0
 800d56e:	2200      	movs	r2, #0
 800d570:	2100      	movs	r1, #0
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 fd48 	bl	800e008 <USBD_LL_Transmit>

  return USBD_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b082      	sub	sp, #8
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2205      	movs	r2, #5
 800d58e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d592:	2300      	movs	r3, #0
 800d594:	2200      	movs	r2, #0
 800d596:	2100      	movs	r1, #0
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fd6f 	bl	800e07c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800d5a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d5e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800d5ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800d5ae:	e003      	b.n	800d5b8 <LoopCopyDataInit>

0800d5b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800d5b0:	4b0c      	ldr	r3, [pc, #48]	; (800d5e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800d5b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800d5b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800d5b6:	3104      	adds	r1, #4

0800d5b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800d5b8:	480b      	ldr	r0, [pc, #44]	; (800d5e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800d5ba:	4b0c      	ldr	r3, [pc, #48]	; (800d5ec <LoopForever+0xe>)
	adds	r2, r0, r1
 800d5bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800d5be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800d5c0:	d3f6      	bcc.n	800d5b0 <CopyDataInit>
	ldr	r2, =_sbss
 800d5c2:	4a0b      	ldr	r2, [pc, #44]	; (800d5f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800d5c4:	e002      	b.n	800d5cc <LoopFillZerobss>

0800d5c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800d5c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800d5c8:	f842 3b04 	str.w	r3, [r2], #4

0800d5cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800d5cc:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <LoopForever+0x16>)
	cmp	r2, r3
 800d5ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800d5d0:	d3f9      	bcc.n	800d5c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d5d2:	f7f4 ff15 	bl	8002400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d5d6:	f000 fe0b 	bl	800e1f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800d5da:	f7f2 ffc1 	bl	8000560 <main>

0800d5de <LoopForever>:

LoopForever:
    b LoopForever
 800d5de:	e7fe      	b.n	800d5de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800d5e0:	2004ffff 	.word	0x2004ffff
	ldr	r3, =_sidata
 800d5e4:	0800e33c 	.word	0x0800e33c
	ldr	r0, =_sdata
 800d5e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800d5ec:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 800d5f0:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 800d5f4:	20004a94 	.word	0x20004a94

0800d5f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800d5f8:	e7fe      	b.n	800d5f8 <ADC1_2_IRQHandler>
	...

0800d5fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d600:	2200      	movs	r2, #0
 800d602:	4912      	ldr	r1, [pc, #72]	; (800d64c <MX_USB_DEVICE_Init+0x50>)
 800d604:	4812      	ldr	r0, [pc, #72]	; (800d650 <MX_USB_DEVICE_Init+0x54>)
 800d606:	f7fe ff58 	bl	800c4ba <USBD_Init>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d610:	f7f3 ffe6 	bl	80015e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d614:	490f      	ldr	r1, [pc, #60]	; (800d654 <MX_USB_DEVICE_Init+0x58>)
 800d616:	480e      	ldr	r0, [pc, #56]	; (800d650 <MX_USB_DEVICE_Init+0x54>)
 800d618:	f7fe ff7a 	bl	800c510 <USBD_RegisterClass>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d001      	beq.n	800d626 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d622:	f7f3 ffdd 	bl	80015e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d626:	490c      	ldr	r1, [pc, #48]	; (800d658 <MX_USB_DEVICE_Init+0x5c>)
 800d628:	4809      	ldr	r0, [pc, #36]	; (800d650 <MX_USB_DEVICE_Init+0x54>)
 800d62a:	f7fe fed7 	bl	800c3dc <USBD_CDC_RegisterInterface>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d001      	beq.n	800d638 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d634:	f7f3 ffd4 	bl	80015e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d638:	4805      	ldr	r0, [pc, #20]	; (800d650 <MX_USB_DEVICE_Init+0x54>)
 800d63a:	f7fe ff83 	bl	800c544 <USBD_Start>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d644:	f7f3 ffcc 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d648:	bf00      	nop
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	2000012c 	.word	0x2000012c
 800d650:	200031f0 	.word	0x200031f0
 800d654:	20000018 	.word	0x20000018
 800d658:	2000011c 	.word	0x2000011c

0800d65c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d660:	2200      	movs	r2, #0
 800d662:	4905      	ldr	r1, [pc, #20]	; (800d678 <CDC_Init_FS+0x1c>)
 800d664:	4805      	ldr	r0, [pc, #20]	; (800d67c <CDC_Init_FS+0x20>)
 800d666:	f7fe fed0 	bl	800c40a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d66a:	4905      	ldr	r1, [pc, #20]	; (800d680 <CDC_Init_FS+0x24>)
 800d66c:	4803      	ldr	r0, [pc, #12]	; (800d67c <CDC_Init_FS+0x20>)
 800d66e:	f7fe fee6 	bl	800c43e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d672:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d674:	4618      	mov	r0, r3
 800d676:	bd80      	pop	{r7, pc}
 800d678:	20003c8c 	.word	0x20003c8c
 800d67c:	200031f0 	.word	0x200031f0
 800d680:	2000348c 	.word	0x2000348c

0800d684 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d684:	b480      	push	{r7}
 800d686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d688:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	71fb      	strb	r3, [r7, #7]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	2b23      	cmp	r3, #35	; 0x23
 800d6a8:	d84a      	bhi.n	800d740 <CDC_Control_FS+0xac>
 800d6aa:	a201      	add	r2, pc, #4	; (adr r2, 800d6b0 <CDC_Control_FS+0x1c>)
 800d6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b0:	0800d741 	.word	0x0800d741
 800d6b4:	0800d741 	.word	0x0800d741
 800d6b8:	0800d741 	.word	0x0800d741
 800d6bc:	0800d741 	.word	0x0800d741
 800d6c0:	0800d741 	.word	0x0800d741
 800d6c4:	0800d741 	.word	0x0800d741
 800d6c8:	0800d741 	.word	0x0800d741
 800d6cc:	0800d741 	.word	0x0800d741
 800d6d0:	0800d741 	.word	0x0800d741
 800d6d4:	0800d741 	.word	0x0800d741
 800d6d8:	0800d741 	.word	0x0800d741
 800d6dc:	0800d741 	.word	0x0800d741
 800d6e0:	0800d741 	.word	0x0800d741
 800d6e4:	0800d741 	.word	0x0800d741
 800d6e8:	0800d741 	.word	0x0800d741
 800d6ec:	0800d741 	.word	0x0800d741
 800d6f0:	0800d741 	.word	0x0800d741
 800d6f4:	0800d741 	.word	0x0800d741
 800d6f8:	0800d741 	.word	0x0800d741
 800d6fc:	0800d741 	.word	0x0800d741
 800d700:	0800d741 	.word	0x0800d741
 800d704:	0800d741 	.word	0x0800d741
 800d708:	0800d741 	.word	0x0800d741
 800d70c:	0800d741 	.word	0x0800d741
 800d710:	0800d741 	.word	0x0800d741
 800d714:	0800d741 	.word	0x0800d741
 800d718:	0800d741 	.word	0x0800d741
 800d71c:	0800d741 	.word	0x0800d741
 800d720:	0800d741 	.word	0x0800d741
 800d724:	0800d741 	.word	0x0800d741
 800d728:	0800d741 	.word	0x0800d741
 800d72c:	0800d741 	.word	0x0800d741
 800d730:	0800d741 	.word	0x0800d741
 800d734:	0800d741 	.word	0x0800d741
 800d738:	0800d741 	.word	0x0800d741
 800d73c:	0800d741 	.word	0x0800d741
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d740:	bf00      	nop
  }

  return (USBD_OK);
 800d742:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d744:	4618      	mov	r0, r3
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d75a:	6879      	ldr	r1, [r7, #4]
 800d75c:	4805      	ldr	r0, [pc, #20]	; (800d774 <CDC_Receive_FS+0x24>)
 800d75e:	f7fe fe6e 	bl	800c43e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d762:	4804      	ldr	r0, [pc, #16]	; (800d774 <CDC_Receive_FS+0x24>)
 800d764:	f7fe fe7f 	bl	800c466 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d768:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	200031f0 	.word	0x200031f0

0800d778 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	6039      	str	r1, [r7, #0]
 800d782:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2212      	movs	r2, #18
 800d788:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d78a:	4b03      	ldr	r3, [pc, #12]	; (800d798 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	2000014c 	.word	0x2000014c

0800d79c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	6039      	str	r1, [r7, #0]
 800d7a6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2204      	movs	r2, #4
 800d7ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7ae:	4b03      	ldr	r3, [pc, #12]	; (800d7bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	2000016c 	.word	0x2000016c

0800d7c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	6039      	str	r1, [r7, #0]
 800d7ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7cc:	79fb      	ldrb	r3, [r7, #7]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d105      	bne.n	800d7de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	4907      	ldr	r1, [pc, #28]	; (800d7f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7d6:	4808      	ldr	r0, [pc, #32]	; (800d7f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7d8:	f7ff fe08 	bl	800d3ec <USBD_GetString>
 800d7dc:	e004      	b.n	800d7e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	4904      	ldr	r1, [pc, #16]	; (800d7f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7e2:	4805      	ldr	r0, [pc, #20]	; (800d7f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7e4:	f7ff fe02 	bl	800d3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7e8:	4b02      	ldr	r3, [pc, #8]	; (800d7f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	2000448c 	.word	0x2000448c
 800d7f8:	0800e29c 	.word	0x0800e29c

0800d7fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	6039      	str	r1, [r7, #0]
 800d806:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	4904      	ldr	r1, [pc, #16]	; (800d81c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d80c:	4804      	ldr	r0, [pc, #16]	; (800d820 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d80e:	f7ff fded 	bl	800d3ec <USBD_GetString>
  return USBD_StrDesc;
 800d812:	4b02      	ldr	r3, [pc, #8]	; (800d81c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d814:	4618      	mov	r0, r3
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	2000448c 	.word	0x2000448c
 800d820:	0800e2b4 	.word	0x0800e2b4

0800d824 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	6039      	str	r1, [r7, #0]
 800d82e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	221a      	movs	r2, #26
 800d834:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d836:	f000 f855 	bl	800d8e4 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800d83a:	4b02      	ldr	r3, [pc, #8]	; (800d844 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20000170 	.word	0x20000170

0800d848 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	4603      	mov	r3, r0
 800d850:	6039      	str	r1, [r7, #0]
 800d852:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d854:	79fb      	ldrb	r3, [r7, #7]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d105      	bne.n	800d866 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	4907      	ldr	r1, [pc, #28]	; (800d87c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d85e:	4808      	ldr	r0, [pc, #32]	; (800d880 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d860:	f7ff fdc4 	bl	800d3ec <USBD_GetString>
 800d864:	e004      	b.n	800d870 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d866:	683a      	ldr	r2, [r7, #0]
 800d868:	4904      	ldr	r1, [pc, #16]	; (800d87c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d86a:	4805      	ldr	r0, [pc, #20]	; (800d880 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d86c:	f7ff fdbe 	bl	800d3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d870:	4b02      	ldr	r3, [pc, #8]	; (800d87c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	2000448c 	.word	0x2000448c
 800d880:	0800e2c8 	.word	0x0800e2c8

0800d884 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	4603      	mov	r3, r0
 800d88c:	6039      	str	r1, [r7, #0]
 800d88e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d105      	bne.n	800d8a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	4907      	ldr	r1, [pc, #28]	; (800d8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d89a:	4808      	ldr	r0, [pc, #32]	; (800d8bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d89c:	f7ff fda6 	bl	800d3ec <USBD_GetString>
 800d8a0:	e004      	b.n	800d8ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8a2:	683a      	ldr	r2, [r7, #0]
 800d8a4:	4904      	ldr	r1, [pc, #16]	; (800d8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8a6:	4805      	ldr	r0, [pc, #20]	; (800d8bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8a8:	f7ff fda0 	bl	800d3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8ac:	4b02      	ldr	r3, [pc, #8]	; (800d8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	2000448c 	.word	0x2000448c
 800d8bc:	0800e2d4 	.word	0x0800e2d4

0800d8c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	6039      	str	r1, [r7, #0]
 800d8ca:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	220c      	movs	r2, #12
 800d8d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d8d2:	4b03      	ldr	r3, [pc, #12]	; (800d8e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	20000160 	.word	0x20000160

0800d8e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8ea:	4b0f      	ldr	r3, [pc, #60]	; (800d928 <Get_SerialNum+0x44>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8f0:	4b0e      	ldr	r3, [pc, #56]	; (800d92c <Get_SerialNum+0x48>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8f6:	4b0e      	ldr	r3, [pc, #56]	; (800d930 <Get_SerialNum+0x4c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	4413      	add	r3, r2
 800d902:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d009      	beq.n	800d91e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d90a:	2208      	movs	r2, #8
 800d90c:	4909      	ldr	r1, [pc, #36]	; (800d934 <Get_SerialNum+0x50>)
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f000 f814 	bl	800d93c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d914:	2204      	movs	r2, #4
 800d916:	4908      	ldr	r1, [pc, #32]	; (800d938 <Get_SerialNum+0x54>)
 800d918:	68b8      	ldr	r0, [r7, #8]
 800d91a:	f000 f80f 	bl	800d93c <IntToUnicode>
  }
}
 800d91e:	bf00      	nop
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	1fff7590 	.word	0x1fff7590
 800d92c:	1fff7594 	.word	0x1fff7594
 800d930:	1fff7598 	.word	0x1fff7598
 800d934:	20000172 	.word	0x20000172
 800d938:	20000182 	.word	0x20000182

0800d93c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	4613      	mov	r3, r2
 800d948:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d94e:	2300      	movs	r3, #0
 800d950:	75fb      	strb	r3, [r7, #23]
 800d952:	e027      	b.n	800d9a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	0f1b      	lsrs	r3, r3, #28
 800d958:	2b09      	cmp	r3, #9
 800d95a:	d80b      	bhi.n	800d974 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	0f1b      	lsrs	r3, r3, #28
 800d960:	b2da      	uxtb	r2, r3
 800d962:	7dfb      	ldrb	r3, [r7, #23]
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	4619      	mov	r1, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	440b      	add	r3, r1
 800d96c:	3230      	adds	r2, #48	; 0x30
 800d96e:	b2d2      	uxtb	r2, r2
 800d970:	701a      	strb	r2, [r3, #0]
 800d972:	e00a      	b.n	800d98a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	0f1b      	lsrs	r3, r3, #28
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	7dfb      	ldrb	r3, [r7, #23]
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	4619      	mov	r1, r3
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	440b      	add	r3, r1
 800d984:	3237      	adds	r2, #55	; 0x37
 800d986:	b2d2      	uxtb	r2, r2
 800d988:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	011b      	lsls	r3, r3, #4
 800d98e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	005b      	lsls	r3, r3, #1
 800d994:	3301      	adds	r3, #1
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	4413      	add	r3, r2
 800d99a:	2200      	movs	r2, #0
 800d99c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d99e:	7dfb      	ldrb	r3, [r7, #23]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	75fb      	strb	r3, [r7, #23]
 800d9a4:	7dfa      	ldrb	r2, [r7, #23]
 800d9a6:	79fb      	ldrb	r3, [r7, #7]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d3d3      	bcc.n	800d954 <IntToUnicode+0x18>
  }
}
 800d9ac:	bf00      	nop
 800d9ae:	371c      	adds	r7, #28
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08a      	sub	sp, #40	; 0x28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9c0:	f107 0314 	add.w	r3, r7, #20
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	601a      	str	r2, [r3, #0]
 800d9c8:	605a      	str	r2, [r3, #4]
 800d9ca:	609a      	str	r2, [r3, #8]
 800d9cc:	60da      	str	r2, [r3, #12]
 800d9ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d9d8:	d14e      	bne.n	800da78 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9da:	4b29      	ldr	r3, [pc, #164]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800d9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9de:	4a28      	ldr	r2, [pc, #160]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800d9e0:	f043 0301 	orr.w	r3, r3, #1
 800d9e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d9e6:	4b26      	ldr	r3, [pc, #152]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800d9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	613b      	str	r3, [r7, #16]
 800d9f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800d9f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d9f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da00:	2303      	movs	r3, #3
 800da02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800da04:	230a      	movs	r3, #10
 800da06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da08:	f107 0314 	add.w	r3, r7, #20
 800da0c:	4619      	mov	r1, r3
 800da0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800da12:	f7f6 fe2f 	bl	8004674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da16:	4b1a      	ldr	r3, [pc, #104]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da1a:	4a19      	ldr	r2, [pc, #100]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800da20:	64d3      	str	r3, [r2, #76]	; 0x4c
 800da22:	4b17      	ldr	r3, [pc, #92]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800da2a:	60fb      	str	r3, [r7, #12]
 800da2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da2e:	4b14      	ldr	r3, [pc, #80]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da36:	2b00      	cmp	r3, #0
 800da38:	d114      	bne.n	800da64 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800da3a:	4b11      	ldr	r3, [pc, #68]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da3e:	4a10      	ldr	r2, [pc, #64]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da44:	6593      	str	r3, [r2, #88]	; 0x58
 800da46:	4b0e      	ldr	r3, [pc, #56]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da4e:	60bb      	str	r3, [r7, #8]
 800da50:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800da52:	f7f8 f9e9 	bl	8005e28 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800da56:	4b0a      	ldr	r3, [pc, #40]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da5a:	4a09      	ldr	r2, [pc, #36]	; (800da80 <HAL_PCD_MspInit+0xc8>)
 800da5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da60:	6593      	str	r3, [r2, #88]	; 0x58
 800da62:	e001      	b.n	800da68 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800da64:	f7f8 f9e0 	bl	8005e28 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da68:	2200      	movs	r2, #0
 800da6a:	2100      	movs	r1, #0
 800da6c:	2043      	movs	r0, #67	; 0x43
 800da6e:	f7f5 fda6 	bl	80035be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da72:	2043      	movs	r0, #67	; 0x43
 800da74:	f7f5 fdbf 	bl	80035f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da78:	bf00      	nop
 800da7a:	3728      	adds	r7, #40	; 0x28
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	40021000 	.word	0x40021000

0800da84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800da98:	4619      	mov	r1, r3
 800da9a:	4610      	mov	r0, r2
 800da9c:	f7fe fd9b 	bl	800c5d6 <USBD_LL_SetupStage>
}
 800daa0:	bf00      	nop
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800daba:	78fa      	ldrb	r2, [r7, #3]
 800dabc:	6879      	ldr	r1, [r7, #4]
 800dabe:	4613      	mov	r3, r2
 800dac0:	00db      	lsls	r3, r3, #3
 800dac2:	1a9b      	subs	r3, r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	440b      	add	r3, r1
 800dac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	78fb      	ldrb	r3, [r7, #3]
 800dad0:	4619      	mov	r1, r3
 800dad2:	f7fe fdcb 	bl	800c66c <USBD_LL_DataOutStage>
}
 800dad6:	bf00      	nop
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	460b      	mov	r3, r1
 800dae8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800daf0:	78fa      	ldrb	r2, [r7, #3]
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	4613      	mov	r3, r2
 800daf6:	00db      	lsls	r3, r3, #3
 800daf8:	1a9b      	subs	r3, r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	440b      	add	r3, r1
 800dafe:	3348      	adds	r3, #72	; 0x48
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	78fb      	ldrb	r3, [r7, #3]
 800db04:	4619      	mov	r1, r3
 800db06:	f7fe fe22 	bl	800c74e <USBD_LL_DataInStage>
}
 800db0a:	bf00      	nop
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe ff30 	bl	800c986 <USBD_LL_SOF>
}
 800db26:	bf00      	nop
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db36:	2301      	movs	r3, #1
 800db38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d001      	beq.n	800db46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800db42:	f7f3 fd4d 	bl	80015e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db4c:	7bfa      	ldrb	r2, [r7, #15]
 800db4e:	4611      	mov	r1, r2
 800db50:	4618      	mov	r0, r3
 800db52:	f7fe fee2 	bl	800c91a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe fe9b 	bl	800c898 <USBD_LL_Reset>
}
 800db62:	bf00      	nop
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	6812      	ldr	r2, [r2, #0]
 800db82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db86:	f043 0301 	orr.w	r3, r3, #1
 800db8a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db92:	4618      	mov	r0, r3
 800db94:	f7fe fed1 	bl	800c93a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d005      	beq.n	800dbac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dba0:	4b04      	ldr	r3, [pc, #16]	; (800dbb4 <HAL_PCD_SuspendCallback+0x48>)
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	4a03      	ldr	r2, [pc, #12]	; (800dbb4 <HAL_PCD_SuspendCallback+0x48>)
 800dba6:	f043 0306 	orr.w	r3, r3, #6
 800dbaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dbac:	bf00      	nop
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	e000ed00 	.word	0xe000ed00

0800dbb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	6812      	ldr	r2, [r2, #0]
 800dbce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dbd2:	f023 0301 	bic.w	r3, r3, #1
 800dbd6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a1b      	ldr	r3, [r3, #32]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d007      	beq.n	800dbf0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbe0:	4b08      	ldr	r3, [pc, #32]	; (800dc04 <HAL_PCD_ResumeCallback+0x4c>)
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	4a07      	ldr	r2, [pc, #28]	; (800dc04 <HAL_PCD_ResumeCallback+0x4c>)
 800dbe6:	f023 0306 	bic.w	r3, r3, #6
 800dbea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dbec:	f000 fafa 	bl	800e1e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fe feb4 	bl	800c964 <USBD_LL_Resume>
}
 800dbfc:	bf00      	nop
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	e000ed00 	.word	0xe000ed00

0800dc08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc1a:	78fa      	ldrb	r2, [r7, #3]
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fe fed8 	bl	800c9d4 <USBD_LL_IsoOUTIncomplete>
}
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc3e:	78fa      	ldrb	r2, [r7, #3]
 800dc40:	4611      	mov	r1, r2
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fe feb9 	bl	800c9ba <USBD_LL_IsoINIncomplete>
}
 800dc48:	bf00      	nop
 800dc4a:	3708      	adds	r7, #8
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fe fec5 	bl	800c9ee <USBD_LL_DevConnected>
}
 800dc64:	bf00      	nop
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fec2 	bl	800ca04 <USBD_LL_DevDisconnected>
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d13c      	bne.n	800dd12 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc98:	4a20      	ldr	r2, [pc, #128]	; (800dd1c <USBD_LL_Init+0x94>)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a1e      	ldr	r2, [pc, #120]	; (800dd1c <USBD_LL_Init+0x94>)
 800dca4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dca8:	4b1c      	ldr	r3, [pc, #112]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dcae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dcb0:	4b1a      	ldr	r3, [pc, #104]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcb2:	2206      	movs	r2, #6
 800dcb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dcb6:	4b19      	ldr	r3, [pc, #100]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcb8:	2202      	movs	r2, #2
 800dcba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dcbc:	4b17      	ldr	r3, [pc, #92]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcbe:	2202      	movs	r2, #2
 800dcc0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dcc2:	4b16      	ldr	r3, [pc, #88]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dcc8:	4b14      	ldr	r3, [pc, #80]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dcce:	4b13      	ldr	r3, [pc, #76]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800dcd4:	4b11      	ldr	r3, [pc, #68]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dcda:	4b10      	ldr	r3, [pc, #64]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dce0:	4b0e      	ldr	r3, [pc, #56]	; (800dd1c <USBD_LL_Init+0x94>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dce6:	480d      	ldr	r0, [pc, #52]	; (800dd1c <USBD_LL_Init+0x94>)
 800dce8:	f7f6 ffad 	bl	8004c46 <HAL_PCD_Init>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dcf2:	f7f3 fc75 	bl	80015e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dcf6:	2180      	movs	r1, #128	; 0x80
 800dcf8:	4808      	ldr	r0, [pc, #32]	; (800dd1c <USBD_LL_Init+0x94>)
 800dcfa:	f7f7 ffec 	bl	8005cd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dcfe:	2240      	movs	r2, #64	; 0x40
 800dd00:	2100      	movs	r1, #0
 800dd02:	4806      	ldr	r0, [pc, #24]	; (800dd1c <USBD_LL_Init+0x94>)
 800dd04:	f7f7 ffa0 	bl	8005c48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dd08:	2280      	movs	r2, #128	; 0x80
 800dd0a:	2101      	movs	r1, #1
 800dd0c:	4803      	ldr	r0, [pc, #12]	; (800dd1c <USBD_LL_Init+0x94>)
 800dd0e:	f7f7 ff9b 	bl	8005c48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	2000468c 	.word	0x2000468c

0800dd20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7f7 f8a9 	bl	8004e8e <HAL_PCD_Start>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800dd40:	7bbb      	ldrb	r3, [r7, #14]
 800dd42:	2b03      	cmp	r3, #3
 800dd44:	d816      	bhi.n	800dd74 <USBD_LL_Start+0x54>
 800dd46:	a201      	add	r2, pc, #4	; (adr r2, 800dd4c <USBD_LL_Start+0x2c>)
 800dd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4c:	0800dd5d 	.word	0x0800dd5d
 800dd50:	0800dd63 	.word	0x0800dd63
 800dd54:	0800dd69 	.word	0x0800dd69
 800dd58:	0800dd6f 	.word	0x0800dd6f
    case HAL_OK :
      usb_status = USBD_OK;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd60:	e00b      	b.n	800dd7a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd62:	2302      	movs	r3, #2
 800dd64:	73fb      	strb	r3, [r7, #15]
    break;
 800dd66:	e008      	b.n	800dd7a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd6c:	e005      	b.n	800dd7a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd6e:	2302      	movs	r3, #2
 800dd70:	73fb      	strb	r3, [r7, #15]
    break;
 800dd72:	e002      	b.n	800dd7a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800dd74:	2302      	movs	r3, #2
 800dd76:	73fb      	strb	r3, [r7, #15]
    break;
 800dd78:	bf00      	nop
  }
  return usb_status;
 800dd7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	4608      	mov	r0, r1
 800dd8e:	4611      	mov	r1, r2
 800dd90:	461a      	mov	r2, r3
 800dd92:	4603      	mov	r3, r0
 800dd94:	70fb      	strb	r3, [r7, #3]
 800dd96:	460b      	mov	r3, r1
 800dd98:	70bb      	strb	r3, [r7, #2]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dda2:	2300      	movs	r3, #0
 800dda4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ddac:	78bb      	ldrb	r3, [r7, #2]
 800ddae:	883a      	ldrh	r2, [r7, #0]
 800ddb0:	78f9      	ldrb	r1, [r7, #3]
 800ddb2:	f7f7 fc42 	bl	800563a <HAL_PCD_EP_Open>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ddba:	7bbb      	ldrb	r3, [r7, #14]
 800ddbc:	2b03      	cmp	r3, #3
 800ddbe:	d817      	bhi.n	800ddf0 <USBD_LL_OpenEP+0x6c>
 800ddc0:	a201      	add	r2, pc, #4	; (adr r2, 800ddc8 <USBD_LL_OpenEP+0x44>)
 800ddc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc6:	bf00      	nop
 800ddc8:	0800ddd9 	.word	0x0800ddd9
 800ddcc:	0800dddf 	.word	0x0800dddf
 800ddd0:	0800dde5 	.word	0x0800dde5
 800ddd4:	0800ddeb 	.word	0x0800ddeb
    case HAL_OK :
      usb_status = USBD_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73fb      	strb	r3, [r7, #15]
    break;
 800dddc:	e00b      	b.n	800ddf6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddde:	2302      	movs	r3, #2
 800dde0:	73fb      	strb	r3, [r7, #15]
    break;
 800dde2:	e008      	b.n	800ddf6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dde4:	2301      	movs	r3, #1
 800dde6:	73fb      	strb	r3, [r7, #15]
    break;
 800dde8:	e005      	b.n	800ddf6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddea:	2302      	movs	r3, #2
 800ddec:	73fb      	strb	r3, [r7, #15]
    break;
 800ddee:	e002      	b.n	800ddf6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ddf0:	2302      	movs	r3, #2
 800ddf2:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf4:	bf00      	nop
  }
  return usb_status;
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	460b      	mov	r3, r1
 800de0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de0c:	2300      	movs	r3, #0
 800de0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800de1a:	78fa      	ldrb	r2, [r7, #3]
 800de1c:	4611      	mov	r1, r2
 800de1e:	4618      	mov	r0, r3
 800de20:	f7f7 fc73 	bl	800570a <HAL_PCD_EP_Close>
 800de24:	4603      	mov	r3, r0
 800de26:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800de28:	7bbb      	ldrb	r3, [r7, #14]
 800de2a:	2b03      	cmp	r3, #3
 800de2c:	d816      	bhi.n	800de5c <USBD_LL_CloseEP+0x5c>
 800de2e:	a201      	add	r2, pc, #4	; (adr r2, 800de34 <USBD_LL_CloseEP+0x34>)
 800de30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de34:	0800de45 	.word	0x0800de45
 800de38:	0800de4b 	.word	0x0800de4b
 800de3c:	0800de51 	.word	0x0800de51
 800de40:	0800de57 	.word	0x0800de57
    case HAL_OK :
      usb_status = USBD_OK;
 800de44:	2300      	movs	r3, #0
 800de46:	73fb      	strb	r3, [r7, #15]
    break;
 800de48:	e00b      	b.n	800de62 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de4a:	2302      	movs	r3, #2
 800de4c:	73fb      	strb	r3, [r7, #15]
    break;
 800de4e:	e008      	b.n	800de62 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de50:	2301      	movs	r3, #1
 800de52:	73fb      	strb	r3, [r7, #15]
    break;
 800de54:	e005      	b.n	800de62 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de56:	2302      	movs	r3, #2
 800de58:	73fb      	strb	r3, [r7, #15]
    break;
 800de5a:	e002      	b.n	800de62 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800de5c:	2302      	movs	r3, #2
 800de5e:	73fb      	strb	r3, [r7, #15]
    break;
 800de60:	bf00      	nop
  }
  return usb_status;  
 800de62:	7bfb      	ldrb	r3, [r7, #15]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	460b      	mov	r3, r1
 800de76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de78:	2300      	movs	r3, #0
 800de7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de7c:	2300      	movs	r3, #0
 800de7e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800de86:	78fa      	ldrb	r2, [r7, #3]
 800de88:	4611      	mov	r1, r2
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7f7 fd1a 	bl	80058c4 <HAL_PCD_EP_SetStall>
 800de90:	4603      	mov	r3, r0
 800de92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800de94:	7bbb      	ldrb	r3, [r7, #14]
 800de96:	2b03      	cmp	r3, #3
 800de98:	d816      	bhi.n	800dec8 <USBD_LL_StallEP+0x5c>
 800de9a:	a201      	add	r2, pc, #4	; (adr r2, 800dea0 <USBD_LL_StallEP+0x34>)
 800de9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea0:	0800deb1 	.word	0x0800deb1
 800dea4:	0800deb7 	.word	0x0800deb7
 800dea8:	0800debd 	.word	0x0800debd
 800deac:	0800dec3 	.word	0x0800dec3
    case HAL_OK :
      usb_status = USBD_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73fb      	strb	r3, [r7, #15]
    break;
 800deb4:	e00b      	b.n	800dece <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800deb6:	2302      	movs	r3, #2
 800deb8:	73fb      	strb	r3, [r7, #15]
    break;
 800deba:	e008      	b.n	800dece <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800debc:	2301      	movs	r3, #1
 800debe:	73fb      	strb	r3, [r7, #15]
    break;
 800dec0:	e005      	b.n	800dece <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dec2:	2302      	movs	r3, #2
 800dec4:	73fb      	strb	r3, [r7, #15]
    break;
 800dec6:	e002      	b.n	800dece <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dec8:	2302      	movs	r3, #2
 800deca:	73fb      	strb	r3, [r7, #15]
    break;
 800decc:	bf00      	nop
  }
  return usb_status;  
 800dece:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	460b      	mov	r3, r1
 800dee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dee8:	2300      	movs	r3, #0
 800deea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800def2:	78fa      	ldrb	r2, [r7, #3]
 800def4:	4611      	mov	r1, r2
 800def6:	4618      	mov	r0, r3
 800def8:	f7f7 fd46 	bl	8005988 <HAL_PCD_EP_ClrStall>
 800defc:	4603      	mov	r3, r0
 800defe:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800df00:	7bbb      	ldrb	r3, [r7, #14]
 800df02:	2b03      	cmp	r3, #3
 800df04:	d816      	bhi.n	800df34 <USBD_LL_ClearStallEP+0x5c>
 800df06:	a201      	add	r2, pc, #4	; (adr r2, 800df0c <USBD_LL_ClearStallEP+0x34>)
 800df08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0c:	0800df1d 	.word	0x0800df1d
 800df10:	0800df23 	.word	0x0800df23
 800df14:	0800df29 	.word	0x0800df29
 800df18:	0800df2f 	.word	0x0800df2f
    case HAL_OK :
      usb_status = USBD_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	73fb      	strb	r3, [r7, #15]
    break;
 800df20:	e00b      	b.n	800df3a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df22:	2302      	movs	r3, #2
 800df24:	73fb      	strb	r3, [r7, #15]
    break;
 800df26:	e008      	b.n	800df3a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df28:	2301      	movs	r3, #1
 800df2a:	73fb      	strb	r3, [r7, #15]
    break;
 800df2c:	e005      	b.n	800df3a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df2e:	2302      	movs	r3, #2
 800df30:	73fb      	strb	r3, [r7, #15]
    break;
 800df32:	e002      	b.n	800df3a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800df34:	2302      	movs	r3, #2
 800df36:	73fb      	strb	r3, [r7, #15]
    break;
 800df38:	bf00      	nop
  }
  return usb_status; 
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	460b      	mov	r3, r1
 800df4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800df56:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800df58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	da0b      	bge.n	800df78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800df60:	78fb      	ldrb	r3, [r7, #3]
 800df62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df66:	68f9      	ldr	r1, [r7, #12]
 800df68:	4613      	mov	r3, r2
 800df6a:	00db      	lsls	r3, r3, #3
 800df6c:	1a9b      	subs	r3, r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	440b      	add	r3, r1
 800df72:	333e      	adds	r3, #62	; 0x3e
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	e00b      	b.n	800df90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800df78:	78fb      	ldrb	r3, [r7, #3]
 800df7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df7e:	68f9      	ldr	r1, [r7, #12]
 800df80:	4613      	mov	r3, r2
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	1a9b      	subs	r3, r3, r2
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	440b      	add	r3, r1
 800df8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df90:	4618      	mov	r0, r3
 800df92:	3714      	adds	r7, #20
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dfb6:	78fa      	ldrb	r2, [r7, #3]
 800dfb8:	4611      	mov	r1, r2
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7f7 fb18 	bl	80055f0 <HAL_PCD_SetAddress>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800dfc4:	7bbb      	ldrb	r3, [r7, #14]
 800dfc6:	2b03      	cmp	r3, #3
 800dfc8:	d816      	bhi.n	800dff8 <USBD_LL_SetUSBAddress+0x5c>
 800dfca:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <USBD_LL_SetUSBAddress+0x34>)
 800dfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd0:	0800dfe1 	.word	0x0800dfe1
 800dfd4:	0800dfe7 	.word	0x0800dfe7
 800dfd8:	0800dfed 	.word	0x0800dfed
 800dfdc:	0800dff3 	.word	0x0800dff3
    case HAL_OK :
      usb_status = USBD_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe4:	e00b      	b.n	800dffe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	73fb      	strb	r3, [r7, #15]
    break;
 800dfea:	e008      	b.n	800dffe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfec:	2301      	movs	r3, #1
 800dfee:	73fb      	strb	r3, [r7, #15]
    break;
 800dff0:	e005      	b.n	800dffe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dff2:	2302      	movs	r3, #2
 800dff4:	73fb      	strb	r3, [r7, #15]
    break;
 800dff6:	e002      	b.n	800dffe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800dff8:	2302      	movs	r3, #2
 800dffa:	73fb      	strb	r3, [r7, #15]
    break;
 800dffc:	bf00      	nop
  }
  return usb_status;  
 800dffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	607a      	str	r2, [r7, #4]
 800e012:	461a      	mov	r2, r3
 800e014:	460b      	mov	r3, r1
 800e016:	72fb      	strb	r3, [r7, #11]
 800e018:	4613      	mov	r3, r2
 800e01a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e02a:	893b      	ldrh	r3, [r7, #8]
 800e02c:	7af9      	ldrb	r1, [r7, #11]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	f7f7 fc0b 	bl	800584a <HAL_PCD_EP_Transmit>
 800e034:	4603      	mov	r3, r0
 800e036:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800e038:	7dbb      	ldrb	r3, [r7, #22]
 800e03a:	2b03      	cmp	r3, #3
 800e03c:	d816      	bhi.n	800e06c <USBD_LL_Transmit+0x64>
 800e03e:	a201      	add	r2, pc, #4	; (adr r2, 800e044 <USBD_LL_Transmit+0x3c>)
 800e040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e044:	0800e055 	.word	0x0800e055
 800e048:	0800e05b 	.word	0x0800e05b
 800e04c:	0800e061 	.word	0x0800e061
 800e050:	0800e067 	.word	0x0800e067
    case HAL_OK :
      usb_status = USBD_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	75fb      	strb	r3, [r7, #23]
    break;
 800e058:	e00b      	b.n	800e072 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e05a:	2302      	movs	r3, #2
 800e05c:	75fb      	strb	r3, [r7, #23]
    break;
 800e05e:	e008      	b.n	800e072 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e060:	2301      	movs	r3, #1
 800e062:	75fb      	strb	r3, [r7, #23]
    break;
 800e064:	e005      	b.n	800e072 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e066:	2302      	movs	r3, #2
 800e068:	75fb      	strb	r3, [r7, #23]
    break;
 800e06a:	e002      	b.n	800e072 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800e06c:	2302      	movs	r3, #2
 800e06e:	75fb      	strb	r3, [r7, #23]
    break;
 800e070:	bf00      	nop
  }
  return usb_status;    
 800e072:	7dfb      	ldrb	r3, [r7, #23]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	607a      	str	r2, [r7, #4]
 800e086:	461a      	mov	r2, r3
 800e088:	460b      	mov	r3, r1
 800e08a:	72fb      	strb	r3, [r7, #11]
 800e08c:	4613      	mov	r3, r2
 800e08e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e094:	2300      	movs	r3, #0
 800e096:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e09e:	893b      	ldrh	r3, [r7, #8]
 800e0a0:	7af9      	ldrb	r1, [r7, #11]
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	f7f7 fb7b 	bl	800579e <HAL_PCD_EP_Receive>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800e0ac:	7dbb      	ldrb	r3, [r7, #22]
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d816      	bhi.n	800e0e0 <USBD_LL_PrepareReceive+0x64>
 800e0b2:	a201      	add	r2, pc, #4	; (adr r2, 800e0b8 <USBD_LL_PrepareReceive+0x3c>)
 800e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b8:	0800e0c9 	.word	0x0800e0c9
 800e0bc:	0800e0cf 	.word	0x0800e0cf
 800e0c0:	0800e0d5 	.word	0x0800e0d5
 800e0c4:	0800e0db 	.word	0x0800e0db
    case HAL_OK :
      usb_status = USBD_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	75fb      	strb	r3, [r7, #23]
    break;
 800e0cc:	e00b      	b.n	800e0e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	75fb      	strb	r3, [r7, #23]
    break;
 800e0d2:	e008      	b.n	800e0e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	75fb      	strb	r3, [r7, #23]
    break;
 800e0d8:	e005      	b.n	800e0e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0da:	2302      	movs	r3, #2
 800e0dc:	75fb      	strb	r3, [r7, #23]
    break;
 800e0de:	e002      	b.n	800e0e6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	75fb      	strb	r3, [r7, #23]
    break;
 800e0e4:	bf00      	nop
  }
  return usb_status; 
 800e0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e102:	78fa      	ldrb	r2, [r7, #3]
 800e104:	4611      	mov	r1, r2
 800e106:	4618      	mov	r0, r3
 800e108:	f7f7 fb87 	bl	800581a <HAL_PCD_EP_GetRxCount>
 800e10c:	4603      	mov	r3, r0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	460b      	mov	r3, r1
 800e122:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e124:	78fb      	ldrb	r3, [r7, #3]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <HAL_PCDEx_LPM_Callback+0x18>
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d01f      	beq.n	800e16e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800e12e:	e03b      	b.n	800e1a8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6a1b      	ldr	r3, [r3, #32]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d007      	beq.n	800e148 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e138:	f000 f854 	bl	800e1e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e13c:	4b1c      	ldr	r3, [pc, #112]	; (800e1b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e13e:	691b      	ldr	r3, [r3, #16]
 800e140:	4a1b      	ldr	r2, [pc, #108]	; (800e1b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e142:	f023 0306 	bic.w	r3, r3, #6
 800e146:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	6812      	ldr	r2, [r2, #0]
 800e156:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e15a:	f023 0301 	bic.w	r3, r3, #1
 800e15e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e166:	4618      	mov	r0, r3
 800e168:	f7fe fbfc 	bl	800c964 <USBD_LL_Resume>
    break;
 800e16c:	e01c      	b.n	800e1a8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	6812      	ldr	r2, [r2, #0]
 800e17c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e180:	f043 0301 	orr.w	r3, r3, #1
 800e184:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fe fbd4 	bl	800c93a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d005      	beq.n	800e1a6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e19a:	4b05      	ldr	r3, [pc, #20]	; (800e1b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	4a04      	ldr	r2, [pc, #16]	; (800e1b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e1a0:	f043 0306 	orr.w	r3, r3, #6
 800e1a4:	6113      	str	r3, [r2, #16]
    break;   
 800e1a6:	bf00      	nop
}
 800e1a8:	bf00      	nop
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	e000ed00 	.word	0xe000ed00

0800e1b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e1bc:	4b03      	ldr	r3, [pc, #12]	; (800e1cc <USBD_static_malloc+0x18>)
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	370c      	adds	r7, #12
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	200001e4 	.word	0x200001e4

0800e1d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]

}
 800e1d8:	bf00      	nop
 800e1da:	370c      	adds	r7, #12
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e1e8:	f7f2 fa5e 	bl	80006a8 <SystemClock_Config>
}
 800e1ec:	bf00      	nop
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <__libc_init_array>:
 800e1f0:	b570      	push	{r4, r5, r6, lr}
 800e1f2:	4e0d      	ldr	r6, [pc, #52]	; (800e228 <__libc_init_array+0x38>)
 800e1f4:	4c0d      	ldr	r4, [pc, #52]	; (800e22c <__libc_init_array+0x3c>)
 800e1f6:	1ba4      	subs	r4, r4, r6
 800e1f8:	10a4      	asrs	r4, r4, #2
 800e1fa:	2500      	movs	r5, #0
 800e1fc:	42a5      	cmp	r5, r4
 800e1fe:	d109      	bne.n	800e214 <__libc_init_array+0x24>
 800e200:	4e0b      	ldr	r6, [pc, #44]	; (800e230 <__libc_init_array+0x40>)
 800e202:	4c0c      	ldr	r4, [pc, #48]	; (800e234 <__libc_init_array+0x44>)
 800e204:	f000 f820 	bl	800e248 <_init>
 800e208:	1ba4      	subs	r4, r4, r6
 800e20a:	10a4      	asrs	r4, r4, #2
 800e20c:	2500      	movs	r5, #0
 800e20e:	42a5      	cmp	r5, r4
 800e210:	d105      	bne.n	800e21e <__libc_init_array+0x2e>
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e218:	4798      	blx	r3
 800e21a:	3501      	adds	r5, #1
 800e21c:	e7ee      	b.n	800e1fc <__libc_init_array+0xc>
 800e21e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e222:	4798      	blx	r3
 800e224:	3501      	adds	r5, #1
 800e226:	e7f2      	b.n	800e20e <__libc_init_array+0x1e>
 800e228:	0800e334 	.word	0x0800e334
 800e22c:	0800e334 	.word	0x0800e334
 800e230:	0800e334 	.word	0x0800e334
 800e234:	0800e338 	.word	0x0800e338

0800e238 <memset>:
 800e238:	4402      	add	r2, r0
 800e23a:	4603      	mov	r3, r0
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d100      	bne.n	800e242 <memset+0xa>
 800e240:	4770      	bx	lr
 800e242:	f803 1b01 	strb.w	r1, [r3], #1
 800e246:	e7f9      	b.n	800e23c <memset+0x4>

0800e248 <_init>:
 800e248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e24a:	bf00      	nop
 800e24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e24e:	bc08      	pop	{r3}
 800e250:	469e      	mov	lr, r3
 800e252:	4770      	bx	lr

0800e254 <_fini>:
 800e254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e256:	bf00      	nop
 800e258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e25a:	bc08      	pop	{r3}
 800e25c:	469e      	mov	lr, r3
 800e25e:	4770      	bx	lr
