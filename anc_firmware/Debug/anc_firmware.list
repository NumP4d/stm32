
anc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f8  080043f8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080043f8  080043f8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f8  080043f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000faf0  2000007c  0800447c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fb6c  0800447c  0002fb6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddec  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002940  00000000  00000000  0002de98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  000307d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00031498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025167  00000000  00000000  00031ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0f7  00000000  00000000  00057157  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d23ea  00000000  00000000  0006324e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000356c  00000000  00000000  001356b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004338 	.word	0x08004338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004338 	.word	0x08004338

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <HAL_Init+0x40>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <HAL_Init+0x40>)
 800028a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800028e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <HAL_Init+0x40>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <HAL_Init+0x40>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <HAL_Init+0x40>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <HAL_Init+0x40>)
 80002a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002a8:	2003      	movs	r0, #3
 80002aa:	f000 f92b 	bl	8000504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 f808 	bl	80002c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002b4:	f003 f81c 	bl	80032f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002b8:	2300      	movs	r3, #0
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40023c00 	.word	0x40023c00

080002c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <HAL_InitTick+0x54>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <HAL_InitTick+0x58>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	4619      	mov	r1, r3
 80002d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002da:	fbb3 f3f1 	udiv	r3, r3, r1
 80002de:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f943 	bl	800056e <HAL_SYSTICK_Config>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002ee:	2301      	movs	r3, #1
 80002f0:	e00e      	b.n	8000310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b0f      	cmp	r3, #15
 80002f6:	d80a      	bhi.n	800030e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002f8:	2200      	movs	r2, #0
 80002fa:	6879      	ldr	r1, [r7, #4]
 80002fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 f90b 	bl	800051a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000304:	4a06      	ldr	r2, [pc, #24]	; (8000320 <HAL_InitTick+0x5c>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800030a:	2300      	movs	r3, #0
 800030c:	e000      	b.n	8000310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800030e:	2301      	movs	r3, #1
}
 8000310:	4618      	mov	r0, r3
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000014 	.word	0x20000014
 800031c:	20000004 	.word	0x20000004
 8000320:	20000000 	.word	0x20000000

08000324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <HAL_IncTick+0x20>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_IncTick+0x24>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4413      	add	r3, r2
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <HAL_IncTick+0x24>)
 8000336:	6013      	str	r3, [r2, #0]
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000004 	.word	0x20000004
 8000348:	200000c4 	.word	0x200000c4

0800034c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  return uwTick;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <HAL_GetTick+0x14>)
 8000352:	681b      	ldr	r3, [r3, #0]
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	200000c4 	.word	0x200000c4

08000364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f003 0307 	and.w	r3, r3, #7
 8000372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000380:	4013      	ands	r3, r2
 8000382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800038c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000396:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	60d3      	str	r3, [r2, #12]
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <__NVIC_GetPriorityGrouping+0x18>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	0a1b      	lsrs	r3, r3, #8
 80003b6:	f003 0307 	and.w	r3, r3, #7
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db0b      	blt.n	80003f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	f003 021f 	and.w	r2, r3, #31
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <__NVIC_EnableIRQ+0x38>)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	095b      	lsrs	r3, r3, #5
 80003e8:	2001      	movs	r0, #1
 80003ea:	fa00 f202 	lsl.w	r2, r0, r2
 80003ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000e100 	.word	0xe000e100

08000404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	6039      	str	r1, [r7, #0]
 800040e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000414:	2b00      	cmp	r3, #0
 8000416:	db0a      	blt.n	800042e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	b2da      	uxtb	r2, r3
 800041c:	490c      	ldr	r1, [pc, #48]	; (8000450 <__NVIC_SetPriority+0x4c>)
 800041e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000422:	0112      	lsls	r2, r2, #4
 8000424:	b2d2      	uxtb	r2, r2
 8000426:	440b      	add	r3, r1
 8000428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800042c:	e00a      	b.n	8000444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4908      	ldr	r1, [pc, #32]	; (8000454 <__NVIC_SetPriority+0x50>)
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	f003 030f 	and.w	r3, r3, #15
 800043a:	3b04      	subs	r3, #4
 800043c:	0112      	lsls	r2, r2, #4
 800043e:	b2d2      	uxtb	r2, r2
 8000440:	440b      	add	r3, r1
 8000442:	761a      	strb	r2, [r3, #24]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	e000e100 	.word	0xe000e100
 8000454:	e000ed00 	.word	0xe000ed00

08000458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000458:	b480      	push	{r7}
 800045a:	b089      	sub	sp, #36	; 0x24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f003 0307 	and.w	r3, r3, #7
 800046a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	f1c3 0307 	rsb	r3, r3, #7
 8000472:	2b04      	cmp	r3, #4
 8000474:	bf28      	it	cs
 8000476:	2304      	movcs	r3, #4
 8000478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800047a:	69fb      	ldr	r3, [r7, #28]
 800047c:	3304      	adds	r3, #4
 800047e:	2b06      	cmp	r3, #6
 8000480:	d902      	bls.n	8000488 <NVIC_EncodePriority+0x30>
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	3b03      	subs	r3, #3
 8000486:	e000      	b.n	800048a <NVIC_EncodePriority+0x32>
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800048c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	43da      	mvns	r2, r3
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	401a      	ands	r2, r3
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	fa01 f303 	lsl.w	r3, r1, r3
 80004aa:	43d9      	mvns	r1, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b0:	4313      	orrs	r3, r2
         );
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3724      	adds	r7, #36	; 0x24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004d0:	d301      	bcc.n	80004d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004d2:	2301      	movs	r3, #1
 80004d4:	e00f      	b.n	80004f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <SysTick_Config+0x40>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3b01      	subs	r3, #1
 80004dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004de:	210f      	movs	r1, #15
 80004e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004e4:	f7ff ff8e 	bl	8000404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <SysTick_Config+0x40>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ee:	4b04      	ldr	r3, [pc, #16]	; (8000500 <SysTick_Config+0x40>)
 80004f0:	2207      	movs	r2, #7
 80004f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	e000e010 	.word	0xe000e010

08000504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff ff29 	bl	8000364 <__NVIC_SetPriorityGrouping>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
 8000526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800052c:	f7ff ff3e 	bl	80003ac <__NVIC_GetPriorityGrouping>
 8000530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	68b9      	ldr	r1, [r7, #8]
 8000536:	6978      	ldr	r0, [r7, #20]
 8000538:	f7ff ff8e 	bl	8000458 <NVIC_EncodePriority>
 800053c:	4602      	mov	r2, r0
 800053e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000542:	4611      	mov	r1, r2
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ff5d 	bl	8000404 <__NVIC_SetPriority>
}
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
 8000558:	4603      	mov	r3, r0
 800055a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800055c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff31 	bl	80003c8 <__NVIC_EnableIRQ>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f7ff ffa2 	bl	80004c0 <SysTick_Config>
 800057c:	4603      	mov	r3, r0
}
 800057e:	4618      	mov	r0, r3
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000594:	f7ff feda 	bl	800034c <HAL_GetTick>
 8000598:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d101      	bne.n	80005a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	e099      	b.n	80006d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2202      	movs	r2, #2
 80005b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f022 0201 	bic.w	r2, r2, #1
 80005c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80005c4:	e00f      	b.n	80005e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80005c6:	f7ff fec1 	bl	800034c <HAL_GetTick>
 80005ca:	4602      	mov	r2, r0
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	d908      	bls.n	80005e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2220      	movs	r2, #32
 80005d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2203      	movs	r2, #3
 80005de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80005e2:	2303      	movs	r3, #3
 80005e4:	e078      	b.n	80006d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1e8      	bne.n	80005c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <HAL_DMA_Init+0x158>)
 8000600:	4013      	ands	r3, r2
 8000602:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000612:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800061e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800062a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6a1b      	ldr	r3, [r3, #32]
 8000630:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	4313      	orrs	r3, r2
 8000636:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063c:	2b04      	cmp	r3, #4
 800063e:	d107      	bne.n	8000650 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4313      	orrs	r3, r2
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	4313      	orrs	r3, r2
 800064e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	f023 0307 	bic.w	r3, r3, #7
 8000666:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	4313      	orrs	r3, r2
 8000670:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000676:	2b04      	cmp	r3, #4
 8000678:	d117      	bne.n	80006aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	4313      	orrs	r3, r2
 8000682:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00e      	beq.n	80006aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fa77 	bl	8000b80 <DMA_CheckFifoParam>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2240      	movs	r2, #64	; 0x40
 800069c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2201      	movs	r2, #1
 80006a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80006a6:	2301      	movs	r3, #1
 80006a8:	e016      	b.n	80006d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 fa2e 	bl	8000b14 <DMA_CalcBaseAndBitshift>
 80006b8:	4603      	mov	r3, r0
 80006ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006c0:	223f      	movs	r2, #63	; 0x3f
 80006c2:	409a      	lsls	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	f010803f 	.word	0xf010803f

080006e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000702:	2b01      	cmp	r3, #1
 8000704:	d101      	bne.n	800070a <HAL_DMA_Start_IT+0x26>
 8000706:	2302      	movs	r3, #2
 8000708:	e048      	b.n	800079c <HAL_DMA_Start_IT+0xb8>
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2201      	movs	r2, #1
 800070e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b01      	cmp	r3, #1
 800071c:	d137      	bne.n	800078e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2202      	movs	r2, #2
 8000722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2200      	movs	r2, #0
 800072a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	68f8      	ldr	r0, [r7, #12]
 8000734:	f000 f9c0 	bl	8000ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800073c:	223f      	movs	r2, #63	; 0x3f
 800073e:	409a      	lsls	r2, r3
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0216 	orr.w	r2, r2, #22
 8000752:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000762:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	2b00      	cmp	r3, #0
 800076a:	d007      	beq.n	800077c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f042 0208 	orr.w	r2, r2, #8
 800077a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f042 0201 	orr.w	r2, r2, #1
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e005      	b.n	800079a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000796:	2302      	movs	r3, #2
 8000798:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800079a:	7dfb      	ldrb	r3, [r7, #23]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80007b0:	4b92      	ldr	r3, [pc, #584]	; (80009fc <HAL_DMA_IRQHandler+0x258>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a92      	ldr	r2, [pc, #584]	; (8000a00 <HAL_DMA_IRQHandler+0x25c>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	0a9b      	lsrs	r3, r3, #10
 80007bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007ce:	2208      	movs	r2, #8
 80007d0:	409a      	lsls	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	4013      	ands	r3, r2
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d01a      	beq.n	8000810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d013      	beq.n	8000810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f022 0204 	bic.w	r2, r2, #4
 80007f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007fc:	2208      	movs	r2, #8
 80007fe:	409a      	lsls	r2, r3
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000808:	f043 0201 	orr.w	r2, r3, #1
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000814:	2201      	movs	r2, #1
 8000816:	409a      	lsls	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4013      	ands	r3, r2
 800081c:	2b00      	cmp	r3, #0
 800081e:	d012      	beq.n	8000846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00b      	beq.n	8000846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000832:	2201      	movs	r2, #1
 8000834:	409a      	lsls	r2, r3
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800083e:	f043 0202 	orr.w	r2, r3, #2
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800084a:	2204      	movs	r2, #4
 800084c:	409a      	lsls	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	4013      	ands	r3, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d012      	beq.n	800087c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 0302 	and.w	r3, r3, #2
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00b      	beq.n	800087c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000868:	2204      	movs	r2, #4
 800086a:	409a      	lsls	r2, r3
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000874:	f043 0204 	orr.w	r2, r3, #4
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000880:	2210      	movs	r2, #16
 8000882:	409a      	lsls	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4013      	ands	r3, r2
 8000888:	2b00      	cmp	r3, #0
 800088a:	d043      	beq.n	8000914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	2b00      	cmp	r3, #0
 8000898:	d03c      	beq.n	8000914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800089e:	2210      	movs	r2, #16
 80008a0:	409a      	lsls	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d018      	beq.n	80008e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d108      	bne.n	80008d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d024      	beq.n	8000914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	4798      	blx	r3
 80008d2:	e01f      	b.n	8000914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d01b      	beq.n	8000914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	4798      	blx	r3
 80008e4:	e016      	b.n	8000914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d107      	bne.n	8000904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 0208 	bic.w	r2, r2, #8
 8000902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	2b00      	cmp	r3, #0
 800090a:	d003      	beq.n	8000914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000918:	2220      	movs	r2, #32
 800091a:	409a      	lsls	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4013      	ands	r3, r2
 8000920:	2b00      	cmp	r3, #0
 8000922:	f000 808e 	beq.w	8000a42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 8086 	beq.w	8000a42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800093a:	2220      	movs	r2, #32
 800093c:	409a      	lsls	r2, r3
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b05      	cmp	r3, #5
 800094c:	d136      	bne.n	80009bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0216 	bic.w	r2, r2, #22
 800095c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800096c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <HAL_DMA_IRQHandler+0x1da>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800097a:	2b00      	cmp	r3, #0
 800097c:	d007      	beq.n	800098e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f022 0208 	bic.w	r2, r2, #8
 800098c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000992:	223f      	movs	r2, #63	; 0x3f
 8000994:	409a      	lsls	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2201      	movs	r2, #1
 80009a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d07d      	beq.n	8000aae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
        }
        return;
 80009ba:	e078      	b.n	8000aae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01c      	beq.n	8000a04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d108      	bne.n	80009ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d030      	beq.n	8000a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	4798      	blx	r3
 80009e8:	e02b      	b.n	8000a42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d027      	beq.n	8000a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	4798      	blx	r3
 80009fa:	e022      	b.n	8000a42 <HAL_DMA_IRQHandler+0x29e>
 80009fc:	20000014 	.word	0x20000014
 8000a00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10f      	bne.n	8000a32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 0210 	bic.w	r2, r2, #16
 8000a20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d032      	beq.n	8000ab0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d022      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2205      	movs	r2, #5
 8000a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 0201 	bic.w	r2, r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d307      	bcc.n	8000a8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1f2      	bne.n	8000a6e <HAL_DMA_IRQHandler+0x2ca>
 8000a88:	e000      	b.n	8000a8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000a8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d005      	beq.n	8000ab0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	4798      	blx	r3
 8000aac:	e000      	b.n	8000ab0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000aae:	bf00      	nop
    }
  }
}
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop

08000ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2b40      	cmp	r3, #64	; 0x40
 8000ae4:	d108      	bne.n	8000af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000af6:	e007      	b.n	8000b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	60da      	str	r2, [r3, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	3b10      	subs	r3, #16
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <DMA_CalcBaseAndBitshift+0x64>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	091b      	lsrs	r3, r3, #4
 8000b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <DMA_CalcBaseAndBitshift+0x68>)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d909      	bls.n	8000b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b4a:	f023 0303 	bic.w	r3, r3, #3
 8000b4e:	1d1a      	adds	r2, r3, #4
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	659a      	str	r2, [r3, #88]	; 0x58
 8000b54:	e007      	b.n	8000b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b5e:	f023 0303 	bic.w	r3, r3, #3
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	aaaaaaab 	.word	0xaaaaaaab
 8000b7c:	08004388 	.word	0x08004388

08000b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11f      	bne.n	8000bda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d855      	bhi.n	8000c4c <DMA_CheckFifoParam+0xcc>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <DMA_CheckFifoParam+0x28>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bb9 	.word	0x08000bb9
 8000bac:	08000bcb 	.word	0x08000bcb
 8000bb0:	08000bb9 	.word	0x08000bb9
 8000bb4:	08000c4d 	.word	0x08000c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d045      	beq.n	8000c50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000bc8:	e042      	b.n	8000c50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000bd2:	d13f      	bne.n	8000c54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000bd8:	e03c      	b.n	8000c54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be2:	d121      	bne.n	8000c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d836      	bhi.n	8000c58 <DMA_CheckFifoParam+0xd8>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <DMA_CheckFifoParam+0x70>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c01 	.word	0x08000c01
 8000bf4:	08000c07 	.word	0x08000c07
 8000bf8:	08000c01 	.word	0x08000c01
 8000bfc:	08000c19 	.word	0x08000c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
      break;
 8000c04:	e02f      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d024      	beq.n	8000c5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000c16:	e021      	b.n	8000c5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000c20:	d11e      	bne.n	8000c60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000c26:	e01b      	b.n	8000c60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d902      	bls.n	8000c34 <DMA_CheckFifoParam+0xb4>
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d003      	beq.n	8000c3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000c32:	e018      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
      break;
 8000c38:	e015      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00e      	beq.n	8000c64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
      break;
 8000c4a:	e00b      	b.n	8000c64 <DMA_CheckFifoParam+0xe4>
      break;
 8000c4c:	bf00      	nop
 8000c4e:	e00a      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
      break;
 8000c50:	bf00      	nop
 8000c52:	e008      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
      break;
 8000c54:	bf00      	nop
 8000c56:	e006      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
      break;
 8000c58:	bf00      	nop
 8000c5a:	e004      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
      break;
 8000c5c:	bf00      	nop
 8000c5e:	e002      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
      break;   
 8000c60:	bf00      	nop
 8000c62:	e000      	b.n	8000c66 <DMA_CheckFifoParam+0xe6>
      break;
 8000c64:	bf00      	nop
    }
  } 
  
  return status; 
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e16b      	b.n	8000f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 815a 	bne.w	8000f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x4a>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d123      	bne.n	8000d06 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	69b9      	ldr	r1, [r7, #24]
 8000d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0203 	and.w	r2, r3, #3
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d00b      	beq.n	8000d5a <HAL_GPIO_Init+0xe6>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d007      	beq.n	8000d5a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4e:	2b11      	cmp	r3, #17
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d130      	bne.n	8000dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	f003 0201 	and.w	r2, r3, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80b4 	beq.w	8000f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <HAL_GPIO_Init+0x308>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a5e      	ldr	r2, [pc, #376]	; (8000f7c <HAL_GPIO_Init+0x308>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <HAL_GPIO_Init+0x308>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e16:	4a5a      	ldr	r2, [pc, #360]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a51      	ldr	r2, [pc, #324]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d02b      	beq.n	8000e9a <HAL_GPIO_Init+0x226>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a50      	ldr	r2, [pc, #320]	; (8000f88 <HAL_GPIO_Init+0x314>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d025      	beq.n	8000e96 <HAL_GPIO_Init+0x222>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_GPIO_Init+0x318>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01f      	beq.n	8000e92 <HAL_GPIO_Init+0x21e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <HAL_GPIO_Init+0x31c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d019      	beq.n	8000e8e <HAL_GPIO_Init+0x21a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4d      	ldr	r2, [pc, #308]	; (8000f94 <HAL_GPIO_Init+0x320>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x216>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x212>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4b      	ldr	r2, [pc, #300]	; (8000f9c <HAL_GPIO_Init+0x328>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x20e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4a      	ldr	r2, [pc, #296]	; (8000fa0 <HAL_GPIO_Init+0x32c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x20a>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e00e      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e7e:	2308      	movs	r3, #8
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e82:	2306      	movs	r3, #6
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4934      	ldr	r1, [pc, #208]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ede:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f32:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f ae90 	bls.w	8000c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	3724      	adds	r7, #36	; 0x24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013800 	.word	0x40013800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	40021c00 	.word	0x40021c00
 8000fa4:	40013c00 	.word	0x40013c00

08000fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000014 	.word	0x20000014

08000fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fc4:	f7ff fff0 	bl	8000fa8 <HAL_RCC_GetHCLKFreq>
 8000fc8:	4601      	mov	r1, r0
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	0a9b      	lsrs	r3, r3, #10
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fd6:	5cd3      	ldrb	r3, [r2, r3]
 8000fd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	080043bc 	.word	0x080043bc

08000fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fec:	f7ff ffdc 	bl	8000fa8 <HAL_RCC_GetHCLKFreq>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	0b5b      	lsrs	r3, r3, #13
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	080043bc 	.word	0x080043bc

08001010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e03f      	b.n	80010a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f002 fcaa 	bl	8003990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 faf1 	bl	800163c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2220      	movs	r2, #32
 800109c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af02      	add	r7, sp, #8
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4613      	mov	r3, r2
 80010b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	f040 8083 	bne.w	80011d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <HAL_UART_Transmit+0x2e>
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e07b      	b.n	80011d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <HAL_UART_Transmit+0x40>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e074      	b.n	80011d4 <HAL_UART_Transmit+0x12a>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2221      	movs	r2, #33	; 0x21
 80010fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001100:	f7ff f924 	bl	800034c <HAL_GetTick>
 8001104:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	88fa      	ldrh	r2, [r7, #6]
 800110a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001112:	e042      	b.n	800119a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001118:	b29b      	uxth	r3, r3
 800111a:	3b01      	subs	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800112a:	d122      	bne.n	8001172 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2200      	movs	r2, #0
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fa01 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e046      	b.n	80011d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001158:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3302      	adds	r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	e017      	b.n	800119a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3301      	adds	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	e013      	b.n	800119a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2200      	movs	r2, #0
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 f9de 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e023      	b.n	80011d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800119e:	b29b      	uxth	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1b7      	bne.n	8001114 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2200      	movs	r2, #0
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f9c5 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e00a      	b.n	80011d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2220      	movs	r2, #32
 80011c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80011d2:	2302      	movs	r3, #2
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4613      	mov	r3, r2
 80011ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b20      	cmp	r3, #32
 80011fa:	f040 8090 	bne.w	800131e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <HAL_UART_Receive+0x2e>
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e088      	b.n	8001320 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_UART_Receive+0x40>
 8001218:	2302      	movs	r3, #2
 800121a:	e081      	b.n	8001320 <HAL_UART_Receive+0x144>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2222      	movs	r2, #34	; 0x22
 800122e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001232:	f7ff f88b 	bl	800034c <HAL_GetTick>
 8001236:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	88fa      	ldrh	r2, [r7, #6]
 8001242:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001244:	e05c      	b.n	8001300 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800125c:	d12b      	bne.n	80012b6 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2200      	movs	r2, #0
 8001266:	2120      	movs	r1, #32
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 f968 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e053      	b.n	8001320 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10c      	bne.n	800129e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	b29b      	uxth	r3, r3
 800128c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001290:	b29a      	uxth	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3302      	adds	r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	e030      	b.n	8001300 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	e024      	b.n	8001300 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2200      	movs	r2, #0
 80012be:	2120      	movs	r1, #32
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f93c 	bl	800153e <UART_WaitOnFlagUntilTimeout>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e027      	b.n	8001320 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6859      	ldr	r1, [r3, #4]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	60ba      	str	r2, [r7, #8]
 80012e4:	b2ca      	uxtb	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e00a      	b.n	8001300 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1c59      	adds	r1, r3, #1
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001304:	b29b      	uxth	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d19d      	bne.n	8001246 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2220      	movs	r2, #32
 800130e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800131e:	2302      	movs	r3, #2
  }
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	4613      	mov	r3, r2
 8001334:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b20      	cmp	r3, #32
 8001340:	d153      	bne.n	80013ea <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <HAL_UART_Transmit_DMA+0x26>
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e04c      	b.n	80013ec <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_UART_Transmit_DMA+0x38>
 800135c:	2302      	movs	r3, #2
 800135e:	e045      	b.n	80013ec <HAL_UART_Transmit_DMA+0xc4>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	88fa      	ldrh	r2, [r7, #6]
 8001372:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2221      	movs	r2, #33	; 0x21
 8001384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_UART_Transmit_DMA+0xcc>)
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <HAL_UART_Transmit_DMA+0xd0>)
 8001396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	4a17      	ldr	r2, [pc, #92]	; (80013fc <HAL_UART_Transmit_DMA+0xd4>)
 800139e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	2200      	movs	r2, #0
 80013a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3304      	adds	r3, #4
 80013bc:	461a      	mov	r2, r3
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	f7ff f990 	bl	80006e4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013e4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80013ea:	2302      	movs	r3, #2
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	0800143d 	.word	0x0800143d
 80013f8:	0800148f 	.word	0x0800148f
 80013fc:	080014ab 	.word	0x080014ab

08001400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001448:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d113      	bne.n	8001480 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800146c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800147c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800147e:	e002      	b.n	8001486 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff ffbd 	bl	8001400 <HAL_UART_TxCpltCallback>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7ff ffb9 	bl	8001414 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	2b80      	cmp	r3, #128	; 0x80
 80014c8:	bf0c      	ite	eq
 80014ca:	2301      	moveq	r3, #1
 80014cc:	2300      	movne	r3, #0
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b21      	cmp	r3, #33	; 0x21
 80014dc:	d108      	bne.n	80014f0 <UART_DMAError+0x46>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2200      	movs	r2, #0
 80014e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f000 f871 	bl	80015d2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	2b40      	cmp	r3, #64	; 0x40
 80014fc:	bf0c      	ite	eq
 80014fe:	2301      	moveq	r3, #1
 8001500:	2300      	movne	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b22      	cmp	r3, #34	; 0x22
 8001510:	d108      	bne.n	8001524 <UART_DMAError+0x7a>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2200      	movs	r2, #0
 800151c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800151e:	68b8      	ldr	r0, [r7, #8]
 8001520:	f000 f86d 	bl	80015fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	f043 0210 	orr.w	r2, r3, #16
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f7ff ff79 	bl	8001428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800154e:	e02c      	b.n	80015aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001556:	d028      	beq.n	80015aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <UART_WaitOnFlagUntilTimeout+0x30>
 800155e:	f7fe fef5 	bl	800034c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	429a      	cmp	r2, r3
 800156c:	d21d      	bcs.n	80015aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800157c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2220      	movs	r2, #32
 8001592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e00f      	b.n	80015ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4013      	ands	r3, r2
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	bf0c      	ite	eq
 80015ba:	2301      	moveq	r3, #1
 80015bc:	2300      	movne	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d0c3      	beq.n	8001550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80015e8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001614:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0201 	bic.w	r2, r2, #1
 8001624:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4313      	orrs	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800167c:	f023 030c 	bic.w	r3, r3, #12
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	430b      	orrs	r3, r1
 8001688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699a      	ldr	r2, [r3, #24]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016a8:	f040 80e4 	bne.w	8001874 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4aab      	ldr	r2, [pc, #684]	; (8001960 <UART_SetConfig+0x324>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d004      	beq.n	80016c0 <UART_SetConfig+0x84>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4aaa      	ldr	r2, [pc, #680]	; (8001964 <UART_SetConfig+0x328>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d16c      	bne.n	800179a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016c0:	f7ff fc92 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009a      	lsls	r2, r3, #2
 80016ce:	441a      	add	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4aa3      	ldr	r2, [pc, #652]	; (8001968 <UART_SetConfig+0x32c>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	011c      	lsls	r4, r3, #4
 80016e4:	f7ff fc80 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	009a      	lsls	r2, r3, #2
 80016f2:	441a      	add	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80016fe:	f7ff fc73 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 8001702:	4602      	mov	r2, r0
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	009a      	lsls	r2, r3, #2
 800170c:	441a      	add	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	4a93      	ldr	r2, [pc, #588]	; (8001968 <UART_SetConfig+0x32c>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2264      	movs	r2, #100	; 0x64
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	1aeb      	subs	r3, r5, r3
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	3332      	adds	r3, #50	; 0x32
 800172c:	4a8e      	ldr	r2, [pc, #568]	; (8001968 <UART_SetConfig+0x32c>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800173a:	441c      	add	r4, r3
 800173c:	f7ff fc54 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 8001740:	4602      	mov	r2, r0
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	009a      	lsls	r2, r3, #2
 800174a:	441a      	add	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fbb2 f5f3 	udiv	r5, r2, r3
 8001756:	f7ff fc47 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 800175a:	4602      	mov	r2, r0
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009a      	lsls	r2, r3, #2
 8001764:	441a      	add	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	4a7d      	ldr	r2, [pc, #500]	; (8001968 <UART_SetConfig+0x32c>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2264      	movs	r2, #100	; 0x64
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	1aeb      	subs	r3, r5, r3
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	3332      	adds	r3, #50	; 0x32
 8001784:	4a78      	ldr	r2, [pc, #480]	; (8001968 <UART_SetConfig+0x32c>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	f003 0207 	and.w	r2, r3, #7
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4422      	add	r2, r4
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e154      	b.n	8001a44 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800179a:	f7ff fc11 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009a      	lsls	r2, r3, #2
 80017a8:	441a      	add	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	4a6c      	ldr	r2, [pc, #432]	; (8001968 <UART_SetConfig+0x32c>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	011c      	lsls	r4, r3, #4
 80017be:	f7ff fbff 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009a      	lsls	r2, r3, #2
 80017cc:	441a      	add	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80017d8:	f7ff fbf2 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 80017dc:	4602      	mov	r2, r0
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009a      	lsls	r2, r3, #2
 80017e6:	441a      	add	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4a5d      	ldr	r2, [pc, #372]	; (8001968 <UART_SetConfig+0x32c>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	2264      	movs	r2, #100	; 0x64
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	1aeb      	subs	r3, r5, r3
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	3332      	adds	r3, #50	; 0x32
 8001806:	4a58      	ldr	r2, [pc, #352]	; (8001968 <UART_SetConfig+0x32c>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	095b      	lsrs	r3, r3, #5
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001814:	441c      	add	r4, r3
 8001816:	f7ff fbd3 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 800181a:	4602      	mov	r2, r0
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	009a      	lsls	r2, r3, #2
 8001824:	441a      	add	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001830:	f7ff fbc6 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 8001834:	4602      	mov	r2, r0
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009a      	lsls	r2, r3, #2
 800183e:	441a      	add	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4a47      	ldr	r2, [pc, #284]	; (8001968 <UART_SetConfig+0x32c>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	2264      	movs	r2, #100	; 0x64
 8001854:	fb02 f303 	mul.w	r3, r2, r3
 8001858:	1aeb      	subs	r3, r5, r3
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	3332      	adds	r3, #50	; 0x32
 800185e:	4a42      	ldr	r2, [pc, #264]	; (8001968 <UART_SetConfig+0x32c>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	095b      	lsrs	r3, r3, #5
 8001866:	f003 0207 	and.w	r2, r3, #7
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4422      	add	r2, r4
 8001870:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001872:	e0e7      	b.n	8001a44 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a39      	ldr	r2, [pc, #228]	; (8001960 <UART_SetConfig+0x324>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d004      	beq.n	8001888 <UART_SetConfig+0x24c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a38      	ldr	r2, [pc, #224]	; (8001964 <UART_SetConfig+0x328>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d171      	bne.n	800196c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001888:	f7ff fbae 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 800188c:	4602      	mov	r2, r0
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	009a      	lsls	r2, r3, #2
 8001896:	441a      	add	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4a31      	ldr	r2, [pc, #196]	; (8001968 <UART_SetConfig+0x32c>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	011c      	lsls	r4, r3, #4
 80018ac:	f7ff fb9c 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	009a      	lsls	r2, r3, #2
 80018ba:	441a      	add	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80018c6:	f7ff fb8f 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	009a      	lsls	r2, r3, #2
 80018d4:	441a      	add	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	4a21      	ldr	r2, [pc, #132]	; (8001968 <UART_SetConfig+0x32c>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2264      	movs	r2, #100	; 0x64
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	1aeb      	subs	r3, r5, r3
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	3332      	adds	r3, #50	; 0x32
 80018f4:	4a1c      	ldr	r2, [pc, #112]	; (8001968 <UART_SetConfig+0x32c>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001900:	441c      	add	r4, r3
 8001902:	f7ff fb71 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 8001906:	4602      	mov	r2, r0
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	009a      	lsls	r2, r3, #2
 8001910:	441a      	add	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fbb2 f5f3 	udiv	r5, r2, r3
 800191c:	f7ff fb64 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 8001920:	4602      	mov	r2, r0
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009a      	lsls	r2, r3, #2
 800192a:	441a      	add	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <UART_SetConfig+0x32c>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	095b      	lsrs	r3, r3, #5
 800193e:	2264      	movs	r2, #100	; 0x64
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	1aeb      	subs	r3, r5, r3
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	3332      	adds	r3, #50	; 0x32
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <UART_SetConfig+0x32c>)
 800194c:	fba2 2303 	umull	r2, r3, r2, r3
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	f003 020f 	and.w	r2, r3, #15
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4422      	add	r2, r4
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	e071      	b.n	8001a44 <UART_SetConfig+0x408>
 8001960:	40011000 	.word	0x40011000
 8001964:	40011400 	.word	0x40011400
 8001968:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800196c:	f7ff fb28 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 8001970:	4602      	mov	r2, r0
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	009a      	lsls	r2, r3, #2
 800197a:	441a      	add	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <UART_SetConfig+0x410>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	011c      	lsls	r4, r3, #4
 8001990:	f7ff fb16 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 8001994:	4602      	mov	r2, r0
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	009a      	lsls	r2, r3, #2
 800199e:	441a      	add	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80019aa:	f7ff fb09 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	009a      	lsls	r2, r3, #2
 80019b8:	441a      	add	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <UART_SetConfig+0x410>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2264      	movs	r2, #100	; 0x64
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	1aeb      	subs	r3, r5, r3
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	3332      	adds	r3, #50	; 0x32
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <UART_SetConfig+0x410>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e4:	441c      	add	r4, r3
 80019e6:	f7ff faeb 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009a      	lsls	r2, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a00:	f7ff fade 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	441a      	add	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <UART_SetConfig+0x410>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	2264      	movs	r2, #100	; 0x64
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	1aeb      	subs	r3, r5, r3
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	3332      	adds	r3, #50	; 0x32
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <UART_SetConfig+0x410>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	095b      	lsrs	r3, r3, #5
 8001a36:	f003 020f 	and.w	r2, r3, #15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4422      	add	r2, r4
 8001a40:	609a      	str	r2, [r3, #8]
}
 8001a42:	e7ff      	b.n	8001a44 <UART_SetConfig+0x408>
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4c:	51eb851f 	.word	0x51eb851f

08001a50 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001aaa:	481c      	ldr	r0, [pc, #112]	; (8001b1c <LL_ADC_CommonInit+0x80>)
 8001aac:	f7ff ffe3 	bl	8001a76 <LL_ADC_IsEnabled>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	481b      	ldr	r0, [pc, #108]	; (8001b20 <LL_ADC_CommonInit+0x84>)
 8001ab4:	f7ff ffdf 	bl	8001a76 <LL_ADC_IsEnabled>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	431c      	orrs	r4, r3
 8001abc:	4819      	ldr	r0, [pc, #100]	; (8001b24 <LL_ADC_CommonInit+0x88>)
 8001abe:	f7ff ffda 	bl	8001a76 <LL_ADC_IsEnabled>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4323      	orrs	r3, r4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d120      	bne.n	8001b0c <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d012      	beq.n	8001af8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <LL_ADC_CommonInit+0x8c>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	6811      	ldr	r1, [r2, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	6852      	ldr	r2, [r2, #4]
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	6892      	ldr	r2, [r2, #8]
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	e00b      	b.n	8001b10 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <LL_ADC_CommonInit+0x8c>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	e001      	b.n	8001b10 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40012000 	.word	0x40012000
 8001b20:	40012100 	.word	0x40012100
 8001b24:	40012200 	.word	0x40012200
 8001b28:	fffc10e0 	.word	0xfffc10e0

08001b2c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff9b 	bl	8001a76 <LL_ADC_IsEnabled>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d117      	bne.n	8001b76 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	6811      	ldr	r1, [r2, #0]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	6892      	ldr	r2, [r2, #8]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e001      	b.n	8001b7a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff6f 	bl	8001a76 <LL_ADC_IsEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d131      	bne.n	8001c02 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00c      	beq.n	8001bc0 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6859      	ldr	r1, [r3, #4]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	e008      	b.n	8001bd2 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <LL_ADC_REG_Init+0x8c>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	68d2      	ldr	r2, [r2, #12]
 8001be6:	4311      	orrs	r1, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	6912      	ldr	r2, [r2, #16]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff28 	bl	8001a50 <LL_ADC_REG_SetSequencerLength>
 8001c00:	e001      	b.n	8001c06 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	c0fffcfd 	.word	0xc0fffcfd

08001c14 <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	401a      	ands	r2, r3
                   DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff ffd5 	bl	8001c14 <LL_DAC_IsEnabled>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d13a      	bne.n	8001ce6 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01e      	beq.n	8001cb6 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	f640 71fa 	movw	r1, #4090	; 0xffa
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4319      	orrs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4319      	orrs	r1, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	4319      	orrs	r1, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e019      	b.n	8001cea <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	21fa      	movs	r1, #250	; 0xfa
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	401a      	ands	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	4319      	orrs	r1, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e001      	b.n	8001cea <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b089      	sub	sp, #36	; 0x24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	613b      	str	r3, [r7, #16]
  return result;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2103      	movs	r1, #3
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	61bb      	str	r3, [r7, #24]
  return result;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001dd4:	bf00      	nop
 8001dd6:	3724      	adds	r7, #36	; 0x24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	613b      	str	r3, [r7, #16]
  return result;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2103      	movs	r1, #3
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	61bb      	str	r3, [r7, #24]
  return result;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	60da      	str	r2, [r3, #12]
}
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b089      	sub	sp, #36	; 0x24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a1a      	ldr	r2, [r3, #32]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	613b      	str	r3, [r7, #16]
  return result;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	210f      	movs	r1, #15
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	61bb      	str	r3, [r7, #24]
  return result;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001e90:	bf00      	nop
 8001e92:	3724      	adds	r7, #36	; 0x24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	613b      	str	r3, [r7, #16]
  return result;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	61bb      	str	r3, [r7, #24]
  return result;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b088      	sub	sp, #32
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	613b      	str	r3, [r7, #16]
  return result;
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f28:	e049      	b.n	8001fbe <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2101      	movs	r1, #1
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03b      	beq.n	8001fb8 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	461a      	mov	r2, r3
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fed3 	bl	8001cf4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d003      	beq.n	8001f5e <LL_GPIO_Init+0x60>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d106      	bne.n	8001f6c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	461a      	mov	r2, r3
 8001f64:	69b9      	ldr	r1, [r7, #24]
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff0b 	bl	8001d82 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	461a      	mov	r2, r3
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff33 	bl	8001de0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d11a      	bne.n	8001fb8 <LL_GPIO_Init+0xba>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	60bb      	str	r3, [r7, #8]
  return result;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b07      	cmp	r3, #7
 8001f98:	d807      	bhi.n	8001faa <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	69b9      	ldr	r1, [r7, #24]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff4b 	bl	8001e3e <LL_GPIO_SetAFPin_0_7>
 8001fa8:	e006      	b.n	8001fb8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	69b9      	ldr	r1, [r7, #24]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff72 	bl	8001e9c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ae      	bne.n	8001f2a <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d003      	beq.n	8001fdc <LL_GPIO_Init+0xde>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d107      	bne.n	8001fec <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff feb3 	bl	8001d52 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	615a      	str	r2, [r3, #20]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3d      	ldr	r2, [pc, #244]	; (8002174 <LL_TIM_Init+0x108>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <LL_TIM_Init+0x40>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d00f      	beq.n	80020ac <LL_TIM_Init+0x40>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3a      	ldr	r2, [pc, #232]	; (8002178 <LL_TIM_Init+0x10c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00b      	beq.n	80020ac <LL_TIM_Init+0x40>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a39      	ldr	r2, [pc, #228]	; (800217c <LL_TIM_Init+0x110>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <LL_TIM_Init+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a38      	ldr	r2, [pc, #224]	; (8002180 <LL_TIM_Init+0x114>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <LL_TIM_Init+0x40>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a37      	ldr	r2, [pc, #220]	; (8002184 <LL_TIM_Init+0x118>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d106      	bne.n	80020ba <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <LL_TIM_Init+0x108>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d02b      	beq.n	800211a <LL_TIM_Init+0xae>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d027      	beq.n	800211a <LL_TIM_Init+0xae>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a2a      	ldr	r2, [pc, #168]	; (8002178 <LL_TIM_Init+0x10c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d023      	beq.n	800211a <LL_TIM_Init+0xae>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a29      	ldr	r2, [pc, #164]	; (800217c <LL_TIM_Init+0x110>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01f      	beq.n	800211a <LL_TIM_Init+0xae>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a28      	ldr	r2, [pc, #160]	; (8002180 <LL_TIM_Init+0x114>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01b      	beq.n	800211a <LL_TIM_Init+0xae>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a27      	ldr	r2, [pc, #156]	; (8002184 <LL_TIM_Init+0x118>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d017      	beq.n	800211a <LL_TIM_Init+0xae>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <LL_TIM_Init+0x11c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <LL_TIM_Init+0xae>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a25      	ldr	r2, [pc, #148]	; (800218c <LL_TIM_Init+0x120>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00f      	beq.n	800211a <LL_TIM_Init+0xae>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a24      	ldr	r2, [pc, #144]	; (8002190 <LL_TIM_Init+0x124>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00b      	beq.n	800211a <LL_TIM_Init+0xae>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <LL_TIM_Init+0x128>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <LL_TIM_Init+0xae>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a22      	ldr	r2, [pc, #136]	; (8002198 <LL_TIM_Init+0x12c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d003      	beq.n	800211a <LL_TIM_Init+0xae>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a21      	ldr	r2, [pc, #132]	; (800219c <LL_TIM_Init+0x130>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d106      	bne.n	8002128 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff6c 	bl	8002012 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff58 	bl	8001ff6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LL_TIM_Init+0x108>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d003      	beq.n	8002156 <LL_TIM_Init+0xea>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <LL_TIM_Init+0x118>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d105      	bne.n	8002162 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	7c1b      	ldrb	r3, [r3, #16]
 800215a:	4619      	mov	r1, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff66 	bl	800202e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff71 	bl	800204a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800
 8002180:	40000c00 	.word	0x40000c00
 8002184:	40010400 	.word	0x40010400
 8002188:	40014000 	.word	0x40014000
 800218c:	40014400 	.word	0x40014400
 8002190:	40014800 	.word	0x40014800
 8002194:	40001800 	.word	0x40001800
 8002198:	40001c00 	.word	0x40001c00
 800219c:	40002000 	.word	0x40002000

080021a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <LL_InitTick+0x30>)
 80021b4:	3b01      	subs	r3, #1
 80021b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <LL_InitTick+0x30>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <LL_InitTick+0x30>)
 80021c0:	2205      	movs	r2, #5
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80021dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ffdd 	bl	80021a0 <LL_InitTick>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <LL_mDelay+0x44>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80021fe:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002206:	d00c      	beq.n	8002222 <LL_mDelay+0x32>
  {
    Delay++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3301      	adds	r3, #1
 800220c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800220e:	e008      	b.n	8002222 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <LL_mDelay+0x44>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <LL_mDelay+0x32>
    {
      Delay--;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f3      	bne.n	8002210 <LL_mDelay+0x20>
    }
  }
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e010 	.word	0xe000e010

08002238 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <LL_SetSystemCoreClock+0x1c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000014 	.word	0x20000014

08002258 <__NVIC_GetPriorityGrouping>:
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_REG_SetSequencerRanks>:
{
 800236a:	b490      	push	{r4, r7}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	332c      	adds	r3, #44	; 0x2c
 800237a:	4619      	mov	r1, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002382:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	fa92 f2a2 	rbit	r2, r2
 800238e:	613a      	str	r2, [r7, #16]
  return result;
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	fab2 f282 	clz	r2, r2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	40d3      	lsrs	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	211f      	movs	r1, #31
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f003 011f 	and.w	r1, r3, #31
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	6023      	str	r3, [r4, #0]
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc90      	pop	{r4, r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	609a      	str	r2, [r3, #8]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <LL_ADC_SetChannelSamplingTime>:
{
 80023f6:	b490      	push	{r4, r7}
 80023f8:	b08a      	sub	sp, #40	; 0x28
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	330c      	adds	r3, #12
 8002406:	4619      	mov	r1, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	613a      	str	r2, [r7, #16]
  return result;
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	40d3      	lsrs	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002434:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002438:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	69f9      	ldr	r1, [r7, #28]
 800243c:	fa91 f1a1 	rbit	r1, r1
 8002440:	61b9      	str	r1, [r7, #24]
  return result;
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	fab1 f181 	clz	r1, r1
 8002448:	b2c9      	uxtb	r1, r1
 800244a:	40cb      	lsrs	r3, r1
 800244c:	2107      	movs	r1, #7
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800245c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002460:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002464:	fa91 f1a1 	rbit	r1, r1
 8002468:	6239      	str	r1, [r7, #32]
  return result;
 800246a:	6a39      	ldr	r1, [r7, #32]
 800246c:	fab1 f181 	clz	r1, r1
 8002470:	b2c9      	uxtb	r1, r1
 8002472:	40cb      	lsrs	r3, r1
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	4313      	orrs	r3, r2
 800247c:	6023      	str	r3, [r4, #0]
}
 800247e:	bf00      	nop
 8002480:	3728      	adds	r7, #40	; 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bc90      	pop	{r4, r7}
 8002486:	4770      	bx	lr

08002488 <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	609a      	str	r2, [r3, #8]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f023 0220 	bic.w	r2, r3, #32
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	605a      	str	r2, [r3, #4]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d8:	4907      	ldr	r1, [pc, #28]	; (80024f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4313      	orrs	r3, r2
 80024de:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40023800 	.word	0x40023800

080024fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <LL_APB2_GRP1_EnableClock+0x2c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4313      	orrs	r3, r2
 800250e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4013      	ands	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800251a:	68fb      	ldr	r3, [r7, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40023800 	.word	0x40023800

0800252c <MX_ADC2_Init>:

/* USER CODE END 0 */

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b092      	sub	sp, #72	; 0x48
 8002530:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002532:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800253e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800254e:	f107 0318 	add.w	r3, r7, #24
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	463b      	mov	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 800256c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002570:	f7ff ffc4 	bl	80024fc <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002574:	2001      	movs	r0, #1
 8002576:	f7ff ffa9 	bl	80024cc <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PA7   ------> ADC2_IN7 
  */
  GPIO_InitStruct.Pin = ERR_ADC_Pin;
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800257e:	2303      	movs	r3, #3
 8002580:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ERR_ADC_GPIO_Port, &GPIO_InitStruct);
 8002586:	463b      	mov	r3, r7
 8002588:	4619      	mov	r1, r3
 800258a:	482b      	ldr	r0, [pc, #172]	; (8002638 <MX_ADC2_Init+0x10c>)
 800258c:	f7ff fcb7 	bl	8001efe <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002590:	f7ff fe62 	bl	8002258 <__NVIC_GetPriorityGrouping>
 8002594:	4603      	mov	r3, r0
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff feb2 	bl	8002304 <NVIC_EncodePriority>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4619      	mov	r1, r3
 80025a4:	2012      	movs	r0, #18
 80025a6:	f7ff fe83 	bl	80022b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80025aa:	2012      	movs	r0, #18
 80025ac:	f7ff fe62 	bl	8002274 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80025b0:	2300      	movs	r3, #0
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80025b4:	2300      	movs	r3, #0
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80025bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025c0:	4619      	mov	r1, r3
 80025c2:	481e      	ldr	r0, [pc, #120]	; (800263c <MX_ADC2_Init+0x110>)
 80025c4:	f7ff fab2 	bl	8001b2c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM2_TRGO;
 80025c8:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80025da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80025e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e4:	4619      	mov	r1, r3
 80025e6:	4815      	ldr	r0, [pc, #84]	; (800263c <MX_ADC2_Init+0x110>)
 80025e8:	f7ff facc 	bl	8001b84 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80025ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025f0:	4812      	ldr	r0, [pc, #72]	; (800263c <MX_ADC2_Init+0x110>)
 80025f2:	f7ff feed 	bl	80023d0 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 80025f6:	4811      	ldr	r0, [pc, #68]	; (800263c <MX_ADC2_Init+0x110>)
 80025f8:	f7ff ff57 	bl	80024aa <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80025fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002600:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8002602:	f107 0318 	add.w	r3, r7, #24
 8002606:	4619      	mov	r1, r3
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <MX_ADC2_Init+0x114>)
 800260a:	f7ff fa47 	bl	8001a9c <LL_ADC_CommonInit>
  LL_ADC_REG_StartConversionExtTrig(ADC2, LL_ADC_REG_TRIG_EXT_RISING);
 800260e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8002612:	480a      	ldr	r0, [pc, #40]	; (800263c <MX_ADC2_Init+0x110>)
 8002614:	f7ff ff38 	bl	8002488 <LL_ADC_REG_StartConversionExtTrig>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <MX_ADC2_Init+0x118>)
 800261a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800261e:	4807      	ldr	r0, [pc, #28]	; (800263c <MX_ADC2_Init+0x110>)
 8002620:	f7ff fea3 	bl	800236a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_112CYCLES);
 8002624:	2205      	movs	r2, #5
 8002626:	4907      	ldr	r1, [pc, #28]	; (8002644 <MX_ADC2_Init+0x118>)
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <MX_ADC2_Init+0x110>)
 800262a:	f7ff fee4 	bl	80023f6 <LL_ADC_SetChannelSamplingTime>

}
 800262e:	bf00      	nop
 8002630:	3748      	adds	r7, #72	; 0x48
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40020000 	.word	0x40020000
 800263c:	40012100 	.word	0x40012100
 8002640:	40012300 	.word	0x40012300
 8002644:	03500007 	.word	0x03500007

08002648 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <LL_DMA_SetDataTransferDirection+0x44>)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002668:	4908      	ldr	r1, [pc, #32]	; (800268c <LL_DMA_SetDataTransferDirection+0x44>)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	440b      	add	r3, r1
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4619      	mov	r1, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	440b      	add	r3, r1
 8002676:	4619      	mov	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	08004390 	.word	0x08004390

08002690 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <LL_DMA_SetMode+0x44>)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80026b0:	4908      	ldr	r1, [pc, #32]	; (80026d4 <LL_DMA_SetMode+0x44>)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	440b      	add	r3, r1
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	440b      	add	r3, r1
 80026be:	4619      	mov	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	08004390 	.word	0x08004390

080026d8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80026e4:	4a0d      	ldr	r2, [pc, #52]	; (800271c <LL_DMA_SetPeriphIncMode+0x44>)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4413      	add	r3, r2
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80026f8:	4908      	ldr	r1, [pc, #32]	; (800271c <LL_DMA_SetPeriphIncMode+0x44>)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	440b      	add	r3, r1
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4619      	mov	r1, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	440b      	add	r3, r1
 8002706:	4619      	mov	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	08004390 	.word	0x08004390

08002720 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800272c:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <LL_DMA_SetMemoryIncMode+0x44>)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4413      	add	r3, r2
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002740:	4908      	ldr	r1, [pc, #32]	; (8002764 <LL_DMA_SetMemoryIncMode+0x44>)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	440b      	add	r3, r1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	440b      	add	r3, r1
 800274e:	4619      	mov	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	08004390 	.word	0x08004390

08002768 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <LL_DMA_SetPeriphSize+0x44>)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4413      	add	r3, r2
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002788:	4908      	ldr	r1, [pc, #32]	; (80027ac <LL_DMA_SetPeriphSize+0x44>)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	440b      	add	r3, r1
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	440b      	add	r3, r1
 8002796:	4619      	mov	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	08004390 	.word	0x08004390

080027b0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80027bc:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <LL_DMA_SetMemorySize+0x44>)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80027d0:	4908      	ldr	r1, [pc, #32]	; (80027f4 <LL_DMA_SetMemorySize+0x44>)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	440b      	add	r3, r1
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	440b      	add	r3, r1
 80027de:	4619      	mov	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	08004390 	.word	0x08004390

080027f8 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002818:	4908      	ldr	r1, [pc, #32]	; (800283c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	440b      	add	r3, r1
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	440b      	add	r3, r1
 8002826:	4619      	mov	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	08004390 	.word	0x08004390

08002840 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LL_DMA_SetChannelSelection+0x44>)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002860:	4908      	ldr	r1, [pc, #32]	; (8002884 <LL_DMA_SetChannelSelection+0x44>)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	440b      	add	r3, r1
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	440b      	add	r3, r1
 800286e:	4619      	mov	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	08004390 	.word	0x08004390

08002888 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <LL_DMA_DisableFifoMode+0x3c>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4413      	add	r3, r2
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <LL_DMA_DisableFifoMode+0x3c>)
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	440a      	add	r2, r1
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	4611      	mov	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	440a      	add	r2, r1
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6153      	str	r3, [r2, #20]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	08004390 	.word	0x08004390

080028c8 <LL_AHB1_GRP1_EnableClock>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d4:	4907      	ldr	r1, [pc, #28]	; (80028f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4313      	orrs	r3, r2
 80028da:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4013      	ands	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40023800 	.word	0x40023800

080028f8 <LL_APB1_GRP1_EnableClock>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002904:	4907      	ldr	r1, [pc, #28]	; (8002924 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4313      	orrs	r3, r2
 800290a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <LL_APB1_GRP1_EnableClock+0x2c>)
 800290e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40023800 	.word	0x40023800

08002928 <MX_DAC_Init>:

/* USER CODE END 0 */

/* DAC init function */
void MX_DAC_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 800292e:	f107 0318 	add.w	r3, r7, #24
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	463b      	mov	r3, r7
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 800294c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002950:	f7ff ffd2 	bl	80028f8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002954:	2001      	movs	r0, #1
 8002956:	f7ff ffb7 	bl	80028c8 <LL_AHB1_GRP1_EnableClock>
  /**DAC GPIO Configuration  
  PA5   ------> DAC_OUT2 
  */
  GPIO_InitStruct.Pin = OUT_DAC_Pin;
 800295a:	2320      	movs	r3, #32
 800295c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800295e:	2303      	movs	r3, #3
 8002960:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OUT_DAC_GPIO_Port, &GPIO_InitStruct);
 8002966:	463b      	mov	r3, r7
 8002968:	4619      	mov	r1, r3
 800296a:	4822      	ldr	r0, [pc, #136]	; (80029f4 <MX_DAC_Init+0xcc>)
 800296c:	f7ff fac7 	bl	8001efe <LL_GPIO_Init>

  /* DAC DMA Init */
  
  /* DAC2 Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_7);
 8002970:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002974:	2106      	movs	r1, #6
 8002976:	4820      	ldr	r0, [pc, #128]	; (80029f8 <MX_DAC_Init+0xd0>)
 8002978:	f7ff ff62 	bl	8002840 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800297c:	2240      	movs	r2, #64	; 0x40
 800297e:	2106      	movs	r1, #6
 8002980:	481d      	ldr	r0, [pc, #116]	; (80029f8 <MX_DAC_Init+0xd0>)
 8002982:	f7ff fe61 	bl	8002648 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8002986:	2200      	movs	r2, #0
 8002988:	2106      	movs	r1, #6
 800298a:	481b      	ldr	r0, [pc, #108]	; (80029f8 <MX_DAC_Init+0xd0>)
 800298c:	f7ff ff34 	bl	80027f8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8002990:	2200      	movs	r2, #0
 8002992:	2106      	movs	r1, #6
 8002994:	4818      	ldr	r0, [pc, #96]	; (80029f8 <MX_DAC_Init+0xd0>)
 8002996:	f7ff fe7b 	bl	8002690 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800299a:	2200      	movs	r2, #0
 800299c:	2106      	movs	r1, #6
 800299e:	4816      	ldr	r0, [pc, #88]	; (80029f8 <MX_DAC_Init+0xd0>)
 80029a0:	f7ff fe9a 	bl	80026d8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80029a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a8:	2106      	movs	r1, #6
 80029aa:	4813      	ldr	r0, [pc, #76]	; (80029f8 <MX_DAC_Init+0xd0>)
 80029ac:	f7ff feb8 	bl	8002720 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_HALFWORD);
 80029b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029b4:	2106      	movs	r1, #6
 80029b6:	4810      	ldr	r0, [pc, #64]	; (80029f8 <MX_DAC_Init+0xd0>)
 80029b8:	f7ff fed6 	bl	8002768 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_HALFWORD);
 80029bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c0:	2106      	movs	r1, #6
 80029c2:	480d      	ldr	r0, [pc, #52]	; (80029f8 <MX_DAC_Init+0xd0>)
 80029c4:	f7ff fef4 	bl	80027b0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 80029c8:	2106      	movs	r1, #6
 80029ca:	480b      	ldr	r0, [pc, #44]	; (80029f8 <MX_DAC_Init+0xd0>)
 80029cc:	f7ff ff5c 	bl	8002888 <LL_DMA_DisableFifoMode>

  /** DAC channel OUT2 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 80029d0:	2338      	movs	r3, #56	; 0x38
 80029d2:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 80029dc:	f107 0318 	add.w	r3, r7, #24
 80029e0:	461a      	mov	r2, r3
 80029e2:	4906      	ldr	r1, [pc, #24]	; (80029fc <MX_DAC_Init+0xd4>)
 80029e4:	4806      	ldr	r0, [pc, #24]	; (8002a00 <MX_DAC_Init+0xd8>)
 80029e6:	f7ff f934 	bl	8001c52 <LL_DAC_Init>

}
 80029ea:	bf00      	nop
 80029ec:	3728      	adds	r7, #40	; 0x28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40026000 	.word	0x40026000
 80029fc:	15430012 	.word	0x15430012
 8002a00:	40007400 	.word	0x40007400

08002a04 <__NVIC_GetPriorityGrouping>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <__NVIC_EnableIRQ+0x38>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <__NVIC_SetPriority>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db0a      	blt.n	8002a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	; (8002aa8 <__NVIC_SetPriority+0x4c>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a84:	e00a      	b.n	8002a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <__NVIC_SetPriority+0x50>)
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3b04      	subs	r3, #4
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	761a      	strb	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <NVIC_EncodePriority>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	bf28      	it	cs
 8002ace:	2304      	movcs	r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d902      	bls.n	8002ae0 <NVIC_EncodePriority+0x30>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3b03      	subs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <NVIC_EncodePriority+0x32>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43d9      	mvns	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	4313      	orrs	r3, r2
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	; 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <LL_AHB1_GRP1_EnableClock>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b24:	4907      	ldr	r1, [pc, #28]	; (8002b44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4013      	ands	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40023800 	.word	0x40023800

08002b48 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002b4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b50:	f7ff ffe2 	bl	8002b18 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002b54:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002b58:	f7ff ffde 	bl	8002b18 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002b5c:	f7ff ff52 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ffa2 	bl	8002ab0 <NVIC_EncodePriority>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4619      	mov	r1, r3
 8002b70:	2011      	movs	r0, #17
 8002b72:	f7ff ff73 	bl	8002a5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b76:	2011      	movs	r0, #17
 8002b78:	f7ff ff52 	bl	8002a20 <__NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2046      	movs	r0, #70	; 0x46
 8002b82:	f7fd fcca 	bl	800051a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002b86:	2046      	movs	r0, #70	; 0x46
 8002b88:	f7fd fce3 	bl	8000552 <HAL_NVIC_EnableIRQ>

}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <LL_AHB1_GRP1_EnableClock>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4013      	ands	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	041a      	lsls	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	619a      	str	r2, [r3, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be6:	463b      	mov	r3, r7
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
 8002bf4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002bf6:	2080      	movs	r0, #128	; 0x80
 8002bf8:	f7ff ffca 	bl	8002b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f7ff ffc7 	bl	8002b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002c02:	2002      	movs	r0, #2
 8002c04:	f7ff ffc4 	bl	8002b90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002c08:	2004      	movs	r0, #4
 8002c0a:	f7ff ffc1 	bl	8002b90 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, REF_A0_Pin|REF_A1_Pin|OUT_A0_Pin|OUT_A1_Pin 
 8002c0e:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 8002c12:	481d      	ldr	r0, [pc, #116]	; (8002c88 <MX_GPIO_Init+0xa8>)
 8002c14:	f7ff ffd4 	bl	8002bc0 <LL_GPIO_ResetOutputPin>
                          |DEBUG_PIN_Pin|LED_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, ERR_A0_Pin|ERR_A1_Pin);
 8002c18:	21c0      	movs	r1, #192	; 0xc0
 8002c1a:	481c      	ldr	r0, [pc, #112]	; (8002c8c <MX_GPIO_Init+0xac>)
 8002c1c:	f7ff ffd0 	bl	8002bc0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = REF_A0_Pin|REF_A1_Pin|OUT_A0_Pin|OUT_A1_Pin 
 8002c20:	f44f 4372 	mov.w	r3, #61952	; 0xf200
 8002c24:	603b      	str	r3, [r7, #0]
                          |LED_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c26:	2301      	movs	r3, #1
 8002c28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	463b      	mov	r3, r7
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4813      	ldr	r0, [pc, #76]	; (8002c88 <MX_GPIO_Init+0xa8>)
 8002c3c:	f7ff f95f 	bl	8001efe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ERR_A0_Pin|ERR_A1_Pin;
 8002c40:	23c0      	movs	r3, #192	; 0xc0
 8002c42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c44:	2301      	movs	r3, #1
 8002c46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c54:	463b      	mov	r3, r7
 8002c56:	4619      	mov	r1, r3
 8002c58:	480c      	ldr	r0, [pc, #48]	; (8002c8c <MX_GPIO_Init+0xac>)
 8002c5a:	f7ff f950 	bl	8001efe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DEBUG_PIN_Pin;
 8002c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c64:	2301      	movs	r3, #1
 8002c66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(DEBUG_PIN_GPIO_Port, &GPIO_InitStruct);
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	4803      	ldr	r0, [pc, #12]	; (8002c88 <MX_GPIO_Init+0xa8>)
 8002c7a:	f7ff f940 	bl	8001efe <LL_GPIO_Init>

}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800

08002c90 <LL_ADC_Enable>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_EnableIT_EOCS>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f043 0220 	orr.w	r2, r3, #32
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	605a      	str	r2, [r3, #4]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_DAC_Enable>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_DAC_ConvertData12RightAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 8002cfc:	b490      	push	{r4, r7}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12RX_REGOFFSET_MASK));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d14:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8002d18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	fa92 f2a2 	rbit	r2, r2
 8002d20:	613a      	str	r2, [r7, #16]
  return result;
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	40d3      	lsrs	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d38:	f023 030f 	bic.w	r3, r3, #15
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	6023      	str	r3, [r4, #0]
             DAC_DHR12R1_DACC1DHR,
             Data);
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc90      	pop	{r4, r7}
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <LL_RCC_HSE_Enable+0x1c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <LL_RCC_HSE_Enable+0x1c>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <LL_RCC_HSE_IsReady+0x24>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800

08002d94 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <LL_RCC_SetSysClkSource+0x24>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 0203 	bic.w	r2, r3, #3
 8002da4:	4904      	ldr	r1, [pc, #16]	; (8002db8 <LL_RCC_SetSysClkSource+0x24>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40023800 	.word	0x40023800

08002dbc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <LL_RCC_GetSysClkSource+0x18>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800

08002dd8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <LL_RCC_SetAHBPrescaler+0x24>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	4904      	ldr	r1, [pc, #16]	; (8002dfc <LL_RCC_SetAHBPrescaler+0x24>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	608b      	str	r3, [r1, #8]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40023800 	.word	0x40023800

08002e00 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e10:	4904      	ldr	r1, [pc, #16]	; (8002e24 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40023800 	.word	0x40023800

08002e28 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <LL_RCC_SetAPB2Prescaler+0x24>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e38:	4904      	ldr	r1, [pc, #16]	; (8002e4c <LL_RCC_SetAPB2Prescaler+0x24>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40023800 	.word	0x40023800

08002e50 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <LL_RCC_PLL_Enable+0x1c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <LL_RCC_PLL_Enable+0x1c>)
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800

08002e70 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <LL_RCC_PLL_IsReady+0x24>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	0192      	lsls	r2, r2, #6
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	4908      	ldr	r1, [pc, #32]	; (8002edc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	ffbf8000 	.word	0xffbf8000

08002ee4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <LL_FLASH_SetLatency+0x24>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 020f 	bic.w	r2, r3, #15
 8002ef4:	4904      	ldr	r1, [pc, #16]	; (8002f08 <LL_FLASH_SetLatency+0x24>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40023c00 	.word	0x40023c00

08002f0c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <LL_FLASH_GetLatency+0x18>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023c00 	.word	0x40023c00

08002f28 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d106      	bne.n	8002f44 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <LL_SYSTICK_SetClkSource+0x34>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <LL_SYSTICK_SetClkSource+0x34>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002f42:	e005      	b.n	8002f50 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <LL_SYSTICK_SetClkSource+0x34>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <LL_SYSTICK_SetClkSource+0x34>)
 8002f4a:	f023 0304 	bic.w	r3, r3, #4
 8002f4e:	6013      	str	r3, [r2, #0]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f70:	4904      	ldr	r1, [pc, #16]	; (8002f84 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40007000 	.word	0x40007000

08002f88 <LL_TIM_EnableCounter>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	601a      	str	r2, [r3, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_GPIO_SetOutputPin>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	619a      	str	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_GPIO_ResetOutputPin>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	041a      	lsls	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	619a      	str	r2, [r3, #24]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	405a      	eors	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	615a      	str	r2, [r3, #20]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800300a:	f7fd f939 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800300e:	f000 f88d 	bl	800312c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003012:	f7ff fde5 	bl	8002be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003016:	f7ff fd97 	bl	8002b48 <MX_DMA_Init>
  MX_ADC2_Init();
 800301a:	f7ff fa87 	bl	800252c <MX_ADC2_Init>
  MX_DAC_Init();
 800301e:	f7ff fc83 	bl	8002928 <MX_DAC_Init>
  MX_TIM2_Init();
 8003022:	f000 fc59 	bl	80038d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003026:	f000 fc89 	bl	800393c <MX_USART1_UART_Init>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, 32);
  LL_DMA_SetMemoryAddress()
  LL_DMA_SetMemory1Address()
  LL_DAC_EnableDMAReq();
*/
  LL_GPIO_ResetOutputPin(REF_A0_GPIO_Port, REF_A0_Pin);
 800302a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800302e:	4837      	ldr	r0, [pc, #220]	; (800310c <main+0x108>)
 8003030:	f7ff ffc8 	bl	8002fc4 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(REF_A1_GPIO_Port, REF_A1_Pin);
 8003034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003038:	4834      	ldr	r0, [pc, #208]	; (800310c <main+0x108>)
 800303a:	f7ff ffc3 	bl	8002fc4 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(OUT_A0_GPIO_Port, OUT_A0_Pin);
 800303e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003042:	4832      	ldr	r0, [pc, #200]	; (800310c <main+0x108>)
 8003044:	f7ff ffbe 	bl	8002fc4 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(OUT_A1_GPIO_Port, OUT_A1_Pin);
 8003048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800304c:	482f      	ldr	r0, [pc, #188]	; (800310c <main+0x108>)
 800304e:	f7ff ffb9 	bl	8002fc4 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(ERR_A0_GPIO_Port, ERR_A0_Pin);
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	482e      	ldr	r0, [pc, #184]	; (8003110 <main+0x10c>)
 8003056:	f7ff ffb5 	bl	8002fc4 <LL_GPIO_ResetOutputPin>
  //LL_GPIO_SetOutputPin(ERR_A0_GPIO_Port, ERR_A0_Pin);
  //LL_GPIO_ResetOutputPin(ERR_A1_GPIO_Port, ERR_A1_Pin);
  LL_GPIO_SetOutputPin(ERR_A0_GPIO_Port, ERR_A0_Pin);
 800305a:	2140      	movs	r1, #64	; 0x40
 800305c:	482c      	ldr	r0, [pc, #176]	; (8003110 <main+0x10c>)
 800305e:	f7ff ffa3 	bl	8002fa8 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(ERR_A1_GPIO_Port, ERR_A1_Pin);
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	482a      	ldr	r0, [pc, #168]	; (8003110 <main+0x10c>)
 8003066:	f7ff ff9f 	bl	8002fa8 <LL_GPIO_SetOutputPin>

  //while(1);

  LL_ADC_Enable(ADC2);
 800306a:	482a      	ldr	r0, [pc, #168]	; (8003114 <main+0x110>)
 800306c:	f7ff fe10 	bl	8002c90 <LL_ADC_Enable>
  LL_ADC_EnableIT_EOCS(ADC2);
 8003070:	4828      	ldr	r0, [pc, #160]	; (8003114 <main+0x110>)
 8003072:	f7ff fe1d 	bl	8002cb0 <LL_ADC_EnableIT_EOCS>
  LL_DAC_Enable(DAC, LL_DAC_CHANNEL_2);
 8003076:	4928      	ldr	r1, [pc, #160]	; (8003118 <main+0x114>)
 8003078:	4828      	ldr	r0, [pc, #160]	; (800311c <main+0x118>)
 800307a:	f7ff fe29 	bl	8002cd0 <LL_DAC_Enable>
  //LL_DAC_EnableTrigger(DAC, LL_DAC_CHANNEL_1);
  LL_TIM_EnableCounter(TIM2);
 800307e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003082:	f7ff ff81 	bl	8002f88 <LL_TIM_EnableCounter>
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8003086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800308a:	4820      	ldr	r0, [pc, #128]	; (800310c <main+0x108>)
 800308c:	f7ff ff9a 	bl	8002fc4 <LL_GPIO_ResetOutputPin>

    /* USER CODE BEGIN 3 */

	  char data[20];

	  if (HAL_UART_Receive(&huart1, (uint8_t*)data, 1, HAL_MAX_DELAY) == HAL_OK)
 8003090:	1d39      	adds	r1, r7, #4
 8003092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003096:	2201      	movs	r2, #1
 8003098:	4821      	ldr	r0, [pc, #132]	; (8003120 <main+0x11c>)
 800309a:	f7fe f89f 	bl	80011dc <HAL_UART_Receive>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d129      	bne.n	80030f8 <main+0xf4>
	  {
		  if (data[0] == '0')
 80030a4:	793b      	ldrb	r3, [r7, #4]
 80030a6:	2b30      	cmp	r3, #48	; 0x30
 80030a8:	d10e      	bne.n	80030c8 <main+0xc4>
		  {
			  anc_enabled = 0;
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <main+0x120>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
			  LL_DAC_ConvertData12RightAligned(DAC, LL_DAC_CHANNEL_2, (uint32_t)2048);
 80030b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b4:	4918      	ldr	r1, [pc, #96]	; (8003118 <main+0x114>)
 80030b6:	4819      	ldr	r0, [pc, #100]	; (800311c <main+0x118>)
 80030b8:	f7ff fe20 	bl	8002cfc <LL_DAC_ConvertData12RightAligned>
			  LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
 80030bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030c0:	4812      	ldr	r0, [pc, #72]	; (800310c <main+0x108>)
 80030c2:	f7ff ff71 	bl	8002fa8 <LL_GPIO_SetOutputPin>
 80030c6:	e017      	b.n	80030f8 <main+0xf4>
		  }
		  else if (data[0] == '1')
 80030c8:	793b      	ldrb	r3, [r7, #4]
 80030ca:	2b31      	cmp	r3, #49	; 0x31
 80030cc:	d108      	bne.n	80030e0 <main+0xdc>
		  {
			  anc_enabled = 1;
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <main+0x120>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
			  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80030d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <main+0x108>)
 80030da:	f7ff ff73 	bl	8002fc4 <LL_GPIO_ResetOutputPin>
 80030de:	e00b      	b.n	80030f8 <main+0xf4>
		  }
		  else if (data[0] == 'm')
 80030e0:	793b      	ldrb	r3, [r7, #4]
 80030e2:	2b6d      	cmp	r3, #109	; 0x6d
 80030e4:	d103      	bne.n	80030ee <main+0xea>
		  {
			  anc_acquire_cnt = 0;
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <main+0x124>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e004      	b.n	80030f8 <main+0xf4>
		  }
		  else if (data[0] == 'a')
 80030ee:	793b      	ldrb	r3, [r7, #4]
 80030f0:	2b61      	cmp	r3, #97	; 0x61
 80030f2:	d101      	bne.n	80030f8 <main+0xf4>
		  {
			  SendResult();
 80030f4:	f000 f862 	bl	80031bc <SendResult>
		  }
	  }

	  LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80030f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030fc:	4803      	ldr	r0, [pc, #12]	; (800310c <main+0x108>)
 80030fe:	f7ff ff70 	bl	8002fe2 <LL_GPIO_TogglePin>

	  LL_mDelay(200);
 8003102:	20c8      	movs	r0, #200	; 0xc8
 8003104:	f7ff f874 	bl	80021f0 <LL_mDelay>
  {
 8003108:	e7c2      	b.n	8003090 <main+0x8c>
 800310a:	bf00      	nop
 800310c:	40020400 	.word	0x40020400
 8003110:	40020800 	.word	0x40020800
 8003114:	40012100 	.word	0x40012100
 8003118:	15430012 	.word	0x15430012
 800311c:	40007400 	.word	0x40007400
 8003120:	2000fb28 	.word	0x2000fb28
 8003124:	20000098 	.word	0x20000098
 8003128:	20000008 	.word	0x20000008

0800312c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8003130:	2005      	movs	r0, #5
 8003132:	f7ff fed7 	bl	8002ee4 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 8003136:	f7ff fee9 	bl	8002f0c <LL_FLASH_GetLatency>
 800313a:	4603      	mov	r3, r0
 800313c:	2b05      	cmp	r3, #5
 800313e:	d001      	beq.n	8003144 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8003140:	f000 f8ce 	bl	80032e0 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8003144:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003148:	f7ff ff0a 	bl	8002f60 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800314c:	f7ff fdfe 	bl	8002d4c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003150:	bf00      	nop
 8003152:	f7ff fe0b 	bl	8002d6c <LL_RCC_HSE_IsReady>
 8003156:	4603      	mov	r3, r0
 8003158:	2b01      	cmp	r3, #1
 800315a:	d1fa      	bne.n	8003152 <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 800315c:	2300      	movs	r3, #0
 800315e:	22a8      	movs	r2, #168	; 0xa8
 8003160:	2108      	movs	r1, #8
 8003162:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003166:	f7ff fe97 	bl	8002e98 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800316a:	f7ff fe71 	bl	8002e50 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800316e:	bf00      	nop
 8003170:	f7ff fe7e 	bl	8002e70 <LL_RCC_PLL_IsReady>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d1fa      	bne.n	8003170 <SystemClock_Config+0x44>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800317a:	2000      	movs	r0, #0
 800317c:	f7ff fe2c 	bl	8002dd8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8003180:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003184:	f7ff fe3c 	bl	8002e00 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_16);
 8003188:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800318c:	f7ff fe4c 	bl	8002e28 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003190:	2002      	movs	r0, #2
 8003192:	f7ff fdff 	bl	8002d94 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003196:	bf00      	nop
 8003198:	f7ff fe10 	bl	8002dbc <LL_RCC_GetSysClkSource>
 800319c:	4603      	mov	r3, r0
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d1fa      	bne.n	8003198 <SystemClock_Config+0x6c>
  {
  
  }
  LL_Init1msTick(168000000);
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <SystemClock_Config+0x8c>)
 80031a4:	f7ff f816 	bl	80021d4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80031a8:	2004      	movs	r0, #4
 80031aa:	f7ff febd 	bl	8002f28 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(168000000);
 80031ae:	4802      	ldr	r0, [pc, #8]	; (80031b8 <SystemClock_Config+0x8c>)
 80031b0:	f7ff f842 	bl	8002238 <LL_SetSystemCoreClock>
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	0a037a00 	.word	0x0a037a00

080031bc <SendResult>:

/* USER CODE BEGIN 4 */

void SendResult(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	; 0x30
 80031c0:	af00      	add	r7, sp, #0
	char output_buf[40];
	int i;
	sprintf(output_buf, "Process ANC data (%s):\nADC,DAC\n", anc_enabled ? "ON" : "OFF");
 80031c2:	4b3c      	ldr	r3, [pc, #240]	; (80032b4 <SendResult+0xf8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <SendResult+0x12>
 80031ca:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <SendResult+0xfc>)
 80031cc:	e000      	b.n	80031d0 <SendResult+0x14>
 80031ce:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <SendResult+0x100>)
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	493b      	ldr	r1, [pc, #236]	; (80032c0 <SendResult+0x104>)
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fca9 	bl	8003b2c <siprintf>
	while(HAL_UART_Transmit(&huart1, (uint8_t*)output_buf, strlen(output_buf), 1000) != HAL_OK);
 80031da:	bf00      	nop
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fc fff6 	bl	80001d0 <strlen>
 80031e4:	4603      	mov	r3, r0
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	1d39      	adds	r1, r7, #4
 80031ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ee:	4835      	ldr	r0, [pc, #212]	; (80032c4 <SendResult+0x108>)
 80031f0:	f7fd ff5b 	bl	80010aa <HAL_UART_Transmit>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <SendResult+0x20>
	while(anc_acquire_cnt < N_SAMPLES);	// wait until all samples are acquired
 80031fa:	bf00      	nop
 80031fc:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <SendResult+0x10c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003204:	dbfa      	blt.n	80031fc <SendResult+0x40>
	for (i = 0; i < N_SAMPLES; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320a:	e037      	b.n	800327c <SendResult+0xc0>
	{
		sprintf(output_buf, "%u,%u\n", adc_buffer[i], dac_buffer[i]);
 800320c:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <SendResult+0x110>)
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003214:	b29b      	uxth	r3, r3
 8003216:	4619      	mov	r1, r3
 8003218:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <SendResult+0x114>)
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003220:	b29b      	uxth	r3, r3
 8003222:	1d38      	adds	r0, r7, #4
 8003224:	460a      	mov	r2, r1
 8003226:	492b      	ldr	r1, [pc, #172]	; (80032d4 <SendResult+0x118>)
 8003228:	f000 fc80 	bl	8003b2c <siprintf>

		if (HAL_UART_Transmit(&huart1, (uint8_t*)output_buf, strlen(output_buf), 100) != HAL_OK)
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	4618      	mov	r0, r3
 8003230:	f7fc ffce 	bl	80001d0 <strlen>
 8003234:	4603      	mov	r3, r0
 8003236:	b29a      	uxth	r2, r3
 8003238:	1d39      	adds	r1, r7, #4
 800323a:	2364      	movs	r3, #100	; 0x64
 800323c:	4821      	ldr	r0, [pc, #132]	; (80032c4 <SendResult+0x108>)
 800323e:	f7fd ff34 	bl	80010aa <HAL_UART_Transmit>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d016      	beq.n	8003276 <SendResult+0xba>
		{
			sprintf(output_buf, "ERR\n");
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	4a23      	ldr	r2, [pc, #140]	; (80032d8 <SendResult+0x11c>)
 800324c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003250:	6018      	str	r0, [r3, #0]
 8003252:	3304      	adds	r3, #4
 8003254:	7019      	strb	r1, [r3, #0]
			while(HAL_UART_Transmit(&huart1, (uint8_t*)output_buf, strlen(output_buf), 1000) != HAL_OK);
 8003256:	bf00      	nop
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	4618      	mov	r0, r3
 800325c:	f7fc ffb8 	bl	80001d0 <strlen>
 8003260:	4603      	mov	r3, r0
 8003262:	b29a      	uxth	r2, r3
 8003264:	1d39      	adds	r1, r7, #4
 8003266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326a:	4816      	ldr	r0, [pc, #88]	; (80032c4 <SendResult+0x108>)
 800326c:	f7fd ff1d 	bl	80010aa <HAL_UART_Transmit>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <SendResult+0x9c>
	for (i = 0; i < N_SAMPLES; i++)
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	3301      	adds	r3, #1
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003282:	dbc3      	blt.n	800320c <SendResult+0x50>
		}
	}
	sprintf(output_buf, "EOF");
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	4a15      	ldr	r2, [pc, #84]	; (80032dc <SendResult+0x120>)
 8003288:	601a      	str	r2, [r3, #0]
	while(HAL_UART_Transmit(&huart1, (uint8_t*)output_buf, strlen(output_buf), 1000) != HAL_OK);
 800328a:	bf00      	nop
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7fc ff9e 	bl	80001d0 <strlen>
 8003294:	4603      	mov	r3, r0
 8003296:	b29a      	uxth	r2, r3
 8003298:	1d39      	adds	r1, r7, #4
 800329a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800329e:	4809      	ldr	r0, [pc, #36]	; (80032c4 <SendResult+0x108>)
 80032a0:	f7fd ff03 	bl	80010aa <HAL_UART_Transmit>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <SendResult+0xd0>
}
 80032aa:	bf00      	nop
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000098 	.word	0x20000098
 80032b8:	08004350 	.word	0x08004350
 80032bc:	08004354 	.word	0x08004354
 80032c0:	08004358 	.word	0x08004358
 80032c4:	2000fb28 	.word	0x2000fb28
 80032c8:	20000008 	.word	0x20000008
 80032cc:	20007dc8 	.word	0x20007dc8
 80032d0:	200000c8 	.word	0x200000c8
 80032d4:	08004378 	.word	0x08004378
 80032d8:	08004380 	.word	0x08004380
 80032dc:	00464f45 	.word	0x00464f45

080032e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_MspInit+0x4c>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	4a0f      	ldr	r2, [pc, #60]	; (800333c <HAL_MspInit+0x4c>)
 8003300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003304:	6453      	str	r3, [r2, #68]	; 0x44
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_MspInit+0x4c>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_MspInit+0x4c>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a08      	ldr	r2, [pc, #32]	; (800333c <HAL_MspInit+0x4c>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_MspInit+0x4c>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800

08003340 <LL_ADC_REG_ReadConversionData12>:
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	b29b      	uxth	r3, r3
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_ADC_IsActiveFlag_EOCS>:
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_DAC_ConvertData12RightAligned>:
{
 8003380:	b490      	push	{r4, r7}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12RX_REGOFFSET_MASK));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3308      	adds	r3, #8
 8003390:	4619      	mov	r1, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003398:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800339c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	613a      	str	r2, [r7, #16]
  return result;
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	40d3      	lsrs	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80033bc:	f023 030f 	bic.w	r3, r3, #15
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	6023      	str	r3, [r4, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc90      	pop	{r4, r7}
 80033ce:	4770      	bx	lr

080033d0 <LL_GPIO_SetOutputPin>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	619a      	str	r2, [r3, #24]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_GPIO_ResetOutputPin>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341c:	e7fe      	b.n	800341c <HardFault_Handler+0x4>

0800341e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003422:	e7fe      	b.n	8003422 <MemManage_Handler+0x4>

08003424 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <BusFault_Handler+0x4>

0800342a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342e:	e7fe      	b.n	800342e <UsageFault_Handler+0x4>

08003430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800345e:	f7fc ff61 	bl	8000324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}

08003466 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	static const float d[2] = {-0.3146, 0.2502};

	static const int16_t u_max = 4095 - dac_offset;
	static const int16_t u_min = (int16_t)0 - (int16_t)dac_offset;

	LL_GPIO_SetOutputPin(DEBUG_PIN_GPIO_Port, DEBUG_PIN_Pin);
 8003478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800347c:	489a      	ldr	r0, [pc, #616]	; (80036e8 <ADC_IRQHandler+0x274>)
 800347e:	f7ff ffa7 	bl	80033d0 <LL_GPIO_SetOutputPin>

	/* End of ADC2 conversion interrupt */
	if (LL_ADC_IsActiveFlag_EOCS(ADC2))
 8003482:	489a      	ldr	r0, [pc, #616]	; (80036ec <ADC_IRQHandler+0x278>)
 8003484:	f7ff ff69 	bl	800335a <LL_ADC_IsActiveFlag_EOCS>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8124 	beq.w	80036d8 <ADC_IRQHandler+0x264>
	{
		/* High-pass filter and error calculation */
		adc[0] = - ((int16_t)LL_ADC_REG_ReadConversionData12(ADC2));
 8003490:	4896      	ldr	r0, [pc, #600]	; (80036ec <ADC_IRQHandler+0x278>)
 8003492:	f7ff ff55 	bl	8003340 <LL_ADC_REG_ReadConversionData12>
 8003496:	4603      	mov	r3, r0
 8003498:	425b      	negs	r3, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	b21a      	sxth	r2, r3
 800349e:	4b94      	ldr	r3, [pc, #592]	; (80036f0 <ADC_IRQHandler+0x27c>)
 80034a0:	801a      	strh	r2, [r3, #0]
		e[0] = (int16_t)(b[0] * adc[0] + b[1] * adc[1] + a * e[1]);
 80034a2:	4b94      	ldr	r3, [pc, #592]	; (80036f4 <ADC_IRQHandler+0x280>)
 80034a4:	ed93 7a00 	vldr	s14, [r3]
 80034a8:	4b91      	ldr	r3, [pc, #580]	; (80036f0 <ADC_IRQHandler+0x27c>)
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b21b      	sxth	r3, r3
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ba:	4b8e      	ldr	r3, [pc, #568]	; (80036f4 <ADC_IRQHandler+0x280>)
 80034bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80034c0:	4b8b      	ldr	r3, [pc, #556]	; (80036f0 <ADC_IRQHandler+0x27c>)
 80034c2:	885b      	ldrh	r3, [r3, #2]
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d6:	4b88      	ldr	r3, [pc, #544]	; (80036f8 <ADC_IRQHandler+0x284>)
 80034d8:	885b      	ldrh	r3, [r3, #2]
 80034da:	b21b      	sxth	r3, r3
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80034e4:	4b85      	ldr	r3, [pc, #532]	; (80036fc <ADC_IRQHandler+0x288>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034f6:	ee17 3a90 	vmov	r3, s15
 80034fa:	b21a      	sxth	r2, r3
 80034fc:	4b7e      	ldr	r3, [pc, #504]	; (80036f8 <ADC_IRQHandler+0x284>)
 80034fe:	801a      	strh	r2, [r3, #0]

		if (anc_enabled)
 8003500:	4b7f      	ldr	r3, [pc, #508]	; (8003700 <ADC_IRQHandler+0x28c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d070      	beq.n	80035ea <ADC_IRQHandler+0x176>
		{
			/* calculate u from coefficients */
			u[0] = c[0] * e[0] + c[1] * e[1] + c[2] * e[2] + d[0] * u[1] + d[1] * u[2];
 8003508:	4b7e      	ldr	r3, [pc, #504]	; (8003704 <ADC_IRQHandler+0x290>)
 800350a:	ed93 7a00 	vldr	s14, [r3]
 800350e:	4b7a      	ldr	r3, [pc, #488]	; (80036f8 <ADC_IRQHandler+0x284>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b21b      	sxth	r3, r3
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003520:	4b78      	ldr	r3, [pc, #480]	; (8003704 <ADC_IRQHandler+0x290>)
 8003522:	edd3 6a01 	vldr	s13, [r3, #4]
 8003526:	4b74      	ldr	r3, [pc, #464]	; (80036f8 <ADC_IRQHandler+0x284>)
 8003528:	885b      	ldrh	r3, [r3, #2]
 800352a:	b21b      	sxth	r3, r3
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800353c:	4b71      	ldr	r3, [pc, #452]	; (8003704 <ADC_IRQHandler+0x290>)
 800353e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003542:	4b6d      	ldr	r3, [pc, #436]	; (80036f8 <ADC_IRQHandler+0x284>)
 8003544:	889b      	ldrh	r3, [r3, #4]
 8003546:	b21b      	sxth	r3, r3
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003558:	4b6b      	ldr	r3, [pc, #428]	; (8003708 <ADC_IRQHandler+0x294>)
 800355a:	edd3 6a00 	vldr	s13, [r3]
 800355e:	4b6b      	ldr	r3, [pc, #428]	; (800370c <ADC_IRQHandler+0x298>)
 8003560:	885b      	ldrh	r3, [r3, #2]
 8003562:	b21b      	sxth	r3, r3
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003574:	4b64      	ldr	r3, [pc, #400]	; (8003708 <ADC_IRQHandler+0x294>)
 8003576:	edd3 6a01 	vldr	s13, [r3, #4]
 800357a:	4b64      	ldr	r3, [pc, #400]	; (800370c <ADC_IRQHandler+0x298>)
 800357c:	889b      	ldrh	r3, [r3, #4]
 800357e:	b21b      	sxth	r3, r3
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003594:	ee17 3a90 	vmov	r3, s15
 8003598:	b21a      	sxth	r2, r3
 800359a:	4b5c      	ldr	r3, [pc, #368]	; (800370c <ADC_IRQHandler+0x298>)
 800359c:	801a      	strh	r2, [r3, #0]
			/* Saturate u */
			if (u[0] > u_max)
 800359e:	4b5b      	ldr	r3, [pc, #364]	; (800370c <ADC_IRQHandler+0x298>)
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b21a      	sxth	r2, r3
 80035a4:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <ADC_IRQHandler+0x29c>)
 80035a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	dd05      	ble.n	80035ba <ADC_IRQHandler+0x146>
				u[0] = u_max;
 80035ae:	4b58      	ldr	r3, [pc, #352]	; (8003710 <ADC_IRQHandler+0x29c>)
 80035b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <ADC_IRQHandler+0x298>)
 80035b6:	801a      	strh	r2, [r3, #0]
 80035b8:	e00c      	b.n	80035d4 <ADC_IRQHandler+0x160>
			else if (u[0] < u_min)
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <ADC_IRQHandler+0x298>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b21a      	sxth	r2, r3
 80035c0:	4b54      	ldr	r3, [pc, #336]	; (8003714 <ADC_IRQHandler+0x2a0>)
 80035c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	da04      	bge.n	80035d4 <ADC_IRQHandler+0x160>
				u[0] = u_min;
 80035ca:	4b52      	ldr	r3, [pc, #328]	; (8003714 <ADC_IRQHandler+0x2a0>)
 80035cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80035d0:	4b4e      	ldr	r3, [pc, #312]	; (800370c <ADC_IRQHandler+0x298>)
 80035d2:	801a      	strh	r2, [r3, #0]

			/* Set output DAC with offset */
			LL_DAC_ConvertData12RightAligned(DAC, LL_DAC_CHANNEL_2, (uint32_t)(u[0] + dac_offset));
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <ADC_IRQHandler+0x298>)
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b21b      	sxth	r3, r3
 80035da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035de:	461a      	mov	r2, r3
 80035e0:	494d      	ldr	r1, [pc, #308]	; (8003718 <ADC_IRQHandler+0x2a4>)
 80035e2:	484e      	ldr	r0, [pc, #312]	; (800371c <ADC_IRQHandler+0x2a8>)
 80035e4:	f7ff fecc 	bl	8003380 <LL_DAC_ConvertData12RightAligned>
 80035e8:	e002      	b.n	80035f0 <ADC_IRQHandler+0x17c>
		}
		else
		{
			u[0] = 0;
 80035ea:	4b48      	ldr	r3, [pc, #288]	; (800370c <ADC_IRQHandler+0x298>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	801a      	strh	r2, [r3, #0]
		}
		if (anc_acquire_cnt < N_SAMPLES)
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <ADC_IRQHandler+0x2ac>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80035f8:	da19      	bge.n	800362e <ADC_IRQHandler+0x1ba>
		{
			adc_buffer[anc_acquire_cnt] = (uint16_t)adc[0];
 80035fa:	4b3d      	ldr	r3, [pc, #244]	; (80036f0 <ADC_IRQHandler+0x27c>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b21a      	sxth	r2, r3
 8003600:	4b47      	ldr	r3, [pc, #284]	; (8003720 <ADC_IRQHandler+0x2ac>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b291      	uxth	r1, r2
 8003606:	4a47      	ldr	r2, [pc, #284]	; (8003724 <ADC_IRQHandler+0x2b0>)
 8003608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			dac_buffer[anc_acquire_cnt] = (uint16_t)(u[0] + dac_offset);
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <ADC_IRQHandler+0x298>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b21b      	sxth	r3, r3
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b42      	ldr	r3, [pc, #264]	; (8003720 <ADC_IRQHandler+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361c:	b291      	uxth	r1, r2
 800361e:	4a42      	ldr	r2, [pc, #264]	; (8003728 <ADC_IRQHandler+0x2b4>)
 8003620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			anc_acquire_cnt++;
 8003624:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <ADC_IRQHandler+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	4a3d      	ldr	r2, [pc, #244]	; (8003720 <ADC_IRQHandler+0x2ac>)
 800362c:	6013      	str	r3, [r2, #0]
		}
		/* Sending via UART every 8 averaged samples */
		e_mean += e[0];
 800362e:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <ADC_IRQHandler+0x284>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b21b      	sxth	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <ADC_IRQHandler+0x2b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4413      	add	r3, r2
 800363c:	4a3b      	ldr	r2, [pc, #236]	; (800372c <ADC_IRQHandler+0x2b8>)
 800363e:	6013      	str	r3, [r2, #0]
		u_mean += u[0];
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <ADC_IRQHandler+0x298>)
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b21b      	sxth	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <ADC_IRQHandler+0x2bc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4413      	add	r3, r2
 800364e:	4a38      	ldr	r2, [pc, #224]	; (8003730 <ADC_IRQHandler+0x2bc>)
 8003650:	6013      	str	r3, [r2, #0]
		--mean_cnt;
 8003652:	4b38      	ldr	r3, [pc, #224]	; (8003734 <ADC_IRQHandler+0x2c0>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	3b01      	subs	r3, #1
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <ADC_IRQHandler+0x2c0>)
 800365c:	701a      	strb	r2, [r3, #0]
		if (mean_cnt == 0)
 800365e:	4b35      	ldr	r3, [pc, #212]	; (8003734 <ADC_IRQHandler+0x2c0>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11f      	bne.n	80036a6 <ADC_IRQHandler+0x232>
		{
			/* Calculate mean from 8 samples */
			sendbuf[0] = e_mean / MEAN_UPCNT;
 8003666:	4b31      	ldr	r3, [pc, #196]	; (800372c <ADC_IRQHandler+0x2b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	da00      	bge.n	8003670 <ADC_IRQHandler+0x1fc>
 800366e:	3307      	adds	r3, #7
 8003670:	10db      	asrs	r3, r3, #3
 8003672:	b21a      	sxth	r2, r3
 8003674:	4b30      	ldr	r3, [pc, #192]	; (8003738 <ADC_IRQHandler+0x2c4>)
 8003676:	801a      	strh	r2, [r3, #0]
			sendbuf[1] = u_mean / MEAN_UPCNT;
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <ADC_IRQHandler+0x2bc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	da00      	bge.n	8003682 <ADC_IRQHandler+0x20e>
 8003680:	3307      	adds	r3, #7
 8003682:	10db      	asrs	r3, r3, #3
 8003684:	b21a      	sxth	r2, r3
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <ADC_IRQHandler+0x2c4>)
 8003688:	805a      	strh	r2, [r3, #2]
			/* Send via UART with DMA */
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)sendbuf, SENDBUF_SIZE);
 800368a:	2204      	movs	r2, #4
 800368c:	492a      	ldr	r1, [pc, #168]	; (8003738 <ADC_IRQHandler+0x2c4>)
 800368e:	482b      	ldr	r0, [pc, #172]	; (800373c <ADC_IRQHandler+0x2c8>)
 8003690:	f7fd fe4a 	bl	8001328 <HAL_UART_Transmit_DMA>
			/* Clean averaging operation */
			e_mean = 0;
 8003694:	4b25      	ldr	r3, [pc, #148]	; (800372c <ADC_IRQHandler+0x2b8>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
			u_mean = 0;
 800369a:	4b25      	ldr	r3, [pc, #148]	; (8003730 <ADC_IRQHandler+0x2bc>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
			mean_cnt = MEAN_UPCNT;
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <ADC_IRQHandler+0x2c0>)
 80036a2:	2208      	movs	r2, #8
 80036a4:	701a      	strb	r2, [r3, #0]
		}

		/* Save last e and u */
		adc[1] = adc[0];
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <ADC_IRQHandler+0x27c>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b21a      	sxth	r2, r3
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <ADC_IRQHandler+0x27c>)
 80036ae:	805a      	strh	r2, [r3, #2]

		e[2] = e[1];
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <ADC_IRQHandler+0x284>)
 80036b2:	885b      	ldrh	r3, [r3, #2]
 80036b4:	b21a      	sxth	r2, r3
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <ADC_IRQHandler+0x284>)
 80036b8:	809a      	strh	r2, [r3, #4]
		e[1] = e[0];
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <ADC_IRQHandler+0x284>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b21a      	sxth	r2, r3
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <ADC_IRQHandler+0x284>)
 80036c2:	805a      	strh	r2, [r3, #2]

		u[2] = u[1];
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <ADC_IRQHandler+0x298>)
 80036c6:	885b      	ldrh	r3, [r3, #2]
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <ADC_IRQHandler+0x298>)
 80036cc:	809a      	strh	r2, [r3, #4]
		u[1] = u[0];
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <ADC_IRQHandler+0x298>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b21a      	sxth	r2, r3
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <ADC_IRQHandler+0x298>)
 80036d6:	805a      	strh	r2, [r3, #2]
	}
  /* USER CODE END ADC_IRQn 0 */
  
  /* USER CODE BEGIN ADC_IRQn 1 */

	LL_GPIO_ResetOutputPin(DEBUG_PIN_GPIO_Port, DEBUG_PIN_Pin);
 80036d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <ADC_IRQHandler+0x274>)
 80036de:	f7ff fe85 	bl	80033ec <LL_GPIO_ResetOutputPin>

  /* USER CODE END ADC_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40020400 	.word	0x40020400
 80036ec:	40012100 	.word	0x40012100
 80036f0:	2000000c 	.word	0x2000000c
 80036f4:	08004398 	.word	0x08004398
 80036f8:	200000a4 	.word	0x200000a4
 80036fc:	080043a0 	.word	0x080043a0
 8003700:	20000098 	.word	0x20000098
 8003704:	080043a4 	.word	0x080043a4
 8003708:	080043b0 	.word	0x080043b0
 800370c:	2000009c 	.word	0x2000009c
 8003710:	080043b8 	.word	0x080043b8
 8003714:	080043ba 	.word	0x080043ba
 8003718:	15430012 	.word	0x15430012
 800371c:	40007400 	.word	0x40007400
 8003720:	20000008 	.word	0x20000008
 8003724:	20007dc8 	.word	0x20007dc8
 8003728:	200000c8 	.word	0x200000c8
 800372c:	200000b0 	.word	0x200000b0
 8003730:	200000b4 	.word	0x200000b4
 8003734:	20000010 	.word	0x20000010
 8003738:	200000ac 	.word	0x200000ac
 800373c:	2000fb28 	.word	0x2000fb28

08003740 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003744:	4802      	ldr	r0, [pc, #8]	; (8003750 <DMA2_Stream7_IRQHandler+0x10>)
 8003746:	f7fd f82d 	bl	80007a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2000fac8 	.word	0x2000fac8

08003754 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <_sbrk+0x50>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <_sbrk+0x16>
		heap_end = &end;
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <_sbrk+0x50>)
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <_sbrk+0x54>)
 8003768:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <_sbrk+0x50>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <_sbrk+0x50>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	466a      	mov	r2, sp
 800377a:	4293      	cmp	r3, r2
 800377c:	d907      	bls.n	800378e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800377e:	f000 f9ab 	bl	8003ad8 <__errno>
 8003782:	4602      	mov	r2, r0
 8003784:	230c      	movs	r3, #12
 8003786:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800378c:	e006      	b.n	800379c <_sbrk+0x48>
	}

	heap_end += incr;
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <_sbrk+0x50>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	4a03      	ldr	r2, [pc, #12]	; (80037a4 <_sbrk+0x50>)
 8003798:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800379a:	68fb      	ldr	r3, [r7, #12]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	200000b8 	.word	0x200000b8
 80037a8:	2000fb70 	.word	0x2000fb70

080037ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037b0:	4b16      	ldr	r3, [pc, #88]	; (800380c <SystemInit+0x60>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	4a15      	ldr	r2, [pc, #84]	; (800380c <SystemInit+0x60>)
 80037b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80037c0:	4b13      	ldr	r3, [pc, #76]	; (8003810 <SystemInit+0x64>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a12      	ldr	r2, [pc, #72]	; (8003810 <SystemInit+0x64>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <SystemInit+0x64>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <SystemInit+0x64>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <SystemInit+0x64>)
 80037d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <SystemInit+0x64>)
 80037e4:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <SystemInit+0x68>)
 80037e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <SystemInit+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a08      	ldr	r2, [pc, #32]	; (8003810 <SystemInit+0x64>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <SystemInit+0x64>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <SystemInit+0x60>)
 80037fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003800:	609a      	str	r2, [r3, #8]
#endif
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00
 8003810:	40023800 	.word	0x40023800
 8003814:	24003010 	.word	0x24003010

08003818 <LL_APB1_GRP1_EnableClock>:
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003824:	4907      	ldr	r1, [pc, #28]	; (8003844 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4313      	orrs	r3, r2
 800382a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <LL_APB1_GRP1_EnableClock+0x2c>)
 800382e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4013      	ands	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40023800 	.word	0x40023800

08003848 <LL_TIM_DisableARRPreload>:
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	601a      	str	r2, [r3, #0]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_TIM_SetClockSource>:
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_TIM_SetTriggerOutput>:
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	605a      	str	r2, [r3, #4]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_TIM_DisableMasterSlaveMode>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80038ec:	2001      	movs	r0, #1
 80038ee:	f7ff ff93 	bl	8003818 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1049;
 80038f2:	f240 4319 	movw	r3, #1049	; 0x419
 80038f6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4;
 80038fc:	2304      	movs	r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	4619      	mov	r1, r3
 8003908:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800390c:	f7fe fbae 	bl	800206c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003910:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003914:	f7ff ff98 	bl	8003848 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003918:	2100      	movs	r1, #0
 800391a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800391e:	f7ff ffa3 	bl	8003868 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 8003922:	2120      	movs	r1, #32
 8003924:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003928:	f7ff ffb3 	bl	8003892 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800392c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003930:	f7ff ffc2 	bl	80038b8 <LL_TIM_DisableMasterSlaveMode>

}
 8003934:	bf00      	nop
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <MX_USART1_UART_Init+0x50>)
 8003944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 8003948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800394c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 8003962:	220c      	movs	r2, #12
 8003964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003972:	4805      	ldr	r0, [pc, #20]	; (8003988 <MX_USART1_UART_Init+0x4c>)
 8003974:	f7fd fb4c 	bl	8001010 <HAL_UART_Init>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800397e:	f7ff fcaf 	bl	80032e0 <Error_Handler>
  }

}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	2000fb28 	.word	0x2000fb28
 800398c:	40011000 	.word	0x40011000

08003990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a30      	ldr	r2, [pc, #192]	; (8003a70 <HAL_UART_MspInit+0xe0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d15a      	bne.n	8003a68 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <HAL_UART_MspInit+0xe4>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <HAL_UART_MspInit+0xe4>)
 80039bc:	f043 0310 	orr.w	r3, r3, #16
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HAL_UART_MspInit+0xe4>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <HAL_UART_MspInit+0xe4>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <HAL_UART_MspInit+0xe4>)
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	6313      	str	r3, [r2, #48]	; 0x30
 80039de:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <HAL_UART_MspInit+0xe4>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039ea:	23c0      	movs	r3, #192	; 0xc0
 80039ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039f2:	2301      	movs	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039fa:	2307      	movs	r3, #7
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	4619      	mov	r1, r3
 8003a04:	481c      	ldr	r0, [pc, #112]	; (8003a78 <HAL_UART_MspInit+0xe8>)
 8003a06:	f7fd f935 	bl	8000c74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a0c:	4a1c      	ldr	r2, [pc, #112]	; (8003a80 <HAL_UART_MspInit+0xf0>)
 8003a0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a16:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a1a:	2240      	movs	r2, #64	; 0x40
 8003a1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a3e:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a44:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a4c:	480b      	ldr	r0, [pc, #44]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a4e:	f7fc fd9b 	bl	8000588 <HAL_DMA_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003a58:	f7ff fc42 	bl	80032e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
 8003a62:	4a06      	ldr	r2, [pc, #24]	; (8003a7c <HAL_UART_MspInit+0xec>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020400 	.word	0x40020400
 8003a7c:	2000fac8 	.word	0x2000fac8
 8003a80:	400264b8 	.word	0x400264b8

08003a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003abc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a8a:	e003      	b.n	8003a94 <LoopCopyDataInit>

08003a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a92:	3104      	adds	r1, #4

08003a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a94:	480b      	ldr	r0, [pc, #44]	; (8003ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a9c:	d3f6      	bcc.n	8003a8c <CopyDataInit>
  ldr  r2, =_sbss
 8003a9e:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003aa0:	e002      	b.n	8003aa8 <LoopFillZerobss>

08003aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003aa4:	f842 3b04 	str.w	r3, [r2], #4

08003aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003aac:	d3f9      	bcc.n	8003aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003aae:	f7ff fe7d 	bl	80037ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ab2:	f000 f817 	bl	8003ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ab6:	f7ff faa5 	bl	8003004 <main>
  bx  lr    
 8003aba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003abc:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8003ac0:	08004400 	.word	0x08004400
  ldr  r0, =_sdata
 8003ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ac8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003acc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003ad0:	2000fb6c 	.word	0x2000fb6c

08003ad4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ad4:	e7fe      	b.n	8003ad4 <CAN1_RX0_IRQHandler>
	...

08003ad8 <__errno>:
 8003ad8:	4b01      	ldr	r3, [pc, #4]	; (8003ae0 <__errno+0x8>)
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000018 	.word	0x20000018

08003ae4 <__libc_init_array>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	4e0d      	ldr	r6, [pc, #52]	; (8003b1c <__libc_init_array+0x38>)
 8003ae8:	4c0d      	ldr	r4, [pc, #52]	; (8003b20 <__libc_init_array+0x3c>)
 8003aea:	1ba4      	subs	r4, r4, r6
 8003aec:	10a4      	asrs	r4, r4, #2
 8003aee:	2500      	movs	r5, #0
 8003af0:	42a5      	cmp	r5, r4
 8003af2:	d109      	bne.n	8003b08 <__libc_init_array+0x24>
 8003af4:	4e0b      	ldr	r6, [pc, #44]	; (8003b24 <__libc_init_array+0x40>)
 8003af6:	4c0c      	ldr	r4, [pc, #48]	; (8003b28 <__libc_init_array+0x44>)
 8003af8:	f000 fc1e 	bl	8004338 <_init>
 8003afc:	1ba4      	subs	r4, r4, r6
 8003afe:	10a4      	asrs	r4, r4, #2
 8003b00:	2500      	movs	r5, #0
 8003b02:	42a5      	cmp	r5, r4
 8003b04:	d105      	bne.n	8003b12 <__libc_init_array+0x2e>
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b0c:	4798      	blx	r3
 8003b0e:	3501      	adds	r5, #1
 8003b10:	e7ee      	b.n	8003af0 <__libc_init_array+0xc>
 8003b12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b16:	4798      	blx	r3
 8003b18:	3501      	adds	r5, #1
 8003b1a:	e7f2      	b.n	8003b02 <__libc_init_array+0x1e>
 8003b1c:	080043f8 	.word	0x080043f8
 8003b20:	080043f8 	.word	0x080043f8
 8003b24:	080043f8 	.word	0x080043f8
 8003b28:	080043fc 	.word	0x080043fc

08003b2c <siprintf>:
 8003b2c:	b40e      	push	{r1, r2, r3}
 8003b2e:	b500      	push	{lr}
 8003b30:	b09c      	sub	sp, #112	; 0x70
 8003b32:	ab1d      	add	r3, sp, #116	; 0x74
 8003b34:	9002      	str	r0, [sp, #8]
 8003b36:	9006      	str	r0, [sp, #24]
 8003b38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b3c:	4809      	ldr	r0, [pc, #36]	; (8003b64 <siprintf+0x38>)
 8003b3e:	9107      	str	r1, [sp, #28]
 8003b40:	9104      	str	r1, [sp, #16]
 8003b42:	4909      	ldr	r1, [pc, #36]	; (8003b68 <siprintf+0x3c>)
 8003b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b48:	9105      	str	r1, [sp, #20]
 8003b4a:	6800      	ldr	r0, [r0, #0]
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	a902      	add	r1, sp, #8
 8003b50:	f000 f866 	bl	8003c20 <_svfiprintf_r>
 8003b54:	9b02      	ldr	r3, [sp, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	b01c      	add	sp, #112	; 0x70
 8003b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b60:	b003      	add	sp, #12
 8003b62:	4770      	bx	lr
 8003b64:	20000018 	.word	0x20000018
 8003b68:	ffff0208 	.word	0xffff0208

08003b6c <__ssputs_r>:
 8003b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b70:	688e      	ldr	r6, [r1, #8]
 8003b72:	429e      	cmp	r6, r3
 8003b74:	4682      	mov	sl, r0
 8003b76:	460c      	mov	r4, r1
 8003b78:	4690      	mov	r8, r2
 8003b7a:	4699      	mov	r9, r3
 8003b7c:	d837      	bhi.n	8003bee <__ssputs_r+0x82>
 8003b7e:	898a      	ldrh	r2, [r1, #12]
 8003b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b84:	d031      	beq.n	8003bea <__ssputs_r+0x7e>
 8003b86:	6825      	ldr	r5, [r4, #0]
 8003b88:	6909      	ldr	r1, [r1, #16]
 8003b8a:	1a6f      	subs	r7, r5, r1
 8003b8c:	6965      	ldr	r5, [r4, #20]
 8003b8e:	2302      	movs	r3, #2
 8003b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b94:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b98:	f109 0301 	add.w	r3, r9, #1
 8003b9c:	443b      	add	r3, r7
 8003b9e:	429d      	cmp	r5, r3
 8003ba0:	bf38      	it	cc
 8003ba2:	461d      	movcc	r5, r3
 8003ba4:	0553      	lsls	r3, r2, #21
 8003ba6:	d530      	bpl.n	8003c0a <__ssputs_r+0x9e>
 8003ba8:	4629      	mov	r1, r5
 8003baa:	f000 fb2b 	bl	8004204 <_malloc_r>
 8003bae:	4606      	mov	r6, r0
 8003bb0:	b950      	cbnz	r0, 8003bc8 <__ssputs_r+0x5c>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	f8ca 3000 	str.w	r3, [sl]
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bbe:	81a3      	strh	r3, [r4, #12]
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc8:	463a      	mov	r2, r7
 8003bca:	6921      	ldr	r1, [r4, #16]
 8003bcc:	f000 faa8 	bl	8004120 <memcpy>
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bda:	81a3      	strh	r3, [r4, #12]
 8003bdc:	6126      	str	r6, [r4, #16]
 8003bde:	6165      	str	r5, [r4, #20]
 8003be0:	443e      	add	r6, r7
 8003be2:	1bed      	subs	r5, r5, r7
 8003be4:	6026      	str	r6, [r4, #0]
 8003be6:	60a5      	str	r5, [r4, #8]
 8003be8:	464e      	mov	r6, r9
 8003bea:	454e      	cmp	r6, r9
 8003bec:	d900      	bls.n	8003bf0 <__ssputs_r+0x84>
 8003bee:	464e      	mov	r6, r9
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	f000 fa9e 	bl	8004136 <memmove>
 8003bfa:	68a3      	ldr	r3, [r4, #8]
 8003bfc:	1b9b      	subs	r3, r3, r6
 8003bfe:	60a3      	str	r3, [r4, #8]
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	441e      	add	r6, r3
 8003c04:	6026      	str	r6, [r4, #0]
 8003c06:	2000      	movs	r0, #0
 8003c08:	e7dc      	b.n	8003bc4 <__ssputs_r+0x58>
 8003c0a:	462a      	mov	r2, r5
 8003c0c:	f000 fb54 	bl	80042b8 <_realloc_r>
 8003c10:	4606      	mov	r6, r0
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d1e2      	bne.n	8003bdc <__ssputs_r+0x70>
 8003c16:	6921      	ldr	r1, [r4, #16]
 8003c18:	4650      	mov	r0, sl
 8003c1a:	f000 faa5 	bl	8004168 <_free_r>
 8003c1e:	e7c8      	b.n	8003bb2 <__ssputs_r+0x46>

08003c20 <_svfiprintf_r>:
 8003c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c24:	461d      	mov	r5, r3
 8003c26:	898b      	ldrh	r3, [r1, #12]
 8003c28:	061f      	lsls	r7, r3, #24
 8003c2a:	b09d      	sub	sp, #116	; 0x74
 8003c2c:	4680      	mov	r8, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	4616      	mov	r6, r2
 8003c32:	d50f      	bpl.n	8003c54 <_svfiprintf_r+0x34>
 8003c34:	690b      	ldr	r3, [r1, #16]
 8003c36:	b96b      	cbnz	r3, 8003c54 <_svfiprintf_r+0x34>
 8003c38:	2140      	movs	r1, #64	; 0x40
 8003c3a:	f000 fae3 	bl	8004204 <_malloc_r>
 8003c3e:	6020      	str	r0, [r4, #0]
 8003c40:	6120      	str	r0, [r4, #16]
 8003c42:	b928      	cbnz	r0, 8003c50 <_svfiprintf_r+0x30>
 8003c44:	230c      	movs	r3, #12
 8003c46:	f8c8 3000 	str.w	r3, [r8]
 8003c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c4e:	e0c8      	b.n	8003de2 <_svfiprintf_r+0x1c2>
 8003c50:	2340      	movs	r3, #64	; 0x40
 8003c52:	6163      	str	r3, [r4, #20]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9309      	str	r3, [sp, #36]	; 0x24
 8003c58:	2320      	movs	r3, #32
 8003c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c5e:	2330      	movs	r3, #48	; 0x30
 8003c60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c64:	9503      	str	r5, [sp, #12]
 8003c66:	f04f 0b01 	mov.w	fp, #1
 8003c6a:	4637      	mov	r7, r6
 8003c6c:	463d      	mov	r5, r7
 8003c6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c72:	b10b      	cbz	r3, 8003c78 <_svfiprintf_r+0x58>
 8003c74:	2b25      	cmp	r3, #37	; 0x25
 8003c76:	d13e      	bne.n	8003cf6 <_svfiprintf_r+0xd6>
 8003c78:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c7c:	d00b      	beq.n	8003c96 <_svfiprintf_r+0x76>
 8003c7e:	4653      	mov	r3, sl
 8003c80:	4632      	mov	r2, r6
 8003c82:	4621      	mov	r1, r4
 8003c84:	4640      	mov	r0, r8
 8003c86:	f7ff ff71 	bl	8003b6c <__ssputs_r>
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	f000 80a4 	beq.w	8003dd8 <_svfiprintf_r+0x1b8>
 8003c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c92:	4453      	add	r3, sl
 8003c94:	9309      	str	r3, [sp, #36]	; 0x24
 8003c96:	783b      	ldrb	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 809d 	beq.w	8003dd8 <_svfiprintf_r+0x1b8>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ca8:	9304      	str	r3, [sp, #16]
 8003caa:	9307      	str	r3, [sp, #28]
 8003cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8003cb2:	462f      	mov	r7, r5
 8003cb4:	2205      	movs	r2, #5
 8003cb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003cba:	4850      	ldr	r0, [pc, #320]	; (8003dfc <_svfiprintf_r+0x1dc>)
 8003cbc:	f7fc fa90 	bl	80001e0 <memchr>
 8003cc0:	9b04      	ldr	r3, [sp, #16]
 8003cc2:	b9d0      	cbnz	r0, 8003cfa <_svfiprintf_r+0xda>
 8003cc4:	06d9      	lsls	r1, r3, #27
 8003cc6:	bf44      	itt	mi
 8003cc8:	2220      	movmi	r2, #32
 8003cca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cce:	071a      	lsls	r2, r3, #28
 8003cd0:	bf44      	itt	mi
 8003cd2:	222b      	movmi	r2, #43	; 0x2b
 8003cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cd8:	782a      	ldrb	r2, [r5, #0]
 8003cda:	2a2a      	cmp	r2, #42	; 0x2a
 8003cdc:	d015      	beq.n	8003d0a <_svfiprintf_r+0xea>
 8003cde:	9a07      	ldr	r2, [sp, #28]
 8003ce0:	462f      	mov	r7, r5
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	250a      	movs	r5, #10
 8003ce6:	4639      	mov	r1, r7
 8003ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cec:	3b30      	subs	r3, #48	; 0x30
 8003cee:	2b09      	cmp	r3, #9
 8003cf0:	d94d      	bls.n	8003d8e <_svfiprintf_r+0x16e>
 8003cf2:	b1b8      	cbz	r0, 8003d24 <_svfiprintf_r+0x104>
 8003cf4:	e00f      	b.n	8003d16 <_svfiprintf_r+0xf6>
 8003cf6:	462f      	mov	r7, r5
 8003cf8:	e7b8      	b.n	8003c6c <_svfiprintf_r+0x4c>
 8003cfa:	4a40      	ldr	r2, [pc, #256]	; (8003dfc <_svfiprintf_r+0x1dc>)
 8003cfc:	1a80      	subs	r0, r0, r2
 8003cfe:	fa0b f000 	lsl.w	r0, fp, r0
 8003d02:	4318      	orrs	r0, r3
 8003d04:	9004      	str	r0, [sp, #16]
 8003d06:	463d      	mov	r5, r7
 8003d08:	e7d3      	b.n	8003cb2 <_svfiprintf_r+0x92>
 8003d0a:	9a03      	ldr	r2, [sp, #12]
 8003d0c:	1d11      	adds	r1, r2, #4
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	9103      	str	r1, [sp, #12]
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	db01      	blt.n	8003d1a <_svfiprintf_r+0xfa>
 8003d16:	9207      	str	r2, [sp, #28]
 8003d18:	e004      	b.n	8003d24 <_svfiprintf_r+0x104>
 8003d1a:	4252      	negs	r2, r2
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	9207      	str	r2, [sp, #28]
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	783b      	ldrb	r3, [r7, #0]
 8003d26:	2b2e      	cmp	r3, #46	; 0x2e
 8003d28:	d10c      	bne.n	8003d44 <_svfiprintf_r+0x124>
 8003d2a:	787b      	ldrb	r3, [r7, #1]
 8003d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d2e:	d133      	bne.n	8003d98 <_svfiprintf_r+0x178>
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	9203      	str	r2, [sp, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bfb8      	it	lt
 8003d3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d40:	3702      	adds	r7, #2
 8003d42:	9305      	str	r3, [sp, #20]
 8003d44:	4d2e      	ldr	r5, [pc, #184]	; (8003e00 <_svfiprintf_r+0x1e0>)
 8003d46:	7839      	ldrb	r1, [r7, #0]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7fc fa48 	bl	80001e0 <memchr>
 8003d50:	b138      	cbz	r0, 8003d62 <_svfiprintf_r+0x142>
 8003d52:	2340      	movs	r3, #64	; 0x40
 8003d54:	1b40      	subs	r0, r0, r5
 8003d56:	fa03 f000 	lsl.w	r0, r3, r0
 8003d5a:	9b04      	ldr	r3, [sp, #16]
 8003d5c:	4303      	orrs	r3, r0
 8003d5e:	3701      	adds	r7, #1
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	7839      	ldrb	r1, [r7, #0]
 8003d64:	4827      	ldr	r0, [pc, #156]	; (8003e04 <_svfiprintf_r+0x1e4>)
 8003d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d6a:	2206      	movs	r2, #6
 8003d6c:	1c7e      	adds	r6, r7, #1
 8003d6e:	f7fc fa37 	bl	80001e0 <memchr>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d038      	beq.n	8003de8 <_svfiprintf_r+0x1c8>
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <_svfiprintf_r+0x1e8>)
 8003d78:	bb13      	cbnz	r3, 8003dc0 <_svfiprintf_r+0x1a0>
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	3307      	adds	r3, #7
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	3308      	adds	r3, #8
 8003d84:	9303      	str	r3, [sp, #12]
 8003d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d88:	444b      	add	r3, r9
 8003d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d8c:	e76d      	b.n	8003c6a <_svfiprintf_r+0x4a>
 8003d8e:	fb05 3202 	mla	r2, r5, r2, r3
 8003d92:	2001      	movs	r0, #1
 8003d94:	460f      	mov	r7, r1
 8003d96:	e7a6      	b.n	8003ce6 <_svfiprintf_r+0xc6>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	3701      	adds	r7, #1
 8003d9c:	9305      	str	r3, [sp, #20]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	250a      	movs	r5, #10
 8003da2:	4638      	mov	r0, r7
 8003da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003da8:	3a30      	subs	r2, #48	; 0x30
 8003daa:	2a09      	cmp	r2, #9
 8003dac:	d903      	bls.n	8003db6 <_svfiprintf_r+0x196>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0c8      	beq.n	8003d44 <_svfiprintf_r+0x124>
 8003db2:	9105      	str	r1, [sp, #20]
 8003db4:	e7c6      	b.n	8003d44 <_svfiprintf_r+0x124>
 8003db6:	fb05 2101 	mla	r1, r5, r1, r2
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4607      	mov	r7, r0
 8003dbe:	e7f0      	b.n	8003da2 <_svfiprintf_r+0x182>
 8003dc0:	ab03      	add	r3, sp, #12
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <_svfiprintf_r+0x1ec>)
 8003dc8:	a904      	add	r1, sp, #16
 8003dca:	4640      	mov	r0, r8
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003dd4:	4681      	mov	r9, r0
 8003dd6:	d1d6      	bne.n	8003d86 <_svfiprintf_r+0x166>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	065b      	lsls	r3, r3, #25
 8003ddc:	f53f af35 	bmi.w	8003c4a <_svfiprintf_r+0x2a>
 8003de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de2:	b01d      	add	sp, #116	; 0x74
 8003de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de8:	ab03      	add	r3, sp, #12
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	4622      	mov	r2, r4
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <_svfiprintf_r+0x1ec>)
 8003df0:	a904      	add	r1, sp, #16
 8003df2:	4640      	mov	r0, r8
 8003df4:	f000 f882 	bl	8003efc <_printf_i>
 8003df8:	e7ea      	b.n	8003dd0 <_svfiprintf_r+0x1b0>
 8003dfa:	bf00      	nop
 8003dfc:	080043c4 	.word	0x080043c4
 8003e00:	080043ca 	.word	0x080043ca
 8003e04:	080043ce 	.word	0x080043ce
 8003e08:	00000000 	.word	0x00000000
 8003e0c:	08003b6d 	.word	0x08003b6d

08003e10 <_printf_common>:
 8003e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	4691      	mov	r9, r2
 8003e16:	461f      	mov	r7, r3
 8003e18:	688a      	ldr	r2, [r1, #8]
 8003e1a:	690b      	ldr	r3, [r1, #16]
 8003e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bfb8      	it	lt
 8003e24:	4613      	movlt	r3, r2
 8003e26:	f8c9 3000 	str.w	r3, [r9]
 8003e2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e2e:	4606      	mov	r6, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	b112      	cbz	r2, 8003e3a <_printf_common+0x2a>
 8003e34:	3301      	adds	r3, #1
 8003e36:	f8c9 3000 	str.w	r3, [r9]
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	0699      	lsls	r1, r3, #26
 8003e3e:	bf42      	ittt	mi
 8003e40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e44:	3302      	addmi	r3, #2
 8003e46:	f8c9 3000 	strmi.w	r3, [r9]
 8003e4a:	6825      	ldr	r5, [r4, #0]
 8003e4c:	f015 0506 	ands.w	r5, r5, #6
 8003e50:	d107      	bne.n	8003e62 <_printf_common+0x52>
 8003e52:	f104 0a19 	add.w	sl, r4, #25
 8003e56:	68e3      	ldr	r3, [r4, #12]
 8003e58:	f8d9 2000 	ldr.w	r2, [r9]
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	42ab      	cmp	r3, r5
 8003e60:	dc28      	bgt.n	8003eb4 <_printf_common+0xa4>
 8003e62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	3300      	adds	r3, #0
 8003e6a:	bf18      	it	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	0692      	lsls	r2, r2, #26
 8003e70:	d42d      	bmi.n	8003ece <_printf_common+0xbe>
 8003e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e76:	4639      	mov	r1, r7
 8003e78:	4630      	mov	r0, r6
 8003e7a:	47c0      	blx	r8
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d020      	beq.n	8003ec2 <_printf_common+0xb2>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	68e5      	ldr	r5, [r4, #12]
 8003e84:	f8d9 2000 	ldr.w	r2, [r9]
 8003e88:	f003 0306 	and.w	r3, r3, #6
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	bf08      	it	eq
 8003e90:	1aad      	subeq	r5, r5, r2
 8003e92:	68a3      	ldr	r3, [r4, #8]
 8003e94:	6922      	ldr	r2, [r4, #16]
 8003e96:	bf0c      	ite	eq
 8003e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e9c:	2500      	movne	r5, #0
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	bfc4      	itt	gt
 8003ea2:	1a9b      	subgt	r3, r3, r2
 8003ea4:	18ed      	addgt	r5, r5, r3
 8003ea6:	f04f 0900 	mov.w	r9, #0
 8003eaa:	341a      	adds	r4, #26
 8003eac:	454d      	cmp	r5, r9
 8003eae:	d11a      	bne.n	8003ee6 <_printf_common+0xd6>
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e008      	b.n	8003ec6 <_printf_common+0xb6>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	4652      	mov	r2, sl
 8003eb8:	4639      	mov	r1, r7
 8003eba:	4630      	mov	r0, r6
 8003ebc:	47c0      	blx	r8
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	d103      	bne.n	8003eca <_printf_common+0xba>
 8003ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eca:	3501      	adds	r5, #1
 8003ecc:	e7c3      	b.n	8003e56 <_printf_common+0x46>
 8003ece:	18e1      	adds	r1, r4, r3
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	2030      	movs	r0, #48	; 0x30
 8003ed4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ed8:	4422      	add	r2, r4
 8003eda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ede:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	e7c5      	b.n	8003e72 <_printf_common+0x62>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4622      	mov	r2, r4
 8003eea:	4639      	mov	r1, r7
 8003eec:	4630      	mov	r0, r6
 8003eee:	47c0      	blx	r8
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d0e6      	beq.n	8003ec2 <_printf_common+0xb2>
 8003ef4:	f109 0901 	add.w	r9, r9, #1
 8003ef8:	e7d8      	b.n	8003eac <_printf_common+0x9c>
	...

08003efc <_printf_i>:
 8003efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f04:	460c      	mov	r4, r1
 8003f06:	7e09      	ldrb	r1, [r1, #24]
 8003f08:	b085      	sub	sp, #20
 8003f0a:	296e      	cmp	r1, #110	; 0x6e
 8003f0c:	4617      	mov	r7, r2
 8003f0e:	4606      	mov	r6, r0
 8003f10:	4698      	mov	r8, r3
 8003f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f14:	f000 80b3 	beq.w	800407e <_printf_i+0x182>
 8003f18:	d822      	bhi.n	8003f60 <_printf_i+0x64>
 8003f1a:	2963      	cmp	r1, #99	; 0x63
 8003f1c:	d036      	beq.n	8003f8c <_printf_i+0x90>
 8003f1e:	d80a      	bhi.n	8003f36 <_printf_i+0x3a>
 8003f20:	2900      	cmp	r1, #0
 8003f22:	f000 80b9 	beq.w	8004098 <_printf_i+0x19c>
 8003f26:	2958      	cmp	r1, #88	; 0x58
 8003f28:	f000 8083 	beq.w	8004032 <_printf_i+0x136>
 8003f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f34:	e032      	b.n	8003f9c <_printf_i+0xa0>
 8003f36:	2964      	cmp	r1, #100	; 0x64
 8003f38:	d001      	beq.n	8003f3e <_printf_i+0x42>
 8003f3a:	2969      	cmp	r1, #105	; 0x69
 8003f3c:	d1f6      	bne.n	8003f2c <_printf_i+0x30>
 8003f3e:	6820      	ldr	r0, [r4, #0]
 8003f40:	6813      	ldr	r3, [r2, #0]
 8003f42:	0605      	lsls	r5, r0, #24
 8003f44:	f103 0104 	add.w	r1, r3, #4
 8003f48:	d52a      	bpl.n	8003fa0 <_printf_i+0xa4>
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6011      	str	r1, [r2, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da03      	bge.n	8003f5a <_printf_i+0x5e>
 8003f52:	222d      	movs	r2, #45	; 0x2d
 8003f54:	425b      	negs	r3, r3
 8003f56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f5a:	486f      	ldr	r0, [pc, #444]	; (8004118 <_printf_i+0x21c>)
 8003f5c:	220a      	movs	r2, #10
 8003f5e:	e039      	b.n	8003fd4 <_printf_i+0xd8>
 8003f60:	2973      	cmp	r1, #115	; 0x73
 8003f62:	f000 809d 	beq.w	80040a0 <_printf_i+0x1a4>
 8003f66:	d808      	bhi.n	8003f7a <_printf_i+0x7e>
 8003f68:	296f      	cmp	r1, #111	; 0x6f
 8003f6a:	d020      	beq.n	8003fae <_printf_i+0xb2>
 8003f6c:	2970      	cmp	r1, #112	; 0x70
 8003f6e:	d1dd      	bne.n	8003f2c <_printf_i+0x30>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	f043 0320 	orr.w	r3, r3, #32
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	e003      	b.n	8003f82 <_printf_i+0x86>
 8003f7a:	2975      	cmp	r1, #117	; 0x75
 8003f7c:	d017      	beq.n	8003fae <_printf_i+0xb2>
 8003f7e:	2978      	cmp	r1, #120	; 0x78
 8003f80:	d1d4      	bne.n	8003f2c <_printf_i+0x30>
 8003f82:	2378      	movs	r3, #120	; 0x78
 8003f84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f88:	4864      	ldr	r0, [pc, #400]	; (800411c <_printf_i+0x220>)
 8003f8a:	e055      	b.n	8004038 <_printf_i+0x13c>
 8003f8c:	6813      	ldr	r3, [r2, #0]
 8003f8e:	1d19      	adds	r1, r3, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6011      	str	r1, [r2, #0]
 8003f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e08c      	b.n	80040ba <_printf_i+0x1be>
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6011      	str	r1, [r2, #0]
 8003fa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fa8:	bf18      	it	ne
 8003faa:	b21b      	sxthne	r3, r3
 8003fac:	e7cf      	b.n	8003f4e <_printf_i+0x52>
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	6825      	ldr	r5, [r4, #0]
 8003fb2:	1d18      	adds	r0, r3, #4
 8003fb4:	6010      	str	r0, [r2, #0]
 8003fb6:	0628      	lsls	r0, r5, #24
 8003fb8:	d501      	bpl.n	8003fbe <_printf_i+0xc2>
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	e002      	b.n	8003fc4 <_printf_i+0xc8>
 8003fbe:	0668      	lsls	r0, r5, #25
 8003fc0:	d5fb      	bpl.n	8003fba <_printf_i+0xbe>
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	4854      	ldr	r0, [pc, #336]	; (8004118 <_printf_i+0x21c>)
 8003fc6:	296f      	cmp	r1, #111	; 0x6f
 8003fc8:	bf14      	ite	ne
 8003fca:	220a      	movne	r2, #10
 8003fcc:	2208      	moveq	r2, #8
 8003fce:	2100      	movs	r1, #0
 8003fd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fd4:	6865      	ldr	r5, [r4, #4]
 8003fd6:	60a5      	str	r5, [r4, #8]
 8003fd8:	2d00      	cmp	r5, #0
 8003fda:	f2c0 8095 	blt.w	8004108 <_printf_i+0x20c>
 8003fde:	6821      	ldr	r1, [r4, #0]
 8003fe0:	f021 0104 	bic.w	r1, r1, #4
 8003fe4:	6021      	str	r1, [r4, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d13d      	bne.n	8004066 <_printf_i+0x16a>
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	f040 808e 	bne.w	800410c <_printf_i+0x210>
 8003ff0:	4665      	mov	r5, ip
 8003ff2:	2a08      	cmp	r2, #8
 8003ff4:	d10b      	bne.n	800400e <_printf_i+0x112>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	07db      	lsls	r3, r3, #31
 8003ffa:	d508      	bpl.n	800400e <_printf_i+0x112>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	6862      	ldr	r2, [r4, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	bfde      	ittt	le
 8004004:	2330      	movle	r3, #48	; 0x30
 8004006:	f805 3c01 	strble.w	r3, [r5, #-1]
 800400a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800400e:	ebac 0305 	sub.w	r3, ip, r5
 8004012:	6123      	str	r3, [r4, #16]
 8004014:	f8cd 8000 	str.w	r8, [sp]
 8004018:	463b      	mov	r3, r7
 800401a:	aa03      	add	r2, sp, #12
 800401c:	4621      	mov	r1, r4
 800401e:	4630      	mov	r0, r6
 8004020:	f7ff fef6 	bl	8003e10 <_printf_common>
 8004024:	3001      	adds	r0, #1
 8004026:	d14d      	bne.n	80040c4 <_printf_i+0x1c8>
 8004028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402c:	b005      	add	sp, #20
 800402e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004032:	4839      	ldr	r0, [pc, #228]	; (8004118 <_printf_i+0x21c>)
 8004034:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	6821      	ldr	r1, [r4, #0]
 800403c:	1d1d      	adds	r5, r3, #4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6015      	str	r5, [r2, #0]
 8004042:	060a      	lsls	r2, r1, #24
 8004044:	d50b      	bpl.n	800405e <_printf_i+0x162>
 8004046:	07ca      	lsls	r2, r1, #31
 8004048:	bf44      	itt	mi
 800404a:	f041 0120 	orrmi.w	r1, r1, #32
 800404e:	6021      	strmi	r1, [r4, #0]
 8004050:	b91b      	cbnz	r3, 800405a <_printf_i+0x15e>
 8004052:	6822      	ldr	r2, [r4, #0]
 8004054:	f022 0220 	bic.w	r2, r2, #32
 8004058:	6022      	str	r2, [r4, #0]
 800405a:	2210      	movs	r2, #16
 800405c:	e7b7      	b.n	8003fce <_printf_i+0xd2>
 800405e:	064d      	lsls	r5, r1, #25
 8004060:	bf48      	it	mi
 8004062:	b29b      	uxthmi	r3, r3
 8004064:	e7ef      	b.n	8004046 <_printf_i+0x14a>
 8004066:	4665      	mov	r5, ip
 8004068:	fbb3 f1f2 	udiv	r1, r3, r2
 800406c:	fb02 3311 	mls	r3, r2, r1, r3
 8004070:	5cc3      	ldrb	r3, [r0, r3]
 8004072:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004076:	460b      	mov	r3, r1
 8004078:	2900      	cmp	r1, #0
 800407a:	d1f5      	bne.n	8004068 <_printf_i+0x16c>
 800407c:	e7b9      	b.n	8003ff2 <_printf_i+0xf6>
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	6825      	ldr	r5, [r4, #0]
 8004082:	6961      	ldr	r1, [r4, #20]
 8004084:	1d18      	adds	r0, r3, #4
 8004086:	6010      	str	r0, [r2, #0]
 8004088:	0628      	lsls	r0, r5, #24
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	d501      	bpl.n	8004092 <_printf_i+0x196>
 800408e:	6019      	str	r1, [r3, #0]
 8004090:	e002      	b.n	8004098 <_printf_i+0x19c>
 8004092:	066a      	lsls	r2, r5, #25
 8004094:	d5fb      	bpl.n	800408e <_printf_i+0x192>
 8004096:	8019      	strh	r1, [r3, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	4665      	mov	r5, ip
 800409e:	e7b9      	b.n	8004014 <_printf_i+0x118>
 80040a0:	6813      	ldr	r3, [r2, #0]
 80040a2:	1d19      	adds	r1, r3, #4
 80040a4:	6011      	str	r1, [r2, #0]
 80040a6:	681d      	ldr	r5, [r3, #0]
 80040a8:	6862      	ldr	r2, [r4, #4]
 80040aa:	2100      	movs	r1, #0
 80040ac:	4628      	mov	r0, r5
 80040ae:	f7fc f897 	bl	80001e0 <memchr>
 80040b2:	b108      	cbz	r0, 80040b8 <_printf_i+0x1bc>
 80040b4:	1b40      	subs	r0, r0, r5
 80040b6:	6060      	str	r0, [r4, #4]
 80040b8:	6863      	ldr	r3, [r4, #4]
 80040ba:	6123      	str	r3, [r4, #16]
 80040bc:	2300      	movs	r3, #0
 80040be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040c2:	e7a7      	b.n	8004014 <_printf_i+0x118>
 80040c4:	6923      	ldr	r3, [r4, #16]
 80040c6:	462a      	mov	r2, r5
 80040c8:	4639      	mov	r1, r7
 80040ca:	4630      	mov	r0, r6
 80040cc:	47c0      	blx	r8
 80040ce:	3001      	adds	r0, #1
 80040d0:	d0aa      	beq.n	8004028 <_printf_i+0x12c>
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	079b      	lsls	r3, r3, #30
 80040d6:	d413      	bmi.n	8004100 <_printf_i+0x204>
 80040d8:	68e0      	ldr	r0, [r4, #12]
 80040da:	9b03      	ldr	r3, [sp, #12]
 80040dc:	4298      	cmp	r0, r3
 80040de:	bfb8      	it	lt
 80040e0:	4618      	movlt	r0, r3
 80040e2:	e7a3      	b.n	800402c <_printf_i+0x130>
 80040e4:	2301      	movs	r3, #1
 80040e6:	464a      	mov	r2, r9
 80040e8:	4639      	mov	r1, r7
 80040ea:	4630      	mov	r0, r6
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d09a      	beq.n	8004028 <_printf_i+0x12c>
 80040f2:	3501      	adds	r5, #1
 80040f4:	68e3      	ldr	r3, [r4, #12]
 80040f6:	9a03      	ldr	r2, [sp, #12]
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	42ab      	cmp	r3, r5
 80040fc:	dcf2      	bgt.n	80040e4 <_printf_i+0x1e8>
 80040fe:	e7eb      	b.n	80040d8 <_printf_i+0x1dc>
 8004100:	2500      	movs	r5, #0
 8004102:	f104 0919 	add.w	r9, r4, #25
 8004106:	e7f5      	b.n	80040f4 <_printf_i+0x1f8>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1ac      	bne.n	8004066 <_printf_i+0x16a>
 800410c:	7803      	ldrb	r3, [r0, #0]
 800410e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004112:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004116:	e76c      	b.n	8003ff2 <_printf_i+0xf6>
 8004118:	080043d5 	.word	0x080043d5
 800411c:	080043e6 	.word	0x080043e6

08004120 <memcpy>:
 8004120:	b510      	push	{r4, lr}
 8004122:	1e43      	subs	r3, r0, #1
 8004124:	440a      	add	r2, r1
 8004126:	4291      	cmp	r1, r2
 8004128:	d100      	bne.n	800412c <memcpy+0xc>
 800412a:	bd10      	pop	{r4, pc}
 800412c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004134:	e7f7      	b.n	8004126 <memcpy+0x6>

08004136 <memmove>:
 8004136:	4288      	cmp	r0, r1
 8004138:	b510      	push	{r4, lr}
 800413a:	eb01 0302 	add.w	r3, r1, r2
 800413e:	d807      	bhi.n	8004150 <memmove+0x1a>
 8004140:	1e42      	subs	r2, r0, #1
 8004142:	4299      	cmp	r1, r3
 8004144:	d00a      	beq.n	800415c <memmove+0x26>
 8004146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800414e:	e7f8      	b.n	8004142 <memmove+0xc>
 8004150:	4283      	cmp	r3, r0
 8004152:	d9f5      	bls.n	8004140 <memmove+0xa>
 8004154:	1881      	adds	r1, r0, r2
 8004156:	1ad2      	subs	r2, r2, r3
 8004158:	42d3      	cmn	r3, r2
 800415a:	d100      	bne.n	800415e <memmove+0x28>
 800415c:	bd10      	pop	{r4, pc}
 800415e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004162:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004166:	e7f7      	b.n	8004158 <memmove+0x22>

08004168 <_free_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4605      	mov	r5, r0
 800416c:	2900      	cmp	r1, #0
 800416e:	d045      	beq.n	80041fc <_free_r+0x94>
 8004170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004174:	1f0c      	subs	r4, r1, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	bfb8      	it	lt
 800417a:	18e4      	addlt	r4, r4, r3
 800417c:	f000 f8d2 	bl	8004324 <__malloc_lock>
 8004180:	4a1f      	ldr	r2, [pc, #124]	; (8004200 <_free_r+0x98>)
 8004182:	6813      	ldr	r3, [r2, #0]
 8004184:	4610      	mov	r0, r2
 8004186:	b933      	cbnz	r3, 8004196 <_free_r+0x2e>
 8004188:	6063      	str	r3, [r4, #4]
 800418a:	6014      	str	r4, [r2, #0]
 800418c:	4628      	mov	r0, r5
 800418e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004192:	f000 b8c8 	b.w	8004326 <__malloc_unlock>
 8004196:	42a3      	cmp	r3, r4
 8004198:	d90c      	bls.n	80041b4 <_free_r+0x4c>
 800419a:	6821      	ldr	r1, [r4, #0]
 800419c:	1862      	adds	r2, r4, r1
 800419e:	4293      	cmp	r3, r2
 80041a0:	bf04      	itt	eq
 80041a2:	681a      	ldreq	r2, [r3, #0]
 80041a4:	685b      	ldreq	r3, [r3, #4]
 80041a6:	6063      	str	r3, [r4, #4]
 80041a8:	bf04      	itt	eq
 80041aa:	1852      	addeq	r2, r2, r1
 80041ac:	6022      	streq	r2, [r4, #0]
 80041ae:	6004      	str	r4, [r0, #0]
 80041b0:	e7ec      	b.n	800418c <_free_r+0x24>
 80041b2:	4613      	mov	r3, r2
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	b10a      	cbz	r2, 80041bc <_free_r+0x54>
 80041b8:	42a2      	cmp	r2, r4
 80041ba:	d9fa      	bls.n	80041b2 <_free_r+0x4a>
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	1858      	adds	r0, r3, r1
 80041c0:	42a0      	cmp	r0, r4
 80041c2:	d10b      	bne.n	80041dc <_free_r+0x74>
 80041c4:	6820      	ldr	r0, [r4, #0]
 80041c6:	4401      	add	r1, r0
 80041c8:	1858      	adds	r0, r3, r1
 80041ca:	4282      	cmp	r2, r0
 80041cc:	6019      	str	r1, [r3, #0]
 80041ce:	d1dd      	bne.n	800418c <_free_r+0x24>
 80041d0:	6810      	ldr	r0, [r2, #0]
 80041d2:	6852      	ldr	r2, [r2, #4]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	4401      	add	r1, r0
 80041d8:	6019      	str	r1, [r3, #0]
 80041da:	e7d7      	b.n	800418c <_free_r+0x24>
 80041dc:	d902      	bls.n	80041e4 <_free_r+0x7c>
 80041de:	230c      	movs	r3, #12
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	e7d3      	b.n	800418c <_free_r+0x24>
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	1821      	adds	r1, r4, r0
 80041e8:	428a      	cmp	r2, r1
 80041ea:	bf04      	itt	eq
 80041ec:	6811      	ldreq	r1, [r2, #0]
 80041ee:	6852      	ldreq	r2, [r2, #4]
 80041f0:	6062      	str	r2, [r4, #4]
 80041f2:	bf04      	itt	eq
 80041f4:	1809      	addeq	r1, r1, r0
 80041f6:	6021      	streq	r1, [r4, #0]
 80041f8:	605c      	str	r4, [r3, #4]
 80041fa:	e7c7      	b.n	800418c <_free_r+0x24>
 80041fc:	bd38      	pop	{r3, r4, r5, pc}
 80041fe:	bf00      	nop
 8004200:	200000bc 	.word	0x200000bc

08004204 <_malloc_r>:
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	1ccd      	adds	r5, r1, #3
 8004208:	f025 0503 	bic.w	r5, r5, #3
 800420c:	3508      	adds	r5, #8
 800420e:	2d0c      	cmp	r5, #12
 8004210:	bf38      	it	cc
 8004212:	250c      	movcc	r5, #12
 8004214:	2d00      	cmp	r5, #0
 8004216:	4606      	mov	r6, r0
 8004218:	db01      	blt.n	800421e <_malloc_r+0x1a>
 800421a:	42a9      	cmp	r1, r5
 800421c:	d903      	bls.n	8004226 <_malloc_r+0x22>
 800421e:	230c      	movs	r3, #12
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	2000      	movs	r0, #0
 8004224:	bd70      	pop	{r4, r5, r6, pc}
 8004226:	f000 f87d 	bl	8004324 <__malloc_lock>
 800422a:	4a21      	ldr	r2, [pc, #132]	; (80042b0 <_malloc_r+0xac>)
 800422c:	6814      	ldr	r4, [r2, #0]
 800422e:	4621      	mov	r1, r4
 8004230:	b991      	cbnz	r1, 8004258 <_malloc_r+0x54>
 8004232:	4c20      	ldr	r4, [pc, #128]	; (80042b4 <_malloc_r+0xb0>)
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	b91b      	cbnz	r3, 8004240 <_malloc_r+0x3c>
 8004238:	4630      	mov	r0, r6
 800423a:	f000 f863 	bl	8004304 <_sbrk_r>
 800423e:	6020      	str	r0, [r4, #0]
 8004240:	4629      	mov	r1, r5
 8004242:	4630      	mov	r0, r6
 8004244:	f000 f85e 	bl	8004304 <_sbrk_r>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d124      	bne.n	8004296 <_malloc_r+0x92>
 800424c:	230c      	movs	r3, #12
 800424e:	6033      	str	r3, [r6, #0]
 8004250:	4630      	mov	r0, r6
 8004252:	f000 f868 	bl	8004326 <__malloc_unlock>
 8004256:	e7e4      	b.n	8004222 <_malloc_r+0x1e>
 8004258:	680b      	ldr	r3, [r1, #0]
 800425a:	1b5b      	subs	r3, r3, r5
 800425c:	d418      	bmi.n	8004290 <_malloc_r+0x8c>
 800425e:	2b0b      	cmp	r3, #11
 8004260:	d90f      	bls.n	8004282 <_malloc_r+0x7e>
 8004262:	600b      	str	r3, [r1, #0]
 8004264:	50cd      	str	r5, [r1, r3]
 8004266:	18cc      	adds	r4, r1, r3
 8004268:	4630      	mov	r0, r6
 800426a:	f000 f85c 	bl	8004326 <__malloc_unlock>
 800426e:	f104 000b 	add.w	r0, r4, #11
 8004272:	1d23      	adds	r3, r4, #4
 8004274:	f020 0007 	bic.w	r0, r0, #7
 8004278:	1ac3      	subs	r3, r0, r3
 800427a:	d0d3      	beq.n	8004224 <_malloc_r+0x20>
 800427c:	425a      	negs	r2, r3
 800427e:	50e2      	str	r2, [r4, r3]
 8004280:	e7d0      	b.n	8004224 <_malloc_r+0x20>
 8004282:	428c      	cmp	r4, r1
 8004284:	684b      	ldr	r3, [r1, #4]
 8004286:	bf16      	itet	ne
 8004288:	6063      	strne	r3, [r4, #4]
 800428a:	6013      	streq	r3, [r2, #0]
 800428c:	460c      	movne	r4, r1
 800428e:	e7eb      	b.n	8004268 <_malloc_r+0x64>
 8004290:	460c      	mov	r4, r1
 8004292:	6849      	ldr	r1, [r1, #4]
 8004294:	e7cc      	b.n	8004230 <_malloc_r+0x2c>
 8004296:	1cc4      	adds	r4, r0, #3
 8004298:	f024 0403 	bic.w	r4, r4, #3
 800429c:	42a0      	cmp	r0, r4
 800429e:	d005      	beq.n	80042ac <_malloc_r+0xa8>
 80042a0:	1a21      	subs	r1, r4, r0
 80042a2:	4630      	mov	r0, r6
 80042a4:	f000 f82e 	bl	8004304 <_sbrk_r>
 80042a8:	3001      	adds	r0, #1
 80042aa:	d0cf      	beq.n	800424c <_malloc_r+0x48>
 80042ac:	6025      	str	r5, [r4, #0]
 80042ae:	e7db      	b.n	8004268 <_malloc_r+0x64>
 80042b0:	200000bc 	.word	0x200000bc
 80042b4:	200000c0 	.word	0x200000c0

080042b8 <_realloc_r>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	4607      	mov	r7, r0
 80042bc:	4614      	mov	r4, r2
 80042be:	460e      	mov	r6, r1
 80042c0:	b921      	cbnz	r1, 80042cc <_realloc_r+0x14>
 80042c2:	4611      	mov	r1, r2
 80042c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042c8:	f7ff bf9c 	b.w	8004204 <_malloc_r>
 80042cc:	b922      	cbnz	r2, 80042d8 <_realloc_r+0x20>
 80042ce:	f7ff ff4b 	bl	8004168 <_free_r>
 80042d2:	4625      	mov	r5, r4
 80042d4:	4628      	mov	r0, r5
 80042d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d8:	f000 f826 	bl	8004328 <_malloc_usable_size_r>
 80042dc:	42a0      	cmp	r0, r4
 80042de:	d20f      	bcs.n	8004300 <_realloc_r+0x48>
 80042e0:	4621      	mov	r1, r4
 80042e2:	4638      	mov	r0, r7
 80042e4:	f7ff ff8e 	bl	8004204 <_malloc_r>
 80042e8:	4605      	mov	r5, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d0f2      	beq.n	80042d4 <_realloc_r+0x1c>
 80042ee:	4631      	mov	r1, r6
 80042f0:	4622      	mov	r2, r4
 80042f2:	f7ff ff15 	bl	8004120 <memcpy>
 80042f6:	4631      	mov	r1, r6
 80042f8:	4638      	mov	r0, r7
 80042fa:	f7ff ff35 	bl	8004168 <_free_r>
 80042fe:	e7e9      	b.n	80042d4 <_realloc_r+0x1c>
 8004300:	4635      	mov	r5, r6
 8004302:	e7e7      	b.n	80042d4 <_realloc_r+0x1c>

08004304 <_sbrk_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4c06      	ldr	r4, [pc, #24]	; (8004320 <_sbrk_r+0x1c>)
 8004308:	2300      	movs	r3, #0
 800430a:	4605      	mov	r5, r0
 800430c:	4608      	mov	r0, r1
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	f7ff fa20 	bl	8003754 <_sbrk>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	d102      	bne.n	800431e <_sbrk_r+0x1a>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	b103      	cbz	r3, 800431e <_sbrk_r+0x1a>
 800431c:	602b      	str	r3, [r5, #0]
 800431e:	bd38      	pop	{r3, r4, r5, pc}
 8004320:	2000fb68 	.word	0x2000fb68

08004324 <__malloc_lock>:
 8004324:	4770      	bx	lr

08004326 <__malloc_unlock>:
 8004326:	4770      	bx	lr

08004328 <_malloc_usable_size_r>:
 8004328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432c:	1f18      	subs	r0, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfbc      	itt	lt
 8004332:	580b      	ldrlt	r3, [r1, r0]
 8004334:	18c0      	addlt	r0, r0, r3
 8004336:	4770      	bx	lr

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
