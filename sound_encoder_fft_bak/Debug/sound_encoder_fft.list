
sound_encoder_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010248  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025450  080103f8  080103f8  000203f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035848  08035848  000501f0  2**0
                  CONTENTS
  4 .ARM          00000008  08035848  08035848  00045848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035850  08035850  000501f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035850  08035850  00045850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08035854  08035854  00045854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08035858  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000272d0  200001f0  08035a48  000501f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200274c0  08035a48  000574c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000501f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000326d3  00000000  00000000  00050220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b44  00000000  00000000  000828f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002698  00000000  00000000  00088438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002378  00000000  00000000  0008aad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033771  00000000  00000000  0008ce48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021ccf  00000000  00000000  000c05b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125f81  00000000  00000000  000e2288  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  00208209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a610  00000000  00000000  002082f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000360e  00000000  00000000  00212904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080103e0 	.word	0x080103e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	080103e0 	.word	0x080103e0

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000370:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000374:	f000 b972 	b.w	800065c <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	4688      	mov	r8, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	d14b      	bne.n	8000436 <__udivmoddi4+0xa6>
 800039e:	428a      	cmp	r2, r1
 80003a0:	4615      	mov	r5, r2
 80003a2:	d967      	bls.n	8000474 <__udivmoddi4+0xe4>
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	b14a      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003aa:	f1c2 0720 	rsb	r7, r2, #32
 80003ae:	fa01 f302 	lsl.w	r3, r1, r2
 80003b2:	fa20 f707 	lsr.w	r7, r0, r7
 80003b6:	4095      	lsls	r5, r2
 80003b8:	ea47 0803 	orr.w	r8, r7, r3
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003c8:	fa1f fc85 	uxth.w	ip, r5
 80003cc:	fb0e 8817 	mls	r8, lr, r7, r8
 80003d0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d4:	fb07 f10c 	mul.w	r1, r7, ip
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18eb      	adds	r3, r5, r3
 80003de:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80003e2:	f080 811b 	bcs.w	800061c <__udivmoddi4+0x28c>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8118 	bls.w	800061c <__udivmoddi4+0x28c>
 80003ec:	3f02      	subs	r7, #2
 80003ee:	442b      	add	r3, r5
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fc0c 	mul.w	ip, r0, ip
 8000404:	45a4      	cmp	ip, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	192c      	adds	r4, r5, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040e:	f080 8107 	bcs.w	8000620 <__udivmoddi4+0x290>
 8000412:	45a4      	cmp	ip, r4
 8000414:	f240 8104 	bls.w	8000620 <__udivmoddi4+0x290>
 8000418:	3802      	subs	r0, #2
 800041a:	442c      	add	r4, r5
 800041c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000420:	eba4 040c 	sub.w	r4, r4, ip
 8000424:	2700      	movs	r7, #0
 8000426:	b11e      	cbz	r6, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c6 4300 	strd	r4, r3, [r6]
 8000430:	4639      	mov	r1, r7
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0xbe>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80eb 	beq.w	8000616 <__udivmoddi4+0x286>
 8000440:	2700      	movs	r7, #0
 8000442:	e9c6 0100 	strd	r0, r1, [r6]
 8000446:	4638      	mov	r0, r7
 8000448:	4639      	mov	r1, r7
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f783 	clz	r7, r3
 8000452:	2f00      	cmp	r7, #0
 8000454:	d147      	bne.n	80004e6 <__udivmoddi4+0x156>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0xd0>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80fa 	bhi.w	8000654 <__udivmoddi4+0x2c4>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0303 	sbc.w	r3, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	4698      	mov	r8, r3
 800046a:	2e00      	cmp	r6, #0
 800046c:	d0e0      	beq.n	8000430 <__udivmoddi4+0xa0>
 800046e:	e9c6 4800 	strd	r4, r8, [r6]
 8000472:	e7dd      	b.n	8000430 <__udivmoddi4+0xa0>
 8000474:	b902      	cbnz	r2, 8000478 <__udivmoddi4+0xe8>
 8000476:	deff      	udf	#255	; 0xff
 8000478:	fab2 f282 	clz	r2, r2
 800047c:	2a00      	cmp	r2, #0
 800047e:	f040 808f 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000482:	1b49      	subs	r1, r1, r5
 8000484:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000488:	fa1f f885 	uxth.w	r8, r5
 800048c:	2701      	movs	r7, #1
 800048e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000492:	0c23      	lsrs	r3, r4, #16
 8000494:	fb0e 111c 	mls	r1, lr, ip, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb08 f10c 	mul.w	r1, r8, ip
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a4:	18eb      	adds	r3, r5, r3
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	f200 80cd 	bhi.w	800064c <__udivmoddi4+0x2bc>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1a59      	subs	r1, r3, r1
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x14c>
 80004cc:	192c      	adds	r4, r5, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x14a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80b6 	bhi.w	8000646 <__udivmoddi4+0x2b6>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e79f      	b.n	8000426 <__udivmoddi4+0x96>
 80004e6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ea:	40bb      	lsls	r3, r7
 80004ec:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004f0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004f4:	fa01 f407 	lsl.w	r4, r1, r7
 80004f8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004fc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000500:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000504:	4325      	orrs	r5, r4
 8000506:	fbb3 f9f8 	udiv	r9, r3, r8
 800050a:	0c2c      	lsrs	r4, r5, #16
 800050c:	fb08 3319 	mls	r3, r8, r9, r3
 8000510:	fa1f fa8e 	uxth.w	sl, lr
 8000514:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000518:	fb09 f40a 	mul.w	r4, r9, sl
 800051c:	429c      	cmp	r4, r3
 800051e:	fa02 f207 	lsl.w	r2, r2, r7
 8000522:	fa00 f107 	lsl.w	r1, r0, r7
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1e 0303 	adds.w	r3, lr, r3
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000530:	f080 8087 	bcs.w	8000642 <__udivmoddi4+0x2b2>
 8000534:	429c      	cmp	r4, r3
 8000536:	f240 8084 	bls.w	8000642 <__udivmoddi4+0x2b2>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4473      	add	r3, lr
 8000540:	1b1b      	subs	r3, r3, r4
 8000542:	b2ad      	uxth	r5, r5
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3310 	mls	r3, r8, r0, r3
 800054c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000550:	fb00 fa0a 	mul.w	sl, r0, sl
 8000554:	45a2      	cmp	sl, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1e 0404 	adds.w	r4, lr, r4
 800055c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000560:	d26b      	bcs.n	800063a <__udivmoddi4+0x2aa>
 8000562:	45a2      	cmp	sl, r4
 8000564:	d969      	bls.n	800063a <__udivmoddi4+0x2aa>
 8000566:	3802      	subs	r0, #2
 8000568:	4474      	add	r4, lr
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	eba4 040a 	sub.w	r4, r4, sl
 8000576:	454c      	cmp	r4, r9
 8000578:	46c2      	mov	sl, r8
 800057a:	464b      	mov	r3, r9
 800057c:	d354      	bcc.n	8000628 <__udivmoddi4+0x298>
 800057e:	d051      	beq.n	8000624 <__udivmoddi4+0x294>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d069      	beq.n	8000658 <__udivmoddi4+0x2c8>
 8000584:	ebb1 050a 	subs.w	r5, r1, sl
 8000588:	eb64 0403 	sbc.w	r4, r4, r3
 800058c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000590:	40fd      	lsrs	r5, r7
 8000592:	40fc      	lsrs	r4, r7
 8000594:	ea4c 0505 	orr.w	r5, ip, r5
 8000598:	e9c6 5400 	strd	r5, r4, [r6]
 800059c:	2700      	movs	r7, #0
 800059e:	e747      	b.n	8000430 <__udivmoddi4+0xa0>
 80005a0:	f1c2 0320 	rsb	r3, r2, #32
 80005a4:	fa20 f703 	lsr.w	r7, r0, r3
 80005a8:	4095      	lsls	r5, r2
 80005aa:	fa01 f002 	lsl.w	r0, r1, r2
 80005ae:	fa21 f303 	lsr.w	r3, r1, r3
 80005b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005b6:	4338      	orrs	r0, r7
 80005b8:	0c01      	lsrs	r1, r0, #16
 80005ba:	fbb3 f7fe 	udiv	r7, r3, lr
 80005be:	fa1f f885 	uxth.w	r8, r5
 80005c2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ca:	fb07 f308 	mul.w	r3, r7, r8
 80005ce:	428b      	cmp	r3, r1
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d907      	bls.n	80005e6 <__udivmoddi4+0x256>
 80005d6:	1869      	adds	r1, r5, r1
 80005d8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80005dc:	d22f      	bcs.n	800063e <__udivmoddi4+0x2ae>
 80005de:	428b      	cmp	r3, r1
 80005e0:	d92d      	bls.n	800063e <__udivmoddi4+0x2ae>
 80005e2:	3f02      	subs	r7, #2
 80005e4:	4429      	add	r1, r5
 80005e6:	1acb      	subs	r3, r1, r3
 80005e8:	b281      	uxth	r1, r0
 80005ea:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ee:	fb0e 3310 	mls	r3, lr, r0, r3
 80005f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f6:	fb00 f308 	mul.w	r3, r0, r8
 80005fa:	428b      	cmp	r3, r1
 80005fc:	d907      	bls.n	800060e <__udivmoddi4+0x27e>
 80005fe:	1869      	adds	r1, r5, r1
 8000600:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000604:	d217      	bcs.n	8000636 <__udivmoddi4+0x2a6>
 8000606:	428b      	cmp	r3, r1
 8000608:	d915      	bls.n	8000636 <__udivmoddi4+0x2a6>
 800060a:	3802      	subs	r0, #2
 800060c:	4429      	add	r1, r5
 800060e:	1ac9      	subs	r1, r1, r3
 8000610:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000614:	e73b      	b.n	800048e <__udivmoddi4+0xfe>
 8000616:	4637      	mov	r7, r6
 8000618:	4630      	mov	r0, r6
 800061a:	e709      	b.n	8000430 <__udivmoddi4+0xa0>
 800061c:	4607      	mov	r7, r0
 800061e:	e6e7      	b.n	80003f0 <__udivmoddi4+0x60>
 8000620:	4618      	mov	r0, r3
 8000622:	e6fb      	b.n	800041c <__udivmoddi4+0x8c>
 8000624:	4541      	cmp	r1, r8
 8000626:	d2ab      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 8000628:	ebb8 0a02 	subs.w	sl, r8, r2
 800062c:	eb69 020e 	sbc.w	r2, r9, lr
 8000630:	3801      	subs	r0, #1
 8000632:	4613      	mov	r3, r2
 8000634:	e7a4      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000636:	4660      	mov	r0, ip
 8000638:	e7e9      	b.n	800060e <__udivmoddi4+0x27e>
 800063a:	4618      	mov	r0, r3
 800063c:	e795      	b.n	800056a <__udivmoddi4+0x1da>
 800063e:	4667      	mov	r7, ip
 8000640:	e7d1      	b.n	80005e6 <__udivmoddi4+0x256>
 8000642:	4681      	mov	r9, r0
 8000644:	e77c      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000646:	3802      	subs	r0, #2
 8000648:	442c      	add	r4, r5
 800064a:	e747      	b.n	80004dc <__udivmoddi4+0x14c>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	442b      	add	r3, r5
 8000652:	e72f      	b.n	80004b4 <__udivmoddi4+0x124>
 8000654:	4638      	mov	r0, r7
 8000656:	e708      	b.n	800046a <__udivmoddi4+0xda>
 8000658:	4637      	mov	r7, r6
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0xa0>

0800065c <__aeabi_idiv0>:
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066a:	2003      	movs	r0, #3
 800066c:	f001 f896 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 f80d 	bl	8000690 <HAL_InitTick>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	e001      	b.n	8000686 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000682:	f00c fc01 	bl	800ce88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000686:	79fb      	ldrb	r3, [r7, #7]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <HAL_InitTick+0x68>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d022      	beq.n	80006ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_InitTick+0x6c>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <HAL_InitTick+0x68>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f8a4 	bl	8001806 <HAL_SYSTICK_Config>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10f      	bne.n	80006e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b0f      	cmp	r3, #15
 80006c8:	d809      	bhi.n	80006de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ca:	2200      	movs	r2, #0
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d2:	f001 f86e 	bl	80017b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <HAL_InitTick+0x70>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	e007      	b.n	80006ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	e004      	b.n	80006ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	e001      	b.n	80006ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000004 	.word	0x20000004
 80006fc:	20000118 	.word	0x20000118
 8000700:	20000000 	.word	0x20000000

08000704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x1c>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x20>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4413      	add	r3, r2
 8000712:	4a03      	ldr	r2, [pc, #12]	; (8000720 <HAL_IncTick+0x1c>)
 8000714:	6013      	str	r3, [r2, #0]
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	2000047c 	.word	0x2000047c
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_GetTick+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	2000047c 	.word	0x2000047c

08000740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000748:	f7ff ffee 	bl	8000728 <HAL_GetTick>
 800074c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000758:	d004      	beq.n	8000764 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_Delay+0x40>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000764:	bf00      	nop
 8000766:	f7ff ffdf 	bl	8000728 <HAL_GetTick>
 800076a:	4602      	mov	r2, r0
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	429a      	cmp	r2, r3
 8000774:	d8f7      	bhi.n	8000766 <HAL_Delay+0x26>
  {
  }
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000004 	.word	0x20000004

08000784 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	431a      	orrs	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	609a      	str	r2, [r3, #8]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	431a      	orrs	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	609a      	str	r2, [r3, #8]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007ec:	b490      	push	{r4, r7}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3360      	adds	r3, #96	; 0x60
 80007fe:	461a      	mov	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000808:	6822      	ldr	r2, [r4, #0]
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <LL_ADC_SetOffset+0x40>)
 800080c:	4013      	ands	r3, r2
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	430a      	orrs	r2, r1
 8000818:	4313      	orrs	r3, r2
 800081a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800081e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bc90      	pop	{r4, r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	03fff000 	.word	0x03fff000

08000830 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000830:	b490      	push	{r4, r7}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3360      	adds	r3, #96	; 0x60
 800083e:	461a      	mov	r2, r3
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bc90      	pop	{r4, r7}
 8000856:	4770      	bx	lr

08000858 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000858:	b490      	push	{r4, r7}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3360      	adds	r3, #96	; 0x60
 8000868:	461a      	mov	r2, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4413      	add	r3, r2
 8000870:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4313      	orrs	r3, r2
 800087c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bc90      	pop	{r4, r7}
 8000886:	4770      	bx	lr

08000888 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	431a      	orrs	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	615a      	str	r2, [r3, #20]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008ae:	b490      	push	{r4, r7}
 80008b0:	b084      	sub	sp, #16
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3330      	adds	r3, #48	; 0x30
 80008be:	461a      	mov	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	0a1b      	lsrs	r3, r3, #8
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	f003 030c 	and.w	r3, r3, #12
 80008ca:	4413      	add	r3, r2
 80008cc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80008ce:	6822      	ldr	r2, [r4, #0]
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	211f      	movs	r1, #31
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	401a      	ands	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	0e9b      	lsrs	r3, r3, #26
 80008e4:	f003 011f 	and.w	r1, r3, #31
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	f003 031f 	and.w	r3, r3, #31
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc90      	pop	{r4, r7}
 80008fe:	4770      	bx	lr

08000900 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000900:	b490      	push	{r4, r7}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3314      	adds	r3, #20
 8000910:	461a      	mov	r2, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	0e5b      	lsrs	r3, r3, #25
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	4413      	add	r3, r2
 800091e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000920:	6822      	ldr	r2, [r4, #0]
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	0d1b      	lsrs	r3, r3, #20
 8000926:	f003 031f 	and.w	r3, r3, #31
 800092a:	2107      	movs	r1, #7
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	401a      	ands	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	0d1b      	lsrs	r3, r3, #20
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	4313      	orrs	r3, r2
 8000944:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bc90      	pop	{r4, r7}
 800094e:	4770      	bx	lr

08000950 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0318 	and.w	r3, r3, #24
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000974:	40d9      	lsrs	r1, r3
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	400b      	ands	r3, r1
 800097a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800097e:	431a      	orrs	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	0007ffff 	.word	0x0007ffff

08000998 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80009a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	6093      	str	r3, [r2, #8]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009d0:	d101      	bne.n	80009d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80009f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a20:	d101      	bne.n	8000a26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d101      	bne.n	8000a4c <LL_ADC_IsEnabled+0x18>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <LL_ADC_IsEnabled+0x1a>
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d101      	bne.n	8000a72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	2b08      	cmp	r3, #8
 8000a92:	d101      	bne.n	8000a98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a94:	2301      	movs	r3, #1
 8000a96:	e000      	b.n	8000a9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e137      	b.n	8000d32 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d109      	bne.n	8000ae4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f00c f9fd 	bl	800ced0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff67 	bl	80009bc <LL_ADC_IsDeepPowerDownEnabled>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d004      	beq.n	8000afe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff4d 	bl	8000998 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff82 	bl	8000a0c <LL_ADC_IsInternalRegulatorEnabled>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d113      	bne.n	8000b36 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff66 	bl	80009e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000b18:	4b88      	ldr	r3, [pc, #544]	; (8000d3c <HAL_ADC_Init+0x294>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	099b      	lsrs	r3, r3, #6
 8000b1e:	4a88      	ldr	r2, [pc, #544]	; (8000d40 <HAL_ADC_Init+0x298>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	099b      	lsrs	r3, r3, #6
 8000b26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b28:	e002      	b.n	8000b30 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f9      	bne.n	8000b2a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff66 	bl	8000a0c <LL_ADC_IsInternalRegulatorEnabled>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10d      	bne.n	8000b62 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f043 0210 	orr.w	r2, r3, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	f043 0201 	orr.w	r2, r3, #1
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff77 	bl	8000a5a <LL_ADC_REG_IsConversionOngoing>
 8000b6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 80d2 	bne.w	8000d20 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 80ce 	bne.w	8000d20 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b8c:	f043 0202 	orr.w	r2, r3, #2
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff4b 	bl	8000a34 <LL_ADC_IsEnabled>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d115      	bne.n	8000bd0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ba4:	4867      	ldr	r0, [pc, #412]	; (8000d44 <HAL_ADC_Init+0x29c>)
 8000ba6:	f7ff ff45 	bl	8000a34 <LL_ADC_IsEnabled>
 8000baa:	4604      	mov	r4, r0
 8000bac:	4866      	ldr	r0, [pc, #408]	; (8000d48 <HAL_ADC_Init+0x2a0>)
 8000bae:	f7ff ff41 	bl	8000a34 <LL_ADC_IsEnabled>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	4865      	ldr	r0, [pc, #404]	; (8000d4c <HAL_ADC_Init+0x2a4>)
 8000bb8:	f7ff ff3c 	bl	8000a34 <LL_ADC_IsEnabled>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4861      	ldr	r0, [pc, #388]	; (8000d50 <HAL_ADC_Init+0x2a8>)
 8000bcc:	f7ff fdda 	bl	8000784 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7e5b      	ldrb	r3, [r3, #25]
 8000bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000be0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000be6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d106      	bne.n	8000c0c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	3b01      	subs	r3, #1
 8000c04:	045b      	lsls	r3, r3, #17
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d009      	beq.n	8000c28 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	4b49      	ldr	r3, [pc, #292]	; (8000d54 <HAL_ADC_Init+0x2ac>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	69b9      	ldr	r1, [r7, #24]
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff0a 	bl	8000a5a <LL_ADC_REG_IsConversionOngoing>
 8000c46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff17 	bl	8000a80 <LL_ADC_INJ_IsConversionOngoing>
 8000c52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d140      	bne.n	8000cdc <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d13d      	bne.n	8000cdc <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7e1b      	ldrb	r3, [r3, #24]
 8000c68:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c6a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c72:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c82:	f023 0306 	bic.w	r3, r3, #6
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	69b9      	ldr	r1, [r7, #24]
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d118      	bne.n	8000ccc <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ca4:	f023 0304 	bic.w	r3, r3, #4
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cb0:	4311      	orrs	r1, r2
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cb6:	4311      	orrs	r1, r2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f042 0201 	orr.w	r2, r2, #1
 8000cc8:	611a      	str	r2, [r3, #16]
 8000cca:	e007      	b.n	8000cdc <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	691a      	ldr	r2, [r3, #16]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0201 	bic.w	r2, r2, #1
 8000cda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10c      	bne.n	8000cfe <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f023 010f 	bic.w	r1, r3, #15
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8000cfc:	e007      	b.n	8000d0e <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 020f 	bic.w	r2, r2, #15
 8000d0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f023 0303 	bic.w	r3, r3, #3
 8000d16:	f043 0201 	orr.w	r2, r3, #1
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	659a      	str	r2, [r3, #88]	; 0x58
 8000d1e:	e007      	b.n	8000d30 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	f043 0210 	orr.w	r2, r3, #16
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d30:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd90      	pop	{r4, r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000118 	.word	0x20000118
 8000d40:	053e2d63 	.word	0x053e2d63
 8000d44:	50040000 	.word	0x50040000
 8000d48:	50040100 	.word	0x50040100
 8000d4c:	50040200 	.word	0x50040200
 8000d50:	50040300 	.word	0x50040300
 8000d54:	fff0c007 	.word	0xfff0c007

08000d58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0a6      	sub	sp, #152	; 0x98
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_ConfigChannel+0x22>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e364      	b.n	8001444 <HAL_ADC_ConfigChannel+0x6ec>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe67 	bl	8000a5a <LL_ADC_REG_IsConversionOngoing>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8345 	bne.w	800141e <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b05      	cmp	r3, #5
 8000d9a:	d824      	bhi.n	8000de6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	3b02      	subs	r3, #2
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d81b      	bhi.n	8000dde <HAL_ADC_ConfigChannel+0x86>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <HAL_ADC_ConfigChannel+0x54>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dc5 	.word	0x08000dc5
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000dd5 	.word	0x08000dd5
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	e011      	b.n	8000de8 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	2212      	movs	r2, #18
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	e00d      	b.n	8000de8 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2218      	movs	r2, #24
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	e009      	b.n	8000de8 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	e004      	b.n	8000de8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2206      	movs	r2, #6
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	e000      	b.n	8000de8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000de6:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6859      	ldr	r1, [r3, #4]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	f7ff fd5a 	bl	80008ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fe2b 	bl	8000a5a <LL_ADC_REG_IsConversionOngoing>
 8000e04:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fe37 	bl	8000a80 <LL_ADC_INJ_IsConversionOngoing>
 8000e12:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 8163 	bne.w	80010e6 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f040 815e 	bne.w	80010e6 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e32:	d10f      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fd5e 	bl	8000900 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fd1b 	bl	8000888 <LL_ADC_SetSamplingTimeCommonConfig>
 8000e52:	e00e      	b.n	8000e72 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6819      	ldr	r1, [r3, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	461a      	mov	r2, r3
 8000e62:	f7ff fd4d 	bl	8000900 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd0b 	bl	8000888 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d00a      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	6919      	ldr	r1, [r3, #16]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ea4:	f7ff fca2 	bl	80007ec <LL_ADC_SetOffset>
 8000ea8:	e11d      	b.n	80010e6 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fcbd 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10a      	bne.n	8000ed6 <HAL_ADC_ConfigChannel+0x17e>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fcb2 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	0e9b      	lsrs	r3, r3, #26
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	e012      	b.n	8000efc <HAL_ADC_ConfigChannel+0x1a4>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fca7 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ef2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d105      	bne.n	8000f14 <HAL_ADC_ConfigChannel+0x1bc>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	0e9b      	lsrs	r3, r3, #26
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	e00a      	b.n	8000f2a <HAL_ADC_ConfigChannel+0x1d2>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f1c:	fa93 f3a3 	rbit	r3, r3
 8000f20:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d106      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fc8e 	bl	8000858 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc74 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10a      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x210>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2101      	movs	r1, #1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fc69 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	0e9b      	lsrs	r3, r3, #26
 8000f62:	f003 021f 	and.w	r2, r3, #31
 8000f66:	e010      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x232>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fc5e 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d105      	bne.n	8000fa2 <HAL_ADC_ConfigChannel+0x24a>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	0e9b      	lsrs	r3, r3, #26
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	e00a      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x260>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d106      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fc47 	bl	8000858 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fc2d 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10a      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x29e>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fc22 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	0e9b      	lsrs	r3, r3, #26
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	e010      	b.n	8001018 <HAL_ADC_ConfigChannel+0x2c0>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fc17 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800100e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <HAL_ADC_ConfigChannel+0x2d8>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	0e9b      	lsrs	r3, r3, #26
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	e00a      	b.n	8001046 <HAL_ADC_ConfigChannel+0x2ee>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800103e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	429a      	cmp	r2, r3
 8001048:	d106      	bne.n	8001058 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2200      	movs	r2, #0
 8001050:	2102      	movs	r1, #2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fc00 	bl	8000858 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2103      	movs	r1, #3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fbe6 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10a      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x32c>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2103      	movs	r1, #3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fbdb 	bl	8000830 <LL_ADC_GetOffsetChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	0e9b      	lsrs	r3, r3, #26
 800107e:	f003 021f 	and.w	r2, r3, #31
 8001082:	e010      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x34e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2103      	movs	r1, #3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fbd0 	bl	8000830 <LL_ADC_GetOffsetChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800109c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <HAL_ADC_ConfigChannel+0x366>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0e9b      	lsrs	r3, r3, #26
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	e00a      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x37c>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80010cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d106      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	2103      	movs	r1, #3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fbb9 	bl	8000858 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fca2 	bl	8000a34 <LL_ADC_IsEnabled>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f040 810c 	bne.w	8001310 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	461a      	mov	r2, r3
 8001106:	f7ff fc23 	bl	8000950 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4aae      	ldr	r2, [pc, #696]	; (80013c8 <HAL_ADC_ConfigChannel+0x670>)
 8001110:	4293      	cmp	r3, r2
 8001112:	f040 80fd 	bne.w	8001310 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10b      	bne.n	800113e <HAL_ADC_ConfigChannel+0x3e6>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0e9b      	lsrs	r3, r3, #26
 800112c:	3301      	adds	r3, #1
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	2b09      	cmp	r3, #9
 8001134:	bf94      	ite	ls
 8001136:	2301      	movls	r3, #1
 8001138:	2300      	movhi	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	e012      	b.n	8001164 <HAL_ADC_ConfigChannel+0x40c>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800114c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	3301      	adds	r3, #1
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2b09      	cmp	r3, #9
 800115c:	bf94      	ite	ls
 800115e:	2301      	movls	r3, #1
 8001160:	2300      	movhi	r3, #0
 8001162:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001164:	2b00      	cmp	r3, #0
 8001166:	d064      	beq.n	8001232 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001170:	2b00      	cmp	r3, #0
 8001172:	d107      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x42c>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0e9b      	lsrs	r3, r3, #26
 800117a:	3301      	adds	r3, #1
 800117c:	069b      	lsls	r3, r3, #26
 800117e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001182:	e00e      	b.n	80011a2 <HAL_ADC_ConfigChannel+0x44a>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118c:	fa93 f3a3 	rbit	r3, r3
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	069b      	lsls	r3, r3, #26
 800119e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x46a>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	0e9b      	lsrs	r3, r3, #26
 80011b4:	3301      	adds	r3, #1
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	e010      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x48c>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	3301      	adds	r3, #1
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	ea42 0103 	orr.w	r1, r2, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10a      	bne.n	800120a <HAL_ADC_ConfigChannel+0x4b2>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	0e9b      	lsrs	r3, r3, #26
 80011fa:	3301      	adds	r3, #1
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	051b      	lsls	r3, r3, #20
 8001208:	e011      	b.n	800122e <HAL_ADC_ConfigChannel+0x4d6>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3301      	adds	r3, #1
 8001222:	f003 021f 	and.w	r2, r3, #31
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800122e:	430b      	orrs	r3, r1
 8001230:	e069      	b.n	8001306 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800123a:	2b00      	cmp	r3, #0
 800123c:	d107      	bne.n	800124e <HAL_ADC_ConfigChannel+0x4f6>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0e9b      	lsrs	r3, r3, #26
 8001244:	3301      	adds	r3, #1
 8001246:	069b      	lsls	r3, r3, #26
 8001248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800124c:	e00e      	b.n	800126c <HAL_ADC_ConfigChannel+0x514>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	61fb      	str	r3, [r7, #28]
  return result;
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3301      	adds	r3, #1
 8001266:	069b      	lsls	r3, r3, #26
 8001268:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <HAL_ADC_ConfigChannel+0x534>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	0e9b      	lsrs	r3, r3, #26
 800127e:	3301      	adds	r3, #1
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2101      	movs	r1, #1
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	e010      	b.n	80012ae <HAL_ADC_ConfigChannel+0x556>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	617b      	str	r3, [r7, #20]
  return result;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	ea42 0103 	orr.w	r1, r2, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10d      	bne.n	80012da <HAL_ADC_ConfigChannel+0x582>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	0e9b      	lsrs	r3, r3, #26
 80012c4:	3301      	adds	r3, #1
 80012c6:	f003 021f 	and.w	r2, r3, #31
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	3b1e      	subs	r3, #30
 80012d2:	051b      	lsls	r3, r3, #20
 80012d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d8:	e014      	b.n	8001304 <HAL_ADC_ConfigChannel+0x5ac>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	60fb      	str	r3, [r7, #12]
  return result;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	fab3 f383 	clz	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	f003 021f 	and.w	r2, r3, #31
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	3b1e      	subs	r3, #30
 80012fe:	051b      	lsls	r3, r3, #20
 8001300:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001304:	430b      	orrs	r3, r1
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	6892      	ldr	r2, [r2, #8]
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff faf8 	bl	8000900 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_ADC_ConfigChannel+0x674>)
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 808d 	beq.w	8001438 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800131e:	482c      	ldr	r0, [pc, #176]	; (80013d0 <HAL_ADC_ConfigChannel+0x678>)
 8001320:	f7ff fa56 	bl	80007d0 <LL_ADC_GetCommonPathInternalCh>
 8001324:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <HAL_ADC_ConfigChannel+0x67c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12b      	bne.n	800138a <HAL_ADC_ConfigChannel+0x632>
 8001332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d125      	bne.n	800138a <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a25      	ldr	r2, [pc, #148]	; (80013d8 <HAL_ADC_ConfigChannel+0x680>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d004      	beq.n	8001352 <HAL_ADC_ConfigChannel+0x5fa>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a23      	ldr	r2, [pc, #140]	; (80013dc <HAL_ADC_ConfigChannel+0x684>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d16f      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800135a:	4619      	mov	r1, r3
 800135c:	481c      	ldr	r0, [pc, #112]	; (80013d0 <HAL_ADC_ConfigChannel+0x678>)
 800135e:	f7ff fa24 	bl	80007aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_ADC_ConfigChannel+0x688>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	099b      	lsrs	r3, r3, #6
 8001368:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <HAL_ADC_ConfigChannel+0x68c>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	099a      	lsrs	r2, r3, #6
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800137a:	e002      	b.n	8001382 <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3b01      	subs	r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f9      	bne.n	800137c <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001388:	e053      	b.n	8001432 <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <HAL_ADC_ConfigChannel+0x690>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d12b      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x694>
 8001394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d125      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <HAL_ADC_ConfigChannel+0x680>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d004      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x65c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_ADC_ConfigChannel+0x684>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d140      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <HAL_ADC_ConfigChannel+0x678>)
 80013c0:	f7ff f9f3 	bl	80007aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013c4:	e037      	b.n	8001436 <HAL_ADC_ConfigChannel+0x6de>
 80013c6:	bf00      	nop
 80013c8:	407f0000 	.word	0x407f0000
 80013cc:	80080000 	.word	0x80080000
 80013d0:	50040300 	.word	0x50040300
 80013d4:	c7520000 	.word	0xc7520000
 80013d8:	50040000 	.word	0x50040000
 80013dc:	50040200 	.word	0x50040200
 80013e0:	20000118 	.word	0x20000118
 80013e4:	053e2d63 	.word	0x053e2d63
 80013e8:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a16      	ldr	r2, [pc, #88]	; (800144c <HAL_ADC_ConfigChannel+0x6f4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d120      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d11a      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_ADC_ConfigChannel+0x6f8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d115      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800140c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001414:	4619      	mov	r1, r3
 8001416:	480f      	ldr	r0, [pc, #60]	; (8001454 <HAL_ADC_ConfigChannel+0x6fc>)
 8001418:	f7ff f9c7 	bl	80007aa <LL_ADC_SetCommonPathInternalCh>
 800141c:	e00c      	b.n	8001438 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	f043 0220 	orr.w	r2, r3, #32
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001430:	e002      	b.n	8001438 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001432:	bf00      	nop
 8001434:	e000      	b.n	8001438 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001436:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001440:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001444:	4618      	mov	r0, r3
 8001446:	3798      	adds	r7, #152	; 0x98
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	80000001 	.word	0x80000001
 8001450:	50040000 	.word	0x50040000
 8001454:	50040300 	.word	0x50040300

08001458 <LL_ADC_IsEnabled>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <LL_ADC_IsEnabled+0x18>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <LL_ADC_IsEnabled+0x1a>
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_ADC_REG_IsConversionOngoing>:
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b04      	cmp	r3, #4
 8001490:	d101      	bne.n	8001496 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b0a1      	sub	sp, #132	; 0x84
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80014be:	2302      	movs	r3, #2
 80014c0:	e08f      	b.n	80015e2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a47      	ldr	r2, [pc, #284]	; (80015ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d102      	bne.n	80014da <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80014d4:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e001      	b.n	80014de <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10b      	bne.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	f043 0220 	orr.w	r2, r3, #32
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e072      	b.n	80015e2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ffbd 	bl	800147e <LL_ADC_REG_IsConversionOngoing>
 8001504:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ffb7 	bl	800147e <LL_ADC_REG_IsConversionOngoing>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d154      	bne.n	80015c0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001518:	2b00      	cmp	r3, #0
 800151a:	d151      	bne.n	80015c0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800151c:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800151e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d02c      	beq.n	8001582 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800153a:	035b      	lsls	r3, r3, #13
 800153c:	430b      	orrs	r3, r1
 800153e:	431a      	orrs	r2, r3
 8001540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001542:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001546:	f7ff ff87 	bl	8001458 <LL_ADC_IsEnabled>
 800154a:	4604      	mov	r4, r0
 800154c:	4828      	ldr	r0, [pc, #160]	; (80015f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800154e:	f7ff ff83 	bl	8001458 <LL_ADC_IsEnabled>
 8001552:	4603      	mov	r3, r0
 8001554:	431c      	orrs	r4, r3
 8001556:	4828      	ldr	r0, [pc, #160]	; (80015f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001558:	f7ff ff7e 	bl	8001458 <LL_ADC_IsEnabled>
 800155c:	4603      	mov	r3, r0
 800155e:	4323      	orrs	r3, r4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d137      	bne.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800156c:	f023 030f 	bic.w	r3, r3, #15
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	6811      	ldr	r1, [r2, #0]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	6892      	ldr	r2, [r2, #8]
 8001578:	430a      	orrs	r2, r1
 800157a:	431a      	orrs	r2, r3
 800157c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800157e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001580:	e028      	b.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800158c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001590:	f7ff ff62 	bl	8001458 <LL_ADC_IsEnabled>
 8001594:	4604      	mov	r4, r0
 8001596:	4816      	ldr	r0, [pc, #88]	; (80015f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001598:	f7ff ff5e 	bl	8001458 <LL_ADC_IsEnabled>
 800159c:	4603      	mov	r3, r0
 800159e:	431c      	orrs	r4, r3
 80015a0:	4815      	ldr	r0, [pc, #84]	; (80015f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80015a2:	f7ff ff59 	bl	8001458 <LL_ADC_IsEnabled>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4323      	orrs	r3, r4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d112      	bne.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80015ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80015b6:	f023 030f 	bic.w	r3, r3, #15
 80015ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80015be:	e009      	b.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	f043 0220 	orr.w	r2, r3, #32
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80015d2:	e000      	b.n	80015d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80015d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80015de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3784      	adds	r7, #132	; 0x84
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	50040000 	.word	0x50040000
 80015f0:	50040100 	.word	0x50040100
 80015f4:	50040300 	.word	0x50040300
 80015f8:	50040200 	.word	0x50040200

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e075      	b.n	800191e <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f00b fc12 	bl	800d070 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001862:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_DCMI_Init+0x108>)
 800187e:	400b      	ands	r3, r1
 8001880:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001896:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80018a2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80018ae:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80018ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80018c6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d112      	bne.n	80018fe <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7f1b      	ldrb	r3, [r3, #28]
 80018dc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7f5b      	ldrb	r3, [r3, #29]
 80018e2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80018e4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7f9b      	ldrb	r3, [r3, #30]
 80018ea:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80018ec:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7fdb      	ldrb	r3, [r3, #31]
 80018f4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80018fa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80018fc:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 021f 	orr.w	r2, r2, #31
 800190c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	ffe0f007 	.word	0xffe0f007

0800192c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0ac      	b.n	8001a98 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fc46 	bl	80021d4 <DFSDM_GetChannelFromInstance>
 8001948:	4602      	mov	r2, r0
 800194a:	4b55      	ldr	r3, [pc, #340]	; (8001aa0 <HAL_DFSDM_ChannelInit+0x174>)
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e09f      	b.n	8001a98 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f00b fcbb 	bl	800d2d4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800195e:	4b51      	ldr	r3, [pc, #324]	; (8001aa4 <HAL_DFSDM_ChannelInit+0x178>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <HAL_DFSDM_ChannelInit+0x178>)
 8001966:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001968:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <HAL_DFSDM_ChannelInit+0x178>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d125      	bne.n	80019bc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001976:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800197a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4948      	ldr	r1, [pc, #288]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a46      	ldr	r2, [pc, #280]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001990:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001994:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	791b      	ldrb	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	493f      	ldr	r1, [pc, #252]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019ba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80019ca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6819      	ldr	r1, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019da:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80019e0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 020f 	bic.w	r2, r2, #15
 80019f8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001a20:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	3b01      	subs	r3, #1
 8001a32:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f002 0207 	and.w	r2, r2, #7
 8001a4c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a78:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fba4 	bl	80021d4 <DFSDM_GetChannelFromInstance>
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_DFSDM_ChannelInit+0x174>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000210 	.word	0x20000210
 8001aa4:	2000020c 	.word	0x2000020c
 8001aa8:	40016000 	.word	0x40016000

08001aac <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0ca      	b.n	8001c7c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a66      	ldr	r2, [pc, #408]	; (8001c84 <HAL_DFSDM_FilterInit+0x1b0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d109      	bne.n	8001b04 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d003      	beq.n	8001b00 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0bb      	b.n	8001c7c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f00b fb27 	bl	800d170 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001b30:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7a1b      	ldrb	r3, [r3, #8]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7a5b      	ldrb	r3, [r3, #9]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001b94:	f023 0308 	bic.w	r3, r3, #8
 8001b98:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d108      	bne.n	8001bb4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7c1b      	ldrb	r3, [r3, #16]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d108      	bne.n	8001bce <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0210 	orr.w	r2, r2, #16
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e007      	b.n	8001bde <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0210 	bic.w	r2, r2, #16
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7c5b      	ldrb	r3, [r3, #17]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e007      	b.n	8001c08 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0220 	bic.w	r2, r2, #32
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001c16:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001c1a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6959      	ldr	r1, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c2e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001c36:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7c1a      	ldrb	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40016100 	.word	0x40016100

08001c88 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d02e      	beq.n	8001d00 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	d029      	beq.n	8001d00 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e00a      	b.n	8001cf8 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfe:	e001      	b.n	8001d04 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	75fb      	strb	r3, [r7, #23]
 8001d34:	e064      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d44:	d002      	beq.n	8001d4c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
 8001d4a:	e059      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10e      	bne.n	8001d72 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10a      	bne.n	8001d72 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d002      	beq.n	8001d72 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	75fb      	strb	r3, [r7, #23]
 8001d70:	e046      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10b      	bne.n	8001d92 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d102      	bne.n	8001d92 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	75fb      	strb	r3, [r7, #23]
 8001d90:	e036      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d004      	beq.n	8001da6 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d12a      	bne.n	8001dfc <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001dc2:	e000      	b.n	8001dc6 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001dc4:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
//    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
//                         (uint32_t) pData, Length) != HAL_OK)
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (((uint32_t)&hdfsdm_filter->Instance->FLTRDATAR) + 2), \
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	331c      	adds	r3, #28
 8001dd6:	1c99      	adds	r1, r3, #2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f000 fbac 	bl	8002538 <HAL_DMA_Start_IT>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	22ff      	movs	r2, #255	; 0xff
 8001dea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (((uint32_t)&hdfsdm_filter->Instance->FLTRDATAR) + 2), \
 8001df2:	e005      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fa43 	bl	8002280 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (((uint32_t)&hdfsdm_filter->Instance->FLTRDATAR) + 2), \
 8001dfa:	e001      	b.n	8001e00 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	08002195 	.word	0x08002195
 8001e10:	080021b1 	.word	0x080021b1
 8001e14:	08002179 	.word	0x08002179

08001e18 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d007      	beq.n	8001e3e <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d002      	beq.n	8001e3e <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e011      	b.n	8001e62 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if (HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fbd8 	bl	80025f8 <HAL_DMA_Abort>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	22ff      	movs	r2, #255	; 0xff
 8001e52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e002      	b.n	8001e62 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fa65 	bl	800232c <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00f      	beq.n	8001eae <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f95c 	bl	8002164 <HAL_DFSDM_FilterErrorCallback>
 8001eac:	e13b      	b.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00f      	beq.n	8001ed8 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f947 	bl	8002164 <HAL_DFSDM_FilterErrorCallback>
 8001ed6:	e126      	b.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d025      	beq.n	8001f2e <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f009 fe3d 	bl	800bb6c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 8114 	bne.w	8002124 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f040 810f 	bne.w	8002124 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0202 	bic.w	r2, r2, #2
 8001f14:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d101      	bne.n	8001f24 <HAL_DFSDM_IRQHandler+0xb8>
 8001f20:	2201      	movs	r2, #1
 8001f22:	e000      	b.n	8001f26 <HAL_DFSDM_IRQHandler+0xba>
 8001f24:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001f2c:	e0fa      	b.n	8002124 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d034      	beq.n	8001fa2 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d02f      	beq.n	8001fa2 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8f8 	bl	8002138 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 80e5 	bne.w	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d112      	bne.n	8001f8a <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d101      	bne.n	8001f82 <HAL_DFSDM_IRQHandler+0x116>
 8001f7e:	2201      	movs	r2, #1
 8001f80:	e000      	b.n	8001f84 <HAL_DFSDM_IRQHandler+0x118>
 8001f82:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_DFSDM_IRQHandler+0x12e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	e000      	b.n	8001f9c <HAL_DFSDM_IRQHandler+0x130>
 8001f9a:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001fa0:	e0c1      	b.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03d      	beq.n	8002028 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d038      	beq.n	8002028 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_DFSDM_IRQHandler+0x162>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_DFSDM_IRQHandler+0x164>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001fde:	e005      	b.n	8001fec <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_DFSDM_IRQHandler+0x190>
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	2b06      	cmp	r3, #6
 8001ffa:	d9f1      	bls.n	8001fe0 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_DFSDM_IRQHandler+0x1a2>
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	3308      	adds	r3, #8
 8002006:	2201      	movs	r2, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	e003      	b.n	8002016 <HAL_DFSDM_IRQHandler+0x1aa>
 800200e:	2201      	movs	r2, #1
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f893 	bl	800214c <HAL_DFSDM_FilterAwdCallback>
  {
 8002026:	e07e      	b.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a40      	ldr	r2, [pc, #256]	; (8002130 <HAL_DFSDM_IRQHandler+0x2c4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d141      	bne.n	80020b6 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03c      	beq.n	80020b6 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8002042:	2b00      	cmp	r3, #0
 8002044:	d037      	beq.n	80020b6 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	b2db      	uxtb	r3, r3
 8002054:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8002056:	e02a      	b.n	80020ae <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01f      	beq.n	80020a2 <HAL_DFSDM_IRQHandler+0x236>
 8002062:	4a34      	ldr	r2, [pc, #208]	; (8002134 <HAL_DFSDM_IRQHandler+0x2c8>)
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 800206e:	4a31      	ldr	r2, [pc, #196]	; (8002134 <HAL_DFSDM_IRQHandler+0x2c8>)
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00f      	beq.n	80020a2 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f103 0210 	add.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8002094:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_DFSDM_IRQHandler+0x2c8>)
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fd05 	bl	8001aac <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	3301      	adds	r3, #1
 80020a6:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	2b07      	cmp	r3, #7
 80020b2:	d9d1      	bls.n	8002058 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80020b4:	e037      	b.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_DFSDM_IRQHandler+0x2c4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d132      	bne.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d02d      	beq.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d028      	beq.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0e1b      	lsrs	r3, r3, #24
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80020e4:	e005      	b.n	80020f2 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	3301      	adds	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <HAL_DFSDM_IRQHandler+0x296>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d9f1      	bls.n	80020e6 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f103 0218 	add.w	r2, r3, #24
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f202 	lsl.w	r2, r1, r2
 8002112:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_DFSDM_IRQHandler+0x2c8>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fccf 	bl	8001ac0 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8002122:	e000      	b.n	8002126 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002124:	bf00      	nop
}
 8002126:	bf00      	nop
 8002128:	3730      	adds	r7, #48	; 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40016100 	.word	0x40016100
 8002134:	20000210 	.word	0x20000210

08002138 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f009 fd2c 	bl	800bbe4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f009 fce2 	bl	800bb6c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2203      	movs	r2, #3
 80021c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff ffcd 	bl	8002164 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a20      	ldr	r2, [pc, #128]	; (8002260 <DFSDM_GetChannelFromInstance+0x8c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d102      	bne.n	80021ea <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e032      	b.n	8002250 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <DFSDM_GetChannelFromInstance+0x90>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d102      	bne.n	80021f8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e02b      	b.n	8002250 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <DFSDM_GetChannelFromInstance+0x94>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d102      	bne.n	8002206 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002200:	2302      	movs	r3, #2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e024      	b.n	8002250 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <DFSDM_GetChannelFromInstance+0x98>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d102      	bne.n	8002214 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800220e:	2303      	movs	r3, #3
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	e01d      	b.n	8002250 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <DFSDM_GetChannelFromInstance+0x9c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d102      	bne.n	8002222 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800221c:	2304      	movs	r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e016      	b.n	8002250 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <DFSDM_GetChannelFromInstance+0xa0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d102      	bne.n	8002230 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800222a:	2305      	movs	r3, #5
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e00f      	b.n	8002250 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a11      	ldr	r2, [pc, #68]	; (8002278 <DFSDM_GetChannelFromInstance+0xa4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d102      	bne.n	800223e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002238:	2306      	movs	r3, #6
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e008      	b.n	8002250 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <DFSDM_GetChannelFromInstance+0xa8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d102      	bne.n	800224c <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8002246:	2307      	movs	r3, #7
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e001      	b.n	8002250 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002250:	68fb      	ldr	r3, [r7, #12]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40016000 	.word	0x40016000
 8002264:	40016020 	.word	0x40016020
 8002268:	40016040 	.word	0x40016040
 800226c:	40016060 	.word	0x40016060
 8002270:	40016080 	.word	0x40016080
 8002274:	400160a0 	.word	0x400160a0
 8002278:	400160c0 	.word	0x400160c0
 800227c:	400160e0 	.word	0x400160e0

08002280 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	2b00      	cmp	r3, #0
 800228e:	d108      	bne.n	80022a2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	e033      	b.n	800230a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022c0:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d116      	bne.n	800230a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0202 	orr.w	r2, r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <DFSDM_RegConvStart+0x84>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	e000      	b.n	8002306 <DFSDM_RegConvStart+0x86>
 8002304:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <DFSDM_RegConvStart+0x98>
 8002314:	2202      	movs	r2, #2
 8002316:	e000      	b.n	800231a <DFSDM_RegConvStart+0x9a>
 8002318:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	2b01      	cmp	r3, #1
 800234a:	d107      	bne.n	800235c <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002372:	2b04      	cmp	r3, #4
 8002374:	d116      	bne.n	80023a4 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0202 	orr.w	r2, r2, #2
 800238c:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002394:	2b01      	cmp	r3, #1
 8002396:	d102      	bne.n	800239e <DFSDM_RegConvStop+0x72>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	e000      	b.n	80023a0 <DFSDM_RegConvStop+0x74>
 800239e:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d101      	bne.n	80023b2 <DFSDM_RegConvStop+0x86>
 80023ae:	2201      	movs	r2, #1
 80023b0:	e000      	b.n	80023b4 <DFSDM_RegConvStop+0x88>
 80023b2:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e098      	b.n	800250c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <HAL_DMA_Init+0x150>)
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d80f      	bhi.n	8002406 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_DMA_Init+0x154>)
 80023ee:	4413      	add	r3, r2
 80023f0:	4a4b      	ldr	r2, [pc, #300]	; (8002520 <HAL_DMA_Init+0x158>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a48      	ldr	r2, [pc, #288]	; (8002524 <HAL_DMA_Init+0x15c>)
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
 8002404:	e00e      	b.n	8002424 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <HAL_DMA_Init+0x160>)
 800240e:	4413      	add	r3, r2
 8002410:	4a43      	ldr	r2, [pc, #268]	; (8002520 <HAL_DMA_Init+0x158>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	009a      	lsls	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a42      	ldr	r2, [pc, #264]	; (800252c <HAL_DMA_Init+0x164>)
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800247e:	d039      	beq.n	80024f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <HAL_DMA_Init+0x15c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d11a      	bne.n	80024c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <HAL_DMA_Init+0x168>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f003 031c 	and.w	r3, r3, #28
 8002496:	210f      	movs	r1, #15
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	4924      	ldr	r1, [pc, #144]	; (8002530 <HAL_DMA_Init+0x168>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_DMA_Init+0x168>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f003 031c 	and.w	r3, r3, #28
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	491d      	ldr	r1, [pc, #116]	; (8002530 <HAL_DMA_Init+0x168>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
 80024be:	e019      	b.n	80024f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024c0:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_DMA_Init+0x16c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f003 031c 	and.w	r3, r3, #28
 80024cc:	210f      	movs	r1, #15
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4917      	ldr	r1, [pc, #92]	; (8002534 <HAL_DMA_Init+0x16c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_DMA_Init+0x16c>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f003 031c 	and.w	r3, r3, #28
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	4911      	ldr	r1, [pc, #68]	; (8002534 <HAL_DMA_Init+0x16c>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40020407 	.word	0x40020407
 800251c:	bffdfff8 	.word	0xbffdfff8
 8002520:	cccccccd 	.word	0xcccccccd
 8002524:	40020000 	.word	0x40020000
 8002528:	bffdfbf8 	.word	0xbffdfbf8
 800252c:	40020400 	.word	0x40020400
 8002530:	400200a8 	.word	0x400200a8
 8002534:	400204a8 	.word	0x400204a8

08002538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Start_IT+0x20>
 8002554:	2302      	movs	r3, #2
 8002556:	e04b      	b.n	80025f0 <HAL_DMA_Start_IT+0xb8>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d13a      	bne.n	80025e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f95f 	bl	8002854 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 020e 	orr.w	r2, r2, #14
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e00f      	b.n	80025d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 020a 	orr.w	r2, r2, #10
 80025ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e005      	b.n	80025ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d008      	beq.n	8002622 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2204      	movs	r2, #4
 8002614:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e022      	b.n	8002668 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020e 	bic.w	r2, r2, #14
 8002630:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f003 021c 	and.w	r2, r3, #28
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f202 	lsl.w	r2, r1, r2
 8002654:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d005      	beq.n	8002698 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2204      	movs	r2, #4
 8002690:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e029      	b.n	80026ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 020e 	bic.w	r2, r2, #14
 80026a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f003 021c 	and.w	r2, r3, #28
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
    }
  }
  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f003 031c 	and.w	r3, r3, #28
 8002716:	2204      	movs	r2, #4
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d026      	beq.n	8002770 <HAL_DMA_IRQHandler+0x7a>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d021      	beq.n	8002770 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d107      	bne.n	800274a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0204 	bic.w	r2, r2, #4
 8002748:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f003 021c 	and.w	r2, r3, #28
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2104      	movs	r1, #4
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	2b00      	cmp	r3, #0
 8002764:	d071      	beq.n	800284a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800276e:	e06c      	b.n	800284a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f003 031c 	and.w	r3, r3, #28
 8002778:	2202      	movs	r2, #2
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02e      	beq.n	80027e2 <HAL_DMA_IRQHandler+0xec>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d029      	beq.n	80027e2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020a 	bic.w	r2, r2, #10
 80027aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f003 021c 	and.w	r2, r3, #28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2102      	movs	r1, #2
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d038      	beq.n	800284a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027e0:	e033      	b.n	800284a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f003 031c 	and.w	r3, r3, #28
 80027ea:	2208      	movs	r2, #8
 80027ec:	409a      	lsls	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d02a      	beq.n	800284c <HAL_DMA_IRQHandler+0x156>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d025      	beq.n	800284c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 020e 	bic.w	r2, r2, #14
 800280e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	f003 021c 	and.w	r2, r3, #28
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800284a:	bf00      	nop
 800284c:	bf00      	nop
}
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f003 021c 	and.w	r2, r3, #28
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b10      	cmp	r3, #16
 8002884:	d108      	bne.n	8002898 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002896:	e007      	b.n	80028a8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c2:	e166      	b.n	8002b92 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8158 	beq.w	8002b8c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x38>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b12      	cmp	r3, #18
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	6939      	ldr	r1, [r7, #16]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d00b      	beq.n	8002988 <HAL_GPIO_Init+0xd4>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d007      	beq.n	8002988 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800297c:	2b11      	cmp	r3, #17
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b12      	cmp	r3, #18
 8002986:	d130      	bne.n	80029ea <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029be:	2201      	movs	r2, #1
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 0201 	and.w	r2, r3, #1
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b2 	beq.w	8002b8c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a28:	4b61      	ldr	r3, [pc, #388]	; (8002bb0 <HAL_GPIO_Init+0x2fc>)
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2c:	4a60      	ldr	r2, [pc, #384]	; (8002bb0 <HAL_GPIO_Init+0x2fc>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6613      	str	r3, [r2, #96]	; 0x60
 8002a34:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <HAL_GPIO_Init+0x2fc>)
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a40:	4a5c      	ldr	r2, [pc, #368]	; (8002bb4 <HAL_GPIO_Init+0x300>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a6a:	d02b      	beq.n	8002ac4 <HAL_GPIO_Init+0x210>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_GPIO_Init+0x304>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d025      	beq.n	8002ac0 <HAL_GPIO_Init+0x20c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <HAL_GPIO_Init+0x308>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d01f      	beq.n	8002abc <HAL_GPIO_Init+0x208>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a50      	ldr	r2, [pc, #320]	; (8002bc0 <HAL_GPIO_Init+0x30c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d019      	beq.n	8002ab8 <HAL_GPIO_Init+0x204>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <HAL_GPIO_Init+0x310>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_GPIO_Init+0x200>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a4e      	ldr	r2, [pc, #312]	; (8002bc8 <HAL_GPIO_Init+0x314>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00d      	beq.n	8002ab0 <HAL_GPIO_Init+0x1fc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a4d      	ldr	r2, [pc, #308]	; (8002bcc <HAL_GPIO_Init+0x318>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <HAL_GPIO_Init+0x1f8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a4c      	ldr	r2, [pc, #304]	; (8002bd0 <HAL_GPIO_Init+0x31c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_GPIO_Init+0x1f4>
 8002aa4:	2307      	movs	r3, #7
 8002aa6:	e00e      	b.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	e00c      	b.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002aac:	2306      	movs	r3, #6
 8002aae:	e00a      	b.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002ab0:	2305      	movs	r3, #5
 8002ab2:	e008      	b.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	e006      	b.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e004      	b.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e002      	b.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	f002 0203 	and.w	r2, r2, #3
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	4093      	lsls	r3, r2
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ad6:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <HAL_GPIO_Init+0x300>)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_GPIO_Init+0x320>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b08:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <HAL_GPIO_Init+0x320>)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_GPIO_Init+0x320>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b32:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <HAL_GPIO_Init+0x320>)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b38:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <HAL_GPIO_Init+0x320>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_GPIO_Init+0x320>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_GPIO_Init+0x320>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <HAL_GPIO_Init+0x320>)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f47f ae91 	bne.w	80028c4 <HAL_GPIO_Init+0x10>
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	48000800 	.word	0x48000800
 8002bc0:	48000c00 	.word	0x48000c00
 8002bc4:	48001000 	.word	0x48001000
 8002bc8:	48001400 	.word	0x48001400
 8002bcc:	48001800 	.word	0x48001800
 8002bd0:	48001c00 	.word	0x48001c00
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c20:	887a      	ldrh	r2, [r7, #2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002c26:	e002      	b.n	8002c2e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e081      	b.n	8002d50 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f00a fba3 	bl	800d3ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2224      	movs	r2, #36	; 0x24
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d107      	bne.n	8002cb4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d104      	bne.n	8002cd4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	ea42 0103 	orr.w	r1, r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	021a      	lsls	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69d9      	ldr	r1, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1a      	ldr	r2, [r3, #32]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d138      	bne.n	8002de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e032      	b.n	8002de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	; 0x24
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d139      	bne.n	8002e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e033      	b.n	8002e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2224      	movs	r2, #36	; 0x24
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e88:	b08f      	sub	sp, #60	; 0x3c
 8002e8a:	af0a      	add	r7, sp, #40	; 0x28
 8002e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e116      	b.n	80030c6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f00a ffd8 	bl	800de68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f006 f997 	bl	800920a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	687e      	ldr	r6, [r7, #4]
 8002ee4:	466d      	mov	r5, sp
 8002ee6:	f106 0410 	add.w	r4, r6, #16
 8002eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002efa:	1d33      	adds	r3, r6, #4
 8002efc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efe:	6838      	ldr	r0, [r7, #0]
 8002f00:	f006 f884 	bl	800900c <USB_CoreInit>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0d7      	b.n	80030c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f006 f985 	bl	800922c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e04a      	b.n	8002fbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	333d      	adds	r3, #61	; 0x3d
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	333c      	adds	r3, #60	; 0x3c
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	b298      	uxth	r0, r3
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	3342      	adds	r3, #66	; 0x42
 8002f64:	4602      	mov	r2, r0
 8002f66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	333f      	adds	r3, #63	; 0x3f
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3344      	adds	r3, #68	; 0x44
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3348      	adds	r3, #72	; 0x48
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3350      	adds	r3, #80	; 0x50
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3af      	bcc.n	8002f28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	e044      	b.n	8003058 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	3301      	adds	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	d3b5      	bcc.n	8002fce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	687e      	ldr	r6, [r7, #4]
 800306a:	466d      	mov	r5, sp
 800306c:	f106 0410 	add.w	r4, r6, #16
 8003070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003078:	e894 0003 	ldmia.w	r4, {r0, r1}
 800307c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003080:	1d33      	adds	r3, r6, #4
 8003082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003084:	6838      	ldr	r0, [r7, #0]
 8003086:	f006 f8fb 	bl	8009280 <USB_DevInit>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e014      	b.n	80030c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 ff3f 	bl	8003f38 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f007 f812 	bl	800a0e8 <USB_DevDisconnect>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_PCD_Start+0x1c>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e01c      	b.n	8003124 <HAL_PCD_Start+0x56>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f006 ffd4 	bl	800a0b8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f006 f867 	bl	80091e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b08d      	sub	sp, #52	; 0x34
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f007 f879 	bl	800a23e <USB_GetMode>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 836b 	bne.w	800382a <HAL_PCD_IRQHandler+0x6fe>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f006 ffdd 	bl	800a118 <USB_ReadInterrupts>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8361 	beq.w	8003828 <HAL_PCD_IRQHandler+0x6fc>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f006 ffd4 	bl	800a118 <USB_ReadInterrupts>
 8003170:	4603      	mov	r3, r0
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d107      	bne.n	800318a <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 0202 	and.w	r2, r2, #2
 8003188:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f006 ffc2 	bl	800a118 <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800319e:	d16e      	bne.n	800327e <HAL_PCD_IRQHandler+0x152>
    {
      epnum = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f006 ffc8 	bl	800a13e <USB_ReadDevAllOutEpInterrupt>
 80031ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031b0:	e062      	b.n	8003278 <HAL_PCD_IRQHandler+0x14c>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d057      	beq.n	800326c <HAL_PCD_IRQHandler+0x140>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f006 ffed 	bl	800a1a6 <USB_ReadDevOutEPInterrupt>
 80031cc:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00c      	beq.n	80031f2 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	2301      	movs	r3, #1
 80031e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fdc9 	bl	8003d84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fe0e 	bl	8003e20 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	461a      	mov	r2, r3
 8003212:	2308      	movs	r3, #8
 8003214:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	2310      	movs	r3, #16
 8003230:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_PCD_IRQHandler+0x122>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	2320      	movs	r3, #32
 800324c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_PCD_IRQHandler+0x140>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003264:	461a      	mov	r2, r3
 8003266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800326a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	3301      	adds	r3, #1
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	2b00      	cmp	r3, #0
 800327c:	d199      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f006 ff48 	bl	800a118 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003292:	f040 8087 	bne.w	80033a4 <HAL_PCD_IRQHandler+0x278>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f006 ff69 	bl	800a172 <USB_ReadDevAllInEpInterrupt>
 80032a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032a6:	e07a      	b.n	800339e <HAL_PCD_IRQHandler+0x272>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d06f      	beq.n	8003392 <HAL_PCD_IRQHandler+0x266>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f006 ff90 	bl	800a1e2 <USB_ReadDevInEPInterrupt>
 80032c2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d020      	beq.n	8003310 <HAL_PCD_IRQHandler+0x1e4>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	2201      	movs	r2, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69f9      	ldr	r1, [r7, #28]
 80032ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ee:	4013      	ands	r3, r2
 80032f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fe:	461a      	mov	r2, r3
 8003300:	2301      	movs	r3, #1
 8003302:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f00a fe3f 	bl	800df8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_PCD_IRQHandler+0x200>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003326:	461a      	mov	r2, r3
 8003328:	2308      	movs	r3, #8
 800332a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_PCD_IRQHandler+0x21c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003342:	461a      	mov	r2, r3
 8003344:	2310      	movs	r3, #16
 8003346:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_PCD_IRQHandler+0x238>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335e:	461a      	mov	r2, r3
 8003360:	2340      	movs	r3, #64	; 0x40
 8003362:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_PCD_IRQHandler+0x254>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337a:	461a      	mov	r2, r3
 800337c:	2302      	movs	r3, #2
 800337e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_PCD_IRQHandler+0x266>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800338a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fc71 	bl	8003c74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	3301      	adds	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d181      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x17c>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f006 feb5 	bl	800a118 <USB_ReadInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033b8:	d122      	bne.n	8003400 <HAL_PCD_IRQHandler+0x2d4>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d108      	bne.n	80033ea <HAL_PCD_IRQHandler+0x2be>
      {
        hpcd->LPM_State = LPM_L0;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033e0:	2100      	movs	r1, #0
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f00b f8f0 	bl	800e5c8 <HAL_PCDEx_LPM_Callback>
 80033e8:	e002      	b.n	80033f0 <HAL_PCD_IRQHandler+0x2c4>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f00a fe3c 	bl	800e068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80033fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f006 fe87 	bl	800a118 <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003414:	d112      	bne.n	800343c <HAL_PCD_IRQHandler+0x310>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <HAL_PCD_IRQHandler+0x300>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f00a fdf8 	bl	800e01c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800343a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f006 fe69 	bl	800a118 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800344c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003450:	d121      	bne.n	8003496 <HAL_PCD_IRQHandler+0x36a>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003460:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_PCD_IRQHandler+0x364>
      {
        hpcd->LPM_State = LPM_L1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003486:	2101      	movs	r1, #1
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f00b f89d 	bl	800e5c8 <HAL_PCDEx_LPM_Callback>
 800348e:	e002      	b.n	8003496 <HAL_PCD_IRQHandler+0x36a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f00a fdc3 	bl	800e01c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f006 fe3c 	bl	800a118 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	f040 80a5 	bne.w	80035f8 <HAL_PCD_IRQHandler+0x4cc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2110      	movs	r1, #16
 80034c8:	4618      	mov	r0, r3
 80034ca:	f006 f81b 	bl	8009504 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d2:	e036      	b.n	8003542 <HAL_PCD_IRQHandler+0x416>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	461a      	mov	r2, r3
 80034e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f8:	0151      	lsls	r1, r2, #5
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	440a      	add	r2, r1
 80034fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003506:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	461a      	mov	r2, r3
 8003516:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800351a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	440a      	add	r2, r1
 8003532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800353a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	3301      	adds	r3, #1
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	d3c3      	bcc.n	80034d4 <HAL_PCD_IRQHandler+0x3a8>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800355a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800355e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <HAL_PCD_IRQHandler+0x46a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003578:	f043 030b 	orr.w	r3, r3, #11
 800357c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800358e:	f043 030b 	orr.w	r3, r3, #11
 8003592:	6453      	str	r3, [r2, #68]	; 0x44
 8003594:	e015      	b.n	80035c2 <HAL_PCD_IRQHandler+0x496>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80035ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035bc:	f043 030b 	orr.w	r3, r3, #11
 80035c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80035d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f006 fe6e 	bl	800a2c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f006 fd8b 	bl	800a118 <USB_ReadInterrupts>
 8003602:	4603      	mov	r3, r0
 8003604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360c:	d124      	bne.n	8003658 <HAL_PCD_IRQHandler+0x52c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f006 fe21 	bl	800a25a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f005 ffd2 	bl	80095c6 <USB_GetDevSpeed>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681c      	ldr	r4, [r3, #0]
 800362e:	f001 fb63 	bl	8004cf8 <HAL_RCC_GetHCLKFreq>
 8003632:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	4620      	mov	r0, r4
 800363e:	f005 fd37 	bl	80090b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f00a fccb 	bl	800dfde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003656:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f006 fd5b 	bl	800a118 <USB_ReadInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d161      	bne.n	8003730 <HAL_PCD_IRQHandler+0x604>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0210 	bic.w	r2, r2, #16
 800367a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	3304      	adds	r3, #4
 800369a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	0c5b      	lsrs	r3, r3, #17
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d124      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x5c6>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d035      	beq.n	8003720 <HAL_PCD_IRQHandler+0x5f4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	6a38      	ldr	r0, [r7, #32]
 80036c8:	f006 fbd3 	bl	8009e72 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d8:	441a      	add	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ea:	441a      	add	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	619a      	str	r2, [r3, #24]
 80036f0:	e016      	b.n	8003720 <HAL_PCD_IRQHandler+0x5f4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	0c5b      	lsrs	r3, r3, #17
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d110      	bne.n	8003720 <HAL_PCD_IRQHandler+0x5f4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003704:	2208      	movs	r2, #8
 8003706:	4619      	mov	r1, r3
 8003708:	6a38      	ldr	r0, [r7, #32]
 800370a:	f006 fbb2 	bl	8009e72 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800371a:	441a      	add	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0210 	orr.w	r2, r2, #16
 800372e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f006 fcef 	bl	800a118 <USB_ReadInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b08      	cmp	r3, #8
 8003742:	d10a      	bne.n	800375a <HAL_PCD_IRQHandler+0x62e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f00a fc3c 	bl	800dfc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f002 0208 	and.w	r2, r2, #8
 8003758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f006 fcda 	bl	800a118 <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376e:	d10d      	bne.n	800378c <HAL_PCD_IRQHandler+0x660>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f00a fcb0 	bl	800e0dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800378a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f006 fcc1 	bl	800a118 <USB_ReadInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037a0:	d10d      	bne.n	80037be <HAL_PCD_IRQHandler+0x692>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f00a fc85 	bl	800e0b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f006 fca8 	bl	800a118 <USB_ReadInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d10a      	bne.n	80037ea <HAL_PCD_IRQHandler+0x6be>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f00a fc93 	bl	800e100 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f006 fc92 	bl	800a118 <USB_ReadInterrupts>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d115      	bne.n	800382a <HAL_PCD_IRQHandler+0x6fe>
    {
      temp = hpcd->Instance->GOTGINT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_PCD_IRQHandler+0x6ea>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f00a fc83 	bl	800e11c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e000      	b.n	800382a <HAL_PCD_IRQHandler+0x6fe>
      return;
 8003828:	bf00      	nop
    }
  }
}
 800382a:	3734      	adds	r7, #52	; 0x34
 800382c:	46bd      	mov	sp, r7
 800382e:	bd90      	pop	{r4, r7, pc}

08003830 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_PCD_SetAddress+0x1a>
 8003846:	2302      	movs	r3, #2
 8003848:	e013      	b.n	8003872 <HAL_PCD_SetAddress+0x42>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f006 fc02 	bl	800a06c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	4608      	mov	r0, r1
 8003884:	4611      	mov	r1, r2
 8003886:	461a      	mov	r2, r3
 8003888:	4603      	mov	r3, r0
 800388a:	70fb      	strb	r3, [r7, #3]
 800388c:	460b      	mov	r3, r1
 800388e:	803b      	strh	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	da0f      	bge.n	80038c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 020f 	and.w	r2, r3, #15
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3338      	adds	r3, #56	; 0x38
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	3304      	adds	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	705a      	strb	r2, [r3, #1]
 80038be:	e00f      	b.n	80038e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	3304      	adds	r3, #4
 80038d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038ec:	883a      	ldrh	r2, [r7, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	78ba      	ldrb	r2, [r7, #2]
 80038f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800390a:	78bb      	ldrb	r3, [r7, #2]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d102      	bne.n	8003916 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_PCD_EP_Open+0xaa>
 8003920:	2302      	movs	r3, #2
 8003922:	e00e      	b.n	8003942 <HAL_PCD_EP_Open+0xc8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68f9      	ldr	r1, [r7, #12]
 8003932:	4618      	mov	r0, r3
 8003934:	f005 fe66 	bl	8009604 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003940:	7afb      	ldrb	r3, [r7, #11]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800395a:	2b00      	cmp	r3, #0
 800395c:	da0f      	bge.n	800397e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	3338      	adds	r3, #56	; 0x38
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	705a      	strb	r2, [r3, #1]
 800397c:	e00f      	b.n	800399e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	f003 020f 	and.w	r2, r3, #15
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4413      	add	r3, r2
 8003994:	3304      	adds	r3, #4
 8003996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_PCD_EP_Close+0x6e>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e00e      	b.n	80039d6 <HAL_PCD_EP_Close+0x8c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68f9      	ldr	r1, [r7, #12]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f005 fea4 	bl	8009714 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	460b      	mov	r3, r1
 80039ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ee:	7afb      	ldrb	r3, [r7, #11]
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	3304      	adds	r3, #4
 8003a06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a20:	7afb      	ldrb	r3, [r7, #11]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f006 f8c9 	bl	8009bd4 <USB_EP0StartXfer>
 8003a42:	e005      	b.n	8003a50 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f005 fee6 	bl	800981c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 020f 	and.w	r2, r3, #15
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a7c:	681b      	ldr	r3, [r3, #0]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	460b      	mov	r3, r1
 8003a98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9a:	7afb      	ldrb	r3, [r7, #11]
 8003a9c:	f003 020f 	and.w	r2, r3, #15
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	3338      	adds	r3, #56	; 0x38
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	3304      	adds	r3, #4
 8003ab0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ad6:	7afb      	ldrb	r3, [r7, #11]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6979      	ldr	r1, [r7, #20]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f006 f874 	bl	8009bd4 <USB_EP0StartXfer>
 8003aec:	e005      	b.n	8003afa <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6979      	ldr	r1, [r7, #20]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f005 fe91 	bl	800981c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d901      	bls.n	8003b22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e04e      	b.n	8003bc0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da0f      	bge.n	8003b4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	; 0x38
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	705a      	strb	r2, [r3, #1]
 8003b48:	e00d      	b.n	8003b66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_PCD_EP_SetStall+0x82>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e01c      	b.n	8003bc0 <HAL_PCD_EP_SetStall+0xbc>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f006 f995 	bl	8009ec4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d108      	bne.n	8003bb6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f006 fb87 	bl	800a2c4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d901      	bls.n	8003be6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e042      	b.n	8003c6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da0f      	bge.n	8003c0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	3338      	adds	r3, #56	; 0x38
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	3304      	adds	r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	705a      	strb	r2, [r3, #1]
 8003c0c:	e00f      	b.n	8003c2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	f003 020f 	and.w	r2, r3, #15
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_PCD_EP_ClrStall+0x86>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e00e      	b.n	8003c6c <HAL_PCD_EP_ClrStall+0xa4>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f006 f99f 	bl	8009fa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	3338      	adds	r3, #56	; 0x38
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d901      	bls.n	8003cac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e067      	b.n	8003d7c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d902      	bls.n	8003cc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	3303      	adds	r3, #3
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd0:	e026      	b.n	8003d20 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d902      	bls.n	8003cee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3303      	adds	r3, #3
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68d9      	ldr	r1, [r3, #12]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	f006 f884 	bl	8009e10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	441a      	add	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	441a      	add	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d809      	bhi.n	8003d4a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d203      	bcs.n	8003d4a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1c3      	bne.n	8003cd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d811      	bhi.n	8003d7a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	6939      	ldr	r1, [r7, #16]
 8003d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d76:	4013      	ands	r3, r2
 8003d78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	333c      	adds	r3, #60	; 0x3c
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <PCD_EP_OutXfrComplete_int+0x98>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d124      	bne.n	8003e04 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd6:	6093      	str	r3, [r2, #8]
 8003dd8:	e01a      	b.n	8003e10 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df0:	461a      	mov	r2, r3
 8003df2:	2320      	movs	r3, #32
 8003df4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f00a f8ab 	bl	800df58 <HAL_PCD_DataOutStageCallback>
 8003e02:	e005      	b.n	8003e10 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f00a f8a4 	bl	800df58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	4f54310a 	.word	0x4f54310a

08003e20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	333c      	adds	r3, #60	; 0x3c
 8003e38:	3304      	adds	r3, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	60bb      	str	r3, [r7, #8]


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <PCD_EP_OutSetupPacket_int+0x64>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10e      	bne.n	8003e74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f00a f85d 	bl	800df34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	4f54310a 	.word	0x4f54310a

08003e88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	70fb      	strb	r3, [r7, #3]
 8003e94:	4613      	mov	r3, r2
 8003e96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d107      	bne.n	8003eb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ea6:	883b      	ldrh	r3, [r7, #0]
 8003ea8:	0419      	lsls	r1, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb4:	e028      	b.n	8003f08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e00d      	b.n	8003ee6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	3340      	adds	r3, #64	; 0x40
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3ec      	bcc.n	8003eca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ef0:	883b      	ldrh	r3, [r7, #0]
 8003ef2:	0418      	lsls	r0, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6819      	ldr	r1, [r3, #0]
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	4302      	orrs	r2, r0
 8003f00:	3340      	adds	r3, #64	; 0x40
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	f043 0303 	orr.w	r3, r3, #3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40007000 	.word	0x40007000

08003fa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40007000 	.word	0x40007000

08003fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fca:	d130      	bne.n	800402e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fcc:	4b23      	ldr	r3, [pc, #140]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd8:	d038      	beq.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2232      	movs	r2, #50	; 0x32
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	0c9b      	lsrs	r3, r3, #18
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004000:	e002      	b.n	8004008 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b01      	subs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004014:	d102      	bne.n	800401c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f2      	bne.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004028:	d110      	bne.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e00f      	b.n	800404e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d007      	beq.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004044:	4a05      	ldr	r2, [pc, #20]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40007000 	.word	0x40007000
 8004060:	20000118 	.word	0x20000118
 8004064:	431bde83 	.word	0x431bde83

08004068 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_PWREx_EnableVddUSB+0x1c>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a04      	ldr	r2, [pc, #16]	; (8004084 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004076:	6053      	str	r3, [r2, #4]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40007000 	.word	0x40007000

08004088 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004096:	6053      	str	r3, [r2, #4]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40007000 	.word	0x40007000

080040a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7fc fb3a 	bl	8000728 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e075      	b.n	80041ac <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_QSPI_Init+0x28>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e06d      	b.n	80041ac <HAL_QSPI_Init+0x104>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f009 fadf 	bl	800d6b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80040f2:	f241 3188 	movw	r1, #5000	; 0x1388
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f85e 	bl	80041b8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	3b01      	subs	r3, #1
 800410c:	021a      	lsls	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	2120      	movs	r1, #32
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f856 	bl	80041d4 <QSPI_WaitFlagStateUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800412c:	7afb      	ldrb	r3, [r7, #11]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d137      	bne.n	80041a2 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800413c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6852      	ldr	r2, [r2, #4]
 8004144:	0611      	lsls	r1, r2, #24
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68d2      	ldr	r2, [r2, #12]
 800414a:	4311      	orrs	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	69d2      	ldr	r2, [r2, #28]
 8004150:	4311      	orrs	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6a12      	ldr	r2, [r2, #32]
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	430b      	orrs	r3, r1
 800415e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <HAL_QSPI_Init+0x10c>)
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6912      	ldr	r2, [r2, #16]
 800416e:	0411      	lsls	r1, r2, #16
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6952      	ldr	r2, [r2, #20]
 8004174:	4311      	orrs	r1, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6992      	ldr	r2, [r2, #24]
 800417a:	4311      	orrs	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	430b      	orrs	r3, r1
 8004182:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80041aa:	7afb      	ldrb	r3, [r7, #11]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	ffe0f8fe 	.word	0xffe0f8fe

080041b8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041e4:	e01a      	b.n	800421c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ec:	d016      	beq.n	800421c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fc fa9b 	bl	8000728 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2204      	movs	r2, #4
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	f043 0201 	orr.w	r2, r3, #1
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e00e      	b.n	800423a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	429a      	cmp	r2, r3
 8004236:	d1d6      	bne.n	80041e6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e3db      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004256:	4ba4      	ldr	r3, [pc, #656]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004260:	4ba1      	ldr	r3, [pc, #644]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80e1 	beq.w	800443a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_RCC_OscConfig+0x4a>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b0c      	cmp	r3, #12
 8004282:	f040 8088 	bne.w	8004396 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b01      	cmp	r3, #1
 800428a:	f040 8084 	bne.w	8004396 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800428e:	4b96      	ldr	r3, [pc, #600]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_RCC_OscConfig+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e3b3      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1a      	ldr	r2, [r3, #32]
 80042aa:	4b8f      	ldr	r3, [pc, #572]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_RCC_OscConfig+0x7c>
 80042b6:	4b8c      	ldr	r3, [pc, #560]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042be:	e005      	b.n	80042cc <HAL_RCC_OscConfig+0x88>
 80042c0:	4b89      	ldr	r3, [pc, #548]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80042c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d223      	bcs.n	8004318 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fd47 	bl	8004d68 <RCC_SetFlashLatencyFromMSIRange>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e394      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042e4:	4b80      	ldr	r3, [pc, #512]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a7f      	ldr	r2, [pc, #508]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80042ea:	f043 0308 	orr.w	r3, r3, #8
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	4b7d      	ldr	r3, [pc, #500]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	497a      	ldr	r1, [pc, #488]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004302:	4b79      	ldr	r3, [pc, #484]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	4975      	ldr	r1, [pc, #468]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004312:	4313      	orrs	r3, r2
 8004314:	604b      	str	r3, [r1, #4]
 8004316:	e022      	b.n	800435e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004318:	4b73      	ldr	r3, [pc, #460]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a72      	ldr	r2, [pc, #456]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 800431e:	f043 0308 	orr.w	r3, r3, #8
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b70      	ldr	r3, [pc, #448]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	496d      	ldr	r1, [pc, #436]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004336:	4b6c      	ldr	r3, [pc, #432]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	4968      	ldr	r1, [pc, #416]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fd0a 	bl	8004d68 <RCC_SetFlashLatencyFromMSIRange>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e357      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800435e:	f000 fc41 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004362:	4601      	mov	r1, r0
 8004364:	4b60      	ldr	r3, [pc, #384]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	4a5f      	ldr	r2, [pc, #380]	; (80044ec <HAL_RCC_OscConfig+0x2a8>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	fa21 f303 	lsr.w	r3, r1, r3
 800437a:	4a5d      	ldr	r2, [pc, #372]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800437e:	4b5d      	ldr	r3, [pc, #372]	; (80044f4 <HAL_RCC_OscConfig+0x2b0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc f984 	bl	8000690 <HAL_InitTick>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d052      	beq.n	8004438 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	e33b      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d032      	beq.n	8004404 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800439e:	4b52      	ldr	r3, [pc, #328]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a51      	ldr	r2, [pc, #324]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043aa:	f7fc f9bd 	bl	8000728 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043b2:	f7fc f9b9 	bl	8000728 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e324      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c4:	4b48      	ldr	r3, [pc, #288]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d0:	4b45      	ldr	r3, [pc, #276]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a44      	ldr	r2, [pc, #272]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043d6:	f043 0308 	orr.w	r3, r3, #8
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b42      	ldr	r3, [pc, #264]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	493f      	ldr	r1, [pc, #252]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ee:	4b3e      	ldr	r3, [pc, #248]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	493a      	ldr	r1, [pc, #232]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
 8004402:	e01a      	b.n	800443a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004404:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a37      	ldr	r2, [pc, #220]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004410:	f7fc f98a 	bl	8000728 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004418:	f7fc f986 	bl	8000728 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e2f1      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800442a:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x1d4>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d074      	beq.n	8004530 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d005      	beq.n	8004458 <HAL_RCC_OscConfig+0x214>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d10e      	bne.n	8004470 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d10b      	bne.n	8004470 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d064      	beq.n	800452e <HAL_RCC_OscConfig+0x2ea>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d160      	bne.n	800452e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e2ce      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d106      	bne.n	8004488 <HAL_RCC_OscConfig+0x244>
 800447a:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1a      	ldr	r2, [pc, #104]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e01d      	b.n	80044c4 <HAL_RCC_OscConfig+0x280>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x268>
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 8004498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0x280>
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0d      	ldr	r2, [pc, #52]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_RCC_OscConfig+0x2a4>)
 80044be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01c      	beq.n	8004506 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fc f92c 	bl	8000728 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d2:	e011      	b.n	80044f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fc f928 	bl	8000728 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d90a      	bls.n	80044f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e293      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	0801051c 	.word	0x0801051c
 80044f0:	20000118 	.word	0x20000118
 80044f4:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f8:	4bae      	ldr	r3, [pc, #696]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0e7      	beq.n	80044d4 <HAL_RCC_OscConfig+0x290>
 8004504:	e014      	b.n	8004530 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fc f90f 	bl	8000728 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450e:	f7fc f90b 	bl	8000728 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b64      	cmp	r3, #100	; 0x64
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e276      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004520:	4ba4      	ldr	r3, [pc, #656]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x2ca>
 800452c:	e000      	b.n	8004530 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d060      	beq.n	80045fe <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b04      	cmp	r3, #4
 8004540:	d005      	beq.n	800454e <HAL_RCC_OscConfig+0x30a>
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b0c      	cmp	r3, #12
 8004546:	d119      	bne.n	800457c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d116      	bne.n	800457c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454e:	4b99      	ldr	r3, [pc, #612]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_RCC_OscConfig+0x322>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e253      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004566:	4b93      	ldr	r3, [pc, #588]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	498f      	ldr	r1, [pc, #572]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800457a:	e040      	b.n	80045fe <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d023      	beq.n	80045cc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004584:	4b8b      	ldr	r3, [pc, #556]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a8a      	ldr	r2, [pc, #552]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 800458a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fc f8ca 	bl	8000728 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004598:	f7fc f8c6 	bl	8000728 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e231      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045aa:	4b82      	ldr	r3, [pc, #520]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b7f      	ldr	r3, [pc, #508]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	497b      	ldr	r1, [pc, #492]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
 80045ca:	e018      	b.n	80045fe <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045cc:	4b79      	ldr	r3, [pc, #484]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a78      	ldr	r2, [pc, #480]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80045d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fc f8a6 	bl	8000728 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e0:	f7fc f8a2 	bl	8000728 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e20d      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f2:	4b70      	ldr	r3, [pc, #448]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03c      	beq.n	8004684 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01c      	beq.n	800464c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004612:	4b68      	ldr	r3, [pc, #416]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004618:	4a66      	ldr	r2, [pc, #408]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fc f881 	bl	8000728 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462a:	f7fc f87d 	bl	8000728 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e1e8      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463c:	4b5d      	ldr	r3, [pc, #372]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ef      	beq.n	800462a <HAL_RCC_OscConfig+0x3e6>
 800464a:	e01b      	b.n	8004684 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004652:	4a58      	ldr	r2, [pc, #352]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fc f864 	bl	8000728 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004664:	f7fc f860 	bl	8000728 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e1cb      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004676:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ef      	bne.n	8004664 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a5 	beq.w	80047dc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004696:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	4b44      	ldr	r3, [pc, #272]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	4a43      	ldr	r2, [pc, #268]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6593      	str	r3, [r2, #88]	; 0x58
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046be:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <HAL_RCC_OscConfig+0x574>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d118      	bne.n	80046fc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCC_OscConfig+0x574>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3a      	ldr	r2, [pc, #232]	; (80047b8 <HAL_RCC_OscConfig+0x574>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fc f827 	bl	8000728 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fc f823 	bl	8000728 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e18e      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f0:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_RCC_OscConfig+0x574>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d108      	bne.n	8004716 <HAL_RCC_OscConfig+0x4d2>
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	4a2a      	ldr	r2, [pc, #168]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004714:	e024      	b.n	8004760 <HAL_RCC_OscConfig+0x51c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d110      	bne.n	8004740 <HAL_RCC_OscConfig+0x4fc>
 800471e:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	4a23      	ldr	r2, [pc, #140]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472e:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800473e:	e00f      	b.n	8004760 <HAL_RCC_OscConfig+0x51c>
 8004740:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d016      	beq.n	8004796 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fb ffde 	bl	8000728 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fb ffda 	bl	8000728 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e143      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_OscConfig+0x570>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ed      	beq.n	8004770 <HAL_RCC_OscConfig+0x52c>
 8004794:	e019      	b.n	80047ca <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	f7fb ffc7 	bl	8000728 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800479c:	e00e      	b.n	80047bc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7fb ffc3 	bl	8000728 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d905      	bls.n	80047bc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e12c      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047bc:	4b96      	ldr	r3, [pc, #600]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e9      	bne.n	800479e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ca:	7ffb      	ldrb	r3, [r7, #31]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d105      	bne.n	80047dc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d0:	4b91      	ldr	r3, [pc, #580]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	4a90      	ldr	r2, [pc, #576]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80047d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d03c      	beq.n	8004862 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01c      	beq.n	800482a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047f0:	4b89      	ldr	r3, [pc, #548]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80047f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f6:	4a88      	ldr	r2, [pc, #544]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fb ff92 	bl	8000728 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004808:	f7fb ff8e 	bl	8000728 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0f9      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 800481c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ef      	beq.n	8004808 <HAL_RCC_OscConfig+0x5c4>
 8004828:	e01b      	b.n	8004862 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800482a:	4b7b      	ldr	r3, [pc, #492]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 800482c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004830:	4a79      	ldr	r2, [pc, #484]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483a:	f7fb ff75 	bl	8000728 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004842:	f7fb ff71 	bl	8000728 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0dc      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004854:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1ef      	bne.n	8004842 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80d0 	beq.w	8004a0c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b0c      	cmp	r3, #12
 8004870:	f000 808d 	beq.w	800498e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	2b02      	cmp	r3, #2
 800487a:	d15a      	bne.n	8004932 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487c:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fb ff4e 	bl	8000728 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004890:	f7fb ff4a 	bl	8000728 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0b5      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a2:	4b5d      	ldr	r3, [pc, #372]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ae:	4b5a      	ldr	r3, [pc, #360]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	4b5a      	ldr	r3, [pc, #360]	; (8004a1c <HAL_RCC_OscConfig+0x7d8>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048be:	3a01      	subs	r2, #1
 80048c0:	0112      	lsls	r2, r2, #4
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048c8:	0212      	lsls	r2, r2, #8
 80048ca:	4311      	orrs	r1, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048d0:	0852      	lsrs	r2, r2, #1
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0552      	lsls	r2, r2, #21
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048dc:	0852      	lsrs	r2, r2, #1
 80048de:	3a01      	subs	r2, #1
 80048e0:	0652      	lsls	r2, r2, #25
 80048e2:	4311      	orrs	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e8:	06d2      	lsls	r2, r2, #27
 80048ea:	430a      	orrs	r2, r1
 80048ec:	494a      	ldr	r1, [pc, #296]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f2:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a48      	ldr	r2, [pc, #288]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 80048f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048fe:	4b46      	ldr	r3, [pc, #280]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4a45      	ldr	r2, [pc, #276]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004908:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fb ff0d 	bl	8000728 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004912:	f7fb ff09 	bl	8000728 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e074      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004924:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x6ce>
 8004930:	e06c      	b.n	8004a0c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004932:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a38      	ldr	r2, [pc, #224]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800493e:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800494a:	4b33      	ldr	r3, [pc, #204]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	4a32      	ldr	r2, [pc, #200]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004950:	f023 0303 	bic.w	r3, r3, #3
 8004954:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004956:	4b30      	ldr	r3, [pc, #192]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4a2f      	ldr	r2, [pc, #188]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 800495c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004964:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fb fedf 	bl	8000728 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496e:	f7fb fedb 	bl	8000728 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e046      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f0      	bne.n	800496e <HAL_RCC_OscConfig+0x72a>
 800498c:	e03e      	b.n	8004a0c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e039      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <HAL_RCC_OscConfig+0x7d4>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f003 0203 	and.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d12c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	3b01      	subs	r3, #1
 80049ba:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d123      	bne.n	8004a08 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d11b      	bne.n	8004a08 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d113      	bne.n	8004a08 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d109      	bne.n	8004a08 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	3b01      	subs	r3, #1
 8004a02:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	019d808c 	.word	0x019d808c

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0c8      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b66      	ldr	r3, [pc, #408]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d910      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b63      	ldr	r3, [pc, #396]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4961      	ldr	r1, [pc, #388]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b0      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d04c      	beq.n	8004b0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a78:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d121      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e09e      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a90:	4b50      	ldr	r3, [pc, #320]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d115      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e092      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa8:	4b4a      	ldr	r3, [pc, #296]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e086      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab8:	4b46      	ldr	r3, [pc, #280]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e07e      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 0203 	bic.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	493f      	ldr	r1, [pc, #252]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ada:	f7fb fe25 	bl	8000728 <HAL_GetTick>
 8004ade:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae2:	f7fb fe21 	bl	8000728 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e066      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af8:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 020c 	and.w	r2, r3, #12
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d1eb      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	492c      	ldr	r1, [pc, #176]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d210      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 0207 	bic.w	r2, r3, #7
 8004b3e:	4924      	ldr	r1, [pc, #144]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e036      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4918      	ldr	r1, [pc, #96]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4910      	ldr	r1, [pc, #64]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b96:	f000 f825 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	5cd3      	ldrb	r3, [r2, r3]
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	fa21 f303 	lsr.w	r3, r1, r3
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fb fd68 	bl	8000690 <HAL_InitTick>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40022000 	.word	0x40022000
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	0801051c 	.word	0x0801051c
 8004bdc:	20000118 	.word	0x20000118
 8004be0:	20000000 	.word	0x20000000

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf2:	4b3d      	ldr	r3, [pc, #244]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bfc:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x34>
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d121      	bne.n	8004c56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d11e      	bne.n	8004c56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c18:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c24:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	e005      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c34:	4b2c      	ldr	r3, [pc, #176]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c40:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d102      	bne.n	8004c62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e004      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c68:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d133      	bne.n	8004cda <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0xa4>
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0xaa>
 8004c86:	e005      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c8a:	617b      	str	r3, [r7, #20]
      break;
 8004c8c:	e005      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c90:	617b      	str	r3, [r7, #20]
      break;
 8004c92:	e002      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	617b      	str	r3, [r7, #20]
      break;
 8004c98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	fb02 f203 	mul.w	r2, r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	0e5b      	lsrs	r3, r3, #25
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cda:	69bb      	ldr	r3, [r7, #24]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3724      	adds	r7, #36	; 0x24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	08010534 	.word	0x08010534
 8004cf0:	00f42400 	.word	0x00f42400
 8004cf4:	007a1200 	.word	0x007a1200

08004cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000118 	.word	0x20000118

08004d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d14:	f7ff fff0 	bl	8004cf8 <HAL_RCC_GetHCLKFreq>
 8004d18:	4601      	mov	r1, r0
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	0a1b      	lsrs	r3, r3, #8
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d26:	5cd3      	ldrb	r3, [r2, r3]
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	0801052c 	.word	0x0801052c

08004d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d40:	f7ff ffda 	bl	8004cf8 <HAL_RCC_GetHCLKFreq>
 8004d44:	4601      	mov	r1, r0
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0adb      	lsrs	r3, r3, #11
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d52:	5cd3      	ldrb	r3, [r2, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	0801052c 	.word	0x0801052c

08004d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d80:	f7ff f90e 	bl	8003fa0 <HAL_PWREx_GetVoltageRange>
 8004d84:	6178      	str	r0, [r7, #20]
 8004d86:	e014      	b.n	8004db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	4a24      	ldr	r2, [pc, #144]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6593      	str	r3, [r2, #88]	; 0x58
 8004d94:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004da0:	f7ff f8fe 	bl	8003fa0 <HAL_PWREx_GetVoltageRange>
 8004da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db8:	d10b      	bne.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d919      	bls.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2ba0      	cmp	r3, #160	; 0xa0
 8004dc4:	d902      	bls.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	e013      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dcc:	2301      	movs	r3, #1
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	e010      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d902      	bls.n	8004dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dd8:	2303      	movs	r3, #3
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	e00a      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d102      	bne.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004de4:	2302      	movs	r3, #2
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e004      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b70      	cmp	r3, #112	; 0x70
 8004dee:	d101      	bne.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df0:	2301      	movs	r3, #1
 8004df2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 0207 	bic.w	r2, r3, #7
 8004dfc:	4909      	ldr	r1, [pc, #36]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d001      	beq.n	8004e16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40022000 	.word	0x40022000

08004e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e30:	2300      	movs	r3, #0
 8004e32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e34:	2300      	movs	r3, #0
 8004e36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d03f      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4c:	d01c      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e52:	d802      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004e58:	e01f      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004e5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004e60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e64:	d01c      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004e66:	e018      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e68:	4b85      	ldr	r3, [pc, #532]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a84      	ldr	r2, [pc, #528]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e74:	e015      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 ff91 	bl	8005da4 <RCCEx_PLLSAI1_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e86:	e00c      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3320      	adds	r3, #32
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 f878 	bl	8005f84 <RCCEx_PLLSAI2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e98:	e003      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea2:	7cfb      	ldrb	r3, [r7, #19]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10b      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea8:	4b75      	ldr	r3, [pc, #468]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb6:	4972      	ldr	r1, [pc, #456]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ebe:	e001      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d03f      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed8:	d01c      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004eda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ede:	d802      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004ee4:	e01f      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ef0:	d01c      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004ef2:	e018      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ef4:	4b62      	ldr	r3, [pc, #392]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a61      	ldr	r2, [pc, #388]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f00:	e015      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 ff4b 	bl	8005da4 <RCCEx_PLLSAI1_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f12:	e00c      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3320      	adds	r3, #32
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 f832 	bl	8005f84 <RCCEx_PLLSAI2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f24:	e003      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	74fb      	strb	r3, [r7, #19]
      break;
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10b      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f34:	4b52      	ldr	r3, [pc, #328]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f42:	494f      	ldr	r1, [pc, #316]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f4a:	e001      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80a0 	beq.w	800509e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f78:	4b41      	ldr	r3, [pc, #260]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	4a40      	ldr	r2, [pc, #256]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f82:	6593      	str	r3, [r2, #88]	; 0x58
 8004f84:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f90:	2301      	movs	r3, #1
 8004f92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f94:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a3a      	ldr	r2, [pc, #232]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa0:	f7fb fbc2 	bl	8000728 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fa6:	e009      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa8:	f7fb fbbe 	bl	8000728 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d902      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	74fb      	strb	r3, [r7, #19]
        break;
 8004fba:	e005      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fbc:	4b31      	ldr	r3, [pc, #196]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ef      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d15c      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fce:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01f      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d019      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fec:	4b24      	ldr	r3, [pc, #144]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ff8:	4b21      	ldr	r3, [pc, #132]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	4a20      	ldr	r2, [pc, #128]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005018:	4a19      	ldr	r2, [pc, #100]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502a:	f7fb fb7d 	bl	8000728 <HAL_GetTick>
 800502e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005030:	e00b      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fb fb79 	bl	8000728 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d902      	bls.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	74fb      	strb	r3, [r7, #19]
            break;
 8005048:	e006      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ec      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10c      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	4904      	ldr	r1, [pc, #16]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005076:	e009      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	74bb      	strb	r3, [r7, #18]
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000
 8005084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800508c:	7c7b      	ldrb	r3, [r7, #17]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d105      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005092:	4ba6      	ldr	r3, [pc, #664]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	4aa5      	ldr	r2, [pc, #660]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050aa:	4ba0      	ldr	r3, [pc, #640]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f023 0203 	bic.w	r2, r3, #3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	499c      	ldr	r1, [pc, #624]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050cc:	4b97      	ldr	r3, [pc, #604]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f023 020c 	bic.w	r2, r3, #12
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	4994      	ldr	r1, [pc, #592]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050ee:	4b8f      	ldr	r3, [pc, #572]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	498b      	ldr	r1, [pc, #556]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005110:	4b86      	ldr	r3, [pc, #536]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	4983      	ldr	r1, [pc, #524]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005132:	4b7e      	ldr	r3, [pc, #504]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005140:	497a      	ldr	r1, [pc, #488]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005154:	4b75      	ldr	r3, [pc, #468]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	4972      	ldr	r1, [pc, #456]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005176:	4b6d      	ldr	r3, [pc, #436]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005184:	4969      	ldr	r1, [pc, #420]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005198:	4b64      	ldr	r3, [pc, #400]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a6:	4961      	ldr	r1, [pc, #388]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ba:	4b5c      	ldr	r3, [pc, #368]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	4958      	ldr	r1, [pc, #352]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051dc:	4b53      	ldr	r3, [pc, #332]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	4950      	ldr	r1, [pc, #320]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051fe:	4b4b      	ldr	r3, [pc, #300]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520c:	4947      	ldr	r1, [pc, #284]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005220:	4b42      	ldr	r3, [pc, #264]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005222:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	493f      	ldr	r1, [pc, #252]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d028      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005242:	4b3a      	ldr	r3, [pc, #232]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4936      	ldr	r1, [pc, #216]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005260:	d106      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005262:	4b32      	ldr	r3, [pc, #200]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	4a31      	ldr	r2, [pc, #196]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800526c:	60d3      	str	r3, [r2, #12]
 800526e:	e011      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005278:	d10c      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	2101      	movs	r1, #1
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fd8f 	bl	8005da4 <RCCEx_PLLSAI1_Config>
 8005286:	4603      	mov	r3, r0
 8005288:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800528a:	7cfb      	ldrb	r3, [r7, #19]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d028      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052a0:	4b22      	ldr	r3, [pc, #136]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ae:	491f      	ldr	r1, [pc, #124]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052be:	d106      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ca:	60d3      	str	r3, [r2, #12]
 80052cc:	e011      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d6:	d10c      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	2101      	movs	r1, #1
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fd60 	bl	8005da4 <RCCEx_PLLSAI1_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052e8:	7cfb      	ldrb	r3, [r7, #19]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80052ee:	7cfb      	ldrb	r3, [r7, #19]
 80052f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d02a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800530c:	4907      	ldr	r1, [pc, #28]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800531c:	d108      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800531e:	4b03      	ldr	r3, [pc, #12]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4a02      	ldr	r2, [pc, #8]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005328:	60d3      	str	r3, [r2, #12]
 800532a:	e013      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800532c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005338:	d10c      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd2f 	bl	8005da4 <RCCEx_PLLSAI1_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02f      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005360:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800536e:	4929      	ldr	r1, [pc, #164]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537e:	d10d      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	2102      	movs	r1, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fd0c 	bl	8005da4 <RCCEx_PLLSAI1_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d014      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8005396:	7cfb      	ldrb	r3, [r7, #19]
 8005398:	74bb      	strb	r3, [r7, #18]
 800539a:	e011      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3320      	adds	r3, #32
 80053aa:	2102      	movs	r1, #2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fde9 	bl	8005f84 <RCCEx_PLLSAI2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053b6:	7cfb      	ldrb	r3, [r7, #19]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00b      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	490d      	ldr	r1, [pc, #52]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053f0:	4b08      	ldr	r3, [pc, #32]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005400:	4904      	ldr	r1, [pc, #16]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005408:	7cbb      	ldrb	r3, [r7, #18]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000

08005418 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800542a:	d137      	bne.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800542c:	4ba8      	ldr	r3, [pc, #672]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005436:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543e:	d014      	beq.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005444:	d01e      	beq.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	d001      	beq.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800544c:	f000 bc90 	b.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005450:	4b9f      	ldr	r3, [pc, #636]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b02      	cmp	r3, #2
 800545c:	f040 8483 	bne.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
        frequency = LSE_VALUE;
 8005460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005464:	61fb      	str	r3, [r7, #28]
      break;
 8005466:	f000 bc7e 	b.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800546a:	4b99      	ldr	r3, [pc, #612]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800546c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	f040 8478 	bne.w	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
          frequency = LSI_VALUE;
 800547a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800547e:	61fb      	str	r3, [r7, #28]
      break;
 8005480:	f000 bc73 	b.w	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005484:	4b92      	ldr	r3, [pc, #584]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005490:	f040 846d 	bne.w	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        frequency = HSE_VALUE / 32U;
 8005494:	4b8f      	ldr	r3, [pc, #572]	; (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005496:	61fb      	str	r3, [r7, #28]
      break;
 8005498:	f000 bc69 	b.w	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800549c:	4b8c      	ldr	r3, [pc, #560]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d023      	beq.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d02e      	beq.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d139      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80054b4:	4b86      	ldr	r3, [pc, #536]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d116      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80054c0:	4b83      	ldr	r3, [pc, #524]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80054cc:	4b80      	ldr	r3, [pc, #512]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	e005      	b.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80054d8:	4b7d      	ldr	r3, [pc, #500]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	4a7c      	ldr	r2, [pc, #496]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80054e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ea:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80054ec:	e01f      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
      break;
 80054f2:	e01c      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054f4:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d102      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8005502:	4b76      	ldr	r3, [pc, #472]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005504:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005506:	e012      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
      break;
 800550c:	e00f      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800550e:	4b70      	ldr	r3, [pc, #448]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800551a:	d102      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 800551c:	4b70      	ldr	r3, [pc, #448]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800551e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005520:	e005      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
      break;
 8005526:	e002      	b.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	61bb      	str	r3, [r7, #24]
      break;
 800552c:	bf00      	nop
    }

    switch(PeriphClk)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005534:	f000 8374 	beq.w	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553c:	d827      	bhi.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800553e:	2b10      	cmp	r3, #16
 8005540:	f000 81f9 	beq.w	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005544:	2b10      	cmp	r3, #16
 8005546:	d811      	bhi.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005548:	2b02      	cmp	r3, #2
 800554a:	f000 8142 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800554e:	2b02      	cmp	r3, #2
 8005550:	d804      	bhi.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005552:	2b01      	cmp	r3, #1
 8005554:	f000 8105 	beq.w	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005558:	f000 bc0a 	b.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800555c:	2b04      	cmp	r3, #4
 800555e:	f000 8182 	beq.w	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005562:	2b08      	cmp	r3, #8
 8005564:	f000 81b3 	beq.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
      break;
 8005568:	f000 bc02 	b.w	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	f000 82cd 	beq.w	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d803      	bhi.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005576:	2b20      	cmp	r3, #32
 8005578:	f000 821c 	beq.w	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
      break;
 800557c:	e3f8      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	f000 82e7 	beq.w	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005588:	f000 8306 	beq.w	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
      break;
 800558c:	e3f0      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800558e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005592:	f000 8247 	beq.w	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8005596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800559a:	d811      	bhi.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800559c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a0:	d025      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a6:	d804      	bhi.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ac:	f000 837e 	beq.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80055b0:	e3de      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b6:	d021      	beq.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055bc:	d025      	beq.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
      break;
 80055be:	e3d7      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 80055c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055c4:	d021      	beq.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 80055c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055ca:	d808      	bhi.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80055cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d0:	f000 83ad 	beq.w	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	f000 8287 	beq.w	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
      break;
 80055dc:	e3c8      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 80055de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055e2:	d012      	beq.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 80055e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e8:	f000 82f9 	beq.w	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      break;
 80055ec:	e3c0      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80055ee:	69b9      	ldr	r1, [r7, #24]
 80055f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055f4:	f000 fda0 	bl	8006138 <RCCEx_GetSAIxPeriphCLKFreq>
 80055f8:	61f8      	str	r0, [r7, #28]
      break;
 80055fa:	e3b9      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005602:	f000 fd99 	bl	8006138 <RCCEx_GetSAIxPeriphCLKFreq>
 8005606:	61f8      	str	r0, [r7, #28]
      break;
 8005608:	e3b2      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800560a:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005614:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800561c:	d062      	beq.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800561e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005622:	d803      	bhi.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 808a 	beq.w	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
          break;
 800562a:	e099      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        switch(srcclk)
 800562c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005630:	d021      	beq.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005632:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005636:	d000      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          break;
 8005638:	e092      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800563a:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b02      	cmp	r3, #2
 8005644:	f040 8085 	bne.w	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005648:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005654:	4b1e      	ldr	r3, [pc, #120]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	e005      	b.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800566e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005672:	61fb      	str	r3, [r7, #28]
          break;
 8005674:	e06d      	b.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005676:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005682:	d168      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800568c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005690:	d161      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	0a1b      	lsrs	r3, r3, #8
 8005698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800569c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	fb02 f203 	mul.w	r2, r2, r3
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	3301      	adds	r3, #1
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	0d5b      	lsrs	r3, r3, #21
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	3301      	adds	r3, #1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	61fb      	str	r3, [r7, #28]
          break;
 80056ce:	e042      	b.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
 80056d0:	40021000 	.word	0x40021000
 80056d4:	0003d090 	.word	0x0003d090
 80056d8:	08010534 	.word	0x08010534
 80056dc:	00f42400 	.word	0x00f42400
 80056e0:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80056e4:	4bb0      	ldr	r3, [pc, #704]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f0:	d133      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80056f2:	4bad      	ldr	r3, [pc, #692]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fe:	d12c      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005700:	4ba9      	ldr	r3, [pc, #676]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800570a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	fb02 f203 	mul.w	r2, r2, r3
 8005714:	4ba4      	ldr	r3, [pc, #656]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	3301      	adds	r3, #1
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005726:	4ba0      	ldr	r3, [pc, #640]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	0d5b      	lsrs	r3, r3, #21
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	3301      	adds	r3, #1
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	fbb2 f3f3 	udiv	r3, r2, r3
 800573a:	61fb      	str	r3, [r7, #28]
          break;
 800573c:	e00d      	b.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800573e:	4b9a      	ldr	r3, [pc, #616]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d108      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            frequency = HSI48_VALUE;
 800574c:	4b97      	ldr	r3, [pc, #604]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800574e:	61fb      	str	r3, [r7, #28]
          break;
 8005750:	e005      	b.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          break;
 8005752:	bf00      	nop
 8005754:	e30c      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005756:	bf00      	nop
 8005758:	e30a      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800575a:	bf00      	nop
 800575c:	e308      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800575e:	bf00      	nop
        break;
 8005760:	e306      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005762:	4b91      	ldr	r3, [pc, #580]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d828      	bhi.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8005774:	a201      	add	r2, pc, #4	; (adr r2, 800577c <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	0800578d 	.word	0x0800578d
 8005780:	08005795 	.word	0x08005795
 8005784:	0800579d 	.word	0x0800579d
 8005788:	080057b1 	.word	0x080057b1
          frequency = HAL_RCC_GetPCLK2Freq();
 800578c:	f7ff fad6 	bl	8004d3c <HAL_RCC_GetPCLK2Freq>
 8005790:	61f8      	str	r0, [r7, #28]
          break;
 8005792:	e01d      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005794:	f7ff fa26 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005798:	61f8      	str	r0, [r7, #28]
          break;
 800579a:	e019      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800579c:	4b82      	ldr	r3, [pc, #520]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d10f      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
            frequency = HSI_VALUE;
 80057aa:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057ac:	61fb      	str	r3, [r7, #28]
          break;
 80057ae:	e00c      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057b0:	4b7d      	ldr	r3, [pc, #500]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d107      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = LSE_VALUE;
 80057be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c2:	61fb      	str	r3, [r7, #28]
          break;
 80057c4:	e003      	b.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          break;
 80057c6:	bf00      	nop
 80057c8:	e2d2      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80057ca:	bf00      	nop
 80057cc:	e2d0      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80057ce:	bf00      	nop
        break;
 80057d0:	e2ce      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80057d2:	4b75      	ldr	r3, [pc, #468]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b0c      	cmp	r3, #12
 80057e2:	d83a      	bhi.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005821 	.word	0x08005821
 80057f0:	0800585b 	.word	0x0800585b
 80057f4:	0800585b 	.word	0x0800585b
 80057f8:	0800585b 	.word	0x0800585b
 80057fc:	08005829 	.word	0x08005829
 8005800:	0800585b 	.word	0x0800585b
 8005804:	0800585b 	.word	0x0800585b
 8005808:	0800585b 	.word	0x0800585b
 800580c:	08005831 	.word	0x08005831
 8005810:	0800585b 	.word	0x0800585b
 8005814:	0800585b 	.word	0x0800585b
 8005818:	0800585b 	.word	0x0800585b
 800581c:	08005845 	.word	0x08005845
          frequency = HAL_RCC_GetPCLK1Freq();
 8005820:	f7ff fa76 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005824:	61f8      	str	r0, [r7, #28]
          break;
 8005826:	e01d      	b.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005828:	f7ff f9dc 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 800582c:	61f8      	str	r0, [r7, #28]
          break;
 800582e:	e019      	b.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005830:	4b5d      	ldr	r3, [pc, #372]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583c:	d10f      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HSI_VALUE;
 800583e:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005840:	61fb      	str	r3, [r7, #28]
          break;
 8005842:	e00c      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005844:	4b58      	ldr	r3, [pc, #352]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b02      	cmp	r3, #2
 8005850:	d107      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = LSE_VALUE;
 8005852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005856:	61fb      	str	r3, [r7, #28]
          break;
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          break;
 800585a:	bf00      	nop
 800585c:	e288      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800585e:	bf00      	nop
 8005860:	e286      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005862:	bf00      	nop
        break;
 8005864:	e284      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005866:	4b50      	ldr	r3, [pc, #320]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005870:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b10      	cmp	r3, #16
 8005876:	d00d      	beq.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8005878:	2b10      	cmp	r3, #16
 800587a:	d802      	bhi.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          break;
 8005880:	e024      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        switch(srcclk)
 8005882:	2b20      	cmp	r3, #32
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005886:	2b30      	cmp	r3, #48	; 0x30
 8005888:	d012      	beq.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
          break;
 800588a:	e01f      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800588c:	f7ff fa40 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005890:	61f8      	str	r0, [r7, #28]
          break;
 8005892:	e01b      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005894:	f7ff f9a6 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005898:	61f8      	str	r0, [r7, #28]
          break;
 800589a:	e017      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800589c:	4b42      	ldr	r3, [pc, #264]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a8:	d10d      	bne.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
            frequency = HSI_VALUE;
 80058aa:	4b41      	ldr	r3, [pc, #260]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80058ac:	61fb      	str	r3, [r7, #28]
          break;
 80058ae:	e00a      	b.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058b0:	4b3d      	ldr	r3, [pc, #244]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d105      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = LSE_VALUE;
 80058be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c2:	61fb      	str	r3, [r7, #28]
          break;
 80058c4:	e001      	b.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          break;
 80058c6:	bf00      	nop
 80058c8:	e252      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80058ca:	bf00      	nop
        break;
 80058cc:	e250      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80058ce:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058d8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d00d      	beq.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d802      	bhi.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
          break;
 80058e8:	e024      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        switch(srcclk)
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80058ee:	2bc0      	cmp	r3, #192	; 0xc0
 80058f0:	d012      	beq.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          break;
 80058f2:	e01f      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7ff fa0c 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 80058f8:	61f8      	str	r0, [r7, #28]
          break;
 80058fa:	e01b      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          frequency = HAL_RCC_GetSysClockFreq();
 80058fc:	f7ff f972 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005900:	61f8      	str	r0, [r7, #28]
          break;
 8005902:	e017      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005904:	4b28      	ldr	r3, [pc, #160]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005910:	d10d      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSI_VALUE;
 8005912:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005914:	61fb      	str	r3, [r7, #28]
          break;
 8005916:	e00a      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005918:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b02      	cmp	r3, #2
 8005924:	d105      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = LSE_VALUE;
 8005926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592a:	61fb      	str	r3, [r7, #28]
          break;
 800592c:	e001      	b.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          break;
 800592e:	bf00      	nop
 8005930:	e21e      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005932:	bf00      	nop
        break;
 8005934:	e21c      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005936:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005940:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005948:	d010      	beq.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800594a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594e:	d802      	bhi.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
          break;
 8005954:	e026      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
        switch(srcclk)
 8005956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595a:	d00b      	beq.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 800595c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005960:	d012      	beq.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          break;
 8005962:	e01f      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005964:	f7ff f9d4 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005968:	61f8      	str	r0, [r7, #28]
          break;
 800596a:	e01b      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          frequency = HAL_RCC_GetSysClockFreq();
 800596c:	f7ff f93a 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005970:	61f8      	str	r0, [r7, #28]
          break;
 8005972:	e017      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005980:	d10d      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
            frequency = HSI_VALUE;
 8005982:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005984:	61fb      	str	r3, [r7, #28]
          break;
 8005986:	e00a      	b.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005988:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b02      	cmp	r3, #2
 8005994:	d105      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = LSE_VALUE;
 8005996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599a:	61fb      	str	r3, [r7, #28]
          break;
 800599c:	e001      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          break;
 800599e:	bf00      	nop
 80059a0:	e1e6      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80059a2:	bf00      	nop
        break;
 80059a4:	e1e4      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80059a6:	bf00      	nop
 80059a8:	40021000 	.word	0x40021000
 80059ac:	02dc6c00 	.word	0x02dc6c00
 80059b0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059b4:	4ba8      	ldr	r3, [pc, #672]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059be:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c6:	d010      	beq.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80059c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059cc:	d802      	bhi.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
          break;
 80059d2:	e026      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        switch(srcclk)
 80059d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d8:	d00b      	beq.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80059da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059de:	d012      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          break;
 80059e0:	e01f      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059e2:	f7ff f995 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 80059e6:	61f8      	str	r0, [r7, #28]
          break;
 80059e8:	e01b      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = HAL_RCC_GetSysClockFreq();
 80059ea:	f7ff f8fb 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 80059ee:	61f8      	str	r0, [r7, #28]
          break;
 80059f0:	e017      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059f2:	4b99      	ldr	r3, [pc, #612]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fe:	d10d      	bne.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
            frequency = HSI_VALUE;
 8005a00:	4b96      	ldr	r3, [pc, #600]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005a02:	61fb      	str	r3, [r7, #28]
          break;
 8005a04:	e00a      	b.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a06:	4b94      	ldr	r3, [pc, #592]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d105      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = LSE_VALUE;
 8005a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a18:	61fb      	str	r3, [r7, #28]
          break;
 8005a1a:	e001      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          break;
 8005a1c:	bf00      	nop
 8005a1e:	e1a7      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005a20:	bf00      	nop
        break;
 8005a22:	e1a5      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a24:	4b8c      	ldr	r3, [pc, #560]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a2e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a36:	d02f      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005a38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a42:	d004      	beq.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
          break;
 8005a44:	e050      	b.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a46:	f7ff f8cd 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005a4a:	61f8      	str	r0, [r7, #28]
          break;
 8005a4c:	e04c      	b.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005a4e:	4b82      	ldr	r3, [pc, #520]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d043      	beq.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a5a:	4b7f      	ldr	r3, [pc, #508]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a64:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	fb02 f203 	mul.w	r2, r2, r3
 8005a6e:	4b7a      	ldr	r3, [pc, #488]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	3301      	adds	r3, #1
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a80:	4b75      	ldr	r3, [pc, #468]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	0e5b      	lsrs	r3, r3, #25
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	61fb      	str	r3, [r7, #28]
          break;
 8005a96:	e024      	b.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8005a98:	4b6f      	ldr	r3, [pc, #444]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d020      	beq.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005aa4:	4b6c      	ldr	r3, [pc, #432]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	0a1b      	lsrs	r3, r3, #8
 8005aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aae:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	fb02 f203 	mul.w	r2, r2, r3
 8005ab8:	4b67      	ldr	r3, [pc, #412]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	091b      	lsrs	r3, r3, #4
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005aca:	4b63      	ldr	r3, [pc, #396]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	0e5b      	lsrs	r3, r3, #25
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	61fb      	str	r3, [r7, #28]
          break;
 8005ae0:	e001      	b.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
          break;
 8005ae2:	bf00      	nop
 8005ae4:	e144      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005ae6:	bf00      	nop
        break;
 8005ae8:	e142      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005aea:	4b5b      	ldr	r3, [pc, #364]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af4:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005afc:	f7ff f91e 	bl	8004d3c <HAL_RCC_GetPCLK2Freq>
 8005b00:	61f8      	str	r0, [r7, #28]
        break;
 8005b02:	e135      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b04:	f7ff f86e 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005b08:	61f8      	str	r0, [r7, #28]
        break;
 8005b0a:	e131      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b0c:	4b52      	ldr	r3, [pc, #328]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b16:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	d009      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8005b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b24:	d00a      	beq.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d000      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
          break;
 8005b2a:	e011      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7ff f8f0 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005b30:	61f8      	str	r0, [r7, #28]
          break;
 8005b32:	e00d      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b34:	f7ff f856 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005b38:	61f8      	str	r0, [r7, #28]
          break;
 8005b3a:	e009      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b3c:	4b46      	ldr	r3, [pc, #280]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b48:	d101      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x736>
            frequency = HSI_VALUE;
 8005b4a:	4b44      	ldr	r3, [pc, #272]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005b4c:	61fb      	str	r3, [r7, #28]
          break;
 8005b4e:	bf00      	nop
        break;
 8005b50:	e10e      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b52:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b5c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b64:	d009      	beq.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
 8005b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d000      	beq.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          break;
 8005b70:	e011      	b.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b72:	f7ff f8cd 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005b76:	61f8      	str	r0, [r7, #28]
          break;
 8005b78:	e00d      	b.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7ff f833 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005b7e:	61f8      	str	r0, [r7, #28]
          break;
 8005b80:	e009      	b.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b82:	4b35      	ldr	r3, [pc, #212]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
            frequency = HSI_VALUE;
 8005b90:	4b32      	ldr	r3, [pc, #200]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005b92:	61fb      	str	r3, [r7, #28]
          break;
 8005b94:	bf00      	nop
        break;
 8005b96:	e0eb      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005b98:	4b2f      	ldr	r3, [pc, #188]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ba2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005baa:	d009      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bb0:	d00a      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d000      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          break;
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f7ff f8aa 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005bbc:	61f8      	str	r0, [r7, #28]
          break;
 8005bbe:	e00d      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bc0:	f7ff f810 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005bc4:	61f8      	str	r0, [r7, #28]
          break;
 8005bc6:	e009      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bc8:	4b23      	ldr	r3, [pc, #140]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd4:	d101      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
            frequency = HSI_VALUE;
 8005bd6:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005bd8:	61fb      	str	r3, [r7, #28]
          break;
 8005bda:	bf00      	nop
        break;
 8005bdc:	e0c8      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005bde:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005be0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d008      	beq.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d302      	bcc.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d008      	beq.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          break;
 8005bf8:	e011      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7ff f889 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	61f8      	str	r0, [r7, #28]
          break;
 8005c00:	e00d      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c02:	f7fe ffef 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8005c06:	61f8      	str	r0, [r7, #28]
          break;
 8005c08:	e009      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c0a:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c16:	d101      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
            frequency = HSI_VALUE;
 8005c18:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005c1a:	61fb      	str	r3, [r7, #28]
          break;
 8005c1c:	bf00      	nop
        break;
 8005c1e:	e0a7      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c2a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c32:	d015      	beq.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8005c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c38:	d802      	bhi.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
 8005c3e:	e034      	b.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        switch(srcclk)
 8005c40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c44:	d017      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005c46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c4a:	d01e      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005c4c:	e02d      	b.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c4e:	f7ff f85f 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005c52:	61f8      	str	r0, [r7, #28]
          break;
 8005c54:	e029      	b.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c60:	4b46      	ldr	r3, [pc, #280]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d118      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
              frequency = LSI_VALUE;
 8005c6e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c72:	61fb      	str	r3, [r7, #28]
          break;
 8005c74:	e014      	b.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c76:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c82:	d10f      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
            frequency = HSI_VALUE;
 8005c84:	4b3e      	ldr	r3, [pc, #248]	; (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8005c86:	61fb      	str	r3, [r7, #28]
          break;
 8005c88:	e00c      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c8a:	4b3c      	ldr	r3, [pc, #240]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
            frequency = LSE_VALUE;
 8005c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c9c:	61fb      	str	r3, [r7, #28]
          break;
 8005c9e:	e003      	b.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          break;
 8005ca0:	bf00      	nop
 8005ca2:	e065      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005ca4:	bf00      	nop
 8005ca6:	e063      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005ca8:	bf00      	nop
        break;
 8005caa:	e061      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005cac:	4b33      	ldr	r3, [pc, #204]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cb6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cbe:	d010      	beq.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cc4:	d802      	bhi.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          break;
 8005cca:	e02f      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
        switch(srcclk)
 8005ccc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd0:	d012      	beq.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 8005cd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cd6:	d019      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005cd8:	e028      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cda:	f7ff f819 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005cde:	61f8      	str	r0, [r7, #28]
          break;
 8005ce0:	e024      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d118      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
              frequency = LSI_VALUE;
 8005cf0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005cf4:	61fb      	str	r3, [r7, #28]
          break;
 8005cf6:	e014      	b.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cf8:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d04:	d10f      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
            frequency = HSI_VALUE;
 8005d06:	4b1e      	ldr	r3, [pc, #120]	; (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8005d08:	61fb      	str	r3, [r7, #28]
          break;
 8005d0a:	e00c      	b.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d107      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
            frequency = LSE_VALUE;
 8005d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1e:	61fb      	str	r3, [r7, #28]
          break;
 8005d20:	e003      	b.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8005d22:	bf00      	nop
 8005d24:	e024      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005d26:	bf00      	nop
 8005d28:	e022      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005d2a:	bf00      	nop
        break;
 8005d2c:	e020      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d38:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d44:	d004      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8005d46:	e00d      	b.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d48:	f7fe ffe2 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8005d4c:	61f8      	str	r0, [r7, #28]
          break;
 8005d4e:	e009      	b.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            frequency = HSI_VALUE;
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8005d60:	61fb      	str	r3, [r7, #28]
          break;
 8005d62:	bf00      	nop
        break;
 8005d64:	e004      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8005d66:	bf00      	nop
 8005d68:	e002      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8005d6e:	bf00      	nop
    }
  }

  return(frequency);
 8005d70:	69fb      	ldr	r3, [r7, #28]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	00f42400 	.word	0x00f42400

08005d84 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d8e:	f043 0304 	orr.w	r3, r3, #4
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40021000 	.word	0x40021000

08005da4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005db2:	4b73      	ldr	r3, [pc, #460]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d018      	beq.n	8005df0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005dbe:	4b70      	ldr	r3, [pc, #448]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f003 0203 	and.w	r2, r3, #3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d10d      	bne.n	8005dea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005dd6:	4b6a      	ldr	r3, [pc, #424]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
       ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d044      	beq.n	8005e74 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	73fb      	strb	r3, [r7, #15]
 8005dee:	e041      	b.n	8005e74 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d00c      	beq.n	8005e12 <RCCEx_PLLSAI1_Config+0x6e>
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d013      	beq.n	8005e24 <RCCEx_PLLSAI1_Config+0x80>
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d120      	bne.n	8005e42 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e00:	4b5f      	ldr	r3, [pc, #380]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d11d      	bne.n	8005e48 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e10:	e01a      	b.n	8005e48 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e12:	4b5b      	ldr	r3, [pc, #364]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d116      	bne.n	8005e4c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e22:	e013      	b.n	8005e4c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e24:	4b56      	ldr	r3, [pc, #344]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10f      	bne.n	8005e50 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e30:	4b53      	ldr	r3, [pc, #332]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e40:	e006      	b.n	8005e50 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	73fb      	strb	r3, [r7, #15]
      break;
 8005e46:	e004      	b.n	8005e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005e50:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e58:	4b49      	ldr	r3, [pc, #292]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6819      	ldr	r1, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	4944      	ldr	r1, [pc, #272]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d17c      	bne.n	8005f74 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e7a:	4b41      	ldr	r3, [pc, #260]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a40      	ldr	r2, [pc, #256]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e86:	f7fa fc4f 	bl	8000728 <HAL_GetTick>
 8005e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e8c:	e009      	b.n	8005ea2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e8e:	f7fa fc4b 	bl	8000728 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d902      	bls.n	8005ea2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	73fb      	strb	r3, [r7, #15]
        break;
 8005ea0:	e005      	b.n	8005eae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1ef      	bne.n	8005e8e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d15f      	bne.n	8005f74 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d110      	bne.n	8005edc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eba:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005ec2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6892      	ldr	r2, [r2, #8]
 8005eca:	0211      	lsls	r1, r2, #8
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	68d2      	ldr	r2, [r2, #12]
 8005ed0:	06d2      	lsls	r2, r2, #27
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	492a      	ldr	r1, [pc, #168]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	610b      	str	r3, [r1, #16]
 8005eda:	e027      	b.n	8005f2c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d112      	bne.n	8005f08 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ee2:	4b27      	ldr	r3, [pc, #156]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005eea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6892      	ldr	r2, [r2, #8]
 8005ef2:	0211      	lsls	r1, r2, #8
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6912      	ldr	r2, [r2, #16]
 8005ef8:	0852      	lsrs	r2, r2, #1
 8005efa:	3a01      	subs	r2, #1
 8005efc:	0552      	lsls	r2, r2, #21
 8005efe:	430a      	orrs	r2, r1
 8005f00:	491f      	ldr	r1, [pc, #124]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	610b      	str	r3, [r1, #16]
 8005f06:	e011      	b.n	8005f2c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f08:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6892      	ldr	r2, [r2, #8]
 8005f18:	0211      	lsls	r1, r2, #8
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6952      	ldr	r2, [r2, #20]
 8005f1e:	0852      	lsrs	r2, r2, #1
 8005f20:	3a01      	subs	r2, #1
 8005f22:	0652      	lsls	r2, r2, #25
 8005f24:	430a      	orrs	r2, r1
 8005f26:	4916      	ldr	r1, [pc, #88]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f2c:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f38:	f7fa fbf6 	bl	8000728 <HAL_GetTick>
 8005f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f3e:	e009      	b.n	8005f54 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f40:	f7fa fbf2 	bl	8000728 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d902      	bls.n	8005f54 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	73fb      	strb	r3, [r7, #15]
          break;
 8005f52:	e005      	b.n	8005f60 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ef      	beq.n	8005f40 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	4904      	ldr	r1, [pc, #16]	; (8005f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40021000 	.word	0x40021000

08005f84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f92:	4b68      	ldr	r3, [pc, #416]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d018      	beq.n	8005fd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f9e:	4b65      	ldr	r3, [pc, #404]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0203 	and.w	r2, r3, #3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d10d      	bne.n	8005fca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005fb6:	4b5f      	ldr	r3, [pc, #380]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	091b      	lsrs	r3, r3, #4
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d044      	beq.n	8006054 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
 8005fce:	e041      	b.n	8006054 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d00c      	beq.n	8005ff2 <RCCEx_PLLSAI2_Config+0x6e>
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d013      	beq.n	8006004 <RCCEx_PLLSAI2_Config+0x80>
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d120      	bne.n	8006022 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fe0:	4b54      	ldr	r3, [pc, #336]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d11d      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff0:	e01a      	b.n	8006028 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ff2:	4b50      	ldr	r3, [pc, #320]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d116      	bne.n	800602c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006002:	e013      	b.n	800602c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006004:	4b4b      	ldr	r3, [pc, #300]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10f      	bne.n	8006030 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006010:	4b48      	ldr	r3, [pc, #288]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006020:	e006      	b.n	8006030 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
      break;
 8006026:	e004      	b.n	8006032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006028:	bf00      	nop
 800602a:	e002      	b.n	8006032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006030:	bf00      	nop
    }

    if(status == HAL_OK)
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10d      	bne.n	8006054 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006038:	4b3e      	ldr	r3, [pc, #248]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	3b01      	subs	r3, #1
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	430b      	orrs	r3, r1
 800604e:	4939      	ldr	r1, [pc, #228]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006050:	4313      	orrs	r3, r2
 8006052:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d166      	bne.n	8006128 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800605a:	4b36      	ldr	r3, [pc, #216]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a35      	ldr	r2, [pc, #212]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006066:	f7fa fb5f 	bl	8000728 <HAL_GetTick>
 800606a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800606c:	e009      	b.n	8006082 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800606e:	f7fa fb5b 	bl	8000728 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d902      	bls.n	8006082 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	73fb      	strb	r3, [r7, #15]
        break;
 8006080:	e005      	b.n	800608e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006082:	4b2c      	ldr	r3, [pc, #176]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1ef      	bne.n	800606e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d149      	bne.n	8006128 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d110      	bne.n	80060bc <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800609a:	4b26      	ldr	r3, [pc, #152]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80060a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6892      	ldr	r2, [r2, #8]
 80060aa:	0211      	lsls	r1, r2, #8
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68d2      	ldr	r2, [r2, #12]
 80060b0:	06d2      	lsls	r2, r2, #27
 80060b2:	430a      	orrs	r2, r1
 80060b4:	491f      	ldr	r1, [pc, #124]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	614b      	str	r3, [r1, #20]
 80060ba:	e011      	b.n	80060e0 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060bc:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6892      	ldr	r2, [r2, #8]
 80060cc:	0211      	lsls	r1, r2, #8
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6912      	ldr	r2, [r2, #16]
 80060d2:	0852      	lsrs	r2, r2, #1
 80060d4:	3a01      	subs	r2, #1
 80060d6:	0652      	lsls	r2, r2, #25
 80060d8:	430a      	orrs	r2, r1
 80060da:	4916      	ldr	r1, [pc, #88]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060e0:	4b14      	ldr	r3, [pc, #80]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a13      	ldr	r2, [pc, #76]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80060e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ec:	f7fa fb1c 	bl	8000728 <HAL_GetTick>
 80060f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060f2:	e009      	b.n	8006108 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060f4:	f7fa fb18 	bl	8000728 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d902      	bls.n	8006108 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	73fb      	strb	r3, [r7, #15]
          break;
 8006106:	e005      	b.n	8006114 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0ef      	beq.n	80060f4 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800611c:	695a      	ldr	r2, [r3, #20]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	4904      	ldr	r1, [pc, #16]	; (8006134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006124:	4313      	orrs	r3, r2
 8006126:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40021000 	.word	0x40021000

08006138 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006138:	b480      	push	{r7}
 800613a:	b089      	sub	sp, #36	; 0x24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006154:	d10c      	bne.n	8006170 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006156:	4b6b      	ldr	r3, [pc, #428]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006160:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006168:	d112      	bne.n	8006190 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800616a:	4b67      	ldr	r3, [pc, #412]	; (8006308 <RCCEx_GetSAIxPeriphCLKFreq+0x1d0>)
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	e00f      	b.n	8006190 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006176:	d10b      	bne.n	8006190 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006178:	4b62      	ldr	r3, [pc, #392]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006182:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800618a:	d101      	bne.n	8006190 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800618c:	4b5e      	ldr	r3, [pc, #376]	; (8006308 <RCCEx_GetSAIxPeriphCLKFreq+0x1d0>)
 800618e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f040 80ae 	bne.w	80062f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
  {
    pllvco = InputFrequency;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061a2:	d003      	beq.n	80061ac <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061aa:	d133      	bne.n	8006214 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80061ac:	4b55      	ldr	r3, [pc, #340]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 809d 	beq.w	80062f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061ba:	4b52      	ldr	r3, [pc, #328]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	3301      	adds	r3, #1
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061ce:	4b4d      	ldr	r3, [pc, #308]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80061da:	4b4a      	ldr	r3, [pc, #296]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	0edb      	lsrs	r3, r3, #27
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80061ec:	4b45      	ldr	r3, [pc, #276]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
          {
            pllp = 17U;
 80061f8:	2311      	movs	r3, #17
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e001      	b.n	8006202 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          }
          else
          {
            pllp = 7U;
 80061fe:	2307      	movs	r3, #7
 8006200:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	fb02 f203 	mul.w	r2, r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006212:	e06f      	b.n	80062f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d132      	bne.n	8006280 <RCCEx_GetSAIxPeriphCLKFreq+0x148>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800621a:	4b3a      	ldr	r3, [pc, #232]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d066      	beq.n	80062f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006226:	4b37      	ldr	r3, [pc, #220]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	3301      	adds	r3, #1
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	fbb2 f3f3 	udiv	r3, r2, r3
 8006238:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800623a:	4b32      	ldr	r3, [pc, #200]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006244:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006246:	4b2f      	ldr	r3, [pc, #188]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	0edb      	lsrs	r3, r3, #27
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <RCCEx_GetSAIxPeriphCLKFreq+0x136>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006258:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <RCCEx_GetSAIxPeriphCLKFreq+0x132>
          {
            pllp = 17U;
 8006264:	2311      	movs	r3, #17
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e001      	b.n	800626e <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          }
          else
          {
            pllp = 7U;
 800626a:	2307      	movs	r3, #7
 800626c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	fb02 f203 	mul.w	r2, r2, r3
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	fbb2 f3f3 	udiv	r3, r2, r3
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	e039      	b.n	80062f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006286:	d003      	beq.n	8006290 <RCCEx_GetSAIxPeriphCLKFreq+0x158>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800628e:	d131      	bne.n	80062f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006290:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d02b      	beq.n	80062f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800629c:	4b19      	ldr	r3, [pc, #100]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	3301      	adds	r3, #1
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80062b0:	4b14      	ldr	r3, [pc, #80]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ba:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	0edb      	lsrs	r3, r3, #27
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80062ce:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>
          {
            pllp = 17U;
 80062da:	2311      	movs	r3, #17
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e001      	b.n	80062e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>
          }
          else
          {
            pllp = 7U;
 80062e0:	2307      	movs	r3, #7
 80062e2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	fb02 f203 	mul.w	r2, r2, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f2:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80062f4:	69fb      	ldr	r3, [r7, #28]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3724      	adds	r7, #36	; 0x24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40021000 	.word	0x40021000
 8006308:	001fff68 	.word	0x001fff68

0800630c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e14a      	b.n	80065b4 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f007 fba8 	bl	800da88 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f94d 	bl	80065d8 <SAI_Disable>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e135      	b.n	80065b4 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d007      	beq.n	8006368 <HAL_SAI_Init+0x5c>
 8006358:	2b01      	cmp	r3, #1
 800635a:	d302      	bcc.n	8006362 <HAL_SAI_Init+0x56>
 800635c:	2b02      	cmp	r3, #2
 800635e:	d006      	beq.n	800636e <HAL_SAI_Init+0x62>
 8006360:	e008      	b.n	8006374 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
      break;
 8006366:	e008      	b.n	800637a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006368:	2310      	movs	r3, #16
 800636a:	61fb      	str	r3, [r7, #28]
      break;
 800636c:	e005      	b.n	800637a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800636e:	2320      	movs	r3, #32
 8006370:	61fb      	str	r3, [r7, #28]
      break;
 8006372:	e002      	b.n	800637a <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	61fb      	str	r3, [r7, #28]
      break;
 8006378:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b03      	cmp	r3, #3
 8006380:	d81d      	bhi.n	80063be <HAL_SAI_Init+0xb2>
 8006382:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <HAL_SAI_Init+0x7c>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	08006399 	.word	0x08006399
 800638c:	0800639f 	.word	0x0800639f
 8006390:	080063a7 	.word	0x080063a7
 8006394:	080063af 	.word	0x080063af
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]
      break;
 800639c:	e012      	b.n	80063c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800639e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063a2:	617b      	str	r3, [r7, #20]
      break;
 80063a4:	e00e      	b.n	80063c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063aa:	617b      	str	r3, [r7, #20]
      break;
 80063ac:	e00a      	b.n	80063c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063b2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	61fb      	str	r3, [r7, #28]
      break;
 80063bc:	e002      	b.n	80063c4 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
      break;
 80063c2:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a7c      	ldr	r2, [pc, #496]	; (80065bc <HAL_SAI_Init+0x2b0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_SAI_Init+0xcc>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7b      	ldr	r2, [pc, #492]	; (80065c0 <HAL_SAI_Init+0x2b4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d103      	bne.n	80063e0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80063d8:	4a7a      	ldr	r2, [pc, #488]	; (80065c4 <HAL_SAI_Init+0x2b8>)
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e002      	b.n	80063e6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80063e0:	4a79      	ldr	r2, [pc, #484]	; (80065c8 <HAL_SAI_Init+0x2bc>)
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d038      	beq.n	8006460 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a72      	ldr	r2, [pc, #456]	; (80065bc <HAL_SAI_Init+0x2b0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <HAL_SAI_Init+0xf6>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a70      	ldr	r2, [pc, #448]	; (80065c0 <HAL_SAI_Init+0x2b4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d105      	bne.n	800640e <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006402:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006406:	f7ff f807 	bl	8005418 <HAL_RCCEx_GetPeriphCLKFreq>
 800640a:	6138      	str	r0, [r7, #16]
 800640c:	e004      	b.n	8006418 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800640e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006412:	f7ff f801 	bl	8005418 <HAL_RCCEx_GetPeriphCLKFreq>
 8006416:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	025b      	lsls	r3, r3, #9
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a66      	ldr	r2, [pc, #408]	; (80065cc <HAL_SAI_Init+0x2c0>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	08da      	lsrs	r2, r3, #3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	4b62      	ldr	r3, [pc, #392]	; (80065cc <HAL_SAI_Init+0x2c0>)
 8006442:	fba3 2301 	umull	r2, r3, r3, r1
 8006446:	08da      	lsrs	r2, r3, #3
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	1aca      	subs	r2, r1, r3
 8006452:	2a08      	cmp	r2, #8
 8006454:	d904      	bls.n	8006460 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_SAI_Init+0x164>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d109      	bne.n	8006484 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_SAI_Init+0x170>
 8006478:	2300      	movs	r3, #0
 800647a:	e001      	b.n	8006480 <HAL_SAI_Init+0x174>
 800647c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e008      	b.n	8006496 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d102      	bne.n	8006492 <HAL_SAI_Init+0x186>
 800648c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006490:	e000      	b.n	8006494 <HAL_SAI_Init+0x188>
 8006492:	2300      	movs	r3, #0
 8006494:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6819      	ldr	r1, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b4b      	ldr	r3, [pc, #300]	; (80065d0 <HAL_SAI_Init+0x2c4>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6819      	ldr	r1, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064ba:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	431a      	orrs	r2, r3
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80064ce:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064da:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	051b      	lsls	r3, r3, #20
 80064e2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80064fa:	f023 030f 	bic.w	r3, r3, #15
 80064fe:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6859      	ldr	r1, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6899      	ldr	r1, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b2a      	ldr	r3, [pc, #168]	; (80065d4 <HAL_SAI_Init+0x2c8>)
 800652a:	400b      	ands	r3, r1
 800652c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6899      	ldr	r1, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800653e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8006544:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800654a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	3b01      	subs	r3, #1
 8006552:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006554:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68d9      	ldr	r1, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	f24f 0320 	movw	r3, #61472	; 0xf020
 800656c:	400b      	ands	r3, r1
 800656e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68d9      	ldr	r1, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006584:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006586:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658c:	3b01      	subs	r3, #1
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3720      	adds	r7, #32
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40015404 	.word	0x40015404
 80065c0:	40015424 	.word	0x40015424
 80065c4:	40015400 	.word	0x40015400
 80065c8:	40015800 	.word	0x40015800
 80065cc:	cccccccd 	.word	0xcccccccd
 80065d0:	ff05c010 	.word	0xff05c010
 80065d4:	fff88000 	.word	0xfff88000

080065d8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80065d8:	b490      	push	{r4, r7}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80065e0:	4b15      	ldr	r3, [pc, #84]	; (8006638 <SAI_Disable+0x60>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a15      	ldr	r2, [pc, #84]	; (800663c <SAI_Disable+0x64>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	0b1b      	lsrs	r3, r3, #12
 80065ec:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006600:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006602:	2c00      	cmp	r4, #0
 8006604:	d10a      	bne.n	800661c <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	73fb      	strb	r3, [r7, #15]
      break;
 800661a:	e007      	b.n	800662c <SAI_Disable+0x54>
    }
    count--;
 800661c:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1ea      	bne.n	8006602 <SAI_Disable+0x2a>

  return status;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bc90      	pop	{r4, r7}
 8006636:	4770      	bx	lr
 8006638:	20000118 	.word	0x20000118
 800663c:	95cbec1b 	.word	0x95cbec1b

08006640 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e022      	b.n	8006698 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d105      	bne.n	800666a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f007 f885 	bl	800d774 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2203      	movs	r2, #3
 800666e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f814 	bl	80066a0 <HAL_SD_InitCard>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e00a      	b.n	8006698 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066a0:	b5b0      	push	{r4, r5, r7, lr}
 80066a2:	b08e      	sub	sp, #56	; 0x38
 80066a4:	af04      	add	r7, sp, #16
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80066bc:	2376      	movs	r3, #118	; 0x76
 80066be:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681d      	ldr	r5, [r3, #0]
 80066c4:	466c      	mov	r4, sp
 80066c6:	f107 0314 	add.w	r3, r7, #20
 80066ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066d2:	f107 0308 	add.w	r3, r7, #8
 80066d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066d8:	4628      	mov	r0, r5
 80066da:	f002 f80d 	bl	80086f8 <SDMMC_Init>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80066e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e044      	b.n	800677a <HAL_SD_InitCard+0xda>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066fe:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f002 f831 	bl	800876c <SDMMC_PowerState_ON>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e02e      	b.n	800677a <HAL_SD_InitCard+0xda>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800672a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fb17 	bl	8006d60 <SD_PowerON>
 8006732:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e013      	b.n	800677a <HAL_SD_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa36 	bl	8006bc4 <SD_InitCard>
 8006758:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_SD_InitCard+0xda>
  }

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3728      	adds	r7, #40	; 0x28
 800677e:	46bd      	mov	sp, r7
 8006780:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006784 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006792:	0f9b      	lsrs	r3, r3, #30
 8006794:	b2da      	uxtb	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679e:	0e9b      	lsrs	r3, r3, #26
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b0:	0e1b      	lsrs	r3, r3, #24
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c2:	0c1b      	lsrs	r3, r3, #16
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067e4:	0d1b      	lsrs	r3, r3, #20
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006802:	0bdb      	lsrs	r3, r3, #15
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006814:	0b9b      	lsrs	r3, r3, #14
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	b2da      	uxtb	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006826:	0b5b      	lsrs	r3, r3, #13
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006838:	0b1b      	lsrs	r3, r3, #12
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	b2da      	uxtb	r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2200      	movs	r2, #0
 800684a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006850:	2b00      	cmp	r3, #0
 8006852:	d163      	bne.n	800691c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006858:	009a      	lsls	r2, r3, #2
 800685a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800685e:	4013      	ands	r3, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006864:	0f92      	lsrs	r2, r2, #30
 8006866:	431a      	orrs	r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006870:	0edb      	lsrs	r3, r3, #27
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	b2da      	uxtb	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006882:	0e1b      	lsrs	r3, r3, #24
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	b2da      	uxtb	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006894:	0d5b      	lsrs	r3, r3, #21
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	b2da      	uxtb	r2, r3
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a6:	0c9b      	lsrs	r3, r3, #18
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b8:	0bdb      	lsrs	r3, r3, #15
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	7e1b      	ldrb	r3, [r3, #24]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	3302      	adds	r3, #2
 80068dc:	2201      	movs	r2, #1
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80068e6:	fb02 f203 	mul.w	r2, r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	7a1b      	ldrb	r3, [r3, #8]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 030f 	and.w	r3, r3, #15
 80068f8:	2201      	movs	r2, #1
 80068fa:	409a      	lsls	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006908:	0a52      	lsrs	r2, r2, #9
 800690a:	fb02 f203 	mul.w	r2, r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006918:	661a      	str	r2, [r3, #96]	; 0x60
 800691a:	e031      	b.n	8006980 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006920:	2b01      	cmp	r3, #1
 8006922:	d11d      	bne.n	8006960 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006928:	041b      	lsls	r3, r3, #16
 800692a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	431a      	orrs	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	3301      	adds	r3, #1
 8006940:	029a      	lsls	r2, r3, #10
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006954:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	661a      	str	r2, [r3, #96]	; 0x60
 800695e:	e00f      	b.n	8006980 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a58      	ldr	r2, [pc, #352]	; (8006ac8 <HAL_SD_GetCardCSD+0x344>)
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e09d      	b.n	8006abc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006984:	0b9b      	lsrs	r3, r3, #14
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006996:	09db      	lsrs	r3, r3, #7
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	0fdb      	lsrs	r3, r3, #31
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	0f5b      	lsrs	r3, r3, #29
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	0e9b      	lsrs	r3, r3, #26
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	0d9b      	lsrs	r3, r3, #22
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fa:	0d5b      	lsrs	r3, r3, #21
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	0c1b      	lsrs	r3, r3, #16
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	0bdb      	lsrs	r3, r3, #15
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	0b9b      	lsrs	r3, r3, #14
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	0b5b      	lsrs	r3, r3, #13
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	0b1b      	lsrs	r3, r3, #12
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	0a9b      	lsrs	r3, r3, #10
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	0a1b      	lsrs	r3, r3, #8
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	004005ff 	.word	0x004005ff

08006acc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006acc:	b5b0      	push	{r4, r5, r7, lr}
 8006ace:	b08e      	sub	sp, #56	; 0x38
 8006ad0:	af04      	add	r7, sp, #16
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d02e      	beq.n	8006b44 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aec:	d106      	bne.n	8006afc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
 8006afa:	e029      	b.n	8006b50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b02:	d10a      	bne.n	8006b1a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9b9 	bl	8006e7c <SD_WideBus_Enable>
 8006b0a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
 8006b18:	e01a      	b.n	8006b50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9f6 	bl	8006f12 <SD_WideBus_Disable>
 8006b26:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
 8006b34:	e00c      	b.n	8006b50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	639a      	str	r2, [r3, #56]	; 0x38
 8006b42:	e005      	b.n	8006b50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a18      	ldr	r2, [pc, #96]	; (8006bc0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e024      	b.n	8006bb6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	61fb      	str	r3, [r7, #28]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	623b      	str	r3, [r7, #32]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681d      	ldr	r5, [r3, #0]
 8006b92:	466c      	mov	r4, sp
 8006b94:	f107 0318 	add.w	r3, r7, #24
 8006b98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f001 fda6 	bl	80086f8 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3728      	adds	r7, #40	; 0x28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	004005ff 	.word	0x004005ff

08006bc4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bc4:	b5b0      	push	{r4, r5, r7, lr}
 8006bc6:	b094      	sub	sp, #80	; 0x50
 8006bc8:	af04      	add	r7, sp, #16
 8006bca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 fdd8 	bl	800878a <SDMMC_GetPowerState>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006be0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006be4:	e0b7      	b.n	8006d56 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d02f      	beq.n	8006c4e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 ff57 	bl	8008aa6 <SDMMC_CmdSendCID>
 8006bf8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c02:	e0a8      	b.n	8006d56 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fe02 	bl	8008814 <SDMMC_GetResponse>
 8006c10:	4602      	mov	r2, r0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fdf9 	bl	8008814 <SDMMC_GetResponse>
 8006c22:	4602      	mov	r2, r0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2108      	movs	r1, #8
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 fdf0 	bl	8008814 <SDMMC_GetResponse>
 8006c34:	4602      	mov	r2, r0
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	210c      	movs	r1, #12
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 fde7 	bl	8008814 <SDMMC_GetResponse>
 8006c46:	4602      	mov	r2, r0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d00d      	beq.n	8006c72 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f107 020e 	add.w	r2, r7, #14
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 ff5d 	bl	8008b20 <SDMMC_CmdSetRelAdd>
 8006c66:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <SD_InitCard+0xae>
    {
      return errorstate;
 8006c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c70:	e071      	b.n	8006d56 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d036      	beq.n	8006ce8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c7a:	89fb      	ldrh	r3, [r7, #14]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f001 ff27 	bl	8008ae2 <SDMMC_CmdSendCSD>
 8006c94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9e:	e05a      	b.n	8006d56 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 fdb4 	bl	8008814 <SDMMC_GetResponse>
 8006cac:	4602      	mov	r2, r0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2104      	movs	r1, #4
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f001 fdab 	bl	8008814 <SDMMC_GetResponse>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2108      	movs	r1, #8
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 fda2 	bl	8008814 <SDMMC_GetResponse>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	210c      	movs	r1, #12
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 fd99 	bl	8008814 <SDMMC_GetResponse>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2104      	movs	r1, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fd90 	bl	8008814 <SDMMC_GetResponse>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	0d1a      	lsrs	r2, r3, #20
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006cfc:	f107 0310 	add.w	r3, r7, #16
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fd3e 	bl	8006784 <HAL_SD_GetCardCSD>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d12:	e020      	b.n	8006d56 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6819      	ldr	r1, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	f04f 0400 	mov.w	r4, #0
 8006d22:	461a      	mov	r2, r3
 8006d24:	4623      	mov	r3, r4
 8006d26:	4608      	mov	r0, r1
 8006d28:	f001 fdd5 	bl	80088d6 <SDMMC_CmdSelDesel>
 8006d2c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <SD_InitCard+0x174>
  {
    return errorstate;
 8006d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d36:	e00e      	b.n	8006d56 <SD_InitCard+0x192>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681d      	ldr	r5, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	466c      	mov	r4, sp
 8006d40:	f103 0210 	add.w	r2, r3, #16
 8006d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f001 fcd2 	bl	80086f8 <SDMMC_Init>
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3740      	adds	r7, #64	; 0x40
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006d60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fdcf 	bl	800891c <SDMMC_CmdGoIdleState>
 8006d7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	e072      	b.n	8006e70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 fde2 	bl	8008958 <SDMMC_CmdOperCond>
 8006d94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fdb8 	bl	800891c <SDMMC_CmdGoIdleState>
 8006dac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <SD_PowerON+0x5e>
    {
      return errorstate;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	e05b      	b.n	8006e70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d137      	bne.n	8006e36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 fde2 	bl	8008996 <SDMMC_CmdAppCommand>
 8006dd2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d02d      	beq.n	8006e36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dde:	e047      	b.n	8006e70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2100      	movs	r1, #0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 fdd5 	bl	8008996 <SDMMC_CmdAppCommand>
 8006dec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <SD_PowerON+0x98>
    {
      return errorstate;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	e03b      	b.n	8006e70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	491e      	ldr	r1, [pc, #120]	; (8006e78 <SD_PowerON+0x118>)
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 fdeb 	bl	80089da <SDMMC_CmdAppOperCommand>
 8006e04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e10:	e02e      	b.n	8006e70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 fcfb 	bl	8008814 <SDMMC_GetResponse>
 8006e1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	0fdb      	lsrs	r3, r3, #31
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <SD_PowerON+0xcc>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <SD_PowerON+0xce>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]

    count++;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	3301      	adds	r3, #1
 8006e34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d802      	bhi.n	8006e46 <SD_PowerON+0xe6>
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0cc      	beq.n	8006de0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d902      	bls.n	8006e56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e54:	e00c      	b.n	8006e70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
 8006e66:	e002      	b.n	8006e6e <SD_PowerON+0x10e>
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	c1100000 	.word	0xc1100000

08006e7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fcbe 	bl	8008814 <SDMMC_GetResponse>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea2:	d102      	bne.n	8006eaa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ea8:	e02f      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006eaa:	f107 030c 	add.w	r3, r7, #12
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f879 	bl	8006fa8 <SD_FindSCR>
 8006eb6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	e023      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01c      	beq.n	8006f06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f001 fd5c 	bl	8008996 <SDMMC_CmdAppCommand>
 8006ede:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	e00f      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2102      	movs	r1, #2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 fd95 	bl	8008a20 <SDMMC_CmdBusWidth>
 8006ef6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	e003      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e001      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fc73 	bl	8008814 <SDMMC_GetResponse>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f38:	d102      	bne.n	8006f40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f3e:	e02f      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f40:	f107 030c 	add.w	r3, r7, #12
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f82e 	bl	8006fa8 <SD_FindSCR>
 8006f4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	e023      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01c      	beq.n	8006f9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f001 fd11 	bl	8008996 <SDMMC_CmdAppCommand>
 8006f74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	e00f      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 fd4a 	bl	8008a20 <SDMMC_CmdBusWidth>
 8006f8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	e003      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e001      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006fa8:	b590      	push	{r4, r7, lr}
 8006faa:	b08f      	sub	sp, #60	; 0x3c
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fb2:	f7f9 fbb9 	bl	8000728 <HAL_GetTick>
 8006fb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2108      	movs	r1, #8
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 fc5f 	bl	8008892 <SDMMC_CmdBlockLength>
 8006fd4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	e0a9      	b.n	8007134 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	041b      	lsls	r3, r3, #16
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f001 fcd2 	bl	8008996 <SDMMC_CmdAppCommand>
 8006ff2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <SD_FindSCR+0x56>
  {
    return errorstate;
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	e09a      	b.n	8007134 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007002:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007004:	2308      	movs	r3, #8
 8007006:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007008:	2330      	movs	r3, #48	; 0x30
 800700a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800700c:	2302      	movs	r3, #2
 800700e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007010:	2300      	movs	r3, #0
 8007012:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007014:	2301      	movs	r3, #1
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f107 0210 	add.w	r2, r7, #16
 8007020:	4611      	mov	r1, r2
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fc09 	bl	800883a <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f001 fd19 	bl	8008a64 <SDMMC_CmdSendSCR>
 8007032:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	d022      	beq.n	8007080 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	e07a      	b.n	8007134 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6819      	ldr	r1, [r3, #0]
 8007050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	f107 0208 	add.w	r2, r7, #8
 8007058:	18d4      	adds	r4, r2, r3
 800705a:	4608      	mov	r0, r1
 800705c:	f001 fb79 	bl	8008752 <SDMMC_ReadFIFO>
 8007060:	4603      	mov	r3, r0
 8007062:	6023      	str	r3, [r4, #0]
      index++;
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007066:	3301      	adds	r3, #1
 8007068:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800706a:	f7f9 fb5d 	bl	8000728 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007078:	d102      	bne.n	8007080 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800707a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800707e:	e059      	b.n	8007134 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007086:	f240 432a 	movw	r3, #1066	; 0x42a
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0d6      	beq.n	800703e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2208      	movs	r2, #8
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80070a6:	2308      	movs	r3, #8
 80070a8:	e044      	b.n	8007134 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2202      	movs	r2, #2
 80070be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80070c0:	2302      	movs	r3, #2
 80070c2:	e037      	b.n	8007134 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2220      	movs	r2, #32
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80070da:	2320      	movs	r3, #32
 80070dc:	e02a      	b.n	8007134 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80070e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	061a      	lsls	r2, r3, #24
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	0e1b      	lsrs	r3, r3, #24
 8007104:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	601a      	str	r2, [r3, #0]
    scr++;
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	3304      	adds	r3, #4
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	061a      	lsls	r2, r3, #24
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800711c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007126:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	0e1b      	lsrs	r3, r3, #24
 800712c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	373c      	adds	r7, #60	; 0x3c
 8007138:	46bd      	mov	sp, r7
 800713a:	bd90      	pop	{r4, r7, pc}

0800713c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e07c      	b.n	8007248 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f006 fb65 	bl	800d838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007184:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800718e:	d902      	bls.n	8007196 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e002      	b.n	800719c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800719a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071a4:	d007      	beq.n	80071b6 <HAL_SPI_Init+0x7a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071ae:	d002      	beq.n	80071b6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071c6:	d903      	bls.n	80071d0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	631a      	str	r2, [r3, #48]	; 0x30
 80071ce:	e002      	b.n	80071d6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	ea42 0103 	orr.w	r1, r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f003 0204 	and.w	r2, r3, #4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	ea42 0103 	orr.w	r1, r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	430a      	orrs	r2, r1
 8007236:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e034      	b.n	80072d0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f006 fbfa 	bl	800da74 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3308      	adds	r3, #8
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f001 f932 	bl	80084f4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	461a      	mov	r2, r3
 800729a:	68b9      	ldr	r1, [r7, #8]
 800729c:	f001 f9a2 	bl	80085e4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6858      	ldr	r0, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	f001 f9eb 	bl	8008688 <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	6892      	ldr	r2, [r2, #8]
 80072ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	6892      	ldr	r2, [r2, #8]
 80072c6:	f041 0101 	orr.w	r1, r1, #1
 80072ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e040      	b.n	800736c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f006 f8ea 	bl	800d4d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	; 0x24
 8007304:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0201 	bic.w	r2, r2, #1
 8007314:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fb72 	bl	8007a00 <UART_SetConfig>
 800731c:	4603      	mov	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e022      	b.n	800736c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 feae 	bl	8008090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 ff35 	bl	80081d4 <UART_CheckIdleState>
 800736a:	4603      	mov	r3, r0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08a      	sub	sp, #40	; 0x28
 8007378:	af02      	add	r7, sp, #8
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007388:	2b20      	cmp	r3, #32
 800738a:	f040 8081 	bne.w	8007490 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_UART_Transmit+0x26>
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e079      	b.n	8007492 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UART_Transmit+0x38>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e072      	b.n	8007492 <HAL_UART_Transmit+0x11e>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2221      	movs	r2, #33	; 0x21
 80073be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80073c0:	f7f9 f9b2 	bl	8000728 <HAL_GetTick>
 80073c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	88fa      	ldrh	r2, [r7, #6]
 80073ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073de:	d108      	bne.n	80073f2 <HAL_UART_Transmit+0x7e>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	61bb      	str	r3, [r7, #24]
 80073f0:	e003      	b.n	80073fa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073fa:	e02d      	b.n	8007458 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2200      	movs	r2, #0
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 ff29 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e03d      	b.n	8007492 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10b      	bne.n	8007434 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	881a      	ldrh	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007428:	b292      	uxth	r2, r2
 800742a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	3302      	adds	r3, #2
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	e008      	b.n	8007446 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	781a      	ldrb	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	b292      	uxth	r2, r2
 800743e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	3301      	adds	r3, #1
 8007444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1cb      	bne.n	80073fc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2200      	movs	r2, #0
 800746c:	2140      	movs	r1, #64	; 0x40
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fef5 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e009      	b.n	8007492 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2220      	movs	r2, #32
 8007482:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	e000      	b.n	8007492 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007490:	2302      	movs	r3, #2
  }
}
 8007492:	4618      	mov	r0, r3
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b08a      	sub	sp, #40	; 0x28
 800749e:	af02      	add	r7, sp, #8
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	f040 80bb 	bne.w	800762a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_UART_Receive+0x26>
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0b3      	b.n	800762c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_UART_Receive+0x38>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e0ac      	b.n	800762c <HAL_UART_Receive+0x192>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2222      	movs	r2, #34	; 0x22
 80074e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80074e6:	f7f9 f91f 	bl	8000728 <HAL_GetTick>
 80074ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007504:	d10e      	bne.n	8007524 <HAL_UART_Receive+0x8a>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <HAL_UART_Receive+0x80>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007518:	e02d      	b.n	8007576 <HAL_UART_Receive+0xdc>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	22ff      	movs	r2, #255	; 0xff
 800751e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007522:	e028      	b.n	8007576 <HAL_UART_Receive+0xdc>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <HAL_UART_Receive+0xae>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <HAL_UART_Receive+0xa4>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	22ff      	movs	r2, #255	; 0xff
 8007538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800753c:	e01b      	b.n	8007576 <HAL_UART_Receive+0xdc>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	227f      	movs	r2, #127	; 0x7f
 8007542:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007546:	e016      	b.n	8007576 <HAL_UART_Receive+0xdc>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007550:	d10d      	bne.n	800756e <HAL_UART_Receive+0xd4>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <HAL_UART_Receive+0xca>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	227f      	movs	r2, #127	; 0x7f
 800755e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007562:	e008      	b.n	8007576 <HAL_UART_Receive+0xdc>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	223f      	movs	r2, #63	; 0x3f
 8007568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800756c:	e003      	b.n	8007576 <HAL_UART_Receive+0xdc>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800757c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007586:	d108      	bne.n	800759a <HAL_UART_Receive+0x100>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	e003      	b.n	80075a2 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80075a2:	e033      	b.n	800760c <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2200      	movs	r2, #0
 80075ac:	2120      	movs	r1, #32
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fe55 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e036      	b.n	800762c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	8a7b      	ldrh	r3, [r7, #18]
 80075ce:	4013      	ands	r3, r2
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	3302      	adds	r3, #2
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	e00d      	b.n	80075fa <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	8a7b      	ldrh	r3, [r7, #18]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	4013      	ands	r3, r2
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	3301      	adds	r3, #1
 80075f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1c5      	bne.n	80075a4 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	e000      	b.n	800762c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800762a:	2302      	movs	r3, #2
  }
}
 800762c:	4618      	mov	r0, r3
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007646:	2b20      	cmp	r3, #32
 8007648:	f040 808a 	bne.w	8007760 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_UART_Receive_IT+0x24>
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e082      	b.n	8007762 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_UART_Receive_IT+0x36>
 8007666:	2302      	movs	r3, #2
 8007668:	e07b      	b.n	8007762 <HAL_UART_Receive_IT+0x12e>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007696:	d10e      	bne.n	80076b6 <HAL_UART_Receive_IT+0x82>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d105      	bne.n	80076ac <HAL_UART_Receive_IT+0x78>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076aa:	e02d      	b.n	8007708 <HAL_UART_Receive_IT+0xd4>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	22ff      	movs	r2, #255	; 0xff
 80076b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076b4:	e028      	b.n	8007708 <HAL_UART_Receive_IT+0xd4>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10d      	bne.n	80076da <HAL_UART_Receive_IT+0xa6>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d104      	bne.n	80076d0 <HAL_UART_Receive_IT+0x9c>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	22ff      	movs	r2, #255	; 0xff
 80076ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076ce:	e01b      	b.n	8007708 <HAL_UART_Receive_IT+0xd4>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	227f      	movs	r2, #127	; 0x7f
 80076d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076d8:	e016      	b.n	8007708 <HAL_UART_Receive_IT+0xd4>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076e2:	d10d      	bne.n	8007700 <HAL_UART_Receive_IT+0xcc>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <HAL_UART_Receive_IT+0xc2>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	227f      	movs	r2, #127	; 0x7f
 80076f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076f4:	e008      	b.n	8007708 <HAL_UART_Receive_IT+0xd4>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	223f      	movs	r2, #63	; 0x3f
 80076fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076fe:	e003      	b.n	8007708 <HAL_UART_Receive_IT+0xd4>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2222      	movs	r2, #34	; 0x22
 8007712:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772c:	d107      	bne.n	800773e <HAL_UART_Receive_IT+0x10a>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d103      	bne.n	800773e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a0d      	ldr	r2, [pc, #52]	; (8007770 <HAL_UART_Receive_IT+0x13c>)
 800773a:	661a      	str	r2, [r3, #96]	; 0x60
 800773c:	e002      	b.n	8007744 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4a0c      	ldr	r2, [pc, #48]	; (8007774 <HAL_UART_Receive_IT+0x140>)
 8007742:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800775a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	e000      	b.n	8007762 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007760:	2302      	movs	r3, #2
  }
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	08008437 	.word	0x08008437
 8007774:	0800838d 	.word	0x0800838d

08007778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d113      	bne.n	80077ce <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00e      	beq.n	80077ce <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d009      	beq.n	80077ce <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 80ff 	beq.w	80079c2 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
      }
      return;
 80077cc:	e0f9      	b.n	80079c2 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80c1 	beq.w	8007958 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 80b6 	beq.w	8007958 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00e      	beq.n	8007814 <HAL_UART_IRQHandler+0x9c>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2201      	movs	r2, #1
 8007806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780c:	f043 0201 	orr.w	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00e      	beq.n	800783c <HAL_UART_IRQHandler+0xc4>
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2202      	movs	r2, #2
 800782e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007834:	f043 0204 	orr.w	r2, r3, #4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f003 0304 	and.w	r3, r3, #4
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00e      	beq.n	8007864 <HAL_UART_IRQHandler+0xec>
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d009      	beq.n	8007864 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2204      	movs	r2, #4
 8007856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800785c:	f043 0202 	orr.w	r2, r3, #2
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d013      	beq.n	8007896 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2208      	movs	r2, #8
 8007888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800788e:	f043 0208 	orr.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8093 	beq.w	80079c6 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00c      	beq.n	80078c4 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d004      	beq.n	80078e2 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d031      	beq.n	8007946 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fd03 	bl	80082ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d123      	bne.n	800793e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007904:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790a:	2b00      	cmp	r3, #0
 800790c:	d013      	beq.n	8007936 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007912:	4a30      	ldr	r2, [pc, #192]	; (80079d4 <HAL_UART_IRQHandler+0x25c>)
 8007914:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791a:	4618      	mov	r0, r3
 800791c:	f7fa feaa 	bl	8002674 <HAL_DMA_Abort_IT>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d016      	beq.n	8007954 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007934:	e00e      	b.n	8007954 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f858 	bl	80079ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	e00a      	b.n	8007954 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f854 	bl	80079ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	e006      	b.n	8007954 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f850 	bl	80079ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007952:	e038      	b.n	80079c6 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	bf00      	nop
    return;
 8007956:	e036      	b.n	80079c6 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00d      	beq.n	800797e <HAL_UART_IRQHandler+0x206>
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d008      	beq.n	800797e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fdb2 	bl	80084e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800797c:	e026      	b.n	80079cc <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00d      	beq.n	80079a4 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007996:	2b00      	cmp	r3, #0
 8007998:	d017      	beq.n	80079ca <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
    }
    return;
 80079a2:	e012      	b.n	80079ca <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00e      	beq.n	80079cc <HAL_UART_IRQHandler+0x254>
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fcce 	bl	800835a <UART_EndTransmit_IT>
    return;
 80079be:	bf00      	nop
 80079c0:	e004      	b.n	80079cc <HAL_UART_IRQHandler+0x254>
      return;
 80079c2:	bf00      	nop
 80079c4:	e002      	b.n	80079cc <HAL_UART_IRQHandler+0x254>
    return;
 80079c6:	bf00      	nop
 80079c8:	e000      	b.n	80079cc <HAL_UART_IRQHandler+0x254>
    return;
 80079ca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80079cc:	3720      	adds	r7, #32
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	0800832f 	.word	0x0800832f

080079d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007a04:	b088      	sub	sp, #32
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	4bac      	ldr	r3, [pc, #688]	; (8007ce8 <UART_SetConfig+0x2e8>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	69f9      	ldr	r1, [r7, #28]
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4aa2      	ldr	r2, [pc, #648]	; (8007cec <UART_SetConfig+0x2ec>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d004      	beq.n	8007a72 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a99      	ldr	r2, [pc, #612]	; (8007cf0 <UART_SetConfig+0x2f0>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d121      	bne.n	8007ad4 <UART_SetConfig+0xd4>
 8007a90:	4b98      	ldr	r3, [pc, #608]	; (8007cf4 <UART_SetConfig+0x2f4>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d816      	bhi.n	8007acc <UART_SetConfig+0xcc>
 8007a9e:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0xa4>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ac1 	.word	0x08007ac1
 8007aac:	08007abb 	.word	0x08007abb
 8007ab0:	08007ac7 	.word	0x08007ac7
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	76fb      	strb	r3, [r7, #27]
 8007ab8:	e0e8      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007aba:	2302      	movs	r3, #2
 8007abc:	76fb      	strb	r3, [r7, #27]
 8007abe:	e0e5      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	76fb      	strb	r3, [r7, #27]
 8007ac4:	e0e2      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	76fb      	strb	r3, [r7, #27]
 8007aca:	e0df      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007acc:	2310      	movs	r3, #16
 8007ace:	76fb      	strb	r3, [r7, #27]
 8007ad0:	bf00      	nop
 8007ad2:	e0db      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a87      	ldr	r2, [pc, #540]	; (8007cf8 <UART_SetConfig+0x2f8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d134      	bne.n	8007b48 <UART_SetConfig+0x148>
 8007ade:	4b85      	ldr	r3, [pc, #532]	; (8007cf4 <UART_SetConfig+0x2f4>)
 8007ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae4:	f003 030c 	and.w	r3, r3, #12
 8007ae8:	2b0c      	cmp	r3, #12
 8007aea:	d829      	bhi.n	8007b40 <UART_SetConfig+0x140>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <UART_SetConfig+0xf4>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b29 	.word	0x08007b29
 8007af8:	08007b41 	.word	0x08007b41
 8007afc:	08007b41 	.word	0x08007b41
 8007b00:	08007b41 	.word	0x08007b41
 8007b04:	08007b35 	.word	0x08007b35
 8007b08:	08007b41 	.word	0x08007b41
 8007b0c:	08007b41 	.word	0x08007b41
 8007b10:	08007b41 	.word	0x08007b41
 8007b14:	08007b2f 	.word	0x08007b2f
 8007b18:	08007b41 	.word	0x08007b41
 8007b1c:	08007b41 	.word	0x08007b41
 8007b20:	08007b41 	.word	0x08007b41
 8007b24:	08007b3b 	.word	0x08007b3b
 8007b28:	2300      	movs	r3, #0
 8007b2a:	76fb      	strb	r3, [r7, #27]
 8007b2c:	e0ae      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	76fb      	strb	r3, [r7, #27]
 8007b32:	e0ab      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b34:	2304      	movs	r3, #4
 8007b36:	76fb      	strb	r3, [r7, #27]
 8007b38:	e0a8      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	76fb      	strb	r3, [r7, #27]
 8007b3e:	e0a5      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b40:	2310      	movs	r3, #16
 8007b42:	76fb      	strb	r3, [r7, #27]
 8007b44:	bf00      	nop
 8007b46:	e0a1      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a6b      	ldr	r2, [pc, #428]	; (8007cfc <UART_SetConfig+0x2fc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d120      	bne.n	8007b94 <UART_SetConfig+0x194>
 8007b52:	4b68      	ldr	r3, [pc, #416]	; (8007cf4 <UART_SetConfig+0x2f4>)
 8007b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b5c:	2b10      	cmp	r3, #16
 8007b5e:	d00f      	beq.n	8007b80 <UART_SetConfig+0x180>
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	d802      	bhi.n	8007b6a <UART_SetConfig+0x16a>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <UART_SetConfig+0x174>
 8007b68:	e010      	b.n	8007b8c <UART_SetConfig+0x18c>
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d005      	beq.n	8007b7a <UART_SetConfig+0x17a>
 8007b6e:	2b30      	cmp	r3, #48	; 0x30
 8007b70:	d009      	beq.n	8007b86 <UART_SetConfig+0x186>
 8007b72:	e00b      	b.n	8007b8c <UART_SetConfig+0x18c>
 8007b74:	2300      	movs	r3, #0
 8007b76:	76fb      	strb	r3, [r7, #27]
 8007b78:	e088      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	76fb      	strb	r3, [r7, #27]
 8007b7e:	e085      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b80:	2304      	movs	r3, #4
 8007b82:	76fb      	strb	r3, [r7, #27]
 8007b84:	e082      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b86:	2308      	movs	r3, #8
 8007b88:	76fb      	strb	r3, [r7, #27]
 8007b8a:	e07f      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b8c:	2310      	movs	r3, #16
 8007b8e:	76fb      	strb	r3, [r7, #27]
 8007b90:	bf00      	nop
 8007b92:	e07b      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a59      	ldr	r2, [pc, #356]	; (8007d00 <UART_SetConfig+0x300>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d120      	bne.n	8007be0 <UART_SetConfig+0x1e0>
 8007b9e:	4b55      	ldr	r3, [pc, #340]	; (8007cf4 <UART_SetConfig+0x2f4>)
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ba8:	2b40      	cmp	r3, #64	; 0x40
 8007baa:	d00f      	beq.n	8007bcc <UART_SetConfig+0x1cc>
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d802      	bhi.n	8007bb6 <UART_SetConfig+0x1b6>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <UART_SetConfig+0x1c0>
 8007bb4:	e010      	b.n	8007bd8 <UART_SetConfig+0x1d8>
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	d005      	beq.n	8007bc6 <UART_SetConfig+0x1c6>
 8007bba:	2bc0      	cmp	r3, #192	; 0xc0
 8007bbc:	d009      	beq.n	8007bd2 <UART_SetConfig+0x1d2>
 8007bbe:	e00b      	b.n	8007bd8 <UART_SetConfig+0x1d8>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	76fb      	strb	r3, [r7, #27]
 8007bc4:	e062      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	76fb      	strb	r3, [r7, #27]
 8007bca:	e05f      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	76fb      	strb	r3, [r7, #27]
 8007bd0:	e05c      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	76fb      	strb	r3, [r7, #27]
 8007bd6:	e059      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	76fb      	strb	r3, [r7, #27]
 8007bdc:	bf00      	nop
 8007bde:	e055      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a47      	ldr	r2, [pc, #284]	; (8007d04 <UART_SetConfig+0x304>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d124      	bne.n	8007c34 <UART_SetConfig+0x234>
 8007bea:	4b42      	ldr	r3, [pc, #264]	; (8007cf4 <UART_SetConfig+0x2f4>)
 8007bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf8:	d012      	beq.n	8007c20 <UART_SetConfig+0x220>
 8007bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfe:	d802      	bhi.n	8007c06 <UART_SetConfig+0x206>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <UART_SetConfig+0x214>
 8007c04:	e012      	b.n	8007c2c <UART_SetConfig+0x22c>
 8007c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0a:	d006      	beq.n	8007c1a <UART_SetConfig+0x21a>
 8007c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c10:	d009      	beq.n	8007c26 <UART_SetConfig+0x226>
 8007c12:	e00b      	b.n	8007c2c <UART_SetConfig+0x22c>
 8007c14:	2300      	movs	r3, #0
 8007c16:	76fb      	strb	r3, [r7, #27]
 8007c18:	e038      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	76fb      	strb	r3, [r7, #27]
 8007c1e:	e035      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c20:	2304      	movs	r3, #4
 8007c22:	76fb      	strb	r3, [r7, #27]
 8007c24:	e032      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c26:	2308      	movs	r3, #8
 8007c28:	76fb      	strb	r3, [r7, #27]
 8007c2a:	e02f      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	76fb      	strb	r3, [r7, #27]
 8007c30:	bf00      	nop
 8007c32:	e02b      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a2c      	ldr	r2, [pc, #176]	; (8007cec <UART_SetConfig+0x2ec>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d124      	bne.n	8007c88 <UART_SetConfig+0x288>
 8007c3e:	4b2d      	ldr	r3, [pc, #180]	; (8007cf4 <UART_SetConfig+0x2f4>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4c:	d012      	beq.n	8007c74 <UART_SetConfig+0x274>
 8007c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c52:	d802      	bhi.n	8007c5a <UART_SetConfig+0x25a>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <UART_SetConfig+0x268>
 8007c58:	e012      	b.n	8007c80 <UART_SetConfig+0x280>
 8007c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c5e:	d006      	beq.n	8007c6e <UART_SetConfig+0x26e>
 8007c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c64:	d009      	beq.n	8007c7a <UART_SetConfig+0x27a>
 8007c66:	e00b      	b.n	8007c80 <UART_SetConfig+0x280>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	76fb      	strb	r3, [r7, #27]
 8007c6c:	e00e      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	76fb      	strb	r3, [r7, #27]
 8007c72:	e00b      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c74:	2304      	movs	r3, #4
 8007c76:	76fb      	strb	r3, [r7, #27]
 8007c78:	e008      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	76fb      	strb	r3, [r7, #27]
 8007c7e:	e005      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c80:	2310      	movs	r3, #16
 8007c82:	76fb      	strb	r3, [r7, #27]
 8007c84:	bf00      	nop
 8007c86:	e001      	b.n	8007c8c <UART_SetConfig+0x28c>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a16      	ldr	r2, [pc, #88]	; (8007cec <UART_SetConfig+0x2ec>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	f040 80fa 	bne.w	8007e8c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c98:	7efb      	ldrb	r3, [r7, #27]
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d836      	bhi.n	8007d0c <UART_SetConfig+0x30c>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UART_SetConfig+0x2a4>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007d0d 	.word	0x08007d0d
 8007cb4:	08007cd7 	.word	0x08007cd7
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007d0d 	.word	0x08007d0d
 8007cc0:	08007d0d 	.word	0x08007d0d
 8007cc4:	08007cdf 	.word	0x08007cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007cc8:	f7fd f822 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8007ccc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007cce:	e020      	b.n	8007d12 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <UART_SetConfig+0x308>)
 8007cd2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007cd4:	e01d      	b.n	8007d12 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007cd6:	f7fc ff85 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8007cda:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007cdc:	e019      	b.n	8007d12 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ce4:	e015      	b.n	8007d12 <UART_SetConfig+0x312>
 8007ce6:	bf00      	nop
 8007ce8:	efff69f3 	.word	0xefff69f3
 8007cec:	40008000 	.word	0x40008000
 8007cf0:	40013800 	.word	0x40013800
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	40004400 	.word	0x40004400
 8007cfc:	40004800 	.word	0x40004800
 8007d00:	40004c00 	.word	0x40004c00
 8007d04:	40005000 	.word	0x40005000
 8007d08:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	74fb      	strb	r3, [r7, #19]
        break;
 8007d10:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 81ac 	beq.w	8008072 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	4413      	add	r3, r2
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d305      	bcc.n	8007d36 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d902      	bls.n	8007d3c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	74fb      	strb	r3, [r7, #19]
 8007d3a:	e19a      	b.n	8008072 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8007d3c:	7efb      	ldrb	r3, [r7, #27]
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	f200 8091 	bhi.w	8007e66 <UART_SetConfig+0x466>
 8007d44:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x34c>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007d71 	.word	0x08007d71
 8007d50:	08007e67 	.word	0x08007e67
 8007d54:	08007dbd 	.word	0x08007dbd
 8007d58:	08007e67 	.word	0x08007e67
 8007d5c:	08007df1 	.word	0x08007df1
 8007d60:	08007e67 	.word	0x08007e67
 8007d64:	08007e67 	.word	0x08007e67
 8007d68:	08007e67 	.word	0x08007e67
 8007d6c:	08007e3d 	.word	0x08007e3d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d70:	f7fc ffce 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8007d74:	4603      	mov	r3, r0
 8007d76:	4619      	mov	r1, r3
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	f04f 0400 	mov.w	r4, #0
 8007d84:	0214      	lsls	r4, r2, #8
 8007d86:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007d8a:	020b      	lsls	r3, r1, #8
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6852      	ldr	r2, [r2, #4]
 8007d90:	0852      	lsrs	r2, r2, #1
 8007d92:	4611      	mov	r1, r2
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	eb13 0b01 	adds.w	fp, r3, r1
 8007d9c:	eb44 0c02 	adc.w	ip, r4, r2
 8007da0:	4658      	mov	r0, fp
 8007da2:	4661      	mov	r1, ip
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f04f 0400 	mov.w	r4, #0
 8007dac:	461a      	mov	r2, r3
 8007dae:	4623      	mov	r3, r4
 8007db0:	f7f8 fad6 	bl	8000360 <__aeabi_uldivmod>
 8007db4:	4603      	mov	r3, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007dba:	e057      	b.n	8007e6c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	085b      	lsrs	r3, r3, #1
 8007dc2:	f04f 0400 	mov.w	r4, #0
 8007dc6:	49b1      	ldr	r1, [pc, #708]	; (800808c <UART_SetConfig+0x68c>)
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	eb13 0b01 	adds.w	fp, r3, r1
 8007dd0:	eb44 0c02 	adc.w	ip, r4, r2
 8007dd4:	4658      	mov	r0, fp
 8007dd6:	4661      	mov	r1, ip
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f04f 0400 	mov.w	r4, #0
 8007de0:	461a      	mov	r2, r3
 8007de2:	4623      	mov	r3, r4
 8007de4:	f7f8 fabc 	bl	8000360 <__aeabi_uldivmod>
 8007de8:	4603      	mov	r3, r0
 8007dea:	460c      	mov	r4, r1
 8007dec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007dee:	e03d      	b.n	8007e6c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007df0:	f7fc fef8 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8007df4:	4603      	mov	r3, r0
 8007df6:	4619      	mov	r1, r3
 8007df8:	f04f 0200 	mov.w	r2, #0
 8007dfc:	f04f 0300 	mov.w	r3, #0
 8007e00:	f04f 0400 	mov.w	r4, #0
 8007e04:	0214      	lsls	r4, r2, #8
 8007e06:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007e0a:	020b      	lsls	r3, r1, #8
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6852      	ldr	r2, [r2, #4]
 8007e10:	0852      	lsrs	r2, r2, #1
 8007e12:	4611      	mov	r1, r2
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	eb13 0b01 	adds.w	fp, r3, r1
 8007e1c:	eb44 0c02 	adc.w	ip, r4, r2
 8007e20:	4658      	mov	r0, fp
 8007e22:	4661      	mov	r1, ip
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f04f 0400 	mov.w	r4, #0
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4623      	mov	r3, r4
 8007e30:	f7f8 fa96 	bl	8000360 <__aeabi_uldivmod>
 8007e34:	4603      	mov	r3, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007e3a:	e017      	b.n	8007e6c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	085b      	lsrs	r3, r3, #1
 8007e42:	f04f 0400 	mov.w	r4, #0
 8007e46:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007e4a:	f144 0100 	adc.w	r1, r4, #0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f04f 0400 	mov.w	r4, #0
 8007e56:	461a      	mov	r2, r3
 8007e58:	4623      	mov	r3, r4
 8007e5a:	f7f8 fa81 	bl	8000360 <__aeabi_uldivmod>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	460c      	mov	r4, r1
 8007e62:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007e64:	e002      	b.n	8007e6c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	74fb      	strb	r3, [r7, #19]
            break;
 8007e6a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e72:	d308      	bcc.n	8007e86 <UART_SetConfig+0x486>
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e7a:	d204      	bcs.n	8007e86 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	60da      	str	r2, [r3, #12]
 8007e84:	e0f5      	b.n	8008072 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	74fb      	strb	r3, [r7, #19]
 8007e8a:	e0f2      	b.n	8008072 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e94:	d17f      	bne.n	8007f96 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8007e96:	7efb      	ldrb	r3, [r7, #27]
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d85c      	bhi.n	8007f56 <UART_SetConfig+0x556>
 8007e9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <UART_SetConfig+0x4a4>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ee7 	.word	0x08007ee7
 8007eac:	08007f05 	.word	0x08007f05
 8007eb0:	08007f57 	.word	0x08007f57
 8007eb4:	08007f21 	.word	0x08007f21
 8007eb8:	08007f57 	.word	0x08007f57
 8007ebc:	08007f57 	.word	0x08007f57
 8007ec0:	08007f57 	.word	0x08007f57
 8007ec4:	08007f3f 	.word	0x08007f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007ec8:	f7fc ff22 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	005a      	lsls	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	085b      	lsrs	r3, r3, #1
 8007ed6:	441a      	add	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ee4:	e03a      	b.n	8007f5c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007ee6:	f7fc ff29 	bl	8004d3c <HAL_RCC_GetPCLK2Freq>
 8007eea:	4603      	mov	r3, r0
 8007eec:	005a      	lsls	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007f02:	e02b      	b.n	8007f5c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007f0e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6852      	ldr	r2, [r2, #4]
 8007f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007f1e:	e01d      	b.n	8007f5c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007f20:	f7fc fe60 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8007f24:	4603      	mov	r3, r0
 8007f26:	005a      	lsls	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	441a      	add	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007f3c:	e00e      	b.n	8007f5c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007f54:	e002      	b.n	8007f5c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	74fb      	strb	r3, [r7, #19]
        break;
 8007f5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d916      	bls.n	8007f90 <UART_SetConfig+0x590>
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d212      	bcs.n	8007f90 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f023 030f 	bic.w	r3, r3, #15
 8007f72:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	897b      	ldrh	r3, [r7, #10]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	897a      	ldrh	r2, [r7, #10]
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	e070      	b.n	8008072 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	74fb      	strb	r3, [r7, #19]
 8007f94:	e06d      	b.n	8008072 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8007f96:	7efb      	ldrb	r3, [r7, #27]
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d859      	bhi.n	8008050 <UART_SetConfig+0x650>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0x5a4>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fc9 	.word	0x08007fc9
 8007fa8:	08007fe5 	.word	0x08007fe5
 8007fac:	08008001 	.word	0x08008001
 8007fb0:	08008051 	.word	0x08008051
 8007fb4:	0800801d 	.word	0x0800801d
 8007fb8:	08008051 	.word	0x08008051
 8007fbc:	08008051 	.word	0x08008051
 8007fc0:	08008051 	.word	0x08008051
 8007fc4:	08008039 	.word	0x08008039
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007fc8:	f7fc fea2 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	085b      	lsrs	r3, r3, #1
 8007fd4:	441a      	add	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007fe2:	e038      	b.n	8008056 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007fe4:	f7fc feaa 	bl	8004d3c <HAL_RCC_GetPCLK2Freq>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	441a      	add	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ffe:	e02a      	b.n	8008056 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800800a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6852      	ldr	r2, [r2, #4]
 8008012:	fbb3 f3f2 	udiv	r3, r3, r2
 8008016:	b29b      	uxth	r3, r3
 8008018:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800801a:	e01c      	b.n	8008056 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800801c:	f7fc fde2 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8008020:	4602      	mov	r2, r0
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	441a      	add	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	b29b      	uxth	r3, r3
 8008034:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008036:	e00e      	b.n	8008056 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	085b      	lsrs	r3, r3, #1
 800803e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	fbb2 f3f3 	udiv	r3, r2, r3
 800804a:	b29b      	uxth	r3, r3
 800804c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800804e:	e002      	b.n	8008056 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	74fb      	strb	r3, [r7, #19]
        break;
 8008054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b0f      	cmp	r3, #15
 800805a:	d908      	bls.n	800806e <UART_SetConfig+0x66e>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008062:	d204      	bcs.n	800806e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	60da      	str	r2, [r3, #12]
 800806c:	e001      	b.n	8008072 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800807e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800808a:	bf00      	nop
 800808c:	f4240000 	.word	0xf4240000

08008090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	430a      	orrs	r2, r1
 80080da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00a      	beq.n	80080fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	f003 0308 	and.w	r3, r3, #8
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01a      	beq.n	80081a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818e:	d10a      	bne.n	80081a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	605a      	str	r2, [r3, #4]
  }
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af02      	add	r7, sp, #8
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80081e2:	f7f8 faa1 	bl	8000728 <HAL_GetTick>
 80081e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b08      	cmp	r3, #8
 80081f4:	d10e      	bne.n	8008214 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f82a 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e020      	b.n	8008256 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b04      	cmp	r3, #4
 8008220:	d10e      	bne.n	8008240 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008222:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f814 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e00a      	b.n	8008256 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826e:	e02a      	b.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008276:	d026      	beq.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008278:	f7f8 fa56 	bl	8000728 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	429a      	cmp	r2, r3
 8008286:	d302      	bcc.n	800828e <UART_WaitOnFlagUntilTimeout+0x30>
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d11b      	bne.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800829c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0201 	bic.w	r2, r2, #1
 80082ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e00f      	b.n	80082e6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69da      	ldr	r2, [r3, #28]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	4013      	ands	r3, r2
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	bf0c      	ite	eq
 80082d6:	2301      	moveq	r3, #1
 80082d8:	2300      	movne	r3, #0
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d0c5      	beq.n	8008270 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008304:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0201 	bic.w	r2, r2, #1
 8008314:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff fb4d 	bl	80079ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008370:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff fb2a 	bl	80079d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800839a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a0:	2b22      	cmp	r3, #34	; 0x22
 80083a2:	d13a      	bne.n	800841a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80083aa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083ac:	89bb      	ldrh	r3, [r7, #12]
 80083ae:	b2d9      	uxtb	r1, r3
 80083b0:	89fb      	ldrh	r3, [r7, #14]
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b8:	400a      	ands	r2, r1
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d123      	bne.n	800842e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0201 	bic.w	r2, r2, #1
 8008404:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f003 fbf0 	bl	800bbf8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008418:	e009      	b.n	800842e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	8b1b      	ldrh	r3, [r3, #24]
 8008420:	b29a      	uxth	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0208 	orr.w	r2, r2, #8
 800842a:	b292      	uxth	r2, r2
 800842c:	831a      	strh	r2, [r3, #24]
}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008444:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800844a:	2b22      	cmp	r3, #34	; 0x22
 800844c:	d13a      	bne.n	80084c4 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008454:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800845c:	89ba      	ldrh	r2, [r7, #12]
 800845e:	89fb      	ldrh	r3, [r7, #14]
 8008460:	4013      	ands	r3, r2
 8008462:	b29a      	uxth	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846c:	1c9a      	adds	r2, r3, #2
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008478:	b29b      	uxth	r3, r3
 800847a:	3b01      	subs	r3, #1
 800847c:	b29a      	uxth	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d123      	bne.n	80084d8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800849e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f003 fb9b 	bl	800bbf8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084c2:	e009      	b.n	80084d8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	8b1b      	ldrh	r3, [r3, #24]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0208 	orr.w	r2, r2, #8
 80084d4:	b292      	uxth	r2, r2
 80084d6:	831a      	strh	r2, [r3, #24]
}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
#if defined(FMC_BCRx_NBLSET)
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
#endif /* FMC_BCRx_NBLSET */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	6812      	ldr	r2, [r2, #0]
 800850c:	f023 0101 	bic.w	r1, r3, #1
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	2b08      	cmp	r3, #8
 800851c:	d102      	bne.n	8008524 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800851e:	2340      	movs	r3, #64	; 0x40
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e001      	b.n	8008528 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (flashaccess              |
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008532:	4b2b      	ldr	r3, [pc, #172]	; (80085e0 <FMC_NORSRAM_Init+0xec>)
 8008534:	4013      	ands	r3, r2
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	6851      	ldr	r1, [r2, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	4311      	orrs	r1, r2
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	6892      	ldr	r2, [r2, #8]
 8008542:	4311      	orrs	r1, r2
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	68d2      	ldr	r2, [r2, #12]
 8008548:	4311      	orrs	r1, r2
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	6912      	ldr	r2, [r2, #16]
 800854e:	4311      	orrs	r1, r2
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	6952      	ldr	r2, [r2, #20]
 8008554:	4311      	orrs	r1, r2
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	6992      	ldr	r2, [r2, #24]
 800855a:	4311      	orrs	r1, r2
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	69d2      	ldr	r2, [r2, #28]
 8008560:	4311      	orrs	r1, r2
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	6a12      	ldr	r2, [r2, #32]
 8008566:	4311      	orrs	r1, r2
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800856c:	4311      	orrs	r1, r2
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008572:	4311      	orrs	r1, r2
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008578:	4311      	orrs	r1, r2
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800857e:	4311      	orrs	r1, r2
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008584:	4311      	orrs	r1, r2
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800858a:	4311      	orrs	r1, r2
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	4319      	orrs	r1, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                          Init->NBLSetupTime       |
#endif /* FMC_BCRx_NBLSET */
                                                          Init->PageSize));

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085a0:	d10c      	bne.n	80085bc <FMC_NORSRAM_Init+0xc8>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d008      	beq.n	80085bc <FMC_NORSRAM_Init+0xc8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	601a      	str	r2, [r3, #0]
  }

#if defined(FMC_BCR1_WFDIS)
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d006      	beq.n	80085d2 <FMC_NORSRAM_Init+0xde>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085cc:	431a      	orrs	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	ffc00480 	.word	0xffc00480

080085e4 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                             |
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fe:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	431a      	orrs	r2, r3
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	431a      	orrs	r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	041b      	lsls	r3, r3, #16
 800861c:	431a      	orrs	r2, r3
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	3b01      	subs	r3, #1
 8008624:	051b      	lsls	r3, r3, #20
 8008626:	431a      	orrs	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	3b02      	subs	r3, #2
 800862e:	061b      	lsls	r3, r3, #24
 8008630:	431a      	orrs	r2, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	4313      	orrs	r3, r2
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	3201      	adds	r2, #1
 800863c:	4319      	orrs	r1, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        (((Timing->CLKDivision) - 1)      << FMC_BTRx_CLKDIV_Pos)        |
                        (((Timing->DataLatency) - 2)      << FMC_BTRx_DATLAT_Pos)        |
                        (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800864c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008650:	d113      	bne.n	800867a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800865a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1) << FMC_BTRx_CLKDIV_Pos);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	3b01      	subs	r3, #1
 8008662:	051b      	lsls	r3, r3, #20
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1], FMC_BTRx_CLKDIV, tmpr);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	431a      	orrs	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800869c:	d11d      	bne.n	80086da <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                              |
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086a6:	4b13      	ldr	r3, [pc, #76]	; (80086f4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	6811      	ldr	r1, [r2, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	6852      	ldr	r2, [r2, #4]
 80086b2:	0112      	lsls	r2, r2, #4
 80086b4:	4311      	orrs	r1, r2
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	6892      	ldr	r2, [r2, #8]
 80086ba:	0212      	lsls	r2, r2, #8
 80086bc:	4311      	orrs	r1, r2
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	6992      	ldr	r2, [r2, #24]
 80086c2:	4311      	orrs	r1, r2
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	68d2      	ldr	r2, [r2, #12]
 80086c8:	0412      	lsls	r2, r2, #16
 80086ca:	430a      	orrs	r2, r1
 80086cc:	ea43 0102 	orr.w	r1, r3, r2
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80086d8:	e005      	b.n	80086e6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                          Timing->AccessMode                                          |
                          ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80086e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	cff00000 	.word	0xcff00000

080086f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80086f8:	b084      	sub	sp, #16
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	f107 001c 	add.w	r0, r7, #28
 8008706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008716:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800871a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800871e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008722:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008726:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	b004      	add	sp, #16
 8008750:	4770      	bx	lr

08008752 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2203      	movs	r2, #3
 8008778:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800877a:	2002      	movs	r0, #2
 800877c:	f7f7 ffe0 	bl	8000740 <HAL_Delay>

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0303 	and.w	r3, r3, #3
}
 800879a:	4618      	mov	r0, r3
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b085      	sub	sp, #20
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087c4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80087ca:	431a      	orrs	r2, r3
                       Command->CPSM);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80087d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80087e0:	f023 030f 	bic.w	r3, r3, #15
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	b2db      	uxtb	r3, r3
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3314      	adds	r3, #20
 8008822:	461a      	mov	r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	4413      	add	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008860:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008866:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800886c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	4313      	orrs	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008884:	2300      	movs	r3, #0

}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b088      	sub	sp, #32
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80088a0:	2310      	movs	r3, #16
 80088a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088a4:	2340      	movs	r3, #64	; 0x40
 80088a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff ff74 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80088be:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c2:	2110      	movs	r1, #16
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f975 	bl	8008bb4 <SDMMC_GetCmdResp1>
 80088ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088cc:	69fb      	ldr	r3, [r7, #28]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3720      	adds	r7, #32
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b08a      	sub	sp, #40	; 0x28
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80088e6:	2307      	movs	r3, #7
 80088e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088ea:	2340      	movs	r3, #64	; 0x40
 80088ec:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088f6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088f8:	f107 0310 	add.w	r3, r7, #16
 80088fc:	4619      	mov	r1, r3
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff ff51 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008904:	f241 3288 	movw	r2, #5000	; 0x1388
 8008908:	2107      	movs	r1, #7
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 f952 	bl	8008bb4 <SDMMC_GetCmdResp1>
 8008910:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008914:	4618      	mov	r0, r3
 8008916:	3728      	adds	r7, #40	; 0x28
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008928:	2300      	movs	r3, #0
 800892a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800892c:	2300      	movs	r3, #0
 800892e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008938:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff ff30 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f90c 	bl	8008b64 <SDMMC_GetCmdError>
 800894c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800894e:	69fb      	ldr	r3, [r7, #28]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3720      	adds	r7, #32
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008960:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008966:	2308      	movs	r3, #8
 8008968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800896a:	2340      	movs	r3, #64	; 0x40
 800896c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800896e:	2300      	movs	r3, #0
 8008970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008978:	f107 0308 	add.w	r3, r7, #8
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff ff11 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 faf5 	bl	8008f74 <SDMMC_GetCmdResp7>
 800898a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800898c:	69fb      	ldr	r3, [r7, #28]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3720      	adds	r7, #32
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b088      	sub	sp, #32
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80089a4:	2337      	movs	r3, #55	; 0x37
 80089a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089a8:	2340      	movs	r3, #64	; 0x40
 80089aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089ac:	2300      	movs	r3, #0
 80089ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff fef2 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80089c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c6:	2137      	movs	r1, #55	; 0x37
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f8f3 	bl	8008bb4 <SDMMC_GetCmdResp1>
 80089ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089d0:	69fb      	ldr	r3, [r7, #28]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b088      	sub	sp, #32
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ee:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80089f0:	2329      	movs	r3, #41	; 0x29
 80089f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a02:	f107 0308 	add.w	r3, r7, #8
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fecc 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa02 	bl	8008e18 <SDMMC_GetCmdResp3>
 8008a14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a16:	69fb      	ldr	r3, [r7, #28]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3720      	adds	r7, #32
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008a2e:	2306      	movs	r3, #6
 8008a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a32:	2340      	movs	r3, #64	; 0x40
 8008a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a36:	2300      	movs	r3, #0
 8008a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a40:	f107 0308 	add.w	r3, r7, #8
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fead 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	2106      	movs	r1, #6
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f8ae 	bl	8008bb4 <SDMMC_GetCmdResp1>
 8008a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008a70:	2333      	movs	r3, #51	; 0x33
 8008a72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a74:	2340      	movs	r3, #64	; 0x40
 8008a76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a82:	f107 0308 	add.w	r3, r7, #8
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff fe8c 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a92:	2133      	movs	r1, #51	; 0x33
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f88d 	bl	8008bb4 <SDMMC_GetCmdResp1>
 8008a9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3720      	adds	r7, #32
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b088      	sub	sp, #32
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008ab6:	23c0      	movs	r3, #192	; 0xc0
 8008ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ac4:	f107 0308 	add.w	r3, r7, #8
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff fe6b 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f95b 	bl	8008d8c <SDMMC_GetCmdResp2>
 8008ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3720      	adds	r7, #32
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b088      	sub	sp, #32
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008af0:	2309      	movs	r3, #9
 8008af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008af4:	23c0      	movs	r3, #192	; 0xc0
 8008af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff fe4c 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f93c 	bl	8008d8c <SDMMC_GetCmdResp2>
 8008b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b16:	69fb      	ldr	r3, [r7, #28]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3720      	adds	r7, #32
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b32:	2340      	movs	r3, #64	; 0x40
 8008b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b36:	2300      	movs	r3, #0
 8008b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b40:	f107 0308 	add.w	r3, r7, #8
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff fe2d 	bl	80087a6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	2103      	movs	r1, #3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f99b 	bl	8008e8c <SDMMC_GetCmdResp6>
 8008b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b58:	69fb      	ldr	r3, [r7, #28]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3720      	adds	r7, #32
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008b64:	b490      	push	{r4, r7}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b6c:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <SDMMC_GetCmdError+0x48>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a0f      	ldr	r2, [pc, #60]	; (8008bb0 <SDMMC_GetCmdError+0x4c>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	0a5b      	lsrs	r3, r3, #9
 8008b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008b80:	4623      	mov	r3, r4
 8008b82:	1e5c      	subs	r4, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b8c:	e009      	b.n	8008ba2 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f2      	beq.n	8008b80 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	22c5      	movs	r2, #197	; 0xc5
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc90      	pop	{r4, r7}
 8008baa:	4770      	bx	lr
 8008bac:	20000118 	.word	0x20000118
 8008bb0:	10624dd3 	.word	0x10624dd3

08008bb4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008bc2:	4b6f      	ldr	r3, [pc, #444]	; (8008d80 <SDMMC_GetCmdResp1+0x1cc>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a6f      	ldr	r2, [pc, #444]	; (8008d84 <SDMMC_GetCmdResp1+0x1d0>)
 8008bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bcc:	0a5b      	lsrs	r3, r3, #9
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	1e5c      	subs	r4, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008be0:	e0c9      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be6:	617b      	str	r3, [r7, #20]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0f0      	beq.n	8008bd4 <SDMMC_GetCmdResp1+0x20>
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1eb      	bne.n	8008bd4 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d004      	beq.n	8008c12 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c0e:	2304      	movs	r3, #4
 8008c10:	e0b1      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d004      	beq.n	8008c28 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0a6      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	22c5      	movs	r2, #197	; 0xc5
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff fde3 	bl	80087fa <SDMMC_GetCommandResponse>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	7afb      	ldrb	r3, [r7, #11]
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d001      	beq.n	8008c42 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e099      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008c42:	2100      	movs	r1, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff fde5 	bl	8008814 <SDMMC_GetResponse>
 8008c4a:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	4b4e      	ldr	r3, [pc, #312]	; (8008d88 <SDMMC_GetCmdResp1+0x1d4>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	e08d      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	da02      	bge.n	8008c66 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c64:	e087      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008c70:	2340      	movs	r3, #64	; 0x40
 8008c72:	e080      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008c7e:	2380      	movs	r3, #128	; 0x80
 8008c80:	e079      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c90:	e071      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ca0:	e069      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb0:	e061      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cc0:	e059      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd0:	e051      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ce0:	e049      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cf0:	e041      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d00:	e039      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d10:	e031      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d20:	e029      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008d2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d30:	e021      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d40:	e019      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d50:	e011      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d60:	e009      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008d6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d70:	e001      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd90      	pop	{r4, r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000118 	.word	0x20000118
 8008d84:	10624dd3 	.word	0x10624dd3
 8008d88:	fdffe008 	.word	0xfdffe008

08008d8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008d8c:	b490      	push	{r4, r7}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d94:	4b1e      	ldr	r3, [pc, #120]	; (8008e10 <SDMMC_GetCmdResp2+0x84>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a1e      	ldr	r2, [pc, #120]	; (8008e14 <SDMMC_GetCmdResp2+0x88>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	0a5b      	lsrs	r3, r3, #9
 8008da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008da8:	4623      	mov	r3, r4
 8008daa:	1e5c      	subs	r4, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008db0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008db4:	e026      	b.n	8008e04 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0f0      	beq.n	8008da8 <SDMMC_GetCmdResp2+0x1c>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1eb      	bne.n	8008da8 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d004      	beq.n	8008de6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2204      	movs	r2, #4
 8008de0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008de2:	2304      	movs	r3, #4
 8008de4:	e00e      	b.n	8008e04 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d004      	beq.n	8008dfc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e003      	b.n	8008e04 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	22c5      	movs	r2, #197	; 0xc5
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc90      	pop	{r4, r7}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000118 	.word	0x20000118
 8008e14:	10624dd3 	.word	0x10624dd3

08008e18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008e18:	b490      	push	{r4, r7}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e20:	4b18      	ldr	r3, [pc, #96]	; (8008e84 <SDMMC_GetCmdResp3+0x6c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a18      	ldr	r2, [pc, #96]	; (8008e88 <SDMMC_GetCmdResp3+0x70>)
 8008e26:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2a:	0a5b      	lsrs	r3, r3, #9
 8008e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e30:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008e34:	4623      	mov	r3, r4
 8008e36:	1e5c      	subs	r4, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e40:	e01b      	b.n	8008e7a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0f0      	beq.n	8008e34 <SDMMC_GetCmdResp3+0x1c>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1eb      	bne.n	8008e34 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2204      	movs	r2, #4
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e6e:	2304      	movs	r3, #4
 8008e70:	e003      	b.n	8008e7a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	22c5      	movs	r2, #197	; 0xc5
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bc90      	pop	{r4, r7}
 8008e82:	4770      	bx	lr
 8008e84:	20000118 	.word	0x20000118
 8008e88:	10624dd3 	.word	0x10624dd3

08008e8c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008e8c:	b590      	push	{r4, r7, lr}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	460b      	mov	r3, r1
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e9a:	4b34      	ldr	r3, [pc, #208]	; (8008f6c <SDMMC_GetCmdResp6+0xe0>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a34      	ldr	r2, [pc, #208]	; (8008f70 <SDMMC_GetCmdResp6+0xe4>)
 8008ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea4:	0a5b      	lsrs	r3, r3, #9
 8008ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eaa:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008eae:	4623      	mov	r3, r4
 8008eb0:	1e5c      	subs	r4, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d102      	bne.n	8008ebc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008eb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008eba:	e052      	b.n	8008f62 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0f0      	beq.n	8008eae <SDMMC_GetCmdResp6+0x22>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1eb      	bne.n	8008eae <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eda:	f003 0304 	and.w	r3, r3, #4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2204      	movs	r2, #4
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ee8:	2304      	movs	r3, #4
 8008eea:	e03a      	b.n	8008f62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2201      	movs	r2, #1
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e02f      	b.n	8008f62 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f7ff fc79 	bl	80087fa <SDMMC_GetCommandResponse>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	7afb      	ldrb	r3, [r7, #11]
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d001      	beq.n	8008f16 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e025      	b.n	8008f62 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	22c5      	movs	r2, #197	; 0xc5
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f7ff fc78 	bl	8008814 <SDMMC_GetResponse>
 8008f24:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d106      	bne.n	8008f3e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	0c1b      	lsrs	r3, r3, #16
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e011      	b.n	8008f62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f4c:	e009      	b.n	8008f62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f5c:	e001      	b.n	8008f62 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd90      	pop	{r4, r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000118 	.word	0x20000118
 8008f70:	10624dd3 	.word	0x10624dd3

08008f74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008f74:	b490      	push	{r4, r7}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f7c:	4b21      	ldr	r3, [pc, #132]	; (8009004 <SDMMC_GetCmdResp7+0x90>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a21      	ldr	r2, [pc, #132]	; (8009008 <SDMMC_GetCmdResp7+0x94>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	0a5b      	lsrs	r3, r3, #9
 8008f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008f90:	4623      	mov	r3, r4
 8008f92:	1e5c      	subs	r4, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f9c:	e02c      	b.n	8008ff8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0f0      	beq.n	8008f90 <SDMMC_GetCmdResp7+0x1c>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1eb      	bne.n	8008f90 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fca:	2304      	movs	r3, #4
 8008fcc:	e014      	b.n	8008ff8 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e009      	b.n	8008ff8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2240      	movs	r2, #64	; 0x40
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008ff6:	2300      	movs	r3, #0

}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc90      	pop	{r4, r7}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000118 	.word	0x20000118
 8009008:	10624dd3 	.word	0x10624dd3

0800900c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800900c:	b084      	sub	sp, #16
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	f107 001c 	add.w	r0, r7, #28
 800901a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	2b01      	cmp	r3, #1
 8009022:	d122      	bne.n	800906a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800904c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d105      	bne.n	800905e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 f978 	bl	800a354 <USB_CoreReset>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
 8009068:	e01a      	b.n	80090a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 f96c 	bl	800a354 <USB_CoreReset>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	639a      	str	r2, [r3, #56]	; 0x38
 8009092:	e005      	b.n	80090a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090ac:	b004      	add	sp, #16
 80090ae:	4770      	bx	lr

080090b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d165      	bne.n	8009190 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4a3e      	ldr	r2, [pc, #248]	; (80091c0 <USB_SetTurnaroundTime+0x110>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d906      	bls.n	80090da <USB_SetTurnaroundTime+0x2a>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4a3d      	ldr	r2, [pc, #244]	; (80091c4 <USB_SetTurnaroundTime+0x114>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d802      	bhi.n	80090da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090d4:	230f      	movs	r3, #15
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e05c      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	4a39      	ldr	r2, [pc, #228]	; (80091c4 <USB_SetTurnaroundTime+0x114>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d906      	bls.n	80090f0 <USB_SetTurnaroundTime+0x40>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a38      	ldr	r2, [pc, #224]	; (80091c8 <USB_SetTurnaroundTime+0x118>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d802      	bhi.n	80090f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090ea:	230e      	movs	r3, #14
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	e051      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4a35      	ldr	r2, [pc, #212]	; (80091c8 <USB_SetTurnaroundTime+0x118>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d906      	bls.n	8009106 <USB_SetTurnaroundTime+0x56>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4a34      	ldr	r2, [pc, #208]	; (80091cc <USB_SetTurnaroundTime+0x11c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d802      	bhi.n	8009106 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009100:	230d      	movs	r3, #13
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	e046      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4a30      	ldr	r2, [pc, #192]	; (80091cc <USB_SetTurnaroundTime+0x11c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d906      	bls.n	800911c <USB_SetTurnaroundTime+0x6c>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4a2f      	ldr	r2, [pc, #188]	; (80091d0 <USB_SetTurnaroundTime+0x120>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d802      	bhi.n	800911c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009116:	230c      	movs	r3, #12
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e03b      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4a2c      	ldr	r2, [pc, #176]	; (80091d0 <USB_SetTurnaroundTime+0x120>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d906      	bls.n	8009132 <USB_SetTurnaroundTime+0x82>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4a2b      	ldr	r2, [pc, #172]	; (80091d4 <USB_SetTurnaroundTime+0x124>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d802      	bhi.n	8009132 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800912c:	230b      	movs	r3, #11
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e030      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	4a27      	ldr	r2, [pc, #156]	; (80091d4 <USB_SetTurnaroundTime+0x124>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d906      	bls.n	8009148 <USB_SetTurnaroundTime+0x98>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	4a26      	ldr	r2, [pc, #152]	; (80091d8 <USB_SetTurnaroundTime+0x128>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d802      	bhi.n	8009148 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009142:	230a      	movs	r3, #10
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e025      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	4a23      	ldr	r2, [pc, #140]	; (80091d8 <USB_SetTurnaroundTime+0x128>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d906      	bls.n	800915e <USB_SetTurnaroundTime+0xae>
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	4a22      	ldr	r2, [pc, #136]	; (80091dc <USB_SetTurnaroundTime+0x12c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d802      	bhi.n	800915e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009158:	2309      	movs	r3, #9
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e01a      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	4a1e      	ldr	r2, [pc, #120]	; (80091dc <USB_SetTurnaroundTime+0x12c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d906      	bls.n	8009174 <USB_SetTurnaroundTime+0xc4>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	4a1d      	ldr	r2, [pc, #116]	; (80091e0 <USB_SetTurnaroundTime+0x130>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d802      	bhi.n	8009174 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800916e:	2308      	movs	r3, #8
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	e00f      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4a1a      	ldr	r2, [pc, #104]	; (80091e0 <USB_SetTurnaroundTime+0x130>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d906      	bls.n	800918a <USB_SetTurnaroundTime+0xda>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	4a19      	ldr	r2, [pc, #100]	; (80091e4 <USB_SetTurnaroundTime+0x134>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d802      	bhi.n	800918a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009184:	2307      	movs	r3, #7
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	e004      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800918a:	2306      	movs	r3, #6
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	e001      	b.n	8009194 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009190:	2309      	movs	r3, #9
 8009192:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	029b      	lsls	r3, r3, #10
 80091a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80091ac:	431a      	orrs	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	00d8acbf 	.word	0x00d8acbf
 80091c4:	00e4e1bf 	.word	0x00e4e1bf
 80091c8:	00f423ff 	.word	0x00f423ff
 80091cc:	0106737f 	.word	0x0106737f
 80091d0:	011a499f 	.word	0x011a499f
 80091d4:	01312cff 	.word	0x01312cff
 80091d8:	014ca43f 	.word	0x014ca43f
 80091dc:	016e35ff 	.word	0x016e35ff
 80091e0:	01a6ab1f 	.word	0x01a6ab1f
 80091e4:	01e847ff 	.word	0x01e847ff

080091e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f043 0201 	orr.w	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f023 0201 	bic.w	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d106      	bne.n	8009258 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	60da      	str	r2, [r3, #12]
 8009256:	e00b      	b.n	8009270 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60da      	str	r2, [r3, #12]
 800926a:	e001      	b.n	8009270 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e003      	b.n	8009278 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009270:	2032      	movs	r0, #50	; 0x32
 8009272:	f7f7 fa65 	bl	8000740 <HAL_Delay>

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009280:	b084      	sub	sp, #16
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800928e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800929a:	2300      	movs	r3, #0
 800929c:	613b      	str	r3, [r7, #16]
 800929e:	e009      	b.n	80092b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3340      	adds	r3, #64	; 0x40
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3301      	adds	r3, #1
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b0e      	cmp	r3, #14
 80092b8:	d9f2      	bls.n	80092a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d112      	bne.n	80092e6 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e005      	b.n	80092f2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092f8:	461a      	mov	r2, r3
 80092fa:	2300      	movs	r3, #0
 80092fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009304:	4619      	mov	r1, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930c:	461a      	mov	r2, r3
 800930e:	680b      	ldr	r3, [r1, #0]
 8009310:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009312:	2103      	movs	r1, #3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f93d 	bl	8009594 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800931a:	2110      	movs	r1, #16
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f8f1 	bl	8009504 <USB_FlushTxFifo>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f90f 	bl	8009550 <USB_FlushRxFifo>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009342:	461a      	mov	r2, r3
 8009344:	2300      	movs	r3, #0
 8009346:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934e:	461a      	mov	r2, r3
 8009350:	2300      	movs	r3, #0
 8009352:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935a:	461a      	mov	r2, r3
 800935c:	2300      	movs	r3, #0
 800935e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009360:	2300      	movs	r3, #0
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	e043      	b.n	80093ee <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800937c:	d118      	bne.n	80093b0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009390:	461a      	mov	r2, r3
 8009392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	e013      	b.n	80093c2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a6:	461a      	mov	r2, r3
 80093a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	e008      	b.n	80093c2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093bc:	461a      	mov	r2, r3
 80093be:	2300      	movs	r3, #0
 80093c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ce:	461a      	mov	r2, r3
 80093d0:	2300      	movs	r3, #0
 80093d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	461a      	mov	r2, r3
 80093e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	3301      	adds	r3, #1
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d3b7      	bcc.n	8009366 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093f6:	2300      	movs	r3, #0
 80093f8:	613b      	str	r3, [r7, #16]
 80093fa:	e043      	b.n	8009484 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800940e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009412:	d118      	bne.n	8009446 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009426:	461a      	mov	r2, r3
 8009428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	e013      	b.n	8009458 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943c:	461a      	mov	r2, r3
 800943e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	e008      	b.n	8009458 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009452:	461a      	mov	r2, r3
 8009454:	2300      	movs	r3, #0
 8009456:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009464:	461a      	mov	r2, r3
 8009466:	2300      	movs	r3, #0
 8009468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009476:	461a      	mov	r2, r3
 8009478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800947c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	3301      	adds	r3, #1
 8009482:	613b      	str	r3, [r7, #16]
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	429a      	cmp	r2, r3
 800948a:	d3b7      	bcc.n	80093fc <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800949e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	f043 0210 	orr.w	r2, r3, #16
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	699a      	ldr	r2, [r3, #24]
 80094be:	4b10      	ldr	r3, [pc, #64]	; (8009500 <USB_DevInit+0x280>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f043 0208 	orr.w	r2, r3, #8
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d107      	bne.n	80094ee <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094e6:	f043 0304 	orr.w	r3, r3, #4
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094fa:	b004      	add	sp, #16
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	803c3800 	.word	0x803c3800

08009504 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	019b      	lsls	r3, r3, #6
 8009516:	f043 0220 	orr.w	r2, r3, #32
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3301      	adds	r3, #1
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	4a09      	ldr	r2, [pc, #36]	; (800954c <USB_FlushTxFifo+0x48>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d901      	bls.n	8009530 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e006      	b.n	800953e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b20      	cmp	r3, #32
 800953a:	d0f0      	beq.n	800951e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	00030d40 	.word	0x00030d40

08009550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2210      	movs	r2, #16
 8009560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3301      	adds	r3, #1
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4a09      	ldr	r2, [pc, #36]	; (8009590 <USB_FlushRxFifo+0x40>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d901      	bls.n	8009574 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e006      	b.n	8009582 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b10      	cmp	r3, #16
 800957e:	d0f0      	beq.n	8009562 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	00030d40 	.word	0x00030d40

08009594 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095b4:	4313      	orrs	r3, r2
 80095b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b087      	sub	sp, #28
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f003 0306 	and.w	r3, r3, #6
 80095de:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d002      	beq.n	80095ec <USB_GetDevSpeed+0x26>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b06      	cmp	r3, #6
 80095ea:	d102      	bne.n	80095f2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80095ec:	2302      	movs	r3, #2
 80095ee:	75fb      	strb	r3, [r7, #23]
 80095f0:	e001      	b.n	80095f6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80095f2:	230f      	movs	r3, #15
 80095f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	785b      	ldrb	r3, [r3, #1]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d13a      	bne.n	8009696 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009626:	69da      	ldr	r2, [r3, #28]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	f003 030f 	and.w	r3, r3, #15
 8009630:	2101      	movs	r1, #1
 8009632:	fa01 f303 	lsl.w	r3, r1, r3
 8009636:	b29b      	uxth	r3, r3
 8009638:	68f9      	ldr	r1, [r7, #12]
 800963a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800963e:	4313      	orrs	r3, r2
 8009640:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d155      	bne.n	8009704 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	78db      	ldrb	r3, [r3, #3]
 8009672:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009674:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	059b      	lsls	r3, r3, #22
 800967a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800967c:	4313      	orrs	r3, r2
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	0151      	lsls	r1, r2, #5
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	440a      	add	r2, r1
 8009686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800968e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009692:	6013      	str	r3, [r2, #0]
 8009694:	e036      	b.n	8009704 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969c:	69da      	ldr	r2, [r3, #28]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	f003 030f 	and.w	r3, r3, #15
 80096a6:	2101      	movs	r1, #1
 80096a8:	fa01 f303 	lsl.w	r3, r1, r3
 80096ac:	041b      	lsls	r3, r3, #16
 80096ae:	68f9      	ldr	r1, [r7, #12]
 80096b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096b4:	4313      	orrs	r3, r2
 80096b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d11a      	bne.n	8009704 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	78db      	ldrb	r3, [r3, #3]
 80096e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80096ea:	430b      	orrs	r3, r1
 80096ec:	4313      	orrs	r3, r2
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009702:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
	...

08009714 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d135      	bne.n	800979c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	2101      	movs	r1, #1
 8009742:	fa01 f303 	lsl.w	r3, r1, r3
 8009746:	b29b      	uxth	r3, r3
 8009748:	43db      	mvns	r3, r3
 800974a:	68f9      	ldr	r1, [r7, #12]
 800974c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009750:	4013      	ands	r3, r2
 8009752:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800975a:	69da      	ldr	r2, [r3, #28]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f003 030f 	and.w	r3, r3, #15
 8009764:	2101      	movs	r1, #1
 8009766:	fa01 f303 	lsl.w	r3, r1, r3
 800976a:	b29b      	uxth	r3, r3
 800976c:	43db      	mvns	r3, r3
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009774:	4013      	ands	r3, r2
 8009776:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	0159      	lsls	r1, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	440b      	add	r3, r1
 800978e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009792:	4619      	mov	r1, r3
 8009794:	4b1f      	ldr	r3, [pc, #124]	; (8009814 <USB_DeactivateEndpoint+0x100>)
 8009796:	4013      	ands	r3, r2
 8009798:	600b      	str	r3, [r1, #0]
 800979a:	e034      	b.n	8009806 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	f003 030f 	and.w	r3, r3, #15
 80097ac:	2101      	movs	r1, #1
 80097ae:	fa01 f303 	lsl.w	r3, r1, r3
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	43db      	mvns	r3, r3
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097bc:	4013      	ands	r3, r2
 80097be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c6:	69da      	ldr	r2, [r3, #28]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	f003 030f 	and.w	r3, r3, #15
 80097d0:	2101      	movs	r1, #1
 80097d2:	fa01 f303 	lsl.w	r3, r1, r3
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	43db      	mvns	r3, r3
 80097da:	68f9      	ldr	r1, [r7, #12]
 80097dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097e0:	4013      	ands	r3, r2
 80097e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	0159      	lsls	r1, r3, #5
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	440b      	add	r3, r1
 80097fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fe:	4619      	mov	r1, r3
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <USB_DeactivateEndpoint+0x104>)
 8009802:	4013      	ands	r3, r2
 8009804:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	ec337800 	.word	0xec337800
 8009818:	eff37800 	.word	0xeff37800

0800981c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	2b01      	cmp	r3, #1
 8009836:	f040 810a 	bne.w	8009a4e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d132      	bne.n	80098a8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	0151      	lsls	r1, r2, #5
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	440a      	add	r2, r1
 8009858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800985c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	0151      	lsls	r1, r2, #5
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	440a      	add	r2, r1
 800987c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	440a      	add	r2, r1
 800989c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a0:	0cdb      	lsrs	r3, r3, #19
 80098a2:	04db      	lsls	r3, r3, #19
 80098a4:	6113      	str	r3, [r2, #16]
 80098a6:	e074      	b.n	8009992 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	0151      	lsls	r1, r2, #5
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	440a      	add	r2, r1
 80098be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c2:	0cdb      	lsrs	r3, r3, #19
 80098c4:	04db      	lsls	r3, r3, #19
 80098c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	0151      	lsls	r1, r2, #5
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	440a      	add	r2, r1
 80098de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f8:	691a      	ldr	r2, [r3, #16]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	6959      	ldr	r1, [r3, #20]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	440b      	add	r3, r1
 8009904:	1e59      	subs	r1, r3, #1
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	fbb1 f3f3 	udiv	r3, r1, r3
 800990e:	04d9      	lsls	r1, r3, #19
 8009910:	4baf      	ldr	r3, [pc, #700]	; (8009bd0 <USB_EPStartXfer+0x3b4>)
 8009912:	400b      	ands	r3, r1
 8009914:	6939      	ldr	r1, [r7, #16]
 8009916:	0148      	lsls	r0, r1, #5
 8009918:	6979      	ldr	r1, [r7, #20]
 800991a:	4401      	add	r1, r0
 800991c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009920:	4313      	orrs	r3, r2
 8009922:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	691a      	ldr	r2, [r3, #16]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800993a:	6939      	ldr	r1, [r7, #16]
 800993c:	0148      	lsls	r0, r1, #5
 800993e:	6979      	ldr	r1, [r7, #20]
 8009940:	4401      	add	r1, r0
 8009942:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009946:	4313      	orrs	r3, r2
 8009948:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	78db      	ldrb	r3, [r3, #3]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d11f      	bne.n	8009992 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	0151      	lsls	r1, r2, #5
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	440a      	add	r2, r1
 8009968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800996c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009970:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	0151      	lsls	r1, r2, #5
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	440a      	add	r2, r1
 8009988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800998c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009990:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099b0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	78db      	ldrb	r3, [r3, #3]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d015      	beq.n	80099e6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 8100 	beq.w	8009bc4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	2101      	movs	r1, #1
 80099d6:	fa01 f303 	lsl.w	r3, r1, r3
 80099da:	6979      	ldr	r1, [r7, #20]
 80099dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099e0:	4313      	orrs	r3, r2
 80099e2:	634b      	str	r3, [r1, #52]	; 0x34
 80099e4:	e0ee      	b.n	8009bc4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d110      	bne.n	8009a18 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	0151      	lsls	r1, r2, #5
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	440a      	add	r2, r1
 8009a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	e00f      	b.n	8009a38 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	0151      	lsls	r1, r2, #5
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	440a      	add	r2, r1
 8009a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a36:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	68d9      	ldr	r1, [r3, #12]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	781a      	ldrb	r2, [r3, #0]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f9e2 	bl	8009e10 <USB_WritePacket>
 8009a4c:	e0ba      	b.n	8009bc4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	0151      	lsls	r1, r2, #5
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	440a      	add	r2, r1
 8009a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a68:	0cdb      	lsrs	r3, r3, #19
 8009a6a:	04db      	lsls	r3, r3, #19
 8009a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	0151      	lsls	r1, r2, #5
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	440a      	add	r2, r1
 8009a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d123      	bne.n	8009ae2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ab0:	6939      	ldr	r1, [r7, #16]
 8009ab2:	0148      	lsls	r0, r1, #5
 8009ab4:	6979      	ldr	r1, [r7, #20]
 8009ab6:	4401      	add	r1, r0
 8009ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009abc:	4313      	orrs	r3, r2
 8009abe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	0151      	lsls	r1, r2, #5
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	440a      	add	r2, r1
 8009ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ade:	6113      	str	r3, [r2, #16]
 8009ae0:	e033      	b.n	8009b4a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	695a      	ldr	r2, [r3, #20]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	4413      	add	r3, r2
 8009aec:	1e5a      	subs	r2, r3, #1
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	89fb      	ldrh	r3, [r7, #14]
 8009b08:	04d9      	lsls	r1, r3, #19
 8009b0a:	4b31      	ldr	r3, [pc, #196]	; (8009bd0 <USB_EPStartXfer+0x3b4>)
 8009b0c:	400b      	ands	r3, r1
 8009b0e:	6939      	ldr	r1, [r7, #16]
 8009b10:	0148      	lsls	r0, r1, #5
 8009b12:	6979      	ldr	r1, [r7, #20]
 8009b14:	4401      	add	r1, r0
 8009b16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2a:	691a      	ldr	r2, [r3, #16]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	89f9      	ldrh	r1, [r7, #14]
 8009b32:	fb01 f303 	mul.w	r3, r1, r3
 8009b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b3a:	6939      	ldr	r1, [r7, #16]
 8009b3c:	0148      	lsls	r0, r1, #5
 8009b3e:	6979      	ldr	r1, [r7, #20]
 8009b40:	4401      	add	r1, r0
 8009b42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b46:	4313      	orrs	r3, r2
 8009b48:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	78db      	ldrb	r3, [r3, #3]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d128      	bne.n	8009ba4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d110      	bne.n	8009b84 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	0151      	lsls	r1, r2, #5
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	440a      	add	r2, r1
 8009b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	e00f      	b.n	8009ba4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	0151      	lsls	r1, r2, #5
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	440a      	add	r2, r1
 8009b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	0151      	lsls	r1, r2, #5
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	440a      	add	r2, r1
 8009bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	1ff80000 	.word	0x1ff80000

08009bd4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	785b      	ldrb	r3, [r3, #1]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	f040 80ab 	bne.w	8009d48 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d132      	bne.n	8009c60 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	0151      	lsls	r1, r2, #5
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	440a      	add	r2, r1
 8009c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c58:	0cdb      	lsrs	r3, r3, #19
 8009c5a:	04db      	lsls	r3, r3, #19
 8009c5c:	6113      	str	r3, [r2, #16]
 8009c5e:	e04e      	b.n	8009cfe <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	0151      	lsls	r1, r2, #5
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	440a      	add	r2, r1
 8009c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c7a:	0cdb      	lsrs	r3, r3, #19
 8009c7c:	04db      	lsls	r3, r3, #19
 8009c7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ca2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	695a      	ldr	r2, [r3, #20]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d903      	bls.n	8009cb8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	0151      	lsls	r1, r2, #5
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	440a      	add	r2, r1
 8009cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce4:	691a      	ldr	r2, [r3, #16]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	0148      	lsls	r0, r1, #5
 8009cf2:	68f9      	ldr	r1, [r7, #12]
 8009cf4:	4401      	add	r1, r0
 8009cf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	0151      	lsls	r1, r2, #5
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	440a      	add	r2, r1
 8009d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d1c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d06d      	beq.n	8009e02 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	2101      	movs	r1, #1
 8009d38:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3c:	68f9      	ldr	r1, [r7, #12]
 8009d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d42:	4313      	orrs	r3, r2
 8009d44:	634b      	str	r3, [r1, #52]	; 0x34
 8009d46:	e05c      	b.n	8009e02 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d62:	0cdb      	lsrs	r3, r3, #19
 8009d64:	04db      	lsls	r3, r3, #19
 8009d66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d8a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	0151      	lsls	r1, r2, #5
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	440a      	add	r2, r1
 8009db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc8:	691a      	ldr	r2, [r3, #16]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	0148      	lsls	r0, r1, #5
 8009dd6:	68f9      	ldr	r1, [r7, #12]
 8009dd8:	4401      	add	r1, r0
 8009dda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009dde:	4313      	orrs	r3, r2
 8009de0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	0151      	lsls	r1, r2, #5
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	440a      	add	r2, r1
 8009df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b089      	sub	sp, #36	; 0x24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	460b      	mov	r3, r1
 8009e20:	71fb      	strb	r3, [r7, #7]
 8009e22:	4613      	mov	r3, r2
 8009e24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009e2e:	88bb      	ldrh	r3, [r7, #4]
 8009e30:	3303      	adds	r3, #3
 8009e32:	089b      	lsrs	r3, r3, #2
 8009e34:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009e36:	2300      	movs	r3, #0
 8009e38:	61bb      	str	r3, [r7, #24]
 8009e3a:	e00f      	b.n	8009e5c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e3c:	79fb      	ldrb	r3, [r7, #7]
 8009e3e:	031a      	lsls	r2, r3, #12
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e48:	461a      	mov	r2, r3
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	3304      	adds	r3, #4
 8009e54:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	61bb      	str	r3, [r7, #24]
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d3eb      	bcc.n	8009e3c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3724      	adds	r7, #36	; 0x24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b089      	sub	sp, #36	; 0x24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	3303      	adds	r3, #3
 8009e8c:	089b      	lsrs	r3, r3, #2
 8009e8e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009e90:	2300      	movs	r3, #0
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	e00b      	b.n	8009eae <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	69ba      	ldr	r2, [r7, #24]
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d3ef      	bcc.n	8009e96 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009eb6:	69fb      	ldr	r3, [r7, #28]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3724      	adds	r7, #36	; 0x24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d12c      	bne.n	8009f3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	db12      	blt.n	8009f18 <USB_EPSetStall+0x54>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00f      	beq.n	8009f18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	0151      	lsls	r1, r2, #5
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	440a      	add	r2, r1
 8009f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	e02b      	b.n	8009f92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	db12      	blt.n	8009f72 <USB_EPSetStall+0xae>
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00f      	beq.n	8009f72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	0151      	lsls	r1, r2, #5
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	440a      	add	r2, r1
 8009f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	785b      	ldrb	r3, [r3, #1]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d128      	bne.n	800a00e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	0151      	lsls	r1, r2, #5
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	440a      	add	r2, r1
 8009fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	78db      	ldrb	r3, [r3, #3]
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d003      	beq.n	8009fec <USB_EPClearStall+0x4c>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	78db      	ldrb	r3, [r3, #3]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d138      	bne.n	800a05e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	e027      	b.n	800a05e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a02c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	78db      	ldrb	r3, [r3, #3]
 800a032:	2b03      	cmp	r3, #3
 800a034:	d003      	beq.n	800a03e <USB_EPClearStall+0x9e>
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	78db      	ldrb	r3, [r3, #3]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d10f      	bne.n	800a05e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4413      	add	r3, r2
 800a046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	0151      	lsls	r1, r2, #5
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	440a      	add	r2, r1
 800a054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a05c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a08a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a08e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	78fb      	ldrb	r3, [r7, #3]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a0a0:	68f9      	ldr	r1, [r7, #12]
 800a0a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0d2:	f023 0302 	bic.w	r3, r3, #2
 800a0d6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a0d8:	2003      	movs	r0, #3
 800a0da:	f7f6 fb31 	bl	8000740 <HAL_Delay>

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a102:	f043 0302 	orr.w	r3, r3, #2
 800a106:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a108:	2003      	movs	r0, #3
 800a10a:	f7f6 fb19 	bl	8000740 <HAL_Delay>

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	4013      	ands	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a130:	68fb      	ldr	r3, [r7, #12]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	4013      	ands	r3, r2
 800a160:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	0c1b      	lsrs	r3, r3, #16
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a172:	b480      	push	{r7}
 800a174:	b085      	sub	sp, #20
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	4013      	ands	r3, r2
 800a194:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	b29b      	uxth	r3, r3
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b085      	sub	sp, #20
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a1b6:	78fb      	ldrb	r3, [r7, #3]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b087      	sub	sp, #28
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a204:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a206:	78fb      	ldrb	r3, [r7, #3]
 800a208:	f003 030f 	and.w	r3, r3, #15
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	fa22 f303 	lsr.w	r3, r2, r3
 800a212:	01db      	lsls	r3, r3, #7
 800a214:	b2db      	uxtb	r3, r3
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	4313      	orrs	r3, r2
 800a21a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	015a      	lsls	r2, r3, #5
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	4413      	add	r3, r2
 800a224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	4013      	ands	r3, r2
 800a22e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a230:	68bb      	ldr	r3, [r7, #8]
}
 800a232:	4618      	mov	r0, r3
 800a234:	371c      	adds	r7, #28
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a23e:	b480      	push	{r7}
 800a240:	b083      	sub	sp, #12
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	f003 0301 	and.w	r3, r3, #1
}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b085      	sub	sp, #20
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a274:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a278:	f023 0307 	bic.w	r3, r3, #7
 800a27c:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f003 0306 	and.w	r3, r3, #6
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d109      	bne.n	800a2a2 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29c:	f043 0303 	orr.w	r3, r3, #3
 800a2a0:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	333c      	adds	r3, #60	; 0x3c
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	4a1c      	ldr	r2, [pc, #112]	; (800a350 <USB_EP0_OutStart+0x8c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d90a      	bls.n	800a2fa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2f4:	d101      	bne.n	800a2fa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e024      	b.n	800a344 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a300:	461a      	mov	r2, r3
 800a302:	2300      	movs	r3, #0
 800a304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a328:	f043 0318 	orr.w	r3, r3, #24
 800a32c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a33c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a340:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	4f54300a 	.word	0x4f54300a

0800a354 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	60fb      	str	r3, [r7, #12]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4a13      	ldr	r2, [pc, #76]	; (800a3b8 <USB_CoreReset+0x64>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d901      	bls.n	800a372 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e01b      	b.n	800a3aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	daf2      	bge.n	800a360 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f043 0201 	orr.w	r2, r3, #1
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3301      	adds	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4a09      	ldr	r2, [pc, #36]	; (800a3b8 <USB_CoreReset+0x64>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d901      	bls.n	800a39c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e006      	b.n	800a3aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d0f0      	beq.n	800a38a <USB_CoreReset+0x36>

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	00030d40 	.word	0x00030d40

0800a3bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	7c1b      	ldrb	r3, [r3, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d115      	bne.n	800a400 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3d8:	2202      	movs	r2, #2
 800a3da:	2181      	movs	r1, #129	; 0x81
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f003 ff29 	bl	800e234 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f003 ff1f 	bl	800e234 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800a3fe:	e012      	b.n	800a426 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a400:	2340      	movs	r3, #64	; 0x40
 800a402:	2202      	movs	r2, #2
 800a404:	2181      	movs	r1, #129	; 0x81
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f003 ff14 	bl	800e234 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a412:	2340      	movs	r3, #64	; 0x40
 800a414:	2202      	movs	r2, #2
 800a416:	2101      	movs	r1, #1
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f003 ff0b 	bl	800e234 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a426:	2308      	movs	r3, #8
 800a428:	2203      	movs	r2, #3
 800a42a:	2182      	movs	r1, #130	; 0x82
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f003 ff01 	bl	800e234 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800a438:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a43c:	f004 f912 	bl	800e664 <USBD_static_malloc>
 800a440:	4602      	mov	r2, r0
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d102      	bne.n	800a458 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a452:	2301      	movs	r3, #1
 800a454:	73fb      	strb	r3, [r7, #15]
 800a456:	e026      	b.n	800a4a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a45e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2200      	movs	r2, #0
 800a476:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	7c1b      	ldrb	r3, [r3, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d109      	bne.n	800a496 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a48c:	2101      	movs	r1, #1
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f004 f84c 	bl	800e52c <USBD_LL_PrepareReceive>
 800a494:	e007      	b.n	800a4a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	2101      	movs	r1, #1
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f004 f843 	bl	800e52c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a4c0:	2181      	movs	r1, #129	; 0x81
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f003 fef4 	bl	800e2b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f003 feed 	bl	800e2b0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a4de:	2182      	movs	r1, #130	; 0x82
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f003 fee5 	bl	800e2b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00e      	beq.n	800a514 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a506:	4618      	mov	r0, r3
 800a508:	f004 f8ba 	bl	800e680 <USBD_static_free>
    pdev->pClassData = NULL;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800a514:	7bfb      	ldrb	r3, [r7, #15]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b086      	sub	sp, #24
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a52e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a534:	2300      	movs	r3, #0
 800a536:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a544:	2b00      	cmp	r3, #0
 800a546:	d039      	beq.n	800a5bc <USBD_CDC_Setup+0x9e>
 800a548:	2b20      	cmp	r3, #32
 800a54a:	d17c      	bne.n	800a646 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	88db      	ldrh	r3, [r3, #6]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d029      	beq.n	800a5a8 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	da11      	bge.n	800a582 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800a56a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	88d2      	ldrh	r2, [r2, #6]
 800a570:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a572:	6939      	ldr	r1, [r7, #16]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	88db      	ldrh	r3, [r3, #6]
 800a578:	461a      	mov	r2, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f001 f9b8 	bl	800b8f0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800a580:	e068      	b.n	800a654 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	785a      	ldrb	r2, [r3, #1]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	88db      	ldrh	r3, [r3, #6]
 800a590:	b2da      	uxtb	r2, r3
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a598:	6939      	ldr	r1, [r7, #16]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	88db      	ldrh	r3, [r3, #6]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 f9d3 	bl	800b94c <USBD_CtlPrepareRx>
    break;
 800a5a6:	e055      	b.n	800a654 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	7850      	ldrb	r0, [r2, #1]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	4798      	blx	r3
    break;
 800a5ba:	e04b      	b.n	800a654 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	2b0a      	cmp	r3, #10
 800a5c2:	d017      	beq.n	800a5f4 <USBD_CDC_Setup+0xd6>
 800a5c4:	2b0b      	cmp	r3, #11
 800a5c6:	d029      	beq.n	800a61c <USBD_CDC_Setup+0xfe>
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d133      	bne.n	800a634 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d107      	bne.n	800a5e6 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800a5d6:	f107 030c 	add.w	r3, r7, #12
 800a5da:	2202      	movs	r2, #2
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 f986 	bl	800b8f0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a5e4:	e02e      	b.n	800a644 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800a5e6:	6839      	ldr	r1, [r7, #0]
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 f916 	bl	800b81a <USBD_CtlError>
			  ret = USBD_FAIL;
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f2:	e027      	b.n	800a644 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d107      	bne.n	800a60e <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800a5fe:	f107 030f 	add.w	r3, r7, #15
 800a602:	2201      	movs	r2, #1
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 f972 	bl	800b8f0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a60c:	e01a      	b.n	800a644 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 f902 	bl	800b81a <USBD_CtlError>
			  ret = USBD_FAIL;
 800a616:	2302      	movs	r3, #2
 800a618:	75fb      	strb	r3, [r7, #23]
      break;
 800a61a:	e013      	b.n	800a644 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a622:	2b03      	cmp	r3, #3
 800a624:	d00d      	beq.n	800a642 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f8f6 	bl	800b81a <USBD_CtlError>
			  ret = USBD_FAIL;
 800a62e:	2302      	movs	r3, #2
 800a630:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a632:	e006      	b.n	800a642 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f001 f8ef 	bl	800b81a <USBD_CtlError>
      ret = USBD_FAIL;
 800a63c:	2302      	movs	r3, #2
 800a63e:	75fb      	strb	r3, [r7, #23]
      break;
 800a640:	e000      	b.n	800a644 <USBD_CDC_Setup+0x126>
      break;
 800a642:	bf00      	nop
    }
    break;
 800a644:	e006      	b.n	800a654 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 f8e6 	bl	800b81a <USBD_CtlError>
    ret = USBD_FAIL;
 800a64e:	2302      	movs	r3, #2
 800a650:	75fb      	strb	r3, [r7, #23]
    break;
 800a652:	bf00      	nop
  }

  return ret;
 800a654:	7dfb      	ldrb	r3, [r7, #23]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	460b      	mov	r3, r1
 800a668:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a670:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a678:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a680:	2b00      	cmp	r3, #0
 800a682:	d03a      	beq.n	800a6fa <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a684:	78fa      	ldrb	r2, [r7, #3]
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4613      	mov	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	331c      	adds	r3, #28
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d029      	beq.n	800a6ee <USBD_CDC_DataIn+0x90>
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	331c      	adds	r3, #28
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	78f9      	ldrb	r1, [r7, #3]
 800a6ae:	68b8      	ldr	r0, [r7, #8]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	1a5b      	subs	r3, r3, r1
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4403      	add	r3, r0
 800a6ba:	3344      	adds	r3, #68	; 0x44
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	fbb2 f1f3 	udiv	r1, r2, r3
 800a6c2:	fb03 f301 	mul.w	r3, r3, r1
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d110      	bne.n	800a6ee <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a6cc:	78fa      	ldrb	r2, [r7, #3]
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	440b      	add	r3, r1
 800a6da:	331c      	adds	r3, #28
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800a6e0:	78f9      	ldrb	r1, [r7, #3]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f003 fee6 	bl	800e4b8 <USBD_LL_Transmit>
 800a6ec:	e003      	b.n	800a6f6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	e000      	b.n	800a6fc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a6fa:	2302      	movs	r3, #2
  }
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a716:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f003 ff3f 	bl	800e5a0 <USBD_LL_GetRxDataSize>
 800a722:	4602      	mov	r2, r0
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00d      	beq.n	800a750 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a748:	4611      	mov	r1, r2
 800a74a:	4798      	blx	r3

    return USBD_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e000      	b.n	800a752 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a750:	2302      	movs	r3, #2
  }
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a768:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a770:	2b00      	cmp	r3, #0
 800a772:	d015      	beq.n	800a7a0 <USBD_CDC_EP0_RxReady+0x46>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a77a:	2bff      	cmp	r3, #255	; 0xff
 800a77c:	d010      	beq.n	800a7a0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a78c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a794:	b292      	uxth	r2, r2
 800a796:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	22ff      	movs	r2, #255	; 0xff
 800a79c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2243      	movs	r2, #67	; 0x43
 800a7b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a7ba:	4b03      	ldr	r3, [pc, #12]	; (800a7c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	20000090 	.word	0x20000090

0800a7cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2243      	movs	r2, #67	; 0x43
 800a7d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a7da:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	2000004c 	.word	0x2000004c

0800a7ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2243      	movs	r2, #67	; 0x43
 800a7f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a7fa:	4b03      	ldr	r3, [pc, #12]	; (800a808 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	200000d4 	.word	0x200000d4

0800a80c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	220a      	movs	r2, #10
 800a818:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a81a:	4b03      	ldr	r3, [pc, #12]	; (800a828 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	20000008 	.word	0x20000008

0800a82c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a836:	2302      	movs	r3, #2
 800a838:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d005      	beq.n	800a84c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b087      	sub	sp, #28
 800a85e:	af00      	add	r7, sp, #0
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	60b9      	str	r1, [r7, #8]
 800a864:	4613      	mov	r3, r2
 800a866:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a86e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a878:	88fa      	ldrh	r2, [r7, #6]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	371c      	adds	r7, #28
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a89e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d017      	beq.n	800a900 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	7c1b      	ldrb	r3, [r3, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d109      	bne.n	800a8ec <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f003 fe21 	bl	800e52c <USBD_LL_PrepareReceive>
 800a8ea:	e007      	b.n	800a8fc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f003 fe18 	bl	800e52c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e000      	b.n	800a902 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a900:	2302      	movs	r3, #2
  }
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	4613      	mov	r3, r2
 800a916:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a91e:	2302      	movs	r3, #2
 800a920:	e01a      	b.n	800a958 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	79fa      	ldrb	r2, [r7, #7]
 800a94e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f003 fbf1 	bl	800e138 <USBD_LL_Init>

  return USBD_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d006      	beq.n	800a982 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73fb      	strb	r3, [r7, #15]
 800a980:	e001      	b.n	800a986 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a982:	2302      	movs	r3, #2
 800a984:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a986:	7bfb      	ldrb	r3, [r7, #15]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f003 fc17 	bl	800e1d0 <USBD_LL_Start>

  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00c      	beq.n	800a9f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	78fa      	ldrb	r2, [r7, #3]
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	4798      	blx	r3
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	4611      	mov	r1, r2
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	4798      	blx	r3
  return USBD_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 feb1 	bl	800b7a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800aa5a:	f003 031f 	and.w	r3, r3, #31
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d00c      	beq.n	800aa7c <USBD_LL_SetupStage+0x56>
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d302      	bcc.n	800aa6c <USBD_LL_SetupStage+0x46>
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d010      	beq.n	800aa8c <USBD_LL_SetupStage+0x66>
 800aa6a:	e017      	b.n	800aa9c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fa05 	bl	800ae84 <USBD_StdDevReq>
    break;
 800aa7a:	e01a      	b.n	800aab2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fa67 	bl	800af58 <USBD_StdItfReq>
    break;
 800aa8a:	e012      	b.n	800aab2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 faa5 	bl	800afe4 <USBD_StdEPReq>
    break;
 800aa9a:	e00a      	b.n	800aab2 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800aaa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f003 fc36 	bl	800e31c <USBD_LL_StallEP>
    break;
 800aab0:	bf00      	nop
  }

  return USBD_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	460b      	mov	r3, r1
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800aaca:	7afb      	ldrb	r3, [r7, #11]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d14b      	bne.n	800ab68 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800aad6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d134      	bne.n	800ab4c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	68da      	ldr	r2, [r3, #12]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d919      	bls.n	800ab22 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	68da      	ldr	r2, [r3, #12]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	1ad2      	subs	r2, r2, r3
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d203      	bcs.n	800ab10 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	e002      	b.n	800ab16 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	461a      	mov	r2, r3
 800ab18:	6879      	ldr	r1, [r7, #4]
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f000 ff34 	bl	800b988 <USBD_CtlContinueRx>
 800ab20:	e038      	b.n	800ab94 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00a      	beq.n	800ab44 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d105      	bne.n	800ab44 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f000 ff31 	bl	800b9ac <USBD_CtlSendStatus>
 800ab4a:	e023      	b.n	800ab94 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ab52:	2b05      	cmp	r3, #5
 800ab54:	d11e      	bne.n	800ab94 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800ab5e:	2100      	movs	r1, #0
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f003 fbdb 	bl	800e31c <USBD_LL_StallEP>
 800ab66:	e015      	b.n	800ab94 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00d      	beq.n	800ab90 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d108      	bne.n	800ab90 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	7afa      	ldrb	r2, [r7, #11]
 800ab88:	4611      	mov	r1, r2
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	4798      	blx	r3
 800ab8e:	e001      	b.n	800ab94 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab90:	2302      	movs	r3, #2
 800ab92:	e000      	b.n	800ab96 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b086      	sub	sp, #24
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	60f8      	str	r0, [r7, #12]
 800aba6:	460b      	mov	r3, r1
 800aba8:	607a      	str	r2, [r7, #4]
 800abaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800abac:	7afb      	ldrb	r3, [r7, #11]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d17f      	bne.n	800acb2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	3314      	adds	r3, #20
 800abb6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d15c      	bne.n	800ac7c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d915      	bls.n	800abfa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	68da      	ldr	r2, [r3, #12]
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	1ad2      	subs	r2, r2, r3
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	461a      	mov	r2, r3
 800abe4:	6879      	ldr	r1, [r7, #4]
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 fe9e 	bl	800b928 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800abec:	2300      	movs	r3, #0
 800abee:	2200      	movs	r2, #0
 800abf0:	2100      	movs	r1, #0
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f003 fc9a 	bl	800e52c <USBD_LL_PrepareReceive>
 800abf8:	e04e      	b.n	800ac98 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	6912      	ldr	r2, [r2, #16]
 800ac02:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac06:	fb02 f201 	mul.w	r2, r2, r1
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d11c      	bne.n	800ac4a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d316      	bcc.n	800ac4a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	689a      	ldr	r2, [r3, #8]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d20f      	bcs.n	800ac4a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fe7a 	bl	800b928 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2100      	movs	r1, #0
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f003 fc72 	bl	800e52c <USBD_LL_PrepareReceive>
 800ac48:	e026      	b.n	800ac98 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d105      	bne.n	800ac6c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ac6c:	2180      	movs	r1, #128	; 0x80
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f003 fb54 	bl	800e31c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 feac 	bl	800b9d2 <USBD_CtlReceiveStatus>
 800ac7a:	e00d      	b.n	800ac98 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d004      	beq.n	800ac90 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ac90:	2180      	movs	r1, #128	; 0x80
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f003 fb42 	bl	800e31c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d11d      	bne.n	800acde <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f7ff fe82 	bl	800a9ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800acb0:	e015      	b.n	800acde <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00d      	beq.n	800acda <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d108      	bne.n	800acda <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	7afa      	ldrb	r2, [r7, #11]
 800acd2:	4611      	mov	r1, r2
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	4798      	blx	r3
 800acd8:	e001      	b.n	800acde <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800acda:	2302      	movs	r3, #2
 800acdc:	e000      	b.n	800ace0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acf0:	2340      	movs	r3, #64	; 0x40
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f003 fa9c 	bl	800e234 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2240      	movs	r2, #64	; 0x40
 800ad08:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad0c:	2340      	movs	r3, #64	; 0x40
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2180      	movs	r1, #128	; 0x80
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f003 fa8e 	bl	800e234 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2240      	movs	r2, #64	; 0x40
 800ad22:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d009      	beq.n	800ad60 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	6852      	ldr	r2, [r2, #4]
 800ad58:	b2d2      	uxtb	r2, r2
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	4798      	blx	r3
  }

  return USBD_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	78fa      	ldrb	r2, [r7, #3]
 800ad7a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2204      	movs	r2, #4
 800ada2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	d10b      	bne.n	800ae00 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	6852      	ldr	r2, [r2, #4]
 800ae70:	b2d2      	uxtb	r2, r2
 800ae72:	4611      	mov	r1, r2
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	4798      	blx	r3

  return USBD_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
	...

0800ae84 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae9a:	2b20      	cmp	r3, #32
 800ae9c:	d004      	beq.n	800aea8 <USBD_StdDevReq+0x24>
 800ae9e:	2b40      	cmp	r3, #64	; 0x40
 800aea0:	d002      	beq.n	800aea8 <USBD_StdDevReq+0x24>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d008      	beq.n	800aeb8 <USBD_StdDevReq+0x34>
 800aea6:	e04c      	b.n	800af42 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	4798      	blx	r3
    break;
 800aeb6:	e049      	b.n	800af4c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	785b      	ldrb	r3, [r3, #1]
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	d83a      	bhi.n	800af36 <USBD_StdDevReq+0xb2>
 800aec0:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <USBD_StdDevReq+0x44>)
 800aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec6:	bf00      	nop
 800aec8:	0800af19 	.word	0x0800af19
 800aecc:	0800af2d 	.word	0x0800af2d
 800aed0:	0800af37 	.word	0x0800af37
 800aed4:	0800af23 	.word	0x0800af23
 800aed8:	0800af37 	.word	0x0800af37
 800aedc:	0800aefb 	.word	0x0800aefb
 800aee0:	0800aef1 	.word	0x0800aef1
 800aee4:	0800af37 	.word	0x0800af37
 800aee8:	0800af0f 	.word	0x0800af0f
 800aeec:	0800af05 	.word	0x0800af05
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f9d2 	bl	800b29c <USBD_GetDescriptor>
      break;
 800aef8:	e022      	b.n	800af40 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fae3 	bl	800b4c8 <USBD_SetAddress>
      break;
 800af02:	e01d      	b.n	800af40 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fb20 	bl	800b54c <USBD_SetConfig>
      break;
 800af0c:	e018      	b.n	800af40 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fba9 	bl	800b668 <USBD_GetConfig>
      break;
 800af16:	e013      	b.n	800af40 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fbd8 	bl	800b6d0 <USBD_GetStatus>
      break;
 800af20:	e00e      	b.n	800af40 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fc06 	bl	800b736 <USBD_SetFeature>
      break;
 800af2a:	e009      	b.n	800af40 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fc15 	bl	800b75e <USBD_ClrFeature>
      break;
 800af34:	e004      	b.n	800af40 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fc6e 	bl	800b81a <USBD_CtlError>
      break;
 800af3e:	bf00      	nop
    }
    break;
 800af40:	e004      	b.n	800af4c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fc68 	bl	800b81a <USBD_CtlError>
    break;
 800af4a:	bf00      	nop
  }

  return ret;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop

0800af58 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af6e:	2b20      	cmp	r3, #32
 800af70:	d003      	beq.n	800af7a <USBD_StdItfReq+0x22>
 800af72:	2b40      	cmp	r3, #64	; 0x40
 800af74:	d001      	beq.n	800af7a <USBD_StdItfReq+0x22>
 800af76:	2b00      	cmp	r3, #0
 800af78:	d12a      	bne.n	800afd0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800af80:	3b01      	subs	r3, #1
 800af82:	2b02      	cmp	r3, #2
 800af84:	d81d      	bhi.n	800afc2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	889b      	ldrh	r3, [r3, #4]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d813      	bhi.n	800afb8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	4798      	blx	r3
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	88db      	ldrh	r3, [r3, #6]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d110      	bne.n	800afcc <USBD_StdItfReq+0x74>
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10d      	bne.n	800afcc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fcfb 	bl	800b9ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800afb6:	e009      	b.n	800afcc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fc2d 	bl	800b81a <USBD_CtlError>
      break;
 800afc0:	e004      	b.n	800afcc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fc28 	bl	800b81a <USBD_CtlError>
      break;
 800afca:	e000      	b.n	800afce <USBD_StdItfReq+0x76>
      break;
 800afcc:	bf00      	nop
    }
    break;
 800afce:	e004      	b.n	800afda <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fc21 	bl	800b81a <USBD_CtlError>
    break;
 800afd8:	bf00      	nop
  }

  return USBD_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	889b      	ldrh	r3, [r3, #4]
 800aff6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b000:	2b20      	cmp	r3, #32
 800b002:	d004      	beq.n	800b00e <USBD_StdEPReq+0x2a>
 800b004:	2b40      	cmp	r3, #64	; 0x40
 800b006:	d002      	beq.n	800b00e <USBD_StdEPReq+0x2a>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d008      	beq.n	800b01e <USBD_StdEPReq+0x3a>
 800b00c:	e13b      	b.n	800b286 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
    break;
 800b01c:	e138      	b.n	800b290 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b026:	2b20      	cmp	r3, #32
 800b028:	d10a      	bne.n	800b040 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	4798      	blx	r3
 800b038:	4603      	mov	r3, r0
 800b03a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
 800b03e:	e128      	b.n	800b292 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	785b      	ldrb	r3, [r3, #1]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d03e      	beq.n	800b0c6 <USBD_StdEPReq+0xe2>
 800b048:	2b03      	cmp	r3, #3
 800b04a:	d002      	beq.n	800b052 <USBD_StdEPReq+0x6e>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d070      	beq.n	800b132 <USBD_StdEPReq+0x14e>
 800b050:	e113      	b.n	800b27a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d002      	beq.n	800b062 <USBD_StdEPReq+0x7e>
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d015      	beq.n	800b08c <USBD_StdEPReq+0xa8>
 800b060:	e02b      	b.n	800b0ba <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00c      	beq.n	800b082 <USBD_StdEPReq+0x9e>
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	2b80      	cmp	r3, #128	; 0x80
 800b06c:	d009      	beq.n	800b082 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f003 f952 	bl	800e31c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800b078:	2180      	movs	r1, #128	; 0x80
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f003 f94e 	bl	800e31c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b080:	e020      	b.n	800b0c4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fbc8 	bl	800b81a <USBD_CtlError>
        break;
 800b08a:	e01b      	b.n	800b0c4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	885b      	ldrh	r3, [r3, #2]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10e      	bne.n	800b0b2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00b      	beq.n	800b0b2 <USBD_StdEPReq+0xce>
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	2b80      	cmp	r3, #128	; 0x80
 800b09e:	d008      	beq.n	800b0b2 <USBD_StdEPReq+0xce>
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	88db      	ldrh	r3, [r3, #6]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d104      	bne.n	800b0b2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f003 f935 	bl	800e31c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fc7a 	bl	800b9ac <USBD_CtlSendStatus>

        break;
 800b0b8:	e004      	b.n	800b0c4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fbac 	bl	800b81a <USBD_CtlError>
        break;
 800b0c2:	bf00      	nop
      }
      break;
 800b0c4:	e0de      	b.n	800b284 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d002      	beq.n	800b0d6 <USBD_StdEPReq+0xf2>
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d015      	beq.n	800b100 <USBD_StdEPReq+0x11c>
 800b0d4:	e026      	b.n	800b124 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00c      	beq.n	800b0f6 <USBD_StdEPReq+0x112>
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	2b80      	cmp	r3, #128	; 0x80
 800b0e0:	d009      	beq.n	800b0f6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f003 f918 	bl	800e31c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800b0ec:	2180      	movs	r1, #128	; 0x80
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f003 f914 	bl	800e31c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b0f4:	e01c      	b.n	800b130 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fb8e 	bl	800b81a <USBD_CtlError>
        break;
 800b0fe:	e017      	b.n	800b130 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	885b      	ldrh	r3, [r3, #2]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d112      	bne.n	800b12e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d004      	beq.n	800b11c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f003 f936 	bl	800e388 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fc45 	bl	800b9ac <USBD_CtlSendStatus>
        }
        break;
 800b122:	e004      	b.n	800b12e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fb77 	bl	800b81a <USBD_CtlError>
        break;
 800b12c:	e000      	b.n	800b130 <USBD_StdEPReq+0x14c>
        break;
 800b12e:	bf00      	nop
      }
      break;
 800b130:	e0a8      	b.n	800b284 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d002      	beq.n	800b142 <USBD_StdEPReq+0x15e>
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d031      	beq.n	800b1a4 <USBD_StdEPReq+0x1c0>
 800b140:	e095      	b.n	800b26e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b142:	7bbb      	ldrb	r3, [r7, #14]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d007      	beq.n	800b158 <USBD_StdEPReq+0x174>
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	2b80      	cmp	r3, #128	; 0x80
 800b14c:	d004      	beq.n	800b158 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fb62 	bl	800b81a <USBD_CtlError>
          break;
 800b156:	e08f      	b.n	800b278 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	da0b      	bge.n	800b178 <USBD_StdEPReq+0x194>
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b166:	4613      	mov	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	3310      	adds	r3, #16
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	4413      	add	r3, r2
 800b174:	3304      	adds	r3, #4
 800b176:	e00a      	b.n	800b18e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b17e:	4613      	mov	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	4413      	add	r3, r2
 800b18e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2202      	movs	r2, #2
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fba7 	bl	800b8f0 <USBD_CtlSendData>
          break;
 800b1a2:	e069      	b.n	800b278 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800b1a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	da11      	bge.n	800b1d0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	f003 020f 	and.w	r2, r3, #15
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	440b      	add	r3, r1
 800b1be:	3318      	adds	r3, #24
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d117      	bne.n	800b1f6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fb26 	bl	800b81a <USBD_CtlError>
            break;
 800b1ce:	e053      	b.n	800b278 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1d0:	7bbb      	ldrb	r3, [r7, #14]
 800b1d2:	f003 020f 	and.w	r2, r3, #15
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	440b      	add	r3, r1
 800b1e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d104      	bne.n	800b1f6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fb13 	bl	800b81a <USBD_CtlError>
            break;
 800b1f4:	e040      	b.n	800b278 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	da0b      	bge.n	800b216 <USBD_StdEPReq+0x232>
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	3310      	adds	r3, #16
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	4413      	add	r3, r2
 800b212:	3304      	adds	r3, #4
 800b214:	e00a      	b.n	800b22c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	4413      	add	r3, r2
 800b22c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <USBD_StdEPReq+0x256>
 800b234:	7bbb      	ldrb	r3, [r7, #14]
 800b236:	2b80      	cmp	r3, #128	; 0x80
 800b238:	d103      	bne.n	800b242 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e00e      	b.n	800b260 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b242:	7bbb      	ldrb	r3, [r7, #14]
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f003 f8d4 	bl	800e3f4 <USBD_LL_IsStallEP>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2201      	movs	r2, #1
 800b256:	601a      	str	r2, [r3, #0]
 800b258:	e002      	b.n	800b260 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2202      	movs	r2, #2
 800b264:	4619      	mov	r1, r3
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fb42 	bl	800b8f0 <USBD_CtlSendData>
          break;
 800b26c:	e004      	b.n	800b278 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fad2 	bl	800b81a <USBD_CtlError>
        break;
 800b276:	bf00      	nop
      }
      break;
 800b278:	e004      	b.n	800b284 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800b27a:	6839      	ldr	r1, [r7, #0]
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 facc 	bl	800b81a <USBD_CtlError>
      break;
 800b282:	bf00      	nop
    }
    break;
 800b284:	e004      	b.n	800b290 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fac6 	bl	800b81a <USBD_CtlError>
    break;
 800b28e:	bf00      	nop
  }

  return ret;
 800b290:	7bfb      	ldrb	r3, [r7, #15]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
	...

0800b29c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	885b      	ldrh	r3, [r3, #2]
 800b2aa:	0a1b      	lsrs	r3, r3, #8
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	2b0e      	cmp	r3, #14
 800b2b2:	f200 80e5 	bhi.w	800b480 <USBD_GetDescriptor+0x1e4>
 800b2b6:	a201      	add	r2, pc, #4	; (adr r2, 800b2bc <USBD_GetDescriptor+0x20>)
 800b2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2bc:	0800b311 	.word	0x0800b311
 800b2c0:	0800b329 	.word	0x0800b329
 800b2c4:	0800b369 	.word	0x0800b369
 800b2c8:	0800b481 	.word	0x0800b481
 800b2cc:	0800b481 	.word	0x0800b481
 800b2d0:	0800b42d 	.word	0x0800b42d
 800b2d4:	0800b453 	.word	0x0800b453
 800b2d8:	0800b481 	.word	0x0800b481
 800b2dc:	0800b481 	.word	0x0800b481
 800b2e0:	0800b481 	.word	0x0800b481
 800b2e4:	0800b481 	.word	0x0800b481
 800b2e8:	0800b481 	.word	0x0800b481
 800b2ec:	0800b481 	.word	0x0800b481
 800b2f0:	0800b481 	.word	0x0800b481
 800b2f4:	0800b2f9 	.word	0x0800b2f9
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	7c12      	ldrb	r2, [r2, #16]
 800b304:	f107 010a 	add.w	r1, r7, #10
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	60f8      	str	r0, [r7, #12]
    break;
 800b30e:	e0bc      	b.n	800b48a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 010a 	add.w	r1, r7, #10
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
    break;
 800b326:	e0b0      	b.n	800b48a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	7c1b      	ldrb	r3, [r3, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10d      	bne.n	800b34c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b338:	f107 020a 	add.w	r2, r7, #10
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
 800b340:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3301      	adds	r3, #1
 800b346:	2202      	movs	r2, #2
 800b348:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b34a:	e09e      	b.n	800b48a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b354:	f107 020a 	add.w	r2, r7, #10
 800b358:	4610      	mov	r0, r2
 800b35a:	4798      	blx	r3
 800b35c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	2202      	movs	r2, #2
 800b364:	701a      	strb	r2, [r3, #0]
    break;
 800b366:	e090      	b.n	800b48a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	885b      	ldrh	r3, [r3, #2]
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b05      	cmp	r3, #5
 800b370:	d856      	bhi.n	800b420 <USBD_GetDescriptor+0x184>
 800b372:	a201      	add	r2, pc, #4	; (adr r2, 800b378 <USBD_GetDescriptor+0xdc>)
 800b374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b378:	0800b391 	.word	0x0800b391
 800b37c:	0800b3a9 	.word	0x0800b3a9
 800b380:	0800b3c1 	.word	0x0800b3c1
 800b384:	0800b3d9 	.word	0x0800b3d9
 800b388:	0800b3f1 	.word	0x0800b3f1
 800b38c:	0800b409 	.word	0x0800b409
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	7c12      	ldrb	r2, [r2, #16]
 800b39c:	f107 010a 	add.w	r1, r7, #10
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	60f8      	str	r0, [r7, #12]
      break;
 800b3a6:	e040      	b.n	800b42a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	7c12      	ldrb	r2, [r2, #16]
 800b3b4:	f107 010a 	add.w	r1, r7, #10
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	4798      	blx	r3
 800b3bc:	60f8      	str	r0, [r7, #12]
      break;
 800b3be:	e034      	b.n	800b42a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	7c12      	ldrb	r2, [r2, #16]
 800b3cc:	f107 010a 	add.w	r1, r7, #10
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	60f8      	str	r0, [r7, #12]
      break;
 800b3d6:	e028      	b.n	800b42a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	7c12      	ldrb	r2, [r2, #16]
 800b3e4:	f107 010a 	add.w	r1, r7, #10
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4798      	blx	r3
 800b3ec:	60f8      	str	r0, [r7, #12]
      break;
 800b3ee:	e01c      	b.n	800b42a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	7c12      	ldrb	r2, [r2, #16]
 800b3fc:	f107 010a 	add.w	r1, r7, #10
 800b400:	4610      	mov	r0, r2
 800b402:	4798      	blx	r3
 800b404:	60f8      	str	r0, [r7, #12]
      break;
 800b406:	e010      	b.n	800b42a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	7c12      	ldrb	r2, [r2, #16]
 800b414:	f107 010a 	add.w	r1, r7, #10
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	60f8      	str	r0, [r7, #12]
      break;
 800b41e:	e004      	b.n	800b42a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 f9f9 	bl	800b81a <USBD_CtlError>
      return;
 800b428:	e04b      	b.n	800b4c2 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800b42a:	e02e      	b.n	800b48a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	7c1b      	ldrb	r3, [r3, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d109      	bne.n	800b448 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43c:	f107 020a 	add.w	r2, r7, #10
 800b440:	4610      	mov	r0, r2
 800b442:	4798      	blx	r3
 800b444:	60f8      	str	r0, [r7, #12]
      break;
 800b446:	e020      	b.n	800b48a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f9e5 	bl	800b81a <USBD_CtlError>
      return;
 800b450:	e037      	b.n	800b4c2 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	7c1b      	ldrb	r3, [r3, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10d      	bne.n	800b476 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b462:	f107 020a 	add.w	r2, r7, #10
 800b466:	4610      	mov	r0, r2
 800b468:	4798      	blx	r3
 800b46a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3301      	adds	r3, #1
 800b470:	2207      	movs	r2, #7
 800b472:	701a      	strb	r2, [r3, #0]
      break;
 800b474:	e009      	b.n	800b48a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f9ce 	bl	800b81a <USBD_CtlError>
      return;
 800b47e:	e020      	b.n	800b4c2 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f9c9 	bl	800b81a <USBD_CtlError>
    return;
 800b488:	e01b      	b.n	800b4c2 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800b48a:	897b      	ldrh	r3, [r7, #10]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d011      	beq.n	800b4b4 <USBD_GetDescriptor+0x218>
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	88db      	ldrh	r3, [r3, #6]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00d      	beq.n	800b4b4 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	88da      	ldrh	r2, [r3, #6]
 800b49c:	897b      	ldrh	r3, [r7, #10]
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	bf28      	it	cs
 800b4a2:	4613      	movcs	r3, r2
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800b4a8:	897b      	ldrh	r3, [r7, #10]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	68f9      	ldr	r1, [r7, #12]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa1e 	bl	800b8f0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	88db      	ldrh	r3, [r3, #6]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fa75 	bl	800b9ac <USBD_CtlSendStatus>
  }
}
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	889b      	ldrh	r3, [r3, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d130      	bne.n	800b53c <USBD_SetAddress+0x74>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	88db      	ldrh	r3, [r3, #6]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d12c      	bne.n	800b53c <USBD_SetAddress+0x74>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	885b      	ldrh	r3, [r3, #2]
 800b4e6:	2b7f      	cmp	r3, #127	; 0x7f
 800b4e8:	d828      	bhi.n	800b53c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	885b      	ldrh	r3, [r3, #2]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b4fc:	2b03      	cmp	r3, #3
 800b4fe:	d104      	bne.n	800b50a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f989 	bl	800b81a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b508:	e01c      	b.n	800b544 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7bfa      	ldrb	r2, [r7, #15]
 800b50e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f002 ff98 	bl	800e44c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fa45 	bl	800b9ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d004      	beq.n	800b532 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b530:	e008      	b.n	800b544 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b53a:	e003      	b.n	800b544 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f96b 	bl	800b81a <USBD_CtlError>
  }
}
 800b544:	bf00      	nop
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	885b      	ldrh	r3, [r3, #2]
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	4b41      	ldr	r3, [pc, #260]	; (800b664 <USBD_SetConfig+0x118>)
 800b55e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b560:	4b40      	ldr	r3, [pc, #256]	; (800b664 <USBD_SetConfig+0x118>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d904      	bls.n	800b572 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f955 	bl	800b81a <USBD_CtlError>
 800b570:	e075      	b.n	800b65e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d002      	beq.n	800b582 <USBD_SetConfig+0x36>
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d023      	beq.n	800b5c8 <USBD_SetConfig+0x7c>
 800b580:	e062      	b.n	800b648 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800b582:	4b38      	ldr	r3, [pc, #224]	; (800b664 <USBD_SetConfig+0x118>)
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d01a      	beq.n	800b5c0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800b58a:	4b36      	ldr	r3, [pc, #216]	; (800b664 <USBD_SetConfig+0x118>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2203      	movs	r2, #3
 800b598:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b59c:	4b31      	ldr	r3, [pc, #196]	; (800b664 <USBD_SetConfig+0x118>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff fa0d 	bl	800a9c2 <USBD_SetClassConfig>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d104      	bne.n	800b5b8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f932 	bl	800b81a <USBD_CtlError>
          return;
 800b5b6:	e052      	b.n	800b65e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f9f7 	bl	800b9ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b5be:	e04e      	b.n	800b65e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f9f3 	bl	800b9ac <USBD_CtlSendStatus>
      break;
 800b5c6:	e04a      	b.n	800b65e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5c8:	4b26      	ldr	r3, [pc, #152]	; (800b664 <USBD_SetConfig+0x118>)
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d112      	bne.n	800b5f6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800b5d8:	4b22      	ldr	r3, [pc, #136]	; (800b664 <USBD_SetConfig+0x118>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800b5e2:	4b20      	ldr	r3, [pc, #128]	; (800b664 <USBD_SetConfig+0x118>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff fa09 	bl	800aa00 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f9dc 	bl	800b9ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b5f4:	e033      	b.n	800b65e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800b5f6:	4b1b      	ldr	r3, [pc, #108]	; (800b664 <USBD_SetConfig+0x118>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d01d      	beq.n	800b640 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff f9f7 	bl	800aa00 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b612:	4b14      	ldr	r3, [pc, #80]	; (800b664 <USBD_SetConfig+0x118>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b61c:	4b11      	ldr	r3, [pc, #68]	; (800b664 <USBD_SetConfig+0x118>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff f9cd 	bl	800a9c2 <USBD_SetClassConfig>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d104      	bne.n	800b638 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f8f2 	bl	800b81a <USBD_CtlError>
          return;
 800b636:	e012      	b.n	800b65e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f9b7 	bl	800b9ac <USBD_CtlSendStatus>
      break;
 800b63e:	e00e      	b.n	800b65e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f9b3 	bl	800b9ac <USBD_CtlSendStatus>
      break;
 800b646:	e00a      	b.n	800b65e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f8e5 	bl	800b81a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <USBD_SetConfig+0x118>)
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7ff f9d2 	bl	800aa00 <USBD_ClrClassConfig>
      break;
 800b65c:	bf00      	nop
    }
  }
}
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	20000230 	.word	0x20000230

0800b668 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	88db      	ldrh	r3, [r3, #6]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d004      	beq.n	800b684 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f8cc 	bl	800b81a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800b682:	e021      	b.n	800b6c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	db17      	blt.n	800b6be <USBD_GetConfig+0x56>
 800b68e:	2b02      	cmp	r3, #2
 800b690:	dd02      	ble.n	800b698 <USBD_GetConfig+0x30>
 800b692:	2b03      	cmp	r3, #3
 800b694:	d00b      	beq.n	800b6ae <USBD_GetConfig+0x46>
 800b696:	e012      	b.n	800b6be <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f922 	bl	800b8f0 <USBD_CtlSendData>
      break;
 800b6ac:	e00c      	b.n	800b6c8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f91a 	bl	800b8f0 <USBD_CtlSendData>
      break;
 800b6bc:	e004      	b.n	800b6c8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f8aa 	bl	800b81a <USBD_CtlError>
      break;
 800b6c6:	bf00      	nop
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d81e      	bhi.n	800b724 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	88db      	ldrh	r3, [r3, #6]
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d004      	beq.n	800b6f8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f892 	bl	800b81a <USBD_CtlError>
      break;
 800b6f6:	e01a      	b.n	800b72e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d005      	beq.n	800b714 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f043 0202 	orr.w	r2, r3, #2
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	330c      	adds	r3, #12
 800b718:	2202      	movs	r2, #2
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f8e7 	bl	800b8f0 <USBD_CtlSendData>
    break;
 800b722:	e004      	b.n	800b72e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800b724:	6839      	ldr	r1, [r7, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f877 	bl	800b81a <USBD_CtlError>
    break;
 800b72c:	bf00      	nop
  }
}
 800b72e:	bf00      	nop
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b082      	sub	sp, #8
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	885b      	ldrh	r3, [r3, #2]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d106      	bne.n	800b756 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f92b 	bl	800b9ac <USBD_CtlSendStatus>
  }

}
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b76e:	3b01      	subs	r3, #1
 800b770:	2b02      	cmp	r3, #2
 800b772:	d80b      	bhi.n	800b78c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	885b      	ldrh	r3, [r3, #2]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d10c      	bne.n	800b796 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f911 	bl	800b9ac <USBD_CtlSendStatus>
    }
    break;
 800b78a:	e004      	b.n	800b796 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f843 	bl	800b81a <USBD_CtlError>
    break;
 800b794:	e000      	b.n	800b798 <USBD_ClrFeature+0x3a>
    break;
 800b796:	bf00      	nop
  }
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	781a      	ldrb	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	785a      	ldrb	r2, [r3, #1]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	3302      	adds	r3, #2
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	3303      	adds	r3, #3
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	021b      	lsls	r3, r3, #8
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	4413      	add	r3, r2
 800b7d0:	b29a      	uxth	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	3305      	adds	r3, #5
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	021b      	lsls	r3, r3, #8
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	4413      	add	r3, r2
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	3306      	adds	r3, #6
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	3307      	adds	r3, #7
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	b29b      	uxth	r3, r3
 800b802:	021b      	lsls	r3, r3, #8
 800b804:	b29b      	uxth	r3, r3
 800b806:	4413      	add	r3, r2
 800b808:	b29a      	uxth	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	80da      	strh	r2, [r3, #6]

}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800b824:	2180      	movs	r1, #128	; 0x80
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f002 fd78 	bl	800e31c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b82c:	2100      	movs	r1, #0
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f002 fd74 	bl	800e31c <USBD_LL_StallEP>
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d032      	beq.n	800b8b8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 f834 	bl	800b8c0 <USBD_GetLen>
 800b858:	4603      	mov	r3, r0
 800b85a:	3301      	adds	r3, #1
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	b29a      	uxth	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	75fa      	strb	r2, [r7, #23]
 800b86c:	461a      	mov	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	4413      	add	r3, r2
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	7812      	ldrb	r2, [r2, #0]
 800b876:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b878:	7dfb      	ldrb	r3, [r7, #23]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	75fa      	strb	r2, [r7, #23]
 800b87e:	461a      	mov	r2, r3
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	4413      	add	r3, r2
 800b884:	2203      	movs	r2, #3
 800b886:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b888:	e012      	b.n	800b8b0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	1c5a      	adds	r2, r3, #1
 800b88e:	60fa      	str	r2, [r7, #12]
 800b890:	7dfa      	ldrb	r2, [r7, #23]
 800b892:	1c51      	adds	r1, r2, #1
 800b894:	75f9      	strb	r1, [r7, #23]
 800b896:	4611      	mov	r1, r2
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	440a      	add	r2, r1
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b8a0:	7dfb      	ldrb	r3, [r7, #23]
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	75fa      	strb	r2, [r7, #23]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e8      	bne.n	800b88a <USBD_GetString+0x4e>
    }
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b8cc:	e005      	b.n	800b8da <USBD_GetLen+0x1a>
    {
        len++;
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f5      	bne.n	800b8ce <USBD_GetLen+0xe>
    }

    return len;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2202      	movs	r2, #2
 800b902:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b906:	88fa      	ldrh	r2, [r7, #6]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b90c:	88fa      	ldrh	r2, [r7, #6]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b912:	88fb      	ldrh	r3, [r7, #6]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	2100      	movs	r1, #0
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f002 fdcd 	bl	800e4b8 <USBD_LL_Transmit>

  return USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	4613      	mov	r3, r2
 800b934:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b936:	88fb      	ldrh	r3, [r7, #6]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	2100      	movs	r1, #0
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f002 fdbb 	bl	800e4b8 <USBD_LL_Transmit>

  return USBD_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	4613      	mov	r3, r2
 800b958:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2203      	movs	r2, #3
 800b95e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b962:	88fa      	ldrh	r2, [r7, #6]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b96a:	88fa      	ldrh	r2, [r7, #6]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b972:	88fb      	ldrh	r3, [r7, #6]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	2100      	movs	r1, #0
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f002 fdd7 	bl	800e52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	4613      	mov	r3, r2
 800b994:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b996:	88fb      	ldrh	r3, [r7, #6]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	2100      	movs	r1, #0
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f002 fdc5 	bl	800e52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2204      	movs	r2, #4
 800b9b8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9bc:	2300      	movs	r3, #0
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f002 fd78 	bl	800e4b8 <USBD_LL_Transmit>

  return USBD_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2205      	movs	r2, #5
 800b9de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f002 fd9f 	bl	800e52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <rsam_init>:
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

void rsam_init(rsam_algorithm_t* hrsam, float overmag, float a, float b)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	ed87 0a02 	vstr	s0, [r7, #8]
 800ba04:	edc7 0a01 	vstr	s1, [r7, #4]
 800ba08:	ed87 1a00 	vstr	s2, [r7]
	hrsam->overmag = overmag;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	619a      	str	r2, [r3, #24]
	hrsam->a = a;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	61da      	str	r2, [r3, #28]
	hrsam->b = b;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	621a      	str	r2, [r3, #32]
	arm_rfft_fast_init_f32(&hrfft, FFT_LENGTH);
 800ba1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba22:	4803      	ldr	r0, [pc, #12]	; (800ba30 <rsam_init+0x38>)
 800ba24:	f002 ffee 	bl	800ea04 <arm_rfft_fast_init_f32>
}
 800ba28:	bf00      	nop
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	20025a0c 	.word	0x20025a0c

0800ba34 <rsam_calculate>:

float rsam_calculate(rsam_algorithm_t* hrsam, int16_t* audiodata_p)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
	int i, peak_idx = -1;
 800ba3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba42:	613b      	str	r3, [r7, #16]
	float ret_speed;
	/* Convert sampled data */
	//arm_q31_to_float((q31_t*)audiodata_p, hrsam->workdata_audio, FFT_LENGTH*2);
	for (i = 0; i < FFT_LENGTH; i++)
 800ba44:	2300      	movs	r3, #0
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	e014      	b.n	800ba74 <rsam_calculate+0x40>
	{
		hrsam->workdata_audio[i] = audiodata_p[i];
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	4413      	add	r3, r2
 800ba52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	3308      	adds	r3, #8
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	3304      	adds	r3, #4
 800ba6a:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FFT_LENGTH; i++)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	3301      	adds	r3, #1
 800ba72:	617b      	str	r3, [r7, #20]
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba7a:	dbe6      	blt.n	800ba4a <rsam_calculate+0x16>
	}
	//arm_q15_to_float((q15_t*)audiodata_p, hrsam->workdata_audio, FFT_LENGTH*2);
	/* Calculate FFT */
	arm_rfft_fast_f32(&hrfft, hrsam->workdata_audio, hrsam->workdata_fft, FFT_FORWARD);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 800ba88:	3224      	adds	r2, #36	; 0x24
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4836      	ldr	r0, [pc, #216]	; (800bb68 <rsam_calculate+0x134>)
 800ba8e:	f003 f83d 	bl	800eb0c <arm_rfft_fast_f32>
	/* Calculate magnitude squared from 500 Hz to 12 kHz */
	/* This corresponds to bins 43 (couting from 0) to 1024 */
	arm_cmplx_mag_squared_f32(hrsam->workdata_fft + 2*43, hrsam->workdata_mag, (1024 - 43));
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ba98:	3324      	adds	r3, #36	; 0x24
 800ba9a:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800baa4:	3324      	adds	r3, #36	; 0x24
 800baa6:	f240 32d5 	movw	r2, #981	; 0x3d5
 800baaa:	4619      	mov	r1, r3
 800baac:	f003 fd24 	bl	800f4f8 <arm_cmplx_mag_squared_f32>
	//arm_cmplx_mag_squared_f32(hrsam->workdata_fft, hrsam->workdata_mag, (1024 - 43));
	/* Calculate maximum magnitude in this frequency interval */
	/* POWINNO BYĆ W ROZMIARZE + 1 !!!!!!!! */
	arm_max_f32(hrsam->workdata_mag, (1024 - 43), &hrsam->workdata_maxmag, &hrsam->workdata_maxmag_idx);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f503 4040 	add.w	r0, r3, #49152	; 0xc000
 800bab6:	3024      	adds	r0, #36	; 0x24
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f503 424f 	add.w	r2, r3, #52992	; 0xcf00
 800babe:	3278      	adds	r2, #120	; 0x78
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800bac6:	337c      	adds	r3, #124	; 0x7c
 800bac8:	f240 31d5 	movw	r1, #981	; 0x3d5
 800bacc:	f002 ff32 	bl	800e934 <arm_max_f32>
	/* Calculate minimum considered magnitude */
	hrsam->workdata_overmag_limit = hrsam->overmag * hrsam->workdata_maxmag;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	ed93 7a06 	vldr	s14, [r3, #24]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800badc:	3378      	adds	r3, #120	; 0x78
 800bade:	edd3 7a00 	vldr	s15, [r3]
 800bae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800baec:	3380      	adds	r3, #128	; 0x80
 800baee:	edc3 7a00 	vstr	s15, [r3]
	/* Find first peak over considered limit from this frequency interval */
	for (i = 0; i < (1024 - 43); i++)
 800baf2:	2300      	movs	r3, #0
 800baf4:	617b      	str	r3, [r7, #20]
 800baf6:	e01a      	b.n	800bb2e <rsam_calculate+0xfa>
	{
		if (hrsam->workdata_mag[i] >= hrsam->workdata_overmag_limit)
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800bb00:	3308      	adds	r3, #8
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	3304      	adds	r3, #4
 800bb08:	ed93 7a00 	vldr	s14, [r3]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800bb12:	3380      	adds	r3, #128	; 0x80
 800bb14:	edd3 7a00 	vldr	s15, [r3]
 800bb18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb20:	db02      	blt.n	800bb28 <rsam_calculate+0xf4>
		{
			peak_idx = i;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	613b      	str	r3, [r7, #16]
			break;
 800bb26:	e006      	b.n	800bb36 <rsam_calculate+0x102>
	for (i = 0; i < (1024 - 43); i++)
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 800bb34:	dde0      	ble.n	800baf8 <rsam_calculate+0xc4>
		}
	}
	/* Calculate resulting rotating speed based on calibration data */
	ret_speed = hrsam->a * peak_idx + hrsam->b;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	ed93 7a07 	vldr	s14, [r3, #28]
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	edd3 7a08 	vldr	s15, [r3, #32]
 800bb50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb54:	edc7 7a03 	vstr	s15, [r7, #12]
	return ret_speed;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	ee07 3a90 	vmov	s15, r3
}
 800bb5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20025a0c 	.word	0x20025a0c

0800bb6c <HAL_DFSDM_FilterRegConvCpltCallback>:
	arm_cmplx_mag_squared_q15(fft_result_tmp, fft_result, FFT_LENGTH);
	//arm_rfft_fast_f32(&hrfft, bfr_p, fft_result, FFT_FORWARD);
}

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	float rotating_speed;
	HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7f6 f94f 	bl	8001e18 <HAL_DFSDM_FilterRegularStop_DMA>
	for (int i = 0; i < FFT_LENGTH; i++)
	{
		fft_input[i] = audiobuf[i] * 4096;
	}
	*/
	rotating_speed = rsam_calculate(&hrsam, audiobuf);
 800bb7a:	4913      	ldr	r1, [pc, #76]	; (800bbc8 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 800bb7c:	4813      	ldr	r0, [pc, #76]	; (800bbcc <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 800bb7e:	f7ff ff59 	bl	800ba34 <rsam_calculate>
 800bb82:	ed87 0a03 	vstr	s0, [r7, #12]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800bb86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bb8a:	4811      	ldr	r0, [pc, #68]	; (800bbd0 <HAL_DFSDM_FilterRegConvCpltCallback+0x64>)
 800bb8c:	f7f7 f83c 	bl	8002c08 <HAL_GPIO_TogglePin>
	sprintf(uart_txbuf, "Measurement completed: %df!\n", (int)rotating_speed);
 800bb90:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb98:	ee17 2a90 	vmov	r2, s15
 800bb9c:	490d      	ldr	r1, [pc, #52]	; (800bbd4 <HAL_DFSDM_FilterRegConvCpltCallback+0x68>)
 800bb9e:	480e      	ldr	r0, [pc, #56]	; (800bbd8 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 800bba0:	f004 f822 	bl	800fbe8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800bba4:	480c      	ldr	r0, [pc, #48]	; (800bbd8 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 800bba6:	f7f4 fb83 	bl	80002b0 <strlen>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bbb2:	4909      	ldr	r1, [pc, #36]	; (800bbd8 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 800bbb4:	4809      	ldr	r0, [pc, #36]	; (800bbdc <HAL_DFSDM_FilterRegConvCpltCallback+0x70>)
 800bbb6:	f7fb fbdd 	bl	8007374 <HAL_UART_Transmit>
	//PerformFFT(audiobuf);
	audio_measurement_complete = 1;
 800bbba:	4b09      	ldr	r3, [pc, #36]	; (800bbe0 <HAL_DFSDM_FilterRegConvCpltCallback+0x74>)
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	601a      	str	r2, [r3, #0]
}
 800bbc0:	bf00      	nop
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	200086f8 	.word	0x200086f8
 800bbcc:	20018a88 	.word	0x20018a88
 800bbd0:	48000400 	.word	0x48000400
 800bbd4:	080103f8 	.word	0x080103f8
 800bbd8:	20025b98 	.word	0x20025b98
 800bbdc:	20025b0c 	.word	0x20025b0c
 800bbe0:	20000238 	.word	0x20000238

0800bbe4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	uart_rx_complete = 1;
 800bc00:	4b04      	ldr	r3, [pc, #16]	; (800bc14 <HAL_UART_RxCpltCallback+0x1c>)
 800bc02:	2201      	movs	r2, #1
 800bc04:	601a      	str	r2, [r3, #0]
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20000234 	.word	0x20000234

0800bc18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bc18:	b5b0      	push	{r4, r5, r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800bc1e:	f7f4 fd1f 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bc22:	f000 f9c9 	bl	800bfb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bc26:	f000 ffb1 	bl	800cb8c <MX_GPIO_Init>
  MX_DMA_Init();
 800bc2a:	f000 fedf 	bl	800c9ec <MX_DMA_Init>
  MX_ADC1_Init();
 800bc2e:	f000 fa75 	bl	800c11c <MX_ADC1_Init>
  MX_ADC2_Init();
 800bc32:	f000 faeb 	bl	800c20c <MX_ADC2_Init>
  MX_ADC3_Init();
 800bc36:	f000 fb4d 	bl	800c2d4 <MX_ADC3_Init>
  MX_DCMI_Init();
 800bc3a:	f000 fbaf 	bl	800c39c <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800bc3e:	f000 fbe1 	bl	800c404 <MX_DFSDM1_Init>
  MX_FMC_Init();
 800bc42:	f000 fef1 	bl	800ca28 <MX_FMC_Init>
  MX_I2C1_Init();
 800bc46:	f000 fc43 	bl	800c4d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800bc4a:	f000 fc81 	bl	800c550 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800bc4e:	f000 fcbf 	bl	800c5d0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800bc52:	f000 fceb 	bl	800c62c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800bc56:	f000 fd19 	bl	800c68c <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800bc5a:	f000 fd47 	bl	800c6ec <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800bc5e:	f000 fd71 	bl	800c744 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800bc62:	f000 fe17 	bl	800c894 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800bc66:	f000 fe45 	bl	800c8f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800bc6a:	f000 fe81 	bl	800c970 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800bc6e:	f002 f83d 	bl	800dcec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Init DSP operations */
  //arm_rfft_init_q15(&hrfft, &hcfft, FFT_LENGTH, 1);
  arm_rfft_init_q15(&hrfft, FFT_LENGTH, FFT_FORWARD, 1);
 800bc72:	2301      	movs	r3, #1
 800bc74:	2200      	movs	r2, #0
 800bc76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc7a:	48b2      	ldr	r0, [pc, #712]	; (800bf44 <main+0x32c>)
 800bc7c:	f003 fbb4 	bl	800f3e8 <arm_rfft_init_q15>
  //arm_rfft_fast_init_f32(&hrfft, FFT_LENGTH);

  rsam_init(&hrsam, RSAM_OVERMAG, RSAM_A, RSAM_B);
 800bc80:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 800bf48 <main+0x330>
 800bc84:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800bf4c <main+0x334>
 800bc88:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bc8c:	48b0      	ldr	r0, [pc, #704]	; (800bf50 <main+0x338>)
 800bc8e:	f7ff feb3 	bl	800b9f8 <rsam_init>

  /* Enable microphone VDD */
  HAL_GPIO_WritePin(MIC_VDD_GPIO_Port, MIC_VDD_Pin, GPIO_PIN_SET);
 800bc92:	2201      	movs	r2, #1
 800bc94:	2102      	movs	r1, #2
 800bc96:	48af      	ldr	r0, [pc, #700]	; (800bf54 <main+0x33c>)
 800bc98:	f7f6 ff9e 	bl	8002bd8 <HAL_GPIO_WritePin>

  sprintf(uart_txbuf, "Hello DFSDM on DMA!\n");
 800bc9c:	4aae      	ldr	r2, [pc, #696]	; (800bf58 <main+0x340>)
 800bc9e:	4baf      	ldr	r3, [pc, #700]	; (800bf5c <main+0x344>)
 800bca0:	4615      	mov	r5, r2
 800bca2:	461c      	mov	r4, r3
 800bca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bca6:	6028      	str	r0, [r5, #0]
 800bca8:	6069      	str	r1, [r5, #4]
 800bcaa:	60aa      	str	r2, [r5, #8]
 800bcac:	60eb      	str	r3, [r5, #12]
 800bcae:	6820      	ldr	r0, [r4, #0]
 800bcb0:	6128      	str	r0, [r5, #16]
 800bcb2:	7923      	ldrb	r3, [r4, #4]
 800bcb4:	752b      	strb	r3, [r5, #20]
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800bcb6:	48a8      	ldr	r0, [pc, #672]	; (800bf58 <main+0x340>)
 800bcb8:	f7f4 fafa 	bl	80002b0 <strlen>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcc4:	49a4      	ldr	r1, [pc, #656]	; (800bf58 <main+0x340>)
 800bcc6:	48a6      	ldr	r0, [pc, #664]	; (800bf60 <main+0x348>)
 800bcc8:	f7fb fb54 	bl	8007374 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rxbuf, 2);
 800bccc:	2202      	movs	r2, #2
 800bcce:	49a5      	ldr	r1, [pc, #660]	; (800bf64 <main+0x34c>)
 800bcd0:	48a3      	ldr	r0, [pc, #652]	; (800bf60 <main+0x348>)
 800bcd2:	f7fb fcaf 	bl	8007634 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uart_rx_complete)
 800bcd6:	4ba4      	ldr	r3, [pc, #656]	; (800bf68 <main+0x350>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 8118 	beq.w	800bf10 <main+0x2f8>
	  {
		  /* Request measurment */
		  if (uart_rxbuf[0] == 'r')
 800bce0:	4ba0      	ldr	r3, [pc, #640]	; (800bf64 <main+0x34c>)
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b72      	cmp	r3, #114	; 0x72
 800bce8:	d117      	bne.n	800bd1a <main+0x102>
		  {
			  /* restart measurement to prevent it from sending half done */
			  audio_measurement_complete = 0;
 800bcea:	4ba0      	ldr	r3, [pc, #640]	; (800bf6c <main+0x354>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	601a      	str	r2, [r3, #0]
			  dma_audio_data_remaining = AUDIOBUF_LENGTH;
 800bcf0:	4b9f      	ldr	r3, [pc, #636]	; (800bf70 <main+0x358>)
 800bcf2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800bcf6:	601a      	str	r2, [r3, #0]
			  dma_audio_data_offset    = 0;
 800bcf8:	4b9e      	ldr	r3, [pc, #632]	; (800bf74 <main+0x35c>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
			  /* Set first part of audio data to be obtained */
			  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t*)audiobuf, FFT_LENGTH*2) == HAL_OK)
 800bcfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bd02:	499d      	ldr	r1, [pc, #628]	; (800bf78 <main+0x360>)
 800bd04:	489d      	ldr	r0, [pc, #628]	; (800bf7c <main+0x364>)
 800bd06:	f7f6 f805 	bl	8001d14 <HAL_DFSDM_FilterRegularStart_DMA>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d104      	bne.n	800bd1a <main+0x102>
			  {
				  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800bd10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bd14:	489a      	ldr	r0, [pc, #616]	; (800bf80 <main+0x368>)
 800bd16:	f7f6 ff77 	bl	8002c08 <HAL_GPIO_TogglePin>
			  }
		  }
		  /* Send measurement */
		  if (uart_rxbuf[0] == 's')
 800bd1a:	4b92      	ldr	r3, [pc, #584]	; (800bf64 <main+0x34c>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b73      	cmp	r3, #115	; 0x73
 800bd22:	d13e      	bne.n	800bda2 <main+0x18a>
		  {
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800bd24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bd28:	4895      	ldr	r0, [pc, #596]	; (800bf80 <main+0x368>)
 800bd2a:	f7f6 ff6d 	bl	8002c08 <HAL_GPIO_TogglePin>
			  memcpy((uint8_t*)(audiobuf) + FFT_LENGTH*4, (uint8_t*)fft_result, FFT_LENGTH*4);
 800bd2e:	4b95      	ldr	r3, [pc, #596]	; (800bf84 <main+0x36c>)
 800bd30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bd34:	4994      	ldr	r1, [pc, #592]	; (800bf88 <main+0x370>)
 800bd36:	4618      	mov	r0, r3
 800bd38:	f003 ff42 	bl	800fbc0 <memcpy>
			  //memcpy((uint8_t*)(audiobuf) + FFT_LENGTH*4, (uint8_t*)fft_result, FFT_LENGTH*4*2);
			  //uint32_t datalength 	= FFT_LENGTH * 4  + FFT_LENGTH * 4 * 2;
			  uint32_t datalength 	= FFT_LENGTH * 4  + FFT_LENGTH * 4;
 800bd3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd40:	60fb      	str	r3, [r7, #12]
			  uint32_t offset		= 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60bb      	str	r3, [r7, #8]
			  while (datalength)
 800bd46:	e024      	b.n	800bd92 <main+0x17a>
			  {
				  /* Data packeting to support uint16 size */
				  if (datalength > 0xFFFF)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd4e:	d314      	bcc.n	800bd7a <main+0x162>
				  {
					  HAL_UART_Transmit(&huart2, (uint8_t*)(audiobuf) + offset, 0xFFFF, 10000);
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	4a89      	ldr	r2, [pc, #548]	; (800bf78 <main+0x360>)
 800bd54:	1899      	adds	r1, r3, r2
 800bd56:	f242 7310 	movw	r3, #10000	; 0x2710
 800bd5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd5e:	4880      	ldr	r0, [pc, #512]	; (800bf60 <main+0x348>)
 800bd60:	f7fb fb08 	bl	8007374 <HAL_UART_Transmit>
					  datalength 	-= 0xFFFF;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800bd6a:	3bff      	subs	r3, #255	; 0xff
 800bd6c:	60fb      	str	r3, [r7, #12]
					  offset 		+= 0xFFFF;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800bd74:	33ff      	adds	r3, #255	; 0xff
 800bd76:	60bb      	str	r3, [r7, #8]
 800bd78:	e00b      	b.n	800bd92 <main+0x17a>
				  }
				  else
				  {
					  HAL_UART_Transmit(&huart2, (uint8_t*)(audiobuf) + offset, datalength, 10000);
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	4a7e      	ldr	r2, [pc, #504]	; (800bf78 <main+0x360>)
 800bd7e:	1899      	adds	r1, r3, r2
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	f242 7310 	movw	r3, #10000	; 0x2710
 800bd88:	4875      	ldr	r0, [pc, #468]	; (800bf60 <main+0x348>)
 800bd8a:	f7fb faf3 	bl	8007374 <HAL_UART_Transmit>
					  datalength = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
			  while (datalength)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1d7      	bne.n	800bd48 <main+0x130>
				  }
			  }
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800bd98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bd9c:	4878      	ldr	r0, [pc, #480]	; (800bf80 <main+0x368>)
 800bd9e:	f7f6 ff33 	bl	8002c08 <HAL_GPIO_TogglePin>
		  }
		  /* Load measurement to perform FFT */
		  if (uart_rxbuf[0] == 'l')
 800bda2:	4b70      	ldr	r3, [pc, #448]	; (800bf64 <main+0x34c>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	2b6c      	cmp	r3, #108	; 0x6c
 800bdaa:	d16d      	bne.n	800be88 <main+0x270>
		  {
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800bdac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bdb0:	4873      	ldr	r0, [pc, #460]	; (800bf80 <main+0x368>)
 800bdb2:	f7f6 ff29 	bl	8002c08 <HAL_GPIO_TogglePin>
			  sprintf(uart_txbuf, "Waiting for load %d samples.\n", FFT_LENGTH*2);
 800bdb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bdba:	4974      	ldr	r1, [pc, #464]	; (800bf8c <main+0x374>)
 800bdbc:	4866      	ldr	r0, [pc, #408]	; (800bf58 <main+0x340>)
 800bdbe:	f003 ff13 	bl	800fbe8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800bdc2:	4865      	ldr	r0, [pc, #404]	; (800bf58 <main+0x340>)
 800bdc4:	f7f4 fa74 	bl	80002b0 <strlen>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bdd0:	4961      	ldr	r1, [pc, #388]	; (800bf58 <main+0x340>)
 800bdd2:	4863      	ldr	r0, [pc, #396]	; (800bf60 <main+0x348>)
 800bdd4:	f7fb face 	bl	8007374 <HAL_UART_Transmit>
			  if (HAL_UART_Receive(&huart2, (uint8_t*)audiobuf, FFT_LENGTH * 4, 60000) == HAL_OK)
 800bdd8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800bddc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bde0:	4965      	ldr	r1, [pc, #404]	; (800bf78 <main+0x360>)
 800bde2:	485f      	ldr	r0, [pc, #380]	; (800bf60 <main+0x348>)
 800bde4:	f7fb fb59 	bl	800749a <HAL_UART_Receive>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d131      	bne.n	800be52 <main+0x23a>
			  {
				  //PerformFFT(audiobuf);
					float rotating_speed;
			  	  sprintf(uart_txbuf, "Data load and FFT completed (%d samples)!\n", FFT_LENGTH*2);
 800bdee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bdf2:	4967      	ldr	r1, [pc, #412]	; (800bf90 <main+0x378>)
 800bdf4:	4858      	ldr	r0, [pc, #352]	; (800bf58 <main+0x340>)
 800bdf6:	f003 fef7 	bl	800fbe8 <siprintf>
			  	  HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800bdfa:	4857      	ldr	r0, [pc, #348]	; (800bf58 <main+0x340>)
 800bdfc:	f7f4 fa58 	bl	80002b0 <strlen>
 800be00:	4603      	mov	r3, r0
 800be02:	b29a      	uxth	r2, r3
 800be04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be08:	4953      	ldr	r1, [pc, #332]	; (800bf58 <main+0x340>)
 800be0a:	4855      	ldr	r0, [pc, #340]	; (800bf60 <main+0x348>)
 800be0c:	f7fb fab2 	bl	8007374 <HAL_UART_Transmit>

					rotating_speed = rsam_calculate(&hrsam, audiobuf);
 800be10:	4959      	ldr	r1, [pc, #356]	; (800bf78 <main+0x360>)
 800be12:	484f      	ldr	r0, [pc, #316]	; (800bf50 <main+0x338>)
 800be14:	f7ff fe0e 	bl	800ba34 <rsam_calculate>
 800be18:	ed87 0a01 	vstr	s0, [r7, #4]
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800be1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800be20:	4857      	ldr	r0, [pc, #348]	; (800bf80 <main+0x368>)
 800be22:	f7f6 fef1 	bl	8002c08 <HAL_GPIO_TogglePin>
					sprintf(uart_txbuf, "Measurement completed: %d!\n", (int)rotating_speed);
 800be26:	edd7 7a01 	vldr	s15, [r7, #4]
 800be2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be2e:	ee17 2a90 	vmov	r2, s15
 800be32:	4958      	ldr	r1, [pc, #352]	; (800bf94 <main+0x37c>)
 800be34:	4848      	ldr	r0, [pc, #288]	; (800bf58 <main+0x340>)
 800be36:	f003 fed7 	bl	800fbe8 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800be3a:	4847      	ldr	r0, [pc, #284]	; (800bf58 <main+0x340>)
 800be3c:	f7f4 fa38 	bl	80002b0 <strlen>
 800be40:	4603      	mov	r3, r0
 800be42:	b29a      	uxth	r2, r3
 800be44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be48:	4943      	ldr	r1, [pc, #268]	; (800bf58 <main+0x340>)
 800be4a:	4845      	ldr	r0, [pc, #276]	; (800bf60 <main+0x348>)
 800be4c:	f7fb fa92 	bl	8007374 <HAL_UART_Transmit>
 800be50:	e015      	b.n	800be7e <main+0x266>
		  	  }
			  else
			  {
			  	  sprintf(uart_txbuf, "Data load timeout.\n");
 800be52:	4a41      	ldr	r2, [pc, #260]	; (800bf58 <main+0x340>)
 800be54:	4b50      	ldr	r3, [pc, #320]	; (800bf98 <main+0x380>)
 800be56:	4615      	mov	r5, r2
 800be58:	461c      	mov	r4, r3
 800be5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be5c:	6028      	str	r0, [r5, #0]
 800be5e:	6069      	str	r1, [r5, #4]
 800be60:	60aa      	str	r2, [r5, #8]
 800be62:	60eb      	str	r3, [r5, #12]
 800be64:	6820      	ldr	r0, [r4, #0]
 800be66:	6128      	str	r0, [r5, #16]
			  	  HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800be68:	483b      	ldr	r0, [pc, #236]	; (800bf58 <main+0x340>)
 800be6a:	f7f4 fa21 	bl	80002b0 <strlen>
 800be6e:	4603      	mov	r3, r0
 800be70:	b29a      	uxth	r2, r3
 800be72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be76:	4938      	ldr	r1, [pc, #224]	; (800bf58 <main+0x340>)
 800be78:	4839      	ldr	r0, [pc, #228]	; (800bf60 <main+0x348>)
 800be7a:	f7fb fa7b 	bl	8007374 <HAL_UART_Transmit>
			  }
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800be7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800be82:	483f      	ldr	r0, [pc, #252]	; (800bf80 <main+0x368>)
 800be84:	f7f6 fec0 	bl	8002c08 <HAL_GPIO_TogglePin>
		  }
		  if (uart_rxbuf[0] == 'f')
 800be88:	4b36      	ldr	r3, [pc, #216]	; (800bf64 <main+0x34c>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b66      	cmp	r3, #102	; 0x66
 800be90:	d136      	bne.n	800bf00 <main+0x2e8>
		  {
			  /* Send fft data from calculation unit */
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800be92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800be96:	483a      	ldr	r0, [pc, #232]	; (800bf80 <main+0x368>)
 800be98:	f7f6 feb6 	bl	8002c08 <HAL_GPIO_TogglePin>
			  HAL_UART_Transmit(&huart2, (uint8_t*)hrsam.workdata_audio, 4096*4, 10000);
 800be9c:	f242 7310 	movw	r3, #10000	; 0x2710
 800bea0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bea4:	493d      	ldr	r1, [pc, #244]	; (800bf9c <main+0x384>)
 800bea6:	482e      	ldr	r0, [pc, #184]	; (800bf60 <main+0x348>)
 800bea8:	f7fb fa64 	bl	8007374 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)hrsam.workdata_fft, 4096*4*2, 10000);
 800beac:	f242 7310 	movw	r3, #10000	; 0x2710
 800beb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800beb4:	493a      	ldr	r1, [pc, #232]	; (800bfa0 <main+0x388>)
 800beb6:	482a      	ldr	r0, [pc, #168]	; (800bf60 <main+0x348>)
 800beb8:	f7fb fa5c 	bl	8007374 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)hrsam.workdata_mag, (1024 - 43 + 1)*4, 10000);
 800bebc:	f242 7310 	movw	r3, #10000	; 0x2710
 800bec0:	f640 7258 	movw	r2, #3928	; 0xf58
 800bec4:	4937      	ldr	r1, [pc, #220]	; (800bfa4 <main+0x38c>)
 800bec6:	4826      	ldr	r0, [pc, #152]	; (800bf60 <main+0x348>)
 800bec8:	f7fb fa54 	bl	8007374 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)&hrsam.workdata_maxmag, 4, 10000);
 800becc:	f242 7310 	movw	r3, #10000	; 0x2710
 800bed0:	2204      	movs	r2, #4
 800bed2:	4935      	ldr	r1, [pc, #212]	; (800bfa8 <main+0x390>)
 800bed4:	4822      	ldr	r0, [pc, #136]	; (800bf60 <main+0x348>)
 800bed6:	f7fb fa4d 	bl	8007374 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)&hrsam.workdata_maxmag_idx, 4, 10000);
 800beda:	f242 7310 	movw	r3, #10000	; 0x2710
 800bede:	2204      	movs	r2, #4
 800bee0:	4932      	ldr	r1, [pc, #200]	; (800bfac <main+0x394>)
 800bee2:	481f      	ldr	r0, [pc, #124]	; (800bf60 <main+0x348>)
 800bee4:	f7fb fa46 	bl	8007374 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)&hrsam.workdata_overmag_limit, 4, 10000);
 800bee8:	f242 7310 	movw	r3, #10000	; 0x2710
 800beec:	2204      	movs	r2, #4
 800beee:	4930      	ldr	r1, [pc, #192]	; (800bfb0 <main+0x398>)
 800bef0:	481b      	ldr	r0, [pc, #108]	; (800bf60 <main+0x348>)
 800bef2:	f7fb fa3f 	bl	8007374 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800bef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800befa:	4821      	ldr	r0, [pc, #132]	; (800bf80 <main+0x368>)
 800befc:	f7f6 fe84 	bl	8002c08 <HAL_GPIO_TogglePin>
		  }

		  /* Set receive event as completed */
		  uart_rx_complete = 0;
 800bf00:	4b19      	ldr	r3, [pc, #100]	; (800bf68 <main+0x350>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rxbuf, 2);
 800bf06:	2202      	movs	r2, #2
 800bf08:	4916      	ldr	r1, [pc, #88]	; (800bf64 <main+0x34c>)
 800bf0a:	4815      	ldr	r0, [pc, #84]	; (800bf60 <main+0x348>)
 800bf0c:	f7fb fb92 	bl	8007634 <HAL_UART_Receive_IT>
	  }

	  if (audio_measurement_complete)
 800bf10:	4b16      	ldr	r3, [pc, #88]	; (800bf6c <main+0x354>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f43f aede 	beq.w	800bcd6 <main+0xbe>
	  {
		  sprintf(uart_txbuf, "Measurement completed (%d samples)!\n", AUDIOBUF_LENGTH);
 800bf1a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800bf1e:	4925      	ldr	r1, [pc, #148]	; (800bfb4 <main+0x39c>)
 800bf20:	480d      	ldr	r0, [pc, #52]	; (800bf58 <main+0x340>)
 800bf22:	f003 fe61 	bl	800fbe8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800bf26:	480c      	ldr	r0, [pc, #48]	; (800bf58 <main+0x340>)
 800bf28:	f7f4 f9c2 	bl	80002b0 <strlen>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf34:	4908      	ldr	r1, [pc, #32]	; (800bf58 <main+0x340>)
 800bf36:	480a      	ldr	r0, [pc, #40]	; (800bf60 <main+0x348>)
 800bf38:	f7fb fa1c 	bl	8007374 <HAL_UART_Transmit>
		  audio_measurement_complete = 0;
 800bf3c:	4b0b      	ldr	r3, [pc, #44]	; (800bf6c <main+0x354>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	601a      	str	r2, [r3, #0]
	  if (uart_rx_complete)
 800bf42:	e6c8      	b.n	800bcd6 <main+0xbe>
 800bf44:	20025a0c 	.word	0x20025a0c
 800bf48:	422c95ea 	.word	0x422c95ea
 800bf4c:	3f781d7e 	.word	0x3f781d7e
 800bf50:	20018a88 	.word	0x20018a88
 800bf54:	48001c00 	.word	0x48001c00
 800bf58:	20025b98 	.word	0x20025b98
 800bf5c:	08010418 	.word	0x08010418
 800bf60:	20025b0c 	.word	0x20025b0c
 800bf64:	20025b8c 	.word	0x20025b8c
 800bf68:	20000234 	.word	0x20000234
 800bf6c:	20000238 	.word	0x20000238
 800bf70:	20000480 	.word	0x20000480
 800bf74:	20014a38 	.word	0x20014a38
 800bf78:	200086f8 	.word	0x200086f8
 800bf7c:	200085e8 	.word	0x200085e8
 800bf80:	48000400 	.word	0x48000400
 800bf84:	2000c6f8 	.word	0x2000c6f8
 800bf88:	20014a88 	.word	0x20014a88
 800bf8c:	08010430 	.word	0x08010430
 800bf90:	08010450 	.word	0x08010450
 800bf94:	0801047c 	.word	0x0801047c
 800bf98:	08010498 	.word	0x08010498
 800bf9c:	20018aac 	.word	0x20018aac
 800bfa0:	2001caac 	.word	0x2001caac
 800bfa4:	20024aac 	.word	0x20024aac
 800bfa8:	20025a00 	.word	0x20025a00
 800bfac:	20025a04 	.word	0x20025a04
 800bfb0:	20025a08 	.word	0x20025a08
 800bfb4:	080104ac 	.word	0x080104ac

0800bfb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b0ba      	sub	sp, #232	; 0xe8
 800bfbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bfbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bfc2:	2244      	movs	r2, #68	; 0x44
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f003 fe05 	bl	800fbd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bfcc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	605a      	str	r2, [r3, #4]
 800bfd6:	609a      	str	r2, [r3, #8]
 800bfd8:	60da      	str	r2, [r3, #12]
 800bfda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bfdc:	1d3b      	adds	r3, r7, #4
 800bfde:	228c      	movs	r2, #140	; 0x8c
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f003 fdf7 	bl	800fbd6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800bfe8:	f7f7 ffca 	bl	8003f80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800bfec:	4b48      	ldr	r3, [pc, #288]	; (800c110 <SystemClock_Config+0x158>)
 800bfee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bff2:	4a47      	ldr	r2, [pc, #284]	; (800c110 <SystemClock_Config+0x158>)
 800bff4:	f023 0318 	bic.w	r3, r3, #24
 800bff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800bffc:	2314      	movs	r3, #20
 800bffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c002:	2301      	movs	r3, #1
 800c004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800c008:	2301      	movs	r3, #1
 800c00a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800c014:	23a0      	movs	r3, #160	; 0xa0
 800c016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c01a:	2302      	movs	r3, #2
 800c01c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800c020:	2301      	movs	r3, #1
 800c022:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 800c026:	2305      	movs	r3, #5
 800c028:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 48;
 800c02c:	2330      	movs	r3, #48	; 0x30
 800c02e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c032:	2302      	movs	r3, #2
 800c034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800c038:	2302      	movs	r3, #2
 800c03a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800c03e:	2304      	movs	r3, #4
 800c040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c048:	4618      	mov	r0, r3
 800c04a:	f7f8 f8fb 	bl	8004244 <HAL_RCC_OscConfig>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800c054:	f000 ff10 	bl	800ce78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c058:	230f      	movs	r3, #15
 800c05a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c05e:	2303      	movs	r3, #3
 800c060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c064:	2300      	movs	r3, #0
 800c066:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c06a:	2300      	movs	r3, #0
 800c06c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c070:	2300      	movs	r3, #0
 800c072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800c076:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c07a:	2104      	movs	r1, #4
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7f8 fccf 	bl	8004a20 <HAL_RCC_ClockConfig>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800c088:	f000 fef6 	bl	800ce78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800c08c:	4b21      	ldr	r3, [pc, #132]	; (800c114 <SystemClock_Config+0x15c>)
 800c08e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c094:	2300      	movs	r3, #0
 800c096:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c098:	2300      	movs	r3, #0
 800c09a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c09c:	2300      	movs	r3, #0
 800c09e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800c0a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c0ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 800c0b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c0b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c0bc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800c0be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c0c2:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800c0c8:	2305      	movs	r3, #5
 800c0ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 30;
 800c0cc:	231e      	movs	r3, #30
 800c0ce:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV4;
 800c0d0:	2304      	movs	r3, #4
 800c0d2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800c0d4:	2304      	movs	r3, #4
 800c0d6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800c0d8:	2304      	movs	r3, #4
 800c0da:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800c0dc:	4b0e      	ldr	r3, [pc, #56]	; (800c118 <SystemClock_Config+0x160>)
 800c0de:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c0e0:	1d3b      	adds	r3, r7, #4
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7f8 fea0 	bl	8004e28 <HAL_RCCEx_PeriphCLKConfig>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800c0ee:	f000 fec3 	bl	800ce78 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800c0f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c0f6:	f7f7 ff61 	bl	8003fbc <HAL_PWREx_ControlVoltageScaling>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 800c100:	f000 feba 	bl	800ce78 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800c104:	f7f9 fe3e 	bl	8005d84 <HAL_RCCEx_EnableMSIPLLMode>
}
 800c108:	bf00      	nop
 800c10a:	37e8      	adds	r7, #232	; 0xe8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	40021000 	.word	0x40021000
 800c114:	000968e3 	.word	0x000968e3
 800c118:	01110000 	.word	0x01110000

0800c11c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08a      	sub	sp, #40	; 0x28
 800c120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800c122:	f107 031c 	add.w	r3, r7, #28
 800c126:	2200      	movs	r2, #0
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	605a      	str	r2, [r3, #4]
 800c12c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c12e:	1d3b      	adds	r3, r7, #4
 800c130:	2200      	movs	r2, #0
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	605a      	str	r2, [r3, #4]
 800c136:	609a      	str	r2, [r3, #8]
 800c138:	60da      	str	r2, [r3, #12]
 800c13a:	611a      	str	r2, [r3, #16]
 800c13c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800c13e:	4b30      	ldr	r3, [pc, #192]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c140:	4a30      	ldr	r2, [pc, #192]	; (800c204 <MX_ADC1_Init+0xe8>)
 800c142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800c144:	4b2e      	ldr	r3, [pc, #184]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c146:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c14a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c14c:	4b2c      	ldr	r3, [pc, #176]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c14e:	2200      	movs	r2, #0
 800c150:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c152:	4b2b      	ldr	r3, [pc, #172]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c154:	2200      	movs	r2, #0
 800c156:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c158:	4b29      	ldr	r3, [pc, #164]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c15e:	4b28      	ldr	r3, [pc, #160]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c160:	2204      	movs	r2, #4
 800c162:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800c164:	4b26      	ldr	r3, [pc, #152]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c166:	2200      	movs	r2, #0
 800c168:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c16a:	4b25      	ldr	r3, [pc, #148]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800c170:	4b23      	ldr	r3, [pc, #140]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c172:	2201      	movs	r2, #1
 800c174:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c176:	4b22      	ldr	r3, [pc, #136]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c17e:	4b20      	ldr	r3, [pc, #128]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c180:	2200      	movs	r2, #0
 800c182:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c184:	4b1e      	ldr	r3, [pc, #120]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c186:	2200      	movs	r2, #0
 800c188:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c18a:	4b1d      	ldr	r3, [pc, #116]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c192:	4b1b      	ldr	r3, [pc, #108]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c194:	2200      	movs	r2, #0
 800c196:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800c198:	4b19      	ldr	r3, [pc, #100]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c1a0:	4817      	ldr	r0, [pc, #92]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c1a2:	f7f4 fc81 	bl	8000aa8 <HAL_ADC_Init>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800c1ac:	f000 fe64 	bl	800ce78 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800c1b4:	f107 031c 	add.w	r3, r7, #28
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4811      	ldr	r0, [pc, #68]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c1bc:	f7f5 f972 	bl	80014a4 <HAL_ADCEx_MultiModeConfigChannel>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800c1c6:	f000 fe57 	bl	800ce78 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800c1ca:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <MX_ADC1_Init+0xec>)
 800c1cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c1ce:	2306      	movs	r3, #6
 800c1d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800c1d6:	237f      	movs	r3, #127	; 0x7f
 800c1d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800c1da:	2304      	movs	r3, #4
 800c1dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c1e2:	1d3b      	adds	r3, r7, #4
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4806      	ldr	r0, [pc, #24]	; (800c200 <MX_ADC1_Init+0xe4>)
 800c1e8:	f7f4 fdb6 	bl	8000d58 <HAL_ADC_ConfigChannel>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800c1f2:	f000 fe41 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c1f6:	bf00      	nop
 800c1f8:	3728      	adds	r7, #40	; 0x28
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20014848 	.word	0x20014848
 800c204:	50040000 	.word	0x50040000
 800c208:	10c00010 	.word	0x10c00010

0800c20c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c212:	463b      	mov	r3, r7
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]
 800c218:	605a      	str	r2, [r3, #4]
 800c21a:	609a      	str	r2, [r3, #8]
 800c21c:	60da      	str	r2, [r3, #12]
 800c21e:	611a      	str	r2, [r3, #16]
 800c220:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800c222:	4b29      	ldr	r3, [pc, #164]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c224:	4a29      	ldr	r2, [pc, #164]	; (800c2cc <MX_ADC2_Init+0xc0>)
 800c226:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800c228:	4b27      	ldr	r3, [pc, #156]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c22a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c22e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800c230:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c232:	2200      	movs	r2, #0
 800c234:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c236:	4b24      	ldr	r3, [pc, #144]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c238:	2200      	movs	r2, #0
 800c23a:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c23c:	4b22      	ldr	r3, [pc, #136]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c23e:	2200      	movs	r2, #0
 800c240:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c242:	4b21      	ldr	r3, [pc, #132]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c244:	2204      	movs	r2, #4
 800c246:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800c248:	4b1f      	ldr	r3, [pc, #124]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800c24e:	4b1e      	ldr	r3, [pc, #120]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c250:	2200      	movs	r2, #0
 800c252:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800c254:	4b1c      	ldr	r3, [pc, #112]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c256:	2201      	movs	r2, #1
 800c258:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800c25a:	4b1b      	ldr	r3, [pc, #108]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c262:	4b19      	ldr	r3, [pc, #100]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c264:	2200      	movs	r2, #0
 800c266:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c268:	4b17      	ldr	r3, [pc, #92]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800c26e:	4b16      	ldr	r3, [pc, #88]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c276:	4b14      	ldr	r3, [pc, #80]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c278:	2200      	movs	r2, #0
 800c27a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800c27c:	4b12      	ldr	r3, [pc, #72]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c284:	4810      	ldr	r0, [pc, #64]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c286:	f7f4 fc0f 	bl	8000aa8 <HAL_ADC_Init>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800c290:	f000 fdf2 	bl	800ce78 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800c294:	4b0e      	ldr	r3, [pc, #56]	; (800c2d0 <MX_ADC2_Init+0xc4>)
 800c296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c298:	2306      	movs	r3, #6
 800c29a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800c29c:	2300      	movs	r3, #0
 800c29e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800c2a0:	237f      	movs	r3, #127	; 0x7f
 800c2a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800c2a4:	2304      	movs	r3, #4
 800c2a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c2ac:	463b      	mov	r3, r7
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4805      	ldr	r0, [pc, #20]	; (800c2c8 <MX_ADC2_Init+0xbc>)
 800c2b2:	f7f4 fd51 	bl	8000d58 <HAL_ADC_ConfigChannel>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d001      	beq.n	800c2c0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 800c2bc:	f000 fddc 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800c2c0:	bf00      	nop
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	200084e8 	.word	0x200084e8
 800c2cc:	50040100 	.word	0x50040100
 800c2d0:	25b00200 	.word	0x25b00200

0800c2d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c2da:	463b      	mov	r3, r7
 800c2dc:	2200      	movs	r2, #0
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	605a      	str	r2, [r3, #4]
 800c2e2:	609a      	str	r2, [r3, #8]
 800c2e4:	60da      	str	r2, [r3, #12]
 800c2e6:	611a      	str	r2, [r3, #16]
 800c2e8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800c2ea:	4b29      	ldr	r3, [pc, #164]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c2ec:	4a29      	ldr	r2, [pc, #164]	; (800c394 <MX_ADC3_Init+0xc0>)
 800c2ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800c2f0:	4b27      	ldr	r3, [pc, #156]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c2f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c2f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800c2f8:	4b25      	ldr	r3, [pc, #148]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c2fe:	4b24      	ldr	r3, [pc, #144]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c300:	2200      	movs	r2, #0
 800c302:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c304:	4b22      	ldr	r3, [pc, #136]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c306:	2200      	movs	r2, #0
 800c308:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c30a:	4b21      	ldr	r3, [pc, #132]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c30c:	2204      	movs	r2, #4
 800c30e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800c310:	4b1f      	ldr	r3, [pc, #124]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c312:	2200      	movs	r2, #0
 800c314:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800c316:	4b1e      	ldr	r3, [pc, #120]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c318:	2200      	movs	r2, #0
 800c31a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800c31c:	4b1c      	ldr	r3, [pc, #112]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c31e:	2201      	movs	r2, #1
 800c320:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800c322:	4b1b      	ldr	r3, [pc, #108]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c32a:	4b19      	ldr	r3, [pc, #100]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c330:	4b17      	ldr	r3, [pc, #92]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c332:	2200      	movs	r2, #0
 800c334:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800c336:	4b16      	ldr	r3, [pc, #88]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c33e:	4b14      	ldr	r3, [pc, #80]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c340:	2200      	movs	r2, #0
 800c342:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800c344:	4b12      	ldr	r3, [pc, #72]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c346:	2200      	movs	r2, #0
 800c348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800c34c:	4810      	ldr	r0, [pc, #64]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c34e:	f7f4 fbab 	bl	8000aa8 <HAL_ADC_Init>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 800c358:	f000 fd8e 	bl	800ce78 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800c35c:	4b0e      	ldr	r3, [pc, #56]	; (800c398 <MX_ADC3_Init+0xc4>)
 800c35e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c360:	2306      	movs	r3, #6
 800c362:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800c364:	2300      	movs	r3, #0
 800c366:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800c368:	237f      	movs	r3, #127	; 0x7f
 800c36a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800c36c:	2304      	movs	r3, #4
 800c36e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800c374:	463b      	mov	r3, r7
 800c376:	4619      	mov	r1, r3
 800c378:	4805      	ldr	r0, [pc, #20]	; (800c390 <MX_ADC3_Init+0xbc>)
 800c37a:	f7f4 fced 	bl	8000d58 <HAL_ADC_ConfigChannel>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800c384:	f000 fd78 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800c388:	bf00      	nop
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	200148b0 	.word	0x200148b0
 800c394:	50040200 	.word	0x50040200
 800c398:	36902000 	.word	0x36902000

0800c39c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800c3a0:	4b16      	ldr	r3, [pc, #88]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3a2:	4a17      	ldr	r2, [pc, #92]	; (800c400 <MX_DCMI_Init+0x64>)
 800c3a4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800c3a6:	4b15      	ldr	r3, [pc, #84]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800c3ac:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800c3b2:	4b12      	ldr	r3, [pc, #72]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800c3b8:	4b10      	ldr	r3, [pc, #64]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800c3be:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800c3c4:	4b0d      	ldr	r3, [pc, #52]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800c3ca:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800c3d0:	4b0a      	ldr	r3, [pc, #40]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800c3d6:	4b09      	ldr	r3, [pc, #36]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800c3dc:	4b07      	ldr	r3, [pc, #28]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800c3e2:	4b06      	ldr	r3, [pc, #24]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800c3e8:	4804      	ldr	r0, [pc, #16]	; (800c3fc <MX_DCMI_Init+0x60>)
 800c3ea:	f7f5 fa19 	bl	8001820 <HAL_DCMI_Init>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800c3f4:	f000 fd40 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800c3f8:	bf00      	nop
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20014918 	.word	0x20014918
 800c400:	50050000 	.word	0x50050000

0800c404 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800c408:	4b2c      	ldr	r3, [pc, #176]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c40a:	4a2d      	ldr	r2, [pc, #180]	; (800c4c0 <MX_DFSDM1_Init+0xbc>)
 800c40c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800c40e:	4b2b      	ldr	r3, [pc, #172]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c410:	2200      	movs	r2, #0
 800c412:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800c414:	4b29      	ldr	r3, [pc, #164]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c416:	2201      	movs	r2, #1
 800c418:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800c41a:	4b28      	ldr	r3, [pc, #160]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c41c:	2201      	movs	r2, #1
 800c41e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 800c420:	4b26      	ldr	r3, [pc, #152]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c422:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c426:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 800c428:	4b24      	ldr	r3, [pc, #144]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c42a:	2240      	movs	r2, #64	; 0x40
 800c42c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800c42e:	4b23      	ldr	r3, [pc, #140]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c430:	2201      	movs	r2, #1
 800c432:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800c434:	4821      	ldr	r0, [pc, #132]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c436:	f7f5 fb4d 	bl	8001ad4 <HAL_DFSDM_FilterInit>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800c440:	f000 fd1a 	bl	800ce78 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800c444:	4b1f      	ldr	r3, [pc, #124]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c446:	4a20      	ldr	r2, [pc, #128]	; (800c4c8 <MX_DFSDM1_Init+0xc4>)
 800c448:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 800c44a:	4b1e      	ldr	r3, [pc, #120]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c44c:	2201      	movs	r2, #1
 800c44e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800c450:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 25;
 800c456:	4b1b      	ldr	r3, [pc, #108]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c458:	2219      	movs	r2, #25
 800c45a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800c45c:	4b19      	ldr	r3, [pc, #100]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c45e:	2200      	movs	r2, #0
 800c460:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800c462:	4b18      	ldr	r3, [pc, #96]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c464:	2200      	movs	r2, #0
 800c466:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800c468:	4b16      	ldr	r3, [pc, #88]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800c46e:	4b15      	ldr	r3, [pc, #84]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c470:	2200      	movs	r2, #0
 800c472:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800c474:	4b13      	ldr	r3, [pc, #76]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c476:	2204      	movs	r2, #4
 800c478:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800c47a:	4b12      	ldr	r3, [pc, #72]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800c480:	4b10      	ldr	r3, [pc, #64]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c482:	2201      	movs	r2, #1
 800c484:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 800c486:	4b0f      	ldr	r3, [pc, #60]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c488:	2200      	movs	r2, #0
 800c48a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x02;
 800c48c:	4b0d      	ldr	r3, [pc, #52]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c48e:	2202      	movs	r2, #2
 800c490:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800c492:	480c      	ldr	r0, [pc, #48]	; (800c4c4 <MX_DFSDM1_Init+0xc0>)
 800c494:	f7f5 fa4a 	bl	800192c <HAL_DFSDM_ChannelInit>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d001      	beq.n	800c4a2 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800c49e:	f000 fceb 	bl	800ce78 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	4909      	ldr	r1, [pc, #36]	; (800c4cc <MX_DFSDM1_Init+0xc8>)
 800c4a6:	4805      	ldr	r0, [pc, #20]	; (800c4bc <MX_DFSDM1_Init+0xb8>)
 800c4a8:	f7f5 fbee 	bl	8001c88 <HAL_DFSDM_FilterConfigRegChannel>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800c4b2:	f000 fce1 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800c4b6:	bf00      	nop
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200085e8 	.word	0x200085e8
 800c4c0:	40016100 	.word	0x40016100
 800c4c4:	200086c0 	.word	0x200086c0
 800c4c8:	40016060 	.word	0x40016060
 800c4cc:	00030008 	.word	0x00030008

0800c4d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c4d4:	4b1b      	ldr	r3, [pc, #108]	; (800c544 <MX_I2C1_Init+0x74>)
 800c4d6:	4a1c      	ldr	r2, [pc, #112]	; (800c548 <MX_I2C1_Init+0x78>)
 800c4d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109096E2;
 800c4da:	4b1a      	ldr	r3, [pc, #104]	; (800c544 <MX_I2C1_Init+0x74>)
 800c4dc:	4a1b      	ldr	r2, [pc, #108]	; (800c54c <MX_I2C1_Init+0x7c>)
 800c4de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c4e0:	4b18      	ldr	r3, [pc, #96]	; (800c544 <MX_I2C1_Init+0x74>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c4e6:	4b17      	ldr	r3, [pc, #92]	; (800c544 <MX_I2C1_Init+0x74>)
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c4ec:	4b15      	ldr	r3, [pc, #84]	; (800c544 <MX_I2C1_Init+0x74>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c4f2:	4b14      	ldr	r3, [pc, #80]	; (800c544 <MX_I2C1_Init+0x74>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c4f8:	4b12      	ldr	r3, [pc, #72]	; (800c544 <MX_I2C1_Init+0x74>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c4fe:	4b11      	ldr	r3, [pc, #68]	; (800c544 <MX_I2C1_Init+0x74>)
 800c500:	2200      	movs	r2, #0
 800c502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c504:	4b0f      	ldr	r3, [pc, #60]	; (800c544 <MX_I2C1_Init+0x74>)
 800c506:	2200      	movs	r2, #0
 800c508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c50a:	480e      	ldr	r0, [pc, #56]	; (800c544 <MX_I2C1_Init+0x74>)
 800c50c:	f7f6 fb95 	bl	8002c3a <HAL_I2C_Init>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c516:	f000 fcaf 	bl	800ce78 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c51a:	2100      	movs	r1, #0
 800c51c:	4809      	ldr	r0, [pc, #36]	; (800c544 <MX_I2C1_Init+0x74>)
 800c51e:	f7f6 fc1b 	bl	8002d58 <HAL_I2CEx_ConfigAnalogFilter>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c528:	f000 fca6 	bl	800ce78 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c52c:	2100      	movs	r1, #0
 800c52e:	4805      	ldr	r0, [pc, #20]	; (800c544 <MX_I2C1_Init+0x74>)
 800c530:	f7f6 fc5d 	bl	8002dee <HAL_I2CEx_ConfigDigitalFilter>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c53a:	f000 fc9d 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c53e:	bf00      	nop
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20008550 	.word	0x20008550
 800c548:	40005400 	.word	0x40005400
 800c54c:	109096e2 	.word	0x109096e2

0800c550 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c554:	4b1b      	ldr	r3, [pc, #108]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c556:	4a1c      	ldr	r2, [pc, #112]	; (800c5c8 <MX_I2C2_Init+0x78>)
 800c558:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x109096E2;
 800c55a:	4b1a      	ldr	r3, [pc, #104]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c55c:	4a1b      	ldr	r2, [pc, #108]	; (800c5cc <MX_I2C2_Init+0x7c>)
 800c55e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c560:	4b18      	ldr	r3, [pc, #96]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c562:	2200      	movs	r2, #0
 800c564:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c566:	4b17      	ldr	r3, [pc, #92]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c568:	2201      	movs	r2, #1
 800c56a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c56c:	4b15      	ldr	r3, [pc, #84]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c56e:	2200      	movs	r2, #0
 800c570:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c572:	4b14      	ldr	r3, [pc, #80]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c574:	2200      	movs	r2, #0
 800c576:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c578:	4b12      	ldr	r3, [pc, #72]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c57e:	4b11      	ldr	r3, [pc, #68]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c580:	2200      	movs	r2, #0
 800c582:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c584:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c586:	2200      	movs	r2, #0
 800c588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c58a:	480e      	ldr	r0, [pc, #56]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c58c:	f7f6 fb55 	bl	8002c3a <HAL_I2C_Init>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c596:	f000 fc6f 	bl	800ce78 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c59a:	2100      	movs	r1, #0
 800c59c:	4809      	ldr	r0, [pc, #36]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c59e:	f7f6 fbdb 	bl	8002d58 <HAL_I2CEx_ConfigAnalogFilter>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c5a8:	f000 fc66 	bl	800ce78 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	4805      	ldr	r0, [pc, #20]	; (800c5c4 <MX_I2C2_Init+0x74>)
 800c5b0:	f7f6 fc1d 	bl	8002dee <HAL_I2CEx_ConfigDigitalFilter>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d001      	beq.n	800c5be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c5ba:	f000 fc5d 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c5be:	bf00      	nop
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	2000859c 	.word	0x2000859c
 800c5c8:	40005800 	.word	0x40005800
 800c5cc:	109096e2 	.word	0x109096e2

0800c5d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800c5d4:	4b12      	ldr	r3, [pc, #72]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c5d6:	4a13      	ldr	r2, [pc, #76]	; (800c624 <MX_LPUART1_UART_Init+0x54>)
 800c5d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800c5da:	4b11      	ldr	r3, [pc, #68]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c5dc:	4a12      	ldr	r2, [pc, #72]	; (800c628 <MX_LPUART1_UART_Init+0x58>)
 800c5de:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800c5e0:	4b0f      	ldr	r3, [pc, #60]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800c5e8:	4b0d      	ldr	r3, [pc, #52]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c5f6:	220c      	movs	r2, #12
 800c5f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c5fa:	4b09      	ldr	r3, [pc, #36]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c600:	4b07      	ldr	r3, [pc, #28]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c602:	2200      	movs	r2, #0
 800c604:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c606:	4b06      	ldr	r3, [pc, #24]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c608:	2200      	movs	r2, #0
 800c60a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800c60c:	4804      	ldr	r0, [pc, #16]	; (800c620 <MX_LPUART1_UART_Init+0x50>)
 800c60e:	f7fa fe63 	bl	80072d8 <HAL_UART_Init>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d001      	beq.n	800c61c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800c618:	f000 fc2e 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800c61c:	bf00      	nop
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	20014744 	.word	0x20014744
 800c624:	40008000 	.word	0x40008000
 800c628:	00033324 	.word	0x00033324

0800c62c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c630:	4b14      	ldr	r3, [pc, #80]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c632:	4a15      	ldr	r2, [pc, #84]	; (800c688 <MX_USART1_UART_Init+0x5c>)
 800c634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c636:	4b13      	ldr	r3, [pc, #76]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c63c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c63e:	4b11      	ldr	r3, [pc, #68]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c640:	2200      	movs	r2, #0
 800c642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c644:	4b0f      	ldr	r3, [pc, #60]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c646:	2200      	movs	r2, #0
 800c648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c64a:	4b0e      	ldr	r3, [pc, #56]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c650:	4b0c      	ldr	r3, [pc, #48]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c652:	220c      	movs	r2, #12
 800c654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800c656:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c658:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c65c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c65e:	4b09      	ldr	r3, [pc, #36]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c660:	2200      	movs	r2, #0
 800c662:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c664:	4b07      	ldr	r3, [pc, #28]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c666:	2200      	movs	r2, #0
 800c668:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c66a:	4b06      	ldr	r3, [pc, #24]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c670:	4804      	ldr	r0, [pc, #16]	; (800c684 <MX_USART1_UART_Init+0x58>)
 800c672:	f7fa fe31 	bl	80072d8 <HAL_UART_Init>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800c67c:	f000 fbfc 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c680:	bf00      	nop
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20014970 	.word	0x20014970
 800c688:	40013800 	.word	0x40013800

0800c68c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c690:	4b14      	ldr	r3, [pc, #80]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c692:	4a15      	ldr	r2, [pc, #84]	; (800c6e8 <MX_USART2_UART_Init+0x5c>)
 800c694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c696:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c69c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c69e:	4b11      	ldr	r3, [pc, #68]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c6a4:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c6aa:	4b0e      	ldr	r3, [pc, #56]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c6b0:	4b0c      	ldr	r3, [pc, #48]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6b2:	220c      	movs	r2, #12
 800c6b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c6b6:	4b0b      	ldr	r3, [pc, #44]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c6bc:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c6c2:	4b08      	ldr	r3, [pc, #32]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c6c8:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c6ce:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <MX_USART2_UART_Init+0x58>)
 800c6d0:	f7fa fe02 	bl	80072d8 <HAL_UART_Init>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c6da:	f000 fbcd 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c6de:	bf00      	nop
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20025b0c 	.word	0x20025b0c
 800c6e8:	40004400 	.word	0x40004400

0800c6ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800c6f0:	4b12      	ldr	r3, [pc, #72]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c6f2:	4a13      	ldr	r2, [pc, #76]	; (800c740 <MX_QUADSPI_Init+0x54>)
 800c6f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800c6f6:	4b11      	ldr	r3, [pc, #68]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c6f8:	22ff      	movs	r2, #255	; 0xff
 800c6fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800c6fc:	4b0f      	ldr	r3, [pc, #60]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c6fe:	2201      	movs	r2, #1
 800c700:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800c702:	4b0e      	ldr	r3, [pc, #56]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c704:	2200      	movs	r2, #0
 800c706:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800c708:	4b0c      	ldr	r3, [pc, #48]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c70a:	2201      	movs	r2, #1
 800c70c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800c70e:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c710:	2200      	movs	r2, #0
 800c712:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800c714:	4b09      	ldr	r3, [pc, #36]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c716:	2200      	movs	r2, #0
 800c718:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800c71a:	4b08      	ldr	r3, [pc, #32]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800c720:	4b06      	ldr	r3, [pc, #24]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c722:	2200      	movs	r2, #0
 800c724:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800c726:	4805      	ldr	r0, [pc, #20]	; (800c73c <MX_QUADSPI_Init+0x50>)
 800c728:	f7f7 fcbe 	bl	80040a8 <HAL_QSPI_Init>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d001      	beq.n	800c736 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800c732:	f000 fba1 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800c736:	bf00      	nop
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20025bcc 	.word	0x20025bcc
 800c740:	a0001000 	.word	0xa0001000

0800c744 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800c748:	4b4d      	ldr	r3, [pc, #308]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c74a:	4a4e      	ldr	r2, [pc, #312]	; (800c884 <MX_SAI1_Init+0x140>)
 800c74c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800c74e:	4b4c      	ldr	r3, [pc, #304]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c750:	2200      	movs	r2, #0
 800c752:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800c754:	4b4a      	ldr	r3, [pc, #296]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c756:	2200      	movs	r2, #0
 800c758:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800c75a:	4b49      	ldr	r3, [pc, #292]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c75c:	2240      	movs	r2, #64	; 0x40
 800c75e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800c760:	4b47      	ldr	r3, [pc, #284]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c762:	2200      	movs	r2, #0
 800c764:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c766:	4b46      	ldr	r3, [pc, #280]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c768:	2200      	movs	r2, #0
 800c76a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800c76c:	4b44      	ldr	r3, [pc, #272]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c76e:	2200      	movs	r2, #0
 800c770:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c772:	4b43      	ldr	r3, [pc, #268]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c774:	2200      	movs	r2, #0
 800c776:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800c778:	4b41      	ldr	r3, [pc, #260]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800c77e:	4b40      	ldr	r3, [pc, #256]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c780:	2200      	movs	r2, #0
 800c782:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800c784:	4b3e      	ldr	r3, [pc, #248]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c786:	4a40      	ldr	r2, [pc, #256]	; (800c888 <MX_SAI1_Init+0x144>)
 800c788:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c78a:	4b3d      	ldr	r3, [pc, #244]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800c790:	4b3b      	ldr	r3, [pc, #236]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c792:	2200      	movs	r2, #0
 800c794:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c796:	4b3a      	ldr	r3, [pc, #232]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c798:	2200      	movs	r2, #0
 800c79a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c79c:	4b38      	ldr	r3, [pc, #224]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800c7a2:	4b37      	ldr	r3, [pc, #220]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7a4:	2208      	movs	r2, #8
 800c7a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800c7a8:	4b35      	ldr	r3, [pc, #212]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800c7ae:	4b34      	ldr	r3, [pc, #208]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c7b4:	4b32      	ldr	r3, [pc, #200]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800c7ba:	4b31      	ldr	r3, [pc, #196]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800c7c0:	4b2f      	ldr	r3, [pc, #188]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800c7c6:	4b2e      	ldr	r3, [pc, #184]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800c7cc:	4b2c      	ldr	r3, [pc, #176]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800c7d2:	4b2b      	ldr	r3, [pc, #172]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800c7d8:	4829      	ldr	r0, [pc, #164]	; (800c880 <MX_SAI1_Init+0x13c>)
 800c7da:	f7f9 fd97 	bl	800630c <HAL_SAI_Init>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800c7e4:	f000 fb48 	bl	800ce78 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800c7e8:	4b28      	ldr	r3, [pc, #160]	; (800c88c <MX_SAI1_Init+0x148>)
 800c7ea:	4a29      	ldr	r2, [pc, #164]	; (800c890 <MX_SAI1_Init+0x14c>)
 800c7ec:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800c7ee:	4b27      	ldr	r3, [pc, #156]	; (800c88c <MX_SAI1_Init+0x148>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800c7f4:	4b25      	ldr	r3, [pc, #148]	; (800c88c <MX_SAI1_Init+0x148>)
 800c7f6:	2203      	movs	r2, #3
 800c7f8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800c7fa:	4b24      	ldr	r3, [pc, #144]	; (800c88c <MX_SAI1_Init+0x148>)
 800c7fc:	2240      	movs	r2, #64	; 0x40
 800c7fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800c800:	4b22      	ldr	r3, [pc, #136]	; (800c88c <MX_SAI1_Init+0x148>)
 800c802:	2200      	movs	r2, #0
 800c804:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c806:	4b21      	ldr	r3, [pc, #132]	; (800c88c <MX_SAI1_Init+0x148>)
 800c808:	2200      	movs	r2, #0
 800c80a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800c80c:	4b1f      	ldr	r3, [pc, #124]	; (800c88c <MX_SAI1_Init+0x148>)
 800c80e:	2201      	movs	r2, #1
 800c810:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c812:	4b1e      	ldr	r3, [pc, #120]	; (800c88c <MX_SAI1_Init+0x148>)
 800c814:	2200      	movs	r2, #0
 800c816:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800c818:	4b1c      	ldr	r3, [pc, #112]	; (800c88c <MX_SAI1_Init+0x148>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c81e:	4b1b      	ldr	r3, [pc, #108]	; (800c88c <MX_SAI1_Init+0x148>)
 800c820:	2200      	movs	r2, #0
 800c822:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800c824:	4b19      	ldr	r3, [pc, #100]	; (800c88c <MX_SAI1_Init+0x148>)
 800c826:	2200      	movs	r2, #0
 800c828:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c82a:	4b18      	ldr	r3, [pc, #96]	; (800c88c <MX_SAI1_Init+0x148>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c830:	4b16      	ldr	r3, [pc, #88]	; (800c88c <MX_SAI1_Init+0x148>)
 800c832:	2200      	movs	r2, #0
 800c834:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 800c836:	4b15      	ldr	r3, [pc, #84]	; (800c88c <MX_SAI1_Init+0x148>)
 800c838:	2218      	movs	r2, #24
 800c83a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800c83c:	4b13      	ldr	r3, [pc, #76]	; (800c88c <MX_SAI1_Init+0x148>)
 800c83e:	2201      	movs	r2, #1
 800c840:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800c842:	4b12      	ldr	r3, [pc, #72]	; (800c88c <MX_SAI1_Init+0x148>)
 800c844:	2200      	movs	r2, #0
 800c846:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c848:	4b10      	ldr	r3, [pc, #64]	; (800c88c <MX_SAI1_Init+0x148>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800c84e:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <MX_SAI1_Init+0x148>)
 800c850:	2200      	movs	r2, #0
 800c852:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800c854:	4b0d      	ldr	r3, [pc, #52]	; (800c88c <MX_SAI1_Init+0x148>)
 800c856:	2200      	movs	r2, #0
 800c858:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800c85a:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <MX_SAI1_Init+0x148>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800c860:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <MX_SAI1_Init+0x148>)
 800c862:	2201      	movs	r2, #1
 800c864:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800c866:	4b09      	ldr	r3, [pc, #36]	; (800c88c <MX_SAI1_Init+0x148>)
 800c868:	2200      	movs	r2, #0
 800c86a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800c86c:	4807      	ldr	r0, [pc, #28]	; (800c88c <MX_SAI1_Init+0x148>)
 800c86e:	f7f9 fd4d 	bl	800630c <HAL_SAI_Init>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800c878:	f000 fafe 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800c87c:	bf00      	nop
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	20025a88 	.word	0x20025a88
 800c884:	40015404 	.word	0x40015404
 800c888:	0002ee00 	.word	0x0002ee00
 800c88c:	200147c4 	.word	0x200147c4
 800c890:	40015424 	.word	0x40015424

0800c894 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800c898:	4b14      	ldr	r3, [pc, #80]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c89a:	4a15      	ldr	r2, [pc, #84]	; (800c8f0 <MX_SDMMC1_SD_Init+0x5c>)
 800c89c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800c89e:	4b13      	ldr	r3, [pc, #76]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800c8a4:	4b11      	ldr	r3, [pc, #68]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c8aa:	4b10      	ldr	r3, [pc, #64]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800c8b0:	4b0e      	ldr	r3, [pc, #56]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c8b6:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800c8bc:	4b0b      	ldr	r3, [pc, #44]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800c8c2:	480a      	ldr	r0, [pc, #40]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c8c4:	f7f9 febc 	bl	8006640 <HAL_SD_Init>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800c8ce:	f000 fad3 	bl	800ce78 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c8d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c8d6:	4805      	ldr	r0, [pc, #20]	; (800c8ec <MX_SDMMC1_SD_Init+0x58>)
 800c8d8:	f7fa f8f8 	bl	8006acc <HAL_SD_ConfigWideBusOperation>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d001      	beq.n	800c8e6 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800c8e2:	f000 fac9 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800c8e6:	bf00      	nop
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	2000863c 	.word	0x2000863c
 800c8f0:	40012800 	.word	0x40012800

0800c8f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c8f8:	4b1b      	ldr	r3, [pc, #108]	; (800c968 <MX_SPI1_Init+0x74>)
 800c8fa:	4a1c      	ldr	r2, [pc, #112]	; (800c96c <MX_SPI1_Init+0x78>)
 800c8fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c8fe:	4b1a      	ldr	r3, [pc, #104]	; (800c968 <MX_SPI1_Init+0x74>)
 800c900:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c906:	4b18      	ldr	r3, [pc, #96]	; (800c968 <MX_SPI1_Init+0x74>)
 800c908:	2200      	movs	r2, #0
 800c90a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800c90c:	4b16      	ldr	r3, [pc, #88]	; (800c968 <MX_SPI1_Init+0x74>)
 800c90e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c914:	4b14      	ldr	r3, [pc, #80]	; (800c968 <MX_SPI1_Init+0x74>)
 800c916:	2200      	movs	r2, #0
 800c918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c91a:	4b13      	ldr	r3, [pc, #76]	; (800c968 <MX_SPI1_Init+0x74>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800c920:	4b11      	ldr	r3, [pc, #68]	; (800c968 <MX_SPI1_Init+0x74>)
 800c922:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c928:	4b0f      	ldr	r3, [pc, #60]	; (800c968 <MX_SPI1_Init+0x74>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c92e:	4b0e      	ldr	r3, [pc, #56]	; (800c968 <MX_SPI1_Init+0x74>)
 800c930:	2200      	movs	r2, #0
 800c932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c934:	4b0c      	ldr	r3, [pc, #48]	; (800c968 <MX_SPI1_Init+0x74>)
 800c936:	2200      	movs	r2, #0
 800c938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c93a:	4b0b      	ldr	r3, [pc, #44]	; (800c968 <MX_SPI1_Init+0x74>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800c940:	4b09      	ldr	r3, [pc, #36]	; (800c968 <MX_SPI1_Init+0x74>)
 800c942:	2207      	movs	r2, #7
 800c944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c946:	4b08      	ldr	r3, [pc, #32]	; (800c968 <MX_SPI1_Init+0x74>)
 800c948:	2200      	movs	r2, #0
 800c94a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c94c:	4b06      	ldr	r3, [pc, #24]	; (800c968 <MX_SPI1_Init+0x74>)
 800c94e:	2208      	movs	r2, #8
 800c950:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c952:	4805      	ldr	r0, [pc, #20]	; (800c968 <MX_SPI1_Init+0x74>)
 800c954:	f7fa fbf2 	bl	800713c <HAL_SPI_Init>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d001      	beq.n	800c962 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800c95e:	f000 fa8b 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c962:	bf00      	nop
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20025a24 	.word	0x20025a24
 800c96c:	40013000 	.word	0x40013000

0800c970 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800c974:	4b1b      	ldr	r3, [pc, #108]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c976:	4a1c      	ldr	r2, [pc, #112]	; (800c9e8 <MX_SPI2_Init+0x78>)
 800c978:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c97a:	4b1a      	ldr	r3, [pc, #104]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c97c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c980:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c982:	4b18      	ldr	r3, [pc, #96]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c984:	2200      	movs	r2, #0
 800c986:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800c988:	4b16      	ldr	r3, [pc, #88]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c98a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c98e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c990:	4b14      	ldr	r3, [pc, #80]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c992:	2200      	movs	r2, #0
 800c994:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c996:	4b13      	ldr	r3, [pc, #76]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c998:	2200      	movs	r2, #0
 800c99a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800c99c:	4b11      	ldr	r3, [pc, #68]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c99e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c9a4:	4b0f      	ldr	r3, [pc, #60]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c9aa:	4b0e      	ldr	r3, [pc, #56]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c9b0:	4b0c      	ldr	r3, [pc, #48]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9b6:	4b0b      	ldr	r3, [pc, #44]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800c9bc:	4b09      	ldr	r3, [pc, #36]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c9be:	2207      	movs	r2, #7
 800c9c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c9c2:	4b08      	ldr	r3, [pc, #32]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c9c8:	4b06      	ldr	r3, [pc, #24]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c9ca:	2208      	movs	r2, #8
 800c9cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c9ce:	4805      	ldr	r0, [pc, #20]	; (800c9e4 <MX_SPI2_Init+0x74>)
 800c9d0:	f7fa fbb4 	bl	800713c <HAL_SPI_Init>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800c9da:	f000 fa4d 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800c9de:	bf00      	nop
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20000484 	.word	0x20000484
 800c9e8:	40003800 	.word	0x40003800

0800c9ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ca24 <MX_DMA_Init+0x38>)
 800c9f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9f6:	4a0b      	ldr	r2, [pc, #44]	; (800ca24 <MX_DMA_Init+0x38>)
 800c9f8:	f043 0301 	orr.w	r3, r3, #1
 800c9fc:	6493      	str	r3, [r2, #72]	; 0x48
 800c9fe:	4b09      	ldr	r3, [pc, #36]	; (800ca24 <MX_DMA_Init+0x38>)
 800ca00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	607b      	str	r3, [r7, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	200e      	movs	r0, #14
 800ca10:	f7f4 fecf 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800ca14:	200e      	movs	r0, #14
 800ca16:	f7f4 fee8 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 800ca1a:	bf00      	nop
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	40021000 	.word	0x40021000

0800ca28 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b088      	sub	sp, #32
 800ca2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800ca2e:	1d3b      	adds	r3, r7, #4
 800ca30:	2200      	movs	r2, #0
 800ca32:	601a      	str	r2, [r3, #0]
 800ca34:	605a      	str	r2, [r3, #4]
 800ca36:	609a      	str	r2, [r3, #8]
 800ca38:	60da      	str	r2, [r3, #12]
 800ca3a:	611a      	str	r2, [r3, #16]
 800ca3c:	615a      	str	r2, [r3, #20]
 800ca3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800ca40:	4b4f      	ldr	r3, [pc, #316]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca42:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800ca46:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800ca48:	4b4d      	ldr	r3, [pc, #308]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca4a:	4a4e      	ldr	r2, [pc, #312]	; (800cb84 <MX_FMC_Init+0x15c>)
 800ca4c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800ca4e:	4b4c      	ldr	r3, [pc, #304]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca50:	2202      	movs	r2, #2
 800ca52:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800ca54:	4b4a      	ldr	r3, [pc, #296]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800ca5a:	4b49      	ldr	r3, [pc, #292]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800ca60:	4b47      	ldr	r3, [pc, #284]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca62:	2210      	movs	r2, #16
 800ca64:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800ca66:	4b46      	ldr	r3, [pc, #280]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800ca6c:	4b44      	ldr	r3, [pc, #272]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800ca72:	4b43      	ldr	r3, [pc, #268]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800ca78:	4b41      	ldr	r3, [pc, #260]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800ca7e:	4b40      	ldr	r3, [pc, #256]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800ca84:	4b3e      	ldr	r3, [pc, #248]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800ca8a:	4b3d      	ldr	r3, [pc, #244]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800ca90:	4b3b      	ldr	r3, [pc, #236]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800ca96:	4b3a      	ldr	r3, [pc, #232]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800ca9c:	4b38      	ldr	r3, [pc, #224]	; (800cb80 <MX_FMC_Init+0x158>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800caa2:	4b37      	ldr	r3, [pc, #220]	; (800cb80 <MX_FMC_Init+0x158>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800caa8:	230f      	movs	r3, #15
 800caaa:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800caac:	230f      	movs	r3, #15
 800caae:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800cab0:	23ff      	movs	r3, #255	; 0xff
 800cab2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800cab4:	230f      	movs	r3, #15
 800cab6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800cab8:	2310      	movs	r3, #16
 800caba:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800cabc:	2311      	movs	r3, #17
 800cabe:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800cac4:	1d3b      	adds	r3, r7, #4
 800cac6:	2200      	movs	r2, #0
 800cac8:	4619      	mov	r1, r3
 800caca:	482d      	ldr	r0, [pc, #180]	; (800cb80 <MX_FMC_Init+0x158>)
 800cacc:	f7fa fbc0 	bl	8007250 <HAL_SRAM_Init>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 800cad6:	f000 f9cf 	bl	800ce78 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 800cada:	4b2b      	ldr	r3, [pc, #172]	; (800cb88 <MX_FMC_Init+0x160>)
 800cadc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800cae0:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800cae2:	4b29      	ldr	r3, [pc, #164]	; (800cb88 <MX_FMC_Init+0x160>)
 800cae4:	4a27      	ldr	r2, [pc, #156]	; (800cb84 <MX_FMC_Init+0x15c>)
 800cae6:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 800cae8:	4b27      	ldr	r3, [pc, #156]	; (800cb88 <MX_FMC_Init+0x160>)
 800caea:	2200      	movs	r2, #0
 800caec:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800caee:	4b26      	ldr	r3, [pc, #152]	; (800cb88 <MX_FMC_Init+0x160>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800caf4:	4b24      	ldr	r3, [pc, #144]	; (800cb88 <MX_FMC_Init+0x160>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800cafa:	4b23      	ldr	r3, [pc, #140]	; (800cb88 <MX_FMC_Init+0x160>)
 800cafc:	2210      	movs	r2, #16
 800cafe:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800cb00:	4b21      	ldr	r3, [pc, #132]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800cb06:	4b20      	ldr	r3, [pc, #128]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800cb0c:	4b1e      	ldr	r3, [pc, #120]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800cb12:	4b1d      	ldr	r3, [pc, #116]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cb18:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800cb1a:	4b1b      	ldr	r3, [pc, #108]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800cb20:	4b19      	ldr	r3, [pc, #100]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800cb26:	4b18      	ldr	r3, [pc, #96]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800cb2c:	4b16      	ldr	r3, [pc, #88]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800cb38:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800cb3e:	4b12      	ldr	r3, [pc, #72]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800cb44:	230f      	movs	r3, #15
 800cb46:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800cb48:	230f      	movs	r3, #15
 800cb4a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800cb4c:	23ff      	movs	r3, #255	; 0xff
 800cb4e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800cb50:	230f      	movs	r3, #15
 800cb52:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800cb54:	2310      	movs	r3, #16
 800cb56:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800cb58:	2311      	movs	r3, #17
 800cb5a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800cb60:	1d3b      	adds	r3, r7, #4
 800cb62:	2200      	movs	r2, #0
 800cb64:	4619      	mov	r1, r3
 800cb66:	4808      	ldr	r0, [pc, #32]	; (800cb88 <MX_FMC_Init+0x160>)
 800cb68:	f7fa fb72 	bl	8007250 <HAL_SRAM_Init>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <MX_FMC_Init+0x14e>
  {
    Error_Handler( );
 800cb72:	f000 f981 	bl	800ce78 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800cb76:	bf00      	nop
 800cb78:	3720      	adds	r7, #32
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	200146f8 	.word	0x200146f8
 800cb84:	a0000104 	.word	0xa0000104
 800cb88:	20014a3c 	.word	0x20014a3c

0800cb8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08e      	sub	sp, #56	; 0x38
 800cb90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb96:	2200      	movs	r2, #0
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	605a      	str	r2, [r3, #4]
 800cb9c:	609a      	str	r2, [r3, #8]
 800cb9e:	60da      	str	r2, [r3, #12]
 800cba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800cba2:	4bad      	ldr	r3, [pc, #692]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cba6:	4aac      	ldr	r2, [pc, #688]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cbae:	4baa      	ldr	r3, [pc, #680]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb6:	623b      	str	r3, [r7, #32]
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cbba:	4ba7      	ldr	r3, [pc, #668]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbbe:	4aa6      	ldr	r2, [pc, #664]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cbc6:	4ba4      	ldr	r3, [pc, #656]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbce:	61fb      	str	r3, [r7, #28]
 800cbd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cbd2:	4ba1      	ldr	r3, [pc, #644]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd6:	4aa0      	ldr	r2, [pc, #640]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbd8:	f043 0310 	orr.w	r3, r3, #16
 800cbdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cbde:	4b9e      	ldr	r3, [pc, #632]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe2:	f003 0310 	and.w	r3, r3, #16
 800cbe6:	61bb      	str	r3, [r7, #24]
 800cbe8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbea:	4b9b      	ldr	r3, [pc, #620]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbee:	4a9a      	ldr	r2, [pc, #616]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbf0:	f043 0302 	orr.w	r3, r3, #2
 800cbf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cbf6:	4b98      	ldr	r3, [pc, #608]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cbf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbfa:	f003 0302 	and.w	r3, r3, #2
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc02:	4b95      	ldr	r3, [pc, #596]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc06:	4a94      	ldr	r2, [pc, #592]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc08:	f043 0301 	orr.w	r3, r3, #1
 800cc0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc0e:	4b92      	ldr	r3, [pc, #584]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	613b      	str	r3, [r7, #16]
 800cc18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cc1a:	4b8f      	ldr	r3, [pc, #572]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc1e:	4a8e      	ldr	r2, [pc, #568]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc24:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc26:	4b8c      	ldr	r3, [pc, #560]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800cc32:	f7f7 fa29 	bl	8004088 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc36:	4b88      	ldr	r3, [pc, #544]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc3a:	4a87      	ldr	r2, [pc, #540]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc3c:	f043 0308 	orr.w	r3, r3, #8
 800cc40:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc42:	4b85      	ldr	r3, [pc, #532]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc46:	f003 0308 	and.w	r3, r3, #8
 800cc4a:	60bb      	str	r3, [r7, #8]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc4e:	4b82      	ldr	r3, [pc, #520]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc52:	4a81      	ldr	r2, [pc, #516]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc54:	f043 0304 	orr.w	r3, r3, #4
 800cc58:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc5a:	4b7f      	ldr	r3, [pc, #508]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc5e:	f003 0304 	and.w	r3, r3, #4
 800cc62:	607b      	str	r3, [r7, #4]
 800cc64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800cc66:	4b7c      	ldr	r3, [pc, #496]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc6a:	4a7b      	ldr	r2, [pc, #492]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc6c:	f043 0320 	orr.w	r3, r3, #32
 800cc70:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc72:	4b79      	ldr	r3, [pc, #484]	; (800ce58 <MX_GPIO_Init+0x2cc>)
 800cc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc76:	f003 0320 	and.w	r3, r3, #32
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800cc7e:	2200      	movs	r2, #0
 800cc80:	2101      	movs	r1, #1
 800cc82:	4876      	ldr	r0, [pc, #472]	; (800ce5c <MX_GPIO_Init+0x2d0>)
 800cc84:	f7f5 ffa8 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800cc88:	2200      	movs	r2, #0
 800cc8a:	2143      	movs	r1, #67	; 0x43
 800cc8c:	4874      	ldr	r0, [pc, #464]	; (800ce60 <MX_GPIO_Init+0x2d4>)
 800cc8e:	f7f5 ffa3 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800cc92:	2200      	movs	r2, #0
 800cc94:	2140      	movs	r1, #64	; 0x40
 800cc96:	4873      	ldr	r0, [pc, #460]	; (800ce64 <MX_GPIO_Init+0x2d8>)
 800cc98:	f7f5 ff9e 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cca2:	4871      	ldr	r0, [pc, #452]	; (800ce68 <MX_GPIO_Init+0x2dc>)
 800cca4:	f7f5 ff98 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 800cca8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800ccac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ccb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccba:	4619      	mov	r1, r3
 800ccbc:	4867      	ldr	r0, [pc, #412]	; (800ce5c <MX_GPIO_Init+0x2d0>)
 800ccbe:	f7f5 fdf9 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800ccc2:	2304      	movs	r3, #4
 800ccc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ccc6:	4b69      	ldr	r3, [pc, #420]	; (800ce6c <MX_GPIO_Init+0x2e0>)
 800ccc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800ccce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4862      	ldr	r0, [pc, #392]	; (800ce60 <MX_GPIO_Init+0x2d4>)
 800ccd6:	f7f5 fded 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ccde:	2301      	movs	r3, #1
 800cce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cce2:	2300      	movs	r3, #0
 800cce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cce6:	2300      	movs	r3, #0
 800cce8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800ccea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccee:	4619      	mov	r1, r3
 800ccf0:	485a      	ldr	r0, [pc, #360]	; (800ce5c <MX_GPIO_Init+0x2d0>)
 800ccf2:	f7f5 fddf 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800ccf6:	2340      	movs	r3, #64	; 0x40
 800ccf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd02:	2300      	movs	r3, #0
 800cd04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cd06:	2303      	movs	r3, #3
 800cd08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800cd0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd0e:	4619      	mov	r1, r3
 800cd10:	4852      	ldr	r0, [pc, #328]	; (800ce5c <MX_GPIO_Init+0x2d0>)
 800cd12:	f7f5 fdcf 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 800cd16:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd24:	2300      	movs	r3, #0
 800cd26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cd2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd30:	4619      	mov	r1, r3
 800cd32:	484b      	ldr	r0, [pc, #300]	; (800ce60 <MX_GPIO_Init+0x2d4>)
 800cd34:	f7f5 fdbe 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800cd38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd3e:	2302      	movs	r3, #2
 800cd40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd46:	2300      	movs	r3, #0
 800cd48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800cd4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd52:	4619      	mov	r1, r3
 800cd54:	4844      	ldr	r0, [pc, #272]	; (800ce68 <MX_GPIO_Init+0x2dc>)
 800cd56:	f7f5 fdad 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800cd5a:	2380      	movs	r3, #128	; 0x80
 800cd5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800cd66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	483c      	ldr	r0, [pc, #240]	; (800ce60 <MX_GPIO_Init+0x2d4>)
 800cd6e:	f7f5 fda1 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 800cd72:	2343      	movs	r3, #67	; 0x43
 800cd74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd76:	2301      	movs	r3, #1
 800cd78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cd82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd86:	4619      	mov	r1, r3
 800cd88:	4835      	ldr	r0, [pc, #212]	; (800ce60 <MX_GPIO_Init+0x2d4>)
 800cd8a:	f7f5 fd93 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800cd8e:	2340      	movs	r3, #64	; 0x40
 800cd90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd92:	2301      	movs	r3, #1
 800cd94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800cd9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cda2:	4619      	mov	r1, r3
 800cda4:	482f      	ldr	r0, [pc, #188]	; (800ce64 <MX_GPIO_Init+0x2d8>)
 800cda6:	f7f5 fd85 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800cdaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cdae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cdb0:	4b2e      	ldr	r3, [pc, #184]	; (800ce6c <MX_GPIO_Init+0x2e0>)
 800cdb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800cdb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	482c      	ldr	r0, [pc, #176]	; (800ce70 <MX_GPIO_Init+0x2e4>)
 800cdc0:	f7f5 fd78 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800cdc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 800cdd6:	230e      	movs	r3, #14
 800cdd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 800cdda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdde:	4619      	mov	r1, r3
 800cde0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cde4:	f7f5 fd66 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 800cde8:	2320      	movs	r3, #32
 800cdea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cdec:	4b1f      	ldr	r3, [pc, #124]	; (800ce6c <MX_GPIO_Init+0x2e0>)
 800cdee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800cdf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	481a      	ldr	r0, [pc, #104]	; (800ce64 <MX_GPIO_Init+0x2d8>)
 800cdfc:	f7f5 fd5a 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800ce00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ce06:	2300      	movs	r3, #0
 800ce08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ce0a:	2302      	movs	r3, #2
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800ce0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce12:	4619      	mov	r1, r3
 800ce14:	4817      	ldr	r0, [pc, #92]	; (800ce74 <MX_GPIO_Init+0x2e8>)
 800ce16:	f7f5 fd4d 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 800ce1a:	2304      	movs	r3, #4
 800ce1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 800ce26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	480e      	ldr	r0, [pc, #56]	; (800ce68 <MX_GPIO_Init+0x2dc>)
 800ce2e:	f7f5 fd41 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800ce32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800ce38:	2311      	movs	r3, #17
 800ce3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce40:	2300      	movs	r3, #0
 800ce42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800ce44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce48:	4619      	mov	r1, r3
 800ce4a:	4807      	ldr	r0, [pc, #28]	; (800ce68 <MX_GPIO_Init+0x2dc>)
 800ce4c:	f7f5 fd32 	bl	80028b4 <HAL_GPIO_Init>

}
 800ce50:	bf00      	nop
 800ce52:	3738      	adds	r7, #56	; 0x38
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	40021000 	.word	0x40021000
 800ce5c:	48002000 	.word	0x48002000
 800ce60:	48001c00 	.word	0x48001c00
 800ce64:	48000800 	.word	0x48000800
 800ce68:	48000400 	.word	0x48000400
 800ce6c:	10110000 	.word	0x10110000
 800ce70:	48001800 	.word	0x48001800
 800ce74:	48001400 	.word	0x48001400

0800ce78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ce7c:	bf00      	nop
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
	...

0800ce88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ce8e:	4b0f      	ldr	r3, [pc, #60]	; (800cecc <HAL_MspInit+0x44>)
 800ce90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce92:	4a0e      	ldr	r2, [pc, #56]	; (800cecc <HAL_MspInit+0x44>)
 800ce94:	f043 0301 	orr.w	r3, r3, #1
 800ce98:	6613      	str	r3, [r2, #96]	; 0x60
 800ce9a:	4b0c      	ldr	r3, [pc, #48]	; (800cecc <HAL_MspInit+0x44>)
 800ce9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	607b      	str	r3, [r7, #4]
 800cea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cea6:	4b09      	ldr	r3, [pc, #36]	; (800cecc <HAL_MspInit+0x44>)
 800cea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceaa:	4a08      	ldr	r2, [pc, #32]	; (800cecc <HAL_MspInit+0x44>)
 800ceac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceb0:	6593      	str	r3, [r2, #88]	; 0x58
 800ceb2:	4b06      	ldr	r3, [pc, #24]	; (800cecc <HAL_MspInit+0x44>)
 800ceb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cebe:	bf00      	nop
 800cec0:	370c      	adds	r7, #12
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	40021000 	.word	0x40021000

0800ced0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b08e      	sub	sp, #56	; 0x38
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ced8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cedc:	2200      	movs	r2, #0
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	605a      	str	r2, [r3, #4]
 800cee2:	609a      	str	r2, [r3, #8]
 800cee4:	60da      	str	r2, [r3, #12]
 800cee6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a59      	ldr	r2, [pc, #356]	; (800d054 <HAL_ADC_MspInit+0x184>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d12d      	bne.n	800cf4e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800cef2:	4b59      	ldr	r3, [pc, #356]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3301      	adds	r3, #1
 800cef8:	4a57      	ldr	r2, [pc, #348]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cefa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800cefc:	4b56      	ldr	r3, [pc, #344]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d10b      	bne.n	800cf1c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800cf04:	4b55      	ldr	r3, [pc, #340]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf08:	4a54      	ldr	r2, [pc, #336]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf10:	4b52      	ldr	r3, [pc, #328]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf18:	623b      	str	r3, [r7, #32]
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf1c:	4b4f      	ldr	r3, [pc, #316]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf20:	4a4e      	ldr	r2, [pc, #312]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf22:	f043 0304 	orr.w	r3, r3, #4
 800cf26:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf28:	4b4c      	ldr	r3, [pc, #304]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	61fb      	str	r3, [r7, #28]
 800cf32:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 800cf34:	2318      	movs	r3, #24
 800cf36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800cf38:	230b      	movs	r3, #11
 800cf3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf44:	4619      	mov	r1, r3
 800cf46:	4846      	ldr	r0, [pc, #280]	; (800d060 <HAL_ADC_MspInit+0x190>)
 800cf48:	f7f5 fcb4 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800cf4c:	e07e      	b.n	800d04c <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a44      	ldr	r2, [pc, #272]	; (800d064 <HAL_ADC_MspInit+0x194>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d146      	bne.n	800cfe6 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 800cf58:	4b3f      	ldr	r3, [pc, #252]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	4a3e      	ldr	r2, [pc, #248]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cf60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800cf62:	4b3d      	ldr	r3, [pc, #244]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d10b      	bne.n	800cf82 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800cf6a:	4b3c      	ldr	r3, [pc, #240]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf6e:	4a3b      	ldr	r2, [pc, #236]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf74:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf76:	4b39      	ldr	r3, [pc, #228]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf7e:	61bb      	str	r3, [r7, #24]
 800cf80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf82:	4b36      	ldr	r3, [pc, #216]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf86:	4a35      	ldr	r2, [pc, #212]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf88:	f043 0304 	orr.w	r3, r3, #4
 800cf8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf8e:	4b33      	ldr	r3, [pc, #204]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf92:	f003 0304 	and.w	r3, r3, #4
 800cf96:	617b      	str	r3, [r7, #20]
 800cf98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf9a:	4b30      	ldr	r3, [pc, #192]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cf9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf9e:	4a2f      	ldr	r2, [pc, #188]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cfa0:	f043 0301 	orr.w	r3, r3, #1
 800cfa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfa6:	4b2d      	ldr	r3, [pc, #180]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800cfa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfaa:	f003 0301 	and.w	r3, r3, #1
 800cfae:	613b      	str	r3, [r7, #16]
 800cfb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800cfb6:	230b      	movs	r3, #11
 800cfb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cfbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	4826      	ldr	r0, [pc, #152]	; (800d060 <HAL_ADC_MspInit+0x190>)
 800cfc6:	f7f5 fc75 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800cfca:	2312      	movs	r3, #18
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800cfce:	230b      	movs	r3, #11
 800cfd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfda:	4619      	mov	r1, r3
 800cfdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cfe0:	f7f5 fc68 	bl	80028b4 <HAL_GPIO_Init>
}
 800cfe4:	e032      	b.n	800d04c <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a1f      	ldr	r2, [pc, #124]	; (800d068 <HAL_ADC_MspInit+0x198>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d12d      	bne.n	800d04c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800cff0:	4b19      	ldr	r3, [pc, #100]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	4a18      	ldr	r2, [pc, #96]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cff8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800cffa:	4b17      	ldr	r3, [pc, #92]	; (800d058 <HAL_ADC_MspInit+0x188>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d10b      	bne.n	800d01a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800d002:	4b16      	ldr	r3, [pc, #88]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800d004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d006:	4a15      	ldr	r2, [pc, #84]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800d008:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d00c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d00e:	4b13      	ldr	r3, [pc, #76]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800d010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d016:	60fb      	str	r3, [r7, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800d01a:	4b10      	ldr	r3, [pc, #64]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800d01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d01e:	4a0f      	ldr	r2, [pc, #60]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800d020:	f043 0320 	orr.w	r3, r3, #32
 800d024:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d026:	4b0d      	ldr	r3, [pc, #52]	; (800d05c <HAL_ADC_MspInit+0x18c>)
 800d028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d02a:	f003 0320 	and.w	r3, r3, #32
 800d02e:	60bb      	str	r3, [r7, #8]
 800d030:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 800d032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800d038:	230b      	movs	r3, #11
 800d03a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d03c:	2300      	movs	r3, #0
 800d03e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 800d040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d044:	4619      	mov	r1, r3
 800d046:	4809      	ldr	r0, [pc, #36]	; (800d06c <HAL_ADC_MspInit+0x19c>)
 800d048:	f7f5 fc34 	bl	80028b4 <HAL_GPIO_Init>
}
 800d04c:	bf00      	nop
 800d04e:	3738      	adds	r7, #56	; 0x38
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	50040000 	.word	0x50040000
 800d058:	2000023c 	.word	0x2000023c
 800d05c:	40021000 	.word	0x40021000
 800d060:	48000800 	.word	0x48000800
 800d064:	50040100 	.word	0x50040100
 800d068:	50040200 	.word	0x50040200
 800d06c:	48001400 	.word	0x48001400

0800d070 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b08c      	sub	sp, #48	; 0x30
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d078:	f107 031c 	add.w	r3, r7, #28
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	605a      	str	r2, [r3, #4]
 800d082:	609a      	str	r2, [r3, #8]
 800d084:	60da      	str	r2, [r3, #12]
 800d086:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a33      	ldr	r2, [pc, #204]	; (800d15c <HAL_DCMI_MspInit+0xec>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d160      	bne.n	800d154 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800d092:	4b33      	ldr	r3, [pc, #204]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d096:	4a32      	ldr	r2, [pc, #200]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d09c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d09e:	4b30      	ldr	r3, [pc, #192]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0a6:	61bb      	str	r3, [r7, #24]
 800d0a8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800d0aa:	4b2d      	ldr	r3, [pc, #180]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ae:	4a2c      	ldr	r2, [pc, #176]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d0b6:	4b2a      	ldr	r3, [pc, #168]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0be:	617b      	str	r3, [r7, #20]
 800d0c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800d0c2:	4b27      	ldr	r3, [pc, #156]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0c6:	4a26      	ldr	r2, [pc, #152]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d0ce:	4b24      	ldr	r3, [pc, #144]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d6:	613b      	str	r3, [r7, #16]
 800d0d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d0da:	4b21      	ldr	r3, [pc, #132]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0de:	4a20      	ldr	r2, [pc, #128]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0e0:	f043 0310 	orr.w	r3, r3, #16
 800d0e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d0e6:	4b1e      	ldr	r3, [pc, #120]	; (800d160 <HAL_DCMI_MspInit+0xf0>)
 800d0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ea:	f003 0310 	and.w	r3, r3, #16
 800d0ee:	60fb      	str	r3, [r7, #12]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 800d0f2:	f645 7320 	movw	r3, #24352	; 0x5f20
 800d0f6:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d100:	2300      	movs	r3, #0
 800d102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800d104:	230a      	movs	r3, #10
 800d106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d108:	f107 031c 	add.w	r3, r7, #28
 800d10c:	4619      	mov	r1, r3
 800d10e:	4815      	ldr	r0, [pc, #84]	; (800d164 <HAL_DCMI_MspInit+0xf4>)
 800d110:	f7f5 fbd0 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800d114:	23b0      	movs	r3, #176	; 0xb0
 800d116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d118:	2302      	movs	r3, #2
 800d11a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d11c:	2300      	movs	r3, #0
 800d11e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d120:	2300      	movs	r3, #0
 800d122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800d124:	230a      	movs	r3, #10
 800d126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d128:	f107 031c 	add.w	r3, r7, #28
 800d12c:	4619      	mov	r1, r3
 800d12e:	480e      	ldr	r0, [pc, #56]	; (800d168 <HAL_DCMI_MspInit+0xf8>)
 800d130:	f7f5 fbc0 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 800d134:	2320      	movs	r3, #32
 800d136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d138:	2302      	movs	r3, #2
 800d13a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d13c:	2300      	movs	r3, #0
 800d13e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d140:	2300      	movs	r3, #0
 800d142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800d144:	230a      	movs	r3, #10
 800d146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 800d148:	f107 031c 	add.w	r3, r7, #28
 800d14c:	4619      	mov	r1, r3
 800d14e:	4807      	ldr	r0, [pc, #28]	; (800d16c <HAL_DCMI_MspInit+0xfc>)
 800d150:	f7f5 fbb0 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800d154:	bf00      	nop
 800d156:	3730      	adds	r7, #48	; 0x30
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	50050000 	.word	0x50050000
 800d160:	40021000 	.word	0x40021000
 800d164:	48001c00 	.word	0x48001c00
 800d168:	48002000 	.word	0x48002000
 800d16c:	48001000 	.word	0x48001000

0800d170 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08a      	sub	sp, #40	; 0x28
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d178:	f107 0314 	add.w	r3, r7, #20
 800d17c:	2200      	movs	r2, #0
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	605a      	str	r2, [r3, #4]
 800d182:	609a      	str	r2, [r3, #8]
 800d184:	60da      	str	r2, [r3, #12]
 800d186:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800d188:	4b4a      	ldr	r3, [pc, #296]	; (800d2b4 <HAL_DFSDM_FilterMspInit+0x144>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d155      	bne.n	800d23c <HAL_DFSDM_FilterMspInit+0xcc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800d190:	4b49      	ldr	r3, [pc, #292]	; (800d2b8 <HAL_DFSDM_FilterMspInit+0x148>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3301      	adds	r3, #1
 800d196:	4a48      	ldr	r2, [pc, #288]	; (800d2b8 <HAL_DFSDM_FilterMspInit+0x148>)
 800d198:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800d19a:	4b47      	ldr	r3, [pc, #284]	; (800d2b8 <HAL_DFSDM_FilterMspInit+0x148>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d10b      	bne.n	800d1ba <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800d1a2:	4b46      	ldr	r3, [pc, #280]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1a6:	4a45      	ldr	r2, [pc, #276]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1ac:	6613      	str	r3, [r2, #96]	; 0x60
 800d1ae:	4b43      	ldr	r3, [pc, #268]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d1b6:	613b      	str	r3, [r7, #16]
 800d1b8:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1ba:	4b40      	ldr	r3, [pc, #256]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1be:	4a3f      	ldr	r2, [pc, #252]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1c0:	f043 0304 	orr.w	r3, r3, #4
 800d1c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d1c6:	4b3d      	ldr	r3, [pc, #244]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1ca:	f003 0304 	and.w	r3, r3, #4
 800d1ce:	60fb      	str	r3, [r7, #12]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1d2:	4b3a      	ldr	r3, [pc, #232]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1d6:	4a39      	ldr	r2, [pc, #228]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1d8:	f043 0302 	orr.w	r3, r3, #2
 800d1dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d1de:	4b37      	ldr	r3, [pc, #220]	; (800d2bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800d1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1e2:	f003 0302 	and.w	r3, r3, #2
 800d1e6:	60bb      	str	r3, [r7, #8]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800d1ea:	2384      	movs	r3, #132	; 0x84
 800d1ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800d1fa:	2306      	movs	r3, #6
 800d1fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d1fe:	f107 0314 	add.w	r3, r7, #20
 800d202:	4619      	mov	r1, r3
 800d204:	482e      	ldr	r0, [pc, #184]	; (800d2c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800d206:	f7f5 fb55 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800d20a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d20e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d210:	2302      	movs	r3, #2
 800d212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d214:	2300      	movs	r3, #0
 800d216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d218:	2303      	movs	r3, #3
 800d21a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800d21c:	2306      	movs	r3, #6
 800d21e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800d220:	f107 0314 	add.w	r3, r7, #20
 800d224:	4619      	mov	r1, r3
 800d226:	4827      	ldr	r0, [pc, #156]	; (800d2c4 <HAL_DFSDM_FilterMspInit+0x154>)
 800d228:	f7f5 fb44 	bl	80028b4 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 800d22c:	2200      	movs	r2, #0
 800d22e:	2100      	movs	r1, #0
 800d230:	203d      	movs	r0, #61	; 0x3d
 800d232:	f7f4 fabe 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800d236:	203d      	movs	r0, #61	; 0x3d
 800d238:	f7f4 fad7 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a21      	ldr	r2, [pc, #132]	; (800d2c8 <HAL_DFSDM_FilterMspInit+0x158>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d131      	bne.n	800d2aa <HAL_DFSDM_FilterMspInit+0x13a>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800d246:	4b21      	ldr	r3, [pc, #132]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d248:	4a21      	ldr	r2, [pc, #132]	; (800d2d0 <HAL_DFSDM_FilterMspInit+0x160>)
 800d24a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800d24c:	4b1f      	ldr	r3, [pc, #124]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d24e:	2200      	movs	r2, #0
 800d250:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d252:	4b1e      	ldr	r3, [pc, #120]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d254:	2200      	movs	r2, #0
 800d256:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800d258:	4b1c      	ldr	r3, [pc, #112]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800d25e:	4b1b      	ldr	r3, [pc, #108]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d260:	2280      	movs	r2, #128	; 0x80
 800d262:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800d264:	4b19      	ldr	r3, [pc, #100]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d26a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800d26c:	4b17      	ldr	r3, [pc, #92]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d26e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d272:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800d274:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d276:	2220      	movs	r2, #32
 800d278:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800d27a:	4b14      	ldr	r3, [pc, #80]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d27c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d280:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800d282:	4812      	ldr	r0, [pc, #72]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d284:	f7f5 f8a0 	bl	80023c8 <HAL_DMA_Init>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <HAL_DFSDM_FilterMspInit+0x122>
    {
      Error_Handler();
 800d28e:	f7ff fdf3 	bl	800ce78 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a0d      	ldr	r2, [pc, #52]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d296:	62da      	str	r2, [r3, #44]	; 0x2c
 800d298:	4a0c      	ldr	r2, [pc, #48]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a0a      	ldr	r2, [pc, #40]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d2a2:	629a      	str	r2, [r3, #40]	; 0x28
 800d2a4:	4a09      	ldr	r2, [pc, #36]	; (800d2cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800d2aa:	bf00      	nop
 800d2ac:	3728      	adds	r7, #40	; 0x28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20000244 	.word	0x20000244
 800d2b8:	20000240 	.word	0x20000240
 800d2bc:	40021000 	.word	0x40021000
 800d2c0:	48000800 	.word	0x48000800
 800d2c4:	48000400 	.word	0x48000400
 800d2c8:	40016100 	.word	0x40016100
 800d2cc:	200149f0 	.word	0x200149f0
 800d2d0:	40020044 	.word	0x40020044

0800d2d4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b08a      	sub	sp, #40	; 0x28
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2dc:	f107 0314 	add.w	r3, r7, #20
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	605a      	str	r2, [r3, #4]
 800d2e6:	609a      	str	r2, [r3, #8]
 800d2e8:	60da      	str	r2, [r3, #12]
 800d2ea:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800d2ec:	4b2a      	ldr	r3, [pc, #168]	; (800d398 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d14d      	bne.n	800d390 <HAL_DFSDM_ChannelMspInit+0xbc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800d2f4:	4b29      	ldr	r3, [pc, #164]	; (800d39c <HAL_DFSDM_ChannelMspInit+0xc8>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	4a28      	ldr	r2, [pc, #160]	; (800d39c <HAL_DFSDM_ChannelMspInit+0xc8>)
 800d2fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800d2fe:	4b27      	ldr	r3, [pc, #156]	; (800d39c <HAL_DFSDM_ChannelMspInit+0xc8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d10b      	bne.n	800d31e <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800d306:	4b26      	ldr	r3, [pc, #152]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d30a:	4a25      	ldr	r2, [pc, #148]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d30c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d310:	6613      	str	r3, [r2, #96]	; 0x60
 800d312:	4b23      	ldr	r3, [pc, #140]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d31a:	613b      	str	r3, [r7, #16]
 800d31c:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d31e:	4b20      	ldr	r3, [pc, #128]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d322:	4a1f      	ldr	r2, [pc, #124]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d324:	f043 0304 	orr.w	r3, r3, #4
 800d328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d32a:	4b1d      	ldr	r3, [pc, #116]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d32e:	f003 0304 	and.w	r3, r3, #4
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d336:	4b1a      	ldr	r3, [pc, #104]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d33a:	4a19      	ldr	r2, [pc, #100]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d33c:	f043 0302 	orr.w	r3, r3, #2
 800d340:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d342:	4b17      	ldr	r3, [pc, #92]	; (800d3a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800d344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d346:	f003 0302 	and.w	r3, r3, #2
 800d34a:	60bb      	str	r3, [r7, #8]
 800d34c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800d34e:	2384      	movs	r3, #132	; 0x84
 800d350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d352:	2302      	movs	r3, #2
 800d354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d356:	2300      	movs	r3, #0
 800d358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d35a:	2303      	movs	r3, #3
 800d35c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800d35e:	2306      	movs	r3, #6
 800d360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d362:	f107 0314 	add.w	r3, r7, #20
 800d366:	4619      	mov	r1, r3
 800d368:	480e      	ldr	r0, [pc, #56]	; (800d3a4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800d36a:	f7f5 faa3 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800d36e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d374:	2302      	movs	r3, #2
 800d376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d378:	2300      	movs	r3, #0
 800d37a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d37c:	2303      	movs	r3, #3
 800d37e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800d380:	2306      	movs	r3, #6
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800d384:	f107 0314 	add.w	r3, r7, #20
 800d388:	4619      	mov	r1, r3
 800d38a:	4807      	ldr	r0, [pc, #28]	; (800d3a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800d38c:	f7f5 fa92 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800d390:	bf00      	nop
 800d392:	3728      	adds	r7, #40	; 0x28
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	20000244 	.word	0x20000244
 800d39c:	20000240 	.word	0x20000240
 800d3a0:	40021000 	.word	0x40021000
 800d3a4:	48000800 	.word	0x48000800
 800d3a8:	48000400 	.word	0x48000400

0800d3ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08c      	sub	sp, #48	; 0x30
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3b4:	f107 031c 	add.w	r3, r7, #28
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	605a      	str	r2, [r3, #4]
 800d3be:	609a      	str	r2, [r3, #8]
 800d3c0:	60da      	str	r2, [r3, #12]
 800d3c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a3d      	ldr	r2, [pc, #244]	; (800d4c0 <HAL_I2C_MspInit+0x114>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d129      	bne.n	800d422 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3ce:	4b3d      	ldr	r3, [pc, #244]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3d2:	4a3c      	ldr	r2, [pc, #240]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d3d4:	f043 0302 	orr.w	r3, r3, #2
 800d3d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d3da:	4b3a      	ldr	r3, [pc, #232]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3de:	f003 0302 	and.w	r3, r3, #2
 800d3e2:	61bb      	str	r3, [r7, #24]
 800d3e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800d3e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800d3ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d3ec:	2312      	movs	r3, #18
 800d3ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3f4:	2303      	movs	r3, #3
 800d3f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d3f8:	2304      	movs	r3, #4
 800d3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d3fc:	f107 031c 	add.w	r3, r7, #28
 800d400:	4619      	mov	r1, r3
 800d402:	4831      	ldr	r0, [pc, #196]	; (800d4c8 <HAL_I2C_MspInit+0x11c>)
 800d404:	f7f5 fa56 	bl	80028b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d408:	4b2e      	ldr	r3, [pc, #184]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d40c:	4a2d      	ldr	r2, [pc, #180]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d40e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d412:	6593      	str	r3, [r2, #88]	; 0x58
 800d414:	4b2b      	ldr	r3, [pc, #172]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800d420:	e049      	b.n	800d4b6 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a29      	ldr	r2, [pc, #164]	; (800d4cc <HAL_I2C_MspInit+0x120>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d144      	bne.n	800d4b6 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800d42c:	4b25      	ldr	r3, [pc, #148]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d430:	4a24      	ldr	r2, [pc, #144]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d436:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d438:	4b22      	ldr	r3, [pc, #136]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d43a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d440:	613b      	str	r3, [r7, #16]
 800d442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d444:	4b1f      	ldr	r3, [pc, #124]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d448:	4a1e      	ldr	r2, [pc, #120]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d44a:	f043 0302 	orr.w	r3, r3, #2
 800d44e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d450:	4b1c      	ldr	r3, [pc, #112]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	60fb      	str	r3, [r7, #12]
 800d45a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 800d45c:	2310      	movs	r3, #16
 800d45e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d460:	2312      	movs	r3, #18
 800d462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d464:	2301      	movs	r3, #1
 800d466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d468:	2303      	movs	r3, #3
 800d46a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d46c:	2304      	movs	r3, #4
 800d46e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800d470:	f107 031c 	add.w	r3, r7, #28
 800d474:	4619      	mov	r1, r3
 800d476:	4816      	ldr	r0, [pc, #88]	; (800d4d0 <HAL_I2C_MspInit+0x124>)
 800d478:	f7f5 fa1c 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 800d47c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d482:	2312      	movs	r3, #18
 800d484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d486:	2301      	movs	r3, #1
 800d488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d48a:	2303      	movs	r3, #3
 800d48c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d48e:	2304      	movs	r3, #4
 800d490:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800d492:	f107 031c 	add.w	r3, r7, #28
 800d496:	4619      	mov	r1, r3
 800d498:	480b      	ldr	r0, [pc, #44]	; (800d4c8 <HAL_I2C_MspInit+0x11c>)
 800d49a:	f7f5 fa0b 	bl	80028b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d49e:	4b09      	ldr	r3, [pc, #36]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4a2:	4a08      	ldr	r2, [pc, #32]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d4a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d4a8:	6593      	str	r3, [r2, #88]	; 0x58
 800d4aa:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <HAL_I2C_MspInit+0x118>)
 800d4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4b2:	60bb      	str	r3, [r7, #8]
 800d4b4:	68bb      	ldr	r3, [r7, #8]
}
 800d4b6:	bf00      	nop
 800d4b8:	3730      	adds	r7, #48	; 0x30
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	40005400 	.word	0x40005400
 800d4c4:	40021000 	.word	0x40021000
 800d4c8:	48000400 	.word	0x48000400
 800d4cc:	40005800 	.word	0x40005800
 800d4d0:	48001c00 	.word	0x48001c00

0800d4d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b090      	sub	sp, #64	; 0x40
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	605a      	str	r2, [r3, #4]
 800d4e6:	609a      	str	r2, [r3, #8]
 800d4e8:	60da      	str	r2, [r3, #12]
 800d4ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a68      	ldr	r2, [pc, #416]	; (800d694 <HAL_UART_MspInit+0x1c0>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d12b      	bne.n	800d54e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d4f6:	4b68      	ldr	r3, [pc, #416]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4fa:	4a67      	ldr	r2, [pc, #412]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d4fc:	f043 0301 	orr.w	r3, r3, #1
 800d500:	65d3      	str	r3, [r2, #92]	; 0x5c
 800d502:	4b65      	ldr	r3, [pc, #404]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d50e:	4b62      	ldr	r3, [pc, #392]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d512:	4a61      	ldr	r2, [pc, #388]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d51a:	4b5f      	ldr	r3, [pc, #380]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d522:	627b      	str	r3, [r7, #36]	; 0x24
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 800d526:	f7f6 fdaf 	bl	8004088 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800d52a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800d52e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d530:	2302      	movs	r3, #2
 800d532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d534:	2300      	movs	r3, #0
 800d536:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d538:	2303      	movs	r3, #3
 800d53a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800d53c:	2308      	movs	r3, #8
 800d53e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d544:	4619      	mov	r1, r3
 800d546:	4855      	ldr	r0, [pc, #340]	; (800d69c <HAL_UART_MspInit+0x1c8>)
 800d548:	f7f5 f9b4 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800d54c:	e09e      	b.n	800d68c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a53      	ldr	r2, [pc, #332]	; (800d6a0 <HAL_UART_MspInit+0x1cc>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d147      	bne.n	800d5e8 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d558:	4b4f      	ldr	r3, [pc, #316]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d55a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d55c:	4a4e      	ldr	r2, [pc, #312]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d55e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d562:	6613      	str	r3, [r2, #96]	; 0x60
 800d564:	4b4c      	ldr	r3, [pc, #304]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d56c:	623b      	str	r3, [r7, #32]
 800d56e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d570:	4b49      	ldr	r3, [pc, #292]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d574:	4a48      	ldr	r2, [pc, #288]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d576:	f043 0302 	orr.w	r3, r3, #2
 800d57a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d57c:	4b46      	ldr	r3, [pc, #280]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d580:	f003 0302 	and.w	r3, r3, #2
 800d584:	61fb      	str	r3, [r7, #28]
 800d586:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d588:	4b43      	ldr	r3, [pc, #268]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d58a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d58c:	4a42      	ldr	r2, [pc, #264]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d58e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d592:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d594:	4b40      	ldr	r3, [pc, #256]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59c:	61bb      	str	r3, [r7, #24]
 800d59e:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800d5a0:	f7f6 fd72 	bl	8004088 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 800d5a4:	2340      	movs	r3, #64	; 0x40
 800d5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d5b4:	2307      	movs	r3, #7
 800d5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800d5b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4839      	ldr	r0, [pc, #228]	; (800d6a4 <HAL_UART_MspInit+0x1d0>)
 800d5c0:	f7f5 f978 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 800d5c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5ca:	2302      	movs	r3, #2
 800d5cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5d2:	2303      	movs	r3, #3
 800d5d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d5d6:	2307      	movs	r3, #7
 800d5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d5da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5de:	4619      	mov	r1, r3
 800d5e0:	482e      	ldr	r0, [pc, #184]	; (800d69c <HAL_UART_MspInit+0x1c8>)
 800d5e2:	f7f5 f967 	bl	80028b4 <HAL_GPIO_Init>
}
 800d5e6:	e051      	b.n	800d68c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a2e      	ldr	r2, [pc, #184]	; (800d6a8 <HAL_UART_MspInit+0x1d4>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d14c      	bne.n	800d68c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d5f2:	4b29      	ldr	r3, [pc, #164]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5f6:	4a28      	ldr	r2, [pc, #160]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d5f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5fc:	6593      	str	r3, [r2, #88]	; 0x58
 800d5fe:	4b26      	ldr	r3, [pc, #152]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d60a:	4b23      	ldr	r3, [pc, #140]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d60e:	4a22      	ldr	r2, [pc, #136]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d610:	f043 0308 	orr.w	r3, r3, #8
 800d614:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d616:	4b20      	ldr	r3, [pc, #128]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d61a:	f003 0308 	and.w	r3, r3, #8
 800d61e:	613b      	str	r3, [r7, #16]
 800d620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d622:	4b1d      	ldr	r3, [pc, #116]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d626:	4a1c      	ldr	r2, [pc, #112]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d628:	f043 0301 	orr.w	r3, r3, #1
 800d62c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d62e:	4b1a      	ldr	r3, [pc, #104]	; (800d698 <HAL_UART_MspInit+0x1c4>)
 800d630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	60fb      	str	r3, [r7, #12]
 800d638:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800d63a:	2340      	movs	r3, #64	; 0x40
 800d63c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d63e:	2302      	movs	r3, #2
 800d640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d642:	2300      	movs	r3, #0
 800d644:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d646:	2303      	movs	r3, #3
 800d648:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d64a:	2307      	movs	r3, #7
 800d64c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800d64e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d652:	4619      	mov	r1, r3
 800d654:	4815      	ldr	r0, [pc, #84]	; (800d6ac <HAL_UART_MspInit+0x1d8>)
 800d656:	f7f5 f92d 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800d65a:	2304      	movs	r3, #4
 800d65c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d65e:	2302      	movs	r3, #2
 800d660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d662:	2300      	movs	r3, #0
 800d664:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d666:	2303      	movs	r3, #3
 800d668:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d66a:	2307      	movs	r3, #7
 800d66c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800d66e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d672:	4619      	mov	r1, r3
 800d674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d678:	f7f5 f91c 	bl	80028b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d67c:	2200      	movs	r2, #0
 800d67e:	2100      	movs	r1, #0
 800d680:	2026      	movs	r0, #38	; 0x26
 800d682:	f7f4 f896 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d686:	2026      	movs	r0, #38	; 0x26
 800d688:	f7f4 f8af 	bl	80017ea <HAL_NVIC_EnableIRQ>
}
 800d68c:	bf00      	nop
 800d68e:	3740      	adds	r7, #64	; 0x40
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	40008000 	.word	0x40008000
 800d698:	40021000 	.word	0x40021000
 800d69c:	48001800 	.word	0x48001800
 800d6a0:	40013800 	.word	0x40013800
 800d6a4:	48000400 	.word	0x48000400
 800d6a8:	40004400 	.word	0x40004400
 800d6ac:	48000c00 	.word	0x48000c00

0800d6b0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08a      	sub	sp, #40	; 0x28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6b8:	f107 0314 	add.w	r3, r7, #20
 800d6bc:	2200      	movs	r2, #0
 800d6be:	601a      	str	r2, [r3, #0]
 800d6c0:	605a      	str	r2, [r3, #4]
 800d6c2:	609a      	str	r2, [r3, #8]
 800d6c4:	60da      	str	r2, [r3, #12]
 800d6c6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a26      	ldr	r2, [pc, #152]	; (800d768 <HAL_QSPI_MspInit+0xb8>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d145      	bne.n	800d75e <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800d6d2:	4b26      	ldr	r3, [pc, #152]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6d6:	4a25      	ldr	r2, [pc, #148]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d6d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6dc:	6513      	str	r3, [r2, #80]	; 0x50
 800d6de:	4b23      	ldr	r3, [pc, #140]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6e6:	613b      	str	r3, [r7, #16]
 800d6e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d6ea:	4b20      	ldr	r3, [pc, #128]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6ee:	4a1f      	ldr	r2, [pc, #124]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d6f0:	f043 0302 	orr.w	r3, r3, #2
 800d6f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d6f6:	4b1d      	ldr	r3, [pc, #116]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d6f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6fa:	f003 0302 	and.w	r3, r3, #2
 800d6fe:	60fb      	str	r3, [r7, #12]
 800d700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d702:	4b1a      	ldr	r3, [pc, #104]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d706:	4a19      	ldr	r2, [pc, #100]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d708:	f043 0301 	orr.w	r3, r3, #1
 800d70c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d70e:	4b17      	ldr	r3, [pc, #92]	; (800d76c <HAL_QSPI_MspInit+0xbc>)
 800d710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	60bb      	str	r3, [r7, #8]
 800d718:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800d71a:	f640 0303 	movw	r3, #2051	; 0x803
 800d71e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d720:	2302      	movs	r3, #2
 800d722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d724:	2300      	movs	r3, #0
 800d726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d728:	2303      	movs	r3, #3
 800d72a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800d72c:	230a      	movs	r3, #10
 800d72e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d730:	f107 0314 	add.w	r3, r7, #20
 800d734:	4619      	mov	r1, r3
 800d736:	480e      	ldr	r0, [pc, #56]	; (800d770 <HAL_QSPI_MspInit+0xc0>)
 800d738:	f7f5 f8bc 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 800d73c:	23c8      	movs	r3, #200	; 0xc8
 800d73e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d740:	2302      	movs	r3, #2
 800d742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d744:	2300      	movs	r3, #0
 800d746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d748:	2303      	movs	r3, #3
 800d74a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800d74c:	230a      	movs	r3, #10
 800d74e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d750:	f107 0314 	add.w	r3, r7, #20
 800d754:	4619      	mov	r1, r3
 800d756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d75a:	f7f5 f8ab 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800d75e:	bf00      	nop
 800d760:	3728      	adds	r7, #40	; 0x28
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	a0001000 	.word	0xa0001000
 800d76c:	40021000 	.word	0x40021000
 800d770:	48000400 	.word	0x48000400

0800d774 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b08a      	sub	sp, #40	; 0x28
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d77c:	f107 0314 	add.w	r3, r7, #20
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	605a      	str	r2, [r3, #4]
 800d786:	609a      	str	r2, [r3, #8]
 800d788:	60da      	str	r2, [r3, #12]
 800d78a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a25      	ldr	r2, [pc, #148]	; (800d828 <HAL_SD_MspInit+0xb4>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d144      	bne.n	800d820 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d796:	4b25      	ldr	r3, [pc, #148]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d79a:	4a24      	ldr	r2, [pc, #144]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d79c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d7a0:	6613      	str	r3, [r2, #96]	; 0x60
 800d7a2:	4b22      	ldr	r3, [pc, #136]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d7a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7aa:	613b      	str	r3, [r7, #16]
 800d7ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d7ae:	4b1f      	ldr	r3, [pc, #124]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b2:	4a1e      	ldr	r2, [pc, #120]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d7b4:	f043 0308 	orr.w	r3, r3, #8
 800d7b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7ba:	4b1c      	ldr	r3, [pc, #112]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7be:	f003 0308 	and.w	r3, r3, #8
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d7c6:	4b19      	ldr	r3, [pc, #100]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ca:	4a18      	ldr	r2, [pc, #96]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d7cc:	f043 0304 	orr.w	r3, r3, #4
 800d7d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7d2:	4b16      	ldr	r3, [pc, #88]	; (800d82c <HAL_SD_MspInit+0xb8>)
 800d7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7d6:	f003 0304 	and.w	r3, r3, #4
 800d7da:	60bb      	str	r3, [r7, #8]
 800d7dc:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800d7de:	2304      	movs	r3, #4
 800d7e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7e2:	2302      	movs	r3, #2
 800d7e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800d7ee:	230c      	movs	r3, #12
 800d7f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800d7f2:	f107 0314 	add.w	r3, r7, #20
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	480d      	ldr	r0, [pc, #52]	; (800d830 <HAL_SD_MspInit+0xbc>)
 800d7fa:	f7f5 f85b 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 800d7fe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800d802:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d804:	2302      	movs	r3, #2
 800d806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d808:	2300      	movs	r3, #0
 800d80a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d80c:	2303      	movs	r3, #3
 800d80e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800d810:	230c      	movs	r3, #12
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d814:	f107 0314 	add.w	r3, r7, #20
 800d818:	4619      	mov	r1, r3
 800d81a:	4806      	ldr	r0, [pc, #24]	; (800d834 <HAL_SD_MspInit+0xc0>)
 800d81c:	f7f5 f84a 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800d820:	bf00      	nop
 800d822:	3728      	adds	r7, #40	; 0x28
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	40012800 	.word	0x40012800
 800d82c:	40021000 	.word	0x40021000
 800d830:	48000c00 	.word	0x48000c00
 800d834:	48000800 	.word	0x48000800

0800d838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b08e      	sub	sp, #56	; 0x38
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d844:	2200      	movs	r2, #0
 800d846:	601a      	str	r2, [r3, #0]
 800d848:	605a      	str	r2, [r3, #4]
 800d84a:	609a      	str	r2, [r3, #8]
 800d84c:	60da      	str	r2, [r3, #12]
 800d84e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a4b      	ldr	r2, [pc, #300]	; (800d984 <HAL_SPI_MspInit+0x14c>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d146      	bne.n	800d8e8 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d85a:	4b4b      	ldr	r3, [pc, #300]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d85c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d85e:	4a4a      	ldr	r2, [pc, #296]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d864:	6613      	str	r3, [r2, #96]	; 0x60
 800d866:	4b48      	ldr	r3, [pc, #288]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d86a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d86e:	623b      	str	r3, [r7, #32]
 800d870:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d872:	4b45      	ldr	r3, [pc, #276]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d876:	4a44      	ldr	r2, [pc, #272]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d878:	f043 0302 	orr.w	r3, r3, #2
 800d87c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d87e:	4b42      	ldr	r3, [pc, #264]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d882:	f003 0302 	and.w	r3, r3, #2
 800d886:	61fb      	str	r3, [r7, #28]
 800d888:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d88a:	4b3f      	ldr	r3, [pc, #252]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d88e:	4a3e      	ldr	r2, [pc, #248]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d890:	f043 0301 	orr.w	r3, r3, #1
 800d894:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d896:	4b3c      	ldr	r3, [pc, #240]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	61bb      	str	r3, [r7, #24]
 800d8a0:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800d8a2:	2330      	movs	r3, #48	; 0x30
 800d8a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8a6:	2302      	movs	r3, #2
 800d8a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d8b2:	2305      	movs	r3, #5
 800d8b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	4833      	ldr	r0, [pc, #204]	; (800d98c <HAL_SPI_MspInit+0x154>)
 800d8be:	f7f4 fff9 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 800d8c2:	f248 0320 	movw	r3, #32800	; 0x8020
 800d8c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d8d4:	2305      	movs	r3, #5
 800d8d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8dc:	4619      	mov	r1, r3
 800d8de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d8e2:	f7f4 ffe7 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d8e6:	e049      	b.n	800d97c <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a28      	ldr	r2, [pc, #160]	; (800d990 <HAL_SPI_MspInit+0x158>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d144      	bne.n	800d97c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d8f2:	4b25      	ldr	r3, [pc, #148]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8f6:	4a24      	ldr	r2, [pc, #144]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d8f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d8fc:	6593      	str	r3, [r2, #88]	; 0x58
 800d8fe:	4b22      	ldr	r3, [pc, #136]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800d90a:	4b1f      	ldr	r3, [pc, #124]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d90e:	4a1e      	ldr	r2, [pc, #120]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d914:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d916:	4b1c      	ldr	r3, [pc, #112]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d91a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d91e:	613b      	str	r3, [r7, #16]
 800d920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d922:	4b19      	ldr	r3, [pc, #100]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d926:	4a18      	ldr	r2, [pc, #96]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d928:	f043 0302 	orr.w	r3, r3, #2
 800d92c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d92e:	4b16      	ldr	r3, [pc, #88]	; (800d988 <HAL_SPI_MspInit+0x150>)
 800d930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d932:	f003 0302 	and.w	r3, r3, #2
 800d936:	60fb      	str	r3, [r7, #12]
 800d938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 800d93a:	2306      	movs	r3, #6
 800d93c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d93e:	2302      	movs	r3, #2
 800d940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d942:	2300      	movs	r3, #0
 800d944:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d946:	2303      	movs	r3, #3
 800d948:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d94a:	2305      	movs	r3, #5
 800d94c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d94e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d952:	4619      	mov	r1, r3
 800d954:	480f      	ldr	r0, [pc, #60]	; (800d994 <HAL_SPI_MspInit+0x15c>)
 800d956:	f7f4 ffad 	bl	80028b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800d95a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d95e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d960:	2302      	movs	r3, #2
 800d962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d964:	2300      	movs	r3, #0
 800d966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d968:	2303      	movs	r3, #3
 800d96a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d96c:	2305      	movs	r3, #5
 800d96e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800d970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d974:	4619      	mov	r1, r3
 800d976:	4805      	ldr	r0, [pc, #20]	; (800d98c <HAL_SPI_MspInit+0x154>)
 800d978:	f7f4 ff9c 	bl	80028b4 <HAL_GPIO_Init>
}
 800d97c:	bf00      	nop
 800d97e:	3738      	adds	r7, #56	; 0x38
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	40013000 	.word	0x40013000
 800d988:	40021000 	.word	0x40021000
 800d98c:	48000400 	.word	0x48000400
 800d990:	40003800 	.word	0x40003800
 800d994:	48002000 	.word	0x48002000

0800d998 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800d99e:	1d3b      	adds	r3, r7, #4
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	605a      	str	r2, [r3, #4]
 800d9a6:	609a      	str	r2, [r3, #8]
 800d9a8:	60da      	str	r2, [r3, #12]
 800d9aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800d9ac:	4b2b      	ldr	r3, [pc, #172]	; (800da5c <HAL_FMC_MspInit+0xc4>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d14f      	bne.n	800da54 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 800d9b4:	4b29      	ldr	r3, [pc, #164]	; (800da5c <HAL_FMC_MspInit+0xc4>)
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800d9ba:	4b29      	ldr	r3, [pc, #164]	; (800da60 <HAL_FMC_MspInit+0xc8>)
 800d9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9be:	4a28      	ldr	r2, [pc, #160]	; (800da60 <HAL_FMC_MspInit+0xc8>)
 800d9c0:	f043 0301 	orr.w	r3, r3, #1
 800d9c4:	6513      	str	r3, [r2, #80]	; 0x50
 800d9c6:	4b26      	ldr	r3, [pc, #152]	; (800da60 <HAL_FMC_MspInit+0xc8>)
 800d9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	603b      	str	r3, [r7, #0]
 800d9d0:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 800d9d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 800d9d6:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9d8:	2302      	movs	r3, #2
 800d9da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d9e4:	230c      	movs	r3, #12
 800d9e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d9e8:	1d3b      	adds	r3, r7, #4
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	481d      	ldr	r0, [pc, #116]	; (800da64 <HAL_FMC_MspInit+0xcc>)
 800d9ee:	f7f4 ff61 	bl	80028b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 800d9f2:	f240 233f 	movw	r3, #575	; 0x23f
 800d9f6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da00:	2303      	movs	r3, #3
 800da02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800da04:	230c      	movs	r3, #12
 800da06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800da08:	1d3b      	adds	r3, r7, #4
 800da0a:	4619      	mov	r1, r3
 800da0c:	4816      	ldr	r0, [pc, #88]	; (800da68 <HAL_FMC_MspInit+0xd0>)
 800da0e:	f7f4 ff51 	bl	80028b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 800da12:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800da16:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da18:	2302      	movs	r3, #2
 800da1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da1c:	2300      	movs	r3, #0
 800da1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da20:	2303      	movs	r3, #3
 800da22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800da24:	230c      	movs	r3, #12
 800da26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800da28:	1d3b      	adds	r3, r7, #4
 800da2a:	4619      	mov	r1, r3
 800da2c:	480f      	ldr	r0, [pc, #60]	; (800da6c <HAL_FMC_MspInit+0xd4>)
 800da2e:	f7f4 ff41 	bl	80028b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 800da32:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800da36:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da38:	2302      	movs	r3, #2
 800da3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da3c:	2300      	movs	r3, #0
 800da3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da40:	2303      	movs	r3, #3
 800da42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800da44:	230c      	movs	r3, #12
 800da46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800da48:	1d3b      	adds	r3, r7, #4
 800da4a:	4619      	mov	r1, r3
 800da4c:	4808      	ldr	r0, [pc, #32]	; (800da70 <HAL_FMC_MspInit+0xd8>)
 800da4e:	f7f4 ff31 	bl	80028b4 <HAL_GPIO_Init>
 800da52:	e000      	b.n	800da56 <HAL_FMC_MspInit+0xbe>
    return;
 800da54:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800da56:	3718      	adds	r7, #24
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	20000248 	.word	0x20000248
 800da60:	40021000 	.word	0x40021000
 800da64:	48001000 	.word	0x48001000
 800da68:	48001800 	.word	0x48001800
 800da6c:	48000c00 	.word	0x48000c00
 800da70:	48001400 	.word	0x48001400

0800da74 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800da7c:	f7ff ff8c 	bl	800d998 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800da80:	bf00      	nop
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08a      	sub	sp, #40	; 0x28
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a33      	ldr	r2, [pc, #204]	; (800db64 <HAL_SAI_MspInit+0xdc>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d135      	bne.n	800db06 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800da9a:	4b33      	ldr	r3, [pc, #204]	; (800db68 <HAL_SAI_MspInit+0xe0>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10b      	bne.n	800daba <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800daa2:	4b32      	ldr	r3, [pc, #200]	; (800db6c <HAL_SAI_MspInit+0xe4>)
 800daa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daa6:	4a31      	ldr	r2, [pc, #196]	; (800db6c <HAL_SAI_MspInit+0xe4>)
 800daa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800daac:	6613      	str	r3, [r2, #96]	; 0x60
 800daae:	4b2f      	ldr	r3, [pc, #188]	; (800db6c <HAL_SAI_MspInit+0xe4>)
 800dab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dab6:	613b      	str	r3, [r7, #16]
 800dab8:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800daba:	4b2b      	ldr	r3, [pc, #172]	; (800db68 <HAL_SAI_MspInit+0xe0>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	3301      	adds	r3, #1
 800dac0:	4a29      	ldr	r2, [pc, #164]	; (800db68 <HAL_SAI_MspInit+0xe0>)
 800dac2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 800dac4:	2354      	movs	r3, #84	; 0x54
 800dac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dac8:	2302      	movs	r3, #2
 800daca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dad0:	2300      	movs	r3, #0
 800dad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800dad4:	230d      	movs	r3, #13
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800dad8:	f107 0314 	add.w	r3, r7, #20
 800dadc:	4619      	mov	r1, r3
 800dade:	4824      	ldr	r0, [pc, #144]	; (800db70 <HAL_SAI_MspInit+0xe8>)
 800dae0:	f7f4 fee8 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800dae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daea:	2302      	movs	r3, #2
 800daec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800daf2:	2300      	movs	r3, #0
 800daf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800daf6:	230d      	movs	r3, #13
 800daf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dafa:	f107 0314 	add.w	r3, r7, #20
 800dafe:	4619      	mov	r1, r3
 800db00:	481c      	ldr	r0, [pc, #112]	; (800db74 <HAL_SAI_MspInit+0xec>)
 800db02:	f7f4 fed7 	bl	80028b4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a1b      	ldr	r2, [pc, #108]	; (800db78 <HAL_SAI_MspInit+0xf0>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d124      	bne.n	800db5a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800db10:	4b15      	ldr	r3, [pc, #84]	; (800db68 <HAL_SAI_MspInit+0xe0>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d10b      	bne.n	800db30 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800db18:	4b14      	ldr	r3, [pc, #80]	; (800db6c <HAL_SAI_MspInit+0xe4>)
 800db1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db1c:	4a13      	ldr	r2, [pc, #76]	; (800db6c <HAL_SAI_MspInit+0xe4>)
 800db1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800db22:	6613      	str	r3, [r2, #96]	; 0x60
 800db24:	4b11      	ldr	r3, [pc, #68]	; (800db6c <HAL_SAI_MspInit+0xe4>)
 800db26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800db30:	4b0d      	ldr	r3, [pc, #52]	; (800db68 <HAL_SAI_MspInit+0xe0>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	3301      	adds	r3, #1
 800db36:	4a0c      	ldr	r2, [pc, #48]	; (800db68 <HAL_SAI_MspInit+0xe0>)
 800db38:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800db3a:	2308      	movs	r3, #8
 800db3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db3e:	2302      	movs	r3, #2
 800db40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db42:	2300      	movs	r3, #0
 800db44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800db46:	2300      	movs	r3, #0
 800db48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800db4a:	230d      	movs	r3, #13
 800db4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800db4e:	f107 0314 	add.w	r3, r7, #20
 800db52:	4619      	mov	r1, r3
 800db54:	4806      	ldr	r0, [pc, #24]	; (800db70 <HAL_SAI_MspInit+0xe8>)
 800db56:	f7f4 fead 	bl	80028b4 <HAL_GPIO_Init>

    }
}
 800db5a:	bf00      	nop
 800db5c:	3728      	adds	r7, #40	; 0x28
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	40015404 	.word	0x40015404
 800db68:	2000024c 	.word	0x2000024c
 800db6c:	40021000 	.word	0x40021000
 800db70:	48001000 	.word	0x48001000
 800db74:	48000400 	.word	0x48000400
 800db78:	40015424 	.word	0x40015424

0800db7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800db7c:	b480      	push	{r7}
 800db7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800db80:	bf00      	nop
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800db8a:	b480      	push	{r7}
 800db8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800db8e:	e7fe      	b.n	800db8e <HardFault_Handler+0x4>

0800db90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800db90:	b480      	push	{r7}
 800db92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800db94:	e7fe      	b.n	800db94 <MemManage_Handler+0x4>

0800db96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800db96:	b480      	push	{r7}
 800db98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800db9a:	e7fe      	b.n	800db9a <BusFault_Handler+0x4>

0800db9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800db9c:	b480      	push	{r7}
 800db9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dba0:	e7fe      	b.n	800dba0 <UsageFault_Handler+0x4>

0800dba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dba2:	b480      	push	{r7}
 800dba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dba6:	bf00      	nop
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dbb4:	bf00      	nop
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr

0800dbbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dbbe:	b480      	push	{r7}
 800dbc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dbc2:	bf00      	nop
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dbd0:	f7f2 fd98 	bl	8000704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dbd4:	bf00      	nop
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800dbdc:	4802      	ldr	r0, [pc, #8]	; (800dbe8 <DMA1_Channel4_IRQHandler+0x10>)
 800dbde:	f7f4 fd8a 	bl	80026f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800dbe2:	bf00      	nop
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	200149f0 	.word	0x200149f0

0800dbec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800dbf0:	4802      	ldr	r0, [pc, #8]	; (800dbfc <USART2_IRQHandler+0x10>)
 800dbf2:	f7f9 fdc1 	bl	8007778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800dbf6:	bf00      	nop
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	20025b0c 	.word	0x20025b0c

0800dc00 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 800dc04:	4802      	ldr	r0, [pc, #8]	; (800dc10 <DFSDM1_FLT0_IRQHandler+0x10>)
 800dc06:	f7f4 f931 	bl	8001e6c <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 800dc0a:	bf00      	nop
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	200085e8 	.word	0x200085e8

0800dc14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800dc18:	4802      	ldr	r0, [pc, #8]	; (800dc24 <OTG_FS_IRQHandler+0x10>)
 800dc1a:	f7f5 fa87 	bl	800312c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800dc1e:	bf00      	nop
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	20026eb4 	.word	0x20026eb4

0800dc28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800dc30:	4b11      	ldr	r3, [pc, #68]	; (800dc78 <_sbrk+0x50>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d102      	bne.n	800dc3e <_sbrk+0x16>
		heap_end = &end;
 800dc38:	4b0f      	ldr	r3, [pc, #60]	; (800dc78 <_sbrk+0x50>)
 800dc3a:	4a10      	ldr	r2, [pc, #64]	; (800dc7c <_sbrk+0x54>)
 800dc3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800dc3e:	4b0e      	ldr	r3, [pc, #56]	; (800dc78 <_sbrk+0x50>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800dc44:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <_sbrk+0x50>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	466a      	mov	r2, sp
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d907      	bls.n	800dc62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800dc52:	f001 ff8b 	bl	800fb6c <__errno>
 800dc56:	4602      	mov	r2, r0
 800dc58:	230c      	movs	r3, #12
 800dc5a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800dc5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc60:	e006      	b.n	800dc70 <_sbrk+0x48>
	}

	heap_end += incr;
 800dc62:	4b05      	ldr	r3, [pc, #20]	; (800dc78 <_sbrk+0x50>)
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	4413      	add	r3, r2
 800dc6a:	4a03      	ldr	r2, [pc, #12]	; (800dc78 <_sbrk+0x50>)
 800dc6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3710      	adds	r7, #16
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	20000250 	.word	0x20000250
 800dc7c:	200274c0 	.word	0x200274c0

0800dc80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800dc80:	b480      	push	{r7}
 800dc82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dc84:	4b17      	ldr	r3, [pc, #92]	; (800dce4 <SystemInit+0x64>)
 800dc86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc8a:	4a16      	ldr	r2, [pc, #88]	; (800dce4 <SystemInit+0x64>)
 800dc8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800dc94:	4b14      	ldr	r3, [pc, #80]	; (800dce8 <SystemInit+0x68>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a13      	ldr	r2, [pc, #76]	; (800dce8 <SystemInit+0x68>)
 800dc9a:	f043 0301 	orr.w	r3, r3, #1
 800dc9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800dca0:	4b11      	ldr	r3, [pc, #68]	; (800dce8 <SystemInit+0x68>)
 800dca2:	2200      	movs	r2, #0
 800dca4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800dca6:	4b10      	ldr	r3, [pc, #64]	; (800dce8 <SystemInit+0x68>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a0f      	ldr	r2, [pc, #60]	; (800dce8 <SystemInit+0x68>)
 800dcac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800dcb0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800dcb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800dcb6:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <SystemInit+0x68>)
 800dcb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dcbc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800dcbe:	4b0a      	ldr	r3, [pc, #40]	; (800dce8 <SystemInit+0x68>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a09      	ldr	r2, [pc, #36]	; (800dce8 <SystemInit+0x68>)
 800dcc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dcc8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800dcca:	4b07      	ldr	r3, [pc, #28]	; (800dce8 <SystemInit+0x68>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800dcd0:	4b04      	ldr	r3, [pc, #16]	; (800dce4 <SystemInit+0x64>)
 800dcd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dcd6:	609a      	str	r2, [r3, #8]
#endif
}
 800dcd8:	bf00      	nop
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr
 800dce2:	bf00      	nop
 800dce4:	e000ed00 	.word	0xe000ed00
 800dce8:	40021000 	.word	0x40021000

0800dcec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	4912      	ldr	r1, [pc, #72]	; (800dd3c <MX_USB_DEVICE_Init+0x50>)
 800dcf4:	4812      	ldr	r0, [pc, #72]	; (800dd40 <MX_USB_DEVICE_Init+0x54>)
 800dcf6:	f7fc fe08 	bl	800a90a <USBD_Init>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d001      	beq.n	800dd04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dd00:	f7ff f8ba 	bl	800ce78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dd04:	490f      	ldr	r1, [pc, #60]	; (800dd44 <MX_USB_DEVICE_Init+0x58>)
 800dd06:	480e      	ldr	r0, [pc, #56]	; (800dd40 <MX_USB_DEVICE_Init+0x54>)
 800dd08:	f7fc fe2a 	bl	800a960 <USBD_RegisterClass>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dd12:	f7ff f8b1 	bl	800ce78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dd16:	490c      	ldr	r1, [pc, #48]	; (800dd48 <MX_USB_DEVICE_Init+0x5c>)
 800dd18:	4809      	ldr	r0, [pc, #36]	; (800dd40 <MX_USB_DEVICE_Init+0x54>)
 800dd1a:	f7fc fd87 	bl	800a82c <USBD_CDC_RegisterInterface>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dd24:	f7ff f8a8 	bl	800ce78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dd28:	4805      	ldr	r0, [pc, #20]	; (800dd40 <MX_USB_DEVICE_Init+0x54>)
 800dd2a:	f7fc fe33 	bl	800a994 <USBD_Start>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d001      	beq.n	800dd38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dd34:	f7ff f8a0 	bl	800ce78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dd38:	bf00      	nop
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	2000012c 	.word	0x2000012c
 800dd40:	20025c18 	.word	0x20025c18
 800dd44:	20000014 	.word	0x20000014
 800dd48:	2000011c 	.word	0x2000011c

0800dd4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dd50:	2200      	movs	r2, #0
 800dd52:	4905      	ldr	r1, [pc, #20]	; (800dd68 <CDC_Init_FS+0x1c>)
 800dd54:	4805      	ldr	r0, [pc, #20]	; (800dd6c <CDC_Init_FS+0x20>)
 800dd56:	f7fc fd80 	bl	800a85a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dd5a:	4905      	ldr	r1, [pc, #20]	; (800dd70 <CDC_Init_FS+0x24>)
 800dd5c:	4803      	ldr	r0, [pc, #12]	; (800dd6c <CDC_Init_FS+0x20>)
 800dd5e:	f7fc fd96 	bl	800a88e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dd62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	200266b4 	.word	0x200266b4
 800dd6c:	20025c18 	.word	0x20025c18
 800dd70:	20025eb4 	.word	0x20025eb4

0800dd74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dd74:	b480      	push	{r7}
 800dd76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dd78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	6039      	str	r1, [r7, #0]
 800dd8e:	71fb      	strb	r3, [r7, #7]
 800dd90:	4613      	mov	r3, r2
 800dd92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dd94:	79fb      	ldrb	r3, [r7, #7]
 800dd96:	2b23      	cmp	r3, #35	; 0x23
 800dd98:	d84a      	bhi.n	800de30 <CDC_Control_FS+0xac>
 800dd9a:	a201      	add	r2, pc, #4	; (adr r2, 800dda0 <CDC_Control_FS+0x1c>)
 800dd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda0:	0800de31 	.word	0x0800de31
 800dda4:	0800de31 	.word	0x0800de31
 800dda8:	0800de31 	.word	0x0800de31
 800ddac:	0800de31 	.word	0x0800de31
 800ddb0:	0800de31 	.word	0x0800de31
 800ddb4:	0800de31 	.word	0x0800de31
 800ddb8:	0800de31 	.word	0x0800de31
 800ddbc:	0800de31 	.word	0x0800de31
 800ddc0:	0800de31 	.word	0x0800de31
 800ddc4:	0800de31 	.word	0x0800de31
 800ddc8:	0800de31 	.word	0x0800de31
 800ddcc:	0800de31 	.word	0x0800de31
 800ddd0:	0800de31 	.word	0x0800de31
 800ddd4:	0800de31 	.word	0x0800de31
 800ddd8:	0800de31 	.word	0x0800de31
 800dddc:	0800de31 	.word	0x0800de31
 800dde0:	0800de31 	.word	0x0800de31
 800dde4:	0800de31 	.word	0x0800de31
 800dde8:	0800de31 	.word	0x0800de31
 800ddec:	0800de31 	.word	0x0800de31
 800ddf0:	0800de31 	.word	0x0800de31
 800ddf4:	0800de31 	.word	0x0800de31
 800ddf8:	0800de31 	.word	0x0800de31
 800ddfc:	0800de31 	.word	0x0800de31
 800de00:	0800de31 	.word	0x0800de31
 800de04:	0800de31 	.word	0x0800de31
 800de08:	0800de31 	.word	0x0800de31
 800de0c:	0800de31 	.word	0x0800de31
 800de10:	0800de31 	.word	0x0800de31
 800de14:	0800de31 	.word	0x0800de31
 800de18:	0800de31 	.word	0x0800de31
 800de1c:	0800de31 	.word	0x0800de31
 800de20:	0800de31 	.word	0x0800de31
 800de24:	0800de31 	.word	0x0800de31
 800de28:	0800de31 	.word	0x0800de31
 800de2c:	0800de31 	.word	0x0800de31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de30:	bf00      	nop
  }

  return (USBD_OK);
 800de32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800de34:	4618      	mov	r0, r3
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800de4a:	6879      	ldr	r1, [r7, #4]
 800de4c:	4805      	ldr	r0, [pc, #20]	; (800de64 <CDC_Receive_FS+0x24>)
 800de4e:	f7fc fd1e 	bl	800a88e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800de52:	4804      	ldr	r0, [pc, #16]	; (800de64 <CDC_Receive_FS+0x24>)
 800de54:	f7fc fd2f 	bl	800a8b6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800de58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3708      	adds	r7, #8
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	20025c18 	.word	0x20025c18

0800de68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b08a      	sub	sp, #40	; 0x28
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de70:	f107 0314 	add.w	r3, r7, #20
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]
 800de78:	605a      	str	r2, [r3, #4]
 800de7a:	609a      	str	r2, [r3, #8]
 800de7c:	60da      	str	r2, [r3, #12]
 800de7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800de88:	d14e      	bne.n	800df28 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de8a:	4b29      	ldr	r3, [pc, #164]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800de8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de8e:	4a28      	ldr	r2, [pc, #160]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800de90:	f043 0301 	orr.w	r3, r3, #1
 800de94:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de96:	4b26      	ldr	r3, [pc, #152]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800de98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de9a:	f003 0301 	and.w	r3, r3, #1
 800de9e:	613b      	str	r3, [r7, #16]
 800dea0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800dea2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800dea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dea8:	2302      	movs	r3, #2
 800deaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deac:	2300      	movs	r3, #0
 800deae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800deb0:	2303      	movs	r3, #3
 800deb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800deb4:	230a      	movs	r3, #10
 800deb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800deb8:	f107 0314 	add.w	r3, r7, #20
 800debc:	4619      	mov	r1, r3
 800debe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dec2:	f7f4 fcf7 	bl	80028b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dec6:	4b1a      	ldr	r3, [pc, #104]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800dec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deca:	4a19      	ldr	r2, [pc, #100]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800decc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ded0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ded2:	4b17      	ldr	r3, [pc, #92]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800ded4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ded6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dede:	4b14      	ldr	r3, [pc, #80]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800dee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d114      	bne.n	800df14 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800deea:	4b11      	ldr	r3, [pc, #68]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800deec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deee:	4a10      	ldr	r2, [pc, #64]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800def0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800def4:	6593      	str	r3, [r2, #88]	; 0x58
 800def6:	4b0e      	ldr	r3, [pc, #56]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800def8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800defa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800defe:	60bb      	str	r3, [r7, #8]
 800df00:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800df02:	f7f6 f8b1 	bl	8004068 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800df06:	4b0a      	ldr	r3, [pc, #40]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800df08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df0a:	4a09      	ldr	r2, [pc, #36]	; (800df30 <HAL_PCD_MspInit+0xc8>)
 800df0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df10:	6593      	str	r3, [r2, #88]	; 0x58
 800df12:	e001      	b.n	800df18 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800df14:	f7f6 f8a8 	bl	8004068 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df18:	2200      	movs	r2, #0
 800df1a:	2100      	movs	r1, #0
 800df1c:	2043      	movs	r0, #67	; 0x43
 800df1e:	f7f3 fc48 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df22:	2043      	movs	r0, #67	; 0x43
 800df24:	f7f3 fc61 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df28:	bf00      	nop
 800df2a:	3728      	adds	r7, #40	; 0x28
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	40021000 	.word	0x40021000

0800df34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800df48:	4619      	mov	r1, r3
 800df4a:	4610      	mov	r0, r2
 800df4c:	f7fc fd6b 	bl	800aa26 <USBD_LL_SetupStage>
}
 800df50:	bf00      	nop
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	460b      	mov	r3, r1
 800df62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800df6a:	78fa      	ldrb	r2, [r7, #3]
 800df6c:	6879      	ldr	r1, [r7, #4]
 800df6e:	4613      	mov	r3, r2
 800df70:	00db      	lsls	r3, r3, #3
 800df72:	1a9b      	subs	r3, r3, r2
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	440b      	add	r3, r1
 800df78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	78fb      	ldrb	r3, [r7, #3]
 800df80:	4619      	mov	r1, r3
 800df82:	f7fc fd9b 	bl	800aabc <USBD_LL_DataOutStage>
}
 800df86:	bf00      	nop
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b082      	sub	sp, #8
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	460b      	mov	r3, r1
 800df98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dfa0:	78fa      	ldrb	r2, [r7, #3]
 800dfa2:	6879      	ldr	r1, [r7, #4]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	1a9b      	subs	r3, r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	440b      	add	r3, r1
 800dfae:	3348      	adds	r3, #72	; 0x48
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	78fb      	ldrb	r3, [r7, #3]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	f7fc fdf2 	bl	800ab9e <USBD_LL_DataInStage>
}
 800dfba:	bf00      	nop
 800dfbc:	3708      	adds	r7, #8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b082      	sub	sp, #8
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fc ff00 	bl	800add6 <USBD_LL_SOF>
}
 800dfd6:	bf00      	nop
 800dfd8:	3708      	adds	r7, #8
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d001      	beq.n	800dff6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dff2:	f7fe ff41 	bl	800ce78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dffc:	7bfa      	ldrb	r2, [r7, #15]
 800dffe:	4611      	mov	r1, r2
 800e000:	4618      	mov	r0, r3
 800e002:	f7fc feb2 	bl	800ad6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fc fe6b 	bl	800ace8 <USBD_LL_Reset>
}
 800e012:	bf00      	nop
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
	...

0800e01c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	6812      	ldr	r2, [r2, #0]
 800e032:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e036:	f043 0301 	orr.w	r3, r3, #1
 800e03a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e042:	4618      	mov	r0, r3
 800e044:	f7fc fea1 	bl	800ad8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6a1b      	ldr	r3, [r3, #32]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d005      	beq.n	800e05c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e050:	4b04      	ldr	r3, [pc, #16]	; (800e064 <HAL_PCD_SuspendCallback+0x48>)
 800e052:	691b      	ldr	r3, [r3, #16]
 800e054:	4a03      	ldr	r2, [pc, #12]	; (800e064 <HAL_PCD_SuspendCallback+0x48>)
 800e056:	f043 0306 	orr.w	r3, r3, #6
 800e05a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e05c:	bf00      	nop
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	e000ed00 	.word	0xe000ed00

0800e068 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	6812      	ldr	r2, [r2, #0]
 800e07e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e082:	f023 0301 	bic.w	r3, r3, #1
 800e086:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a1b      	ldr	r3, [r3, #32]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e090:	4b08      	ldr	r3, [pc, #32]	; (800e0b4 <HAL_PCD_ResumeCallback+0x4c>)
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	4a07      	ldr	r2, [pc, #28]	; (800e0b4 <HAL_PCD_ResumeCallback+0x4c>)
 800e096:	f023 0306 	bic.w	r3, r3, #6
 800e09a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e09c:	f000 fafa 	bl	800e694 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fc fe84 	bl	800adb4 <USBD_LL_Resume>
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	e000ed00 	.word	0xe000ed00

0800e0b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0ca:	78fa      	ldrb	r2, [r7, #3]
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fc fea8 	bl	800ae24 <USBD_LL_IsoOUTIncomplete>
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0ee:	78fa      	ldrb	r2, [r7, #3]
 800e0f0:	4611      	mov	r1, r2
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fc fe89 	bl	800ae0a <USBD_LL_IsoINIncomplete>
}
 800e0f8:	bf00      	nop
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fc fe95 	bl	800ae3e <USBD_LL_DevConnected>
}
 800e114:	bf00      	nop
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fc fe92 	bl	800ae54 <USBD_LL_DevDisconnected>
}
 800e130:	bf00      	nop
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d13c      	bne.n	800e1c2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e148:	4a20      	ldr	r2, [pc, #128]	; (800e1cc <USBD_LL_Init+0x94>)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4a1e      	ldr	r2, [pc, #120]	; (800e1cc <USBD_LL_Init+0x94>)
 800e154:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e158:	4b1c      	ldr	r3, [pc, #112]	; (800e1cc <USBD_LL_Init+0x94>)
 800e15a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e15e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e160:	4b1a      	ldr	r3, [pc, #104]	; (800e1cc <USBD_LL_Init+0x94>)
 800e162:	2206      	movs	r2, #6
 800e164:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e166:	4b19      	ldr	r3, [pc, #100]	; (800e1cc <USBD_LL_Init+0x94>)
 800e168:	2202      	movs	r2, #2
 800e16a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e16c:	4b17      	ldr	r3, [pc, #92]	; (800e1cc <USBD_LL_Init+0x94>)
 800e16e:	2202      	movs	r2, #2
 800e170:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e172:	4b16      	ldr	r3, [pc, #88]	; (800e1cc <USBD_LL_Init+0x94>)
 800e174:	2200      	movs	r2, #0
 800e176:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e178:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <USBD_LL_Init+0x94>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e17e:	4b13      	ldr	r3, [pc, #76]	; (800e1cc <USBD_LL_Init+0x94>)
 800e180:	2200      	movs	r2, #0
 800e182:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e184:	4b11      	ldr	r3, [pc, #68]	; (800e1cc <USBD_LL_Init+0x94>)
 800e186:	2200      	movs	r2, #0
 800e188:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e18a:	4b10      	ldr	r3, [pc, #64]	; (800e1cc <USBD_LL_Init+0x94>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e190:	4b0e      	ldr	r3, [pc, #56]	; (800e1cc <USBD_LL_Init+0x94>)
 800e192:	2200      	movs	r2, #0
 800e194:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e196:	480d      	ldr	r0, [pc, #52]	; (800e1cc <USBD_LL_Init+0x94>)
 800e198:	f7f4 fe75 	bl	8002e86 <HAL_PCD_Init>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e1a2:	f7fe fe69 	bl	800ce78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e1a6:	2180      	movs	r1, #128	; 0x80
 800e1a8:	4808      	ldr	r0, [pc, #32]	; (800e1cc <USBD_LL_Init+0x94>)
 800e1aa:	f7f5 feb4 	bl	8003f16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e1ae:	2240      	movs	r2, #64	; 0x40
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4806      	ldr	r0, [pc, #24]	; (800e1cc <USBD_LL_Init+0x94>)
 800e1b4:	f7f5 fe68 	bl	8003e88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e1b8:	2280      	movs	r2, #128	; 0x80
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	4803      	ldr	r0, [pc, #12]	; (800e1cc <USBD_LL_Init+0x94>)
 800e1be:	f7f5 fe63 	bl	8003e88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	20026eb4 	.word	0x20026eb4

0800e1d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7f4 ff71 	bl	80030ce <HAL_PCD_Start>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800e1f0:	7bbb      	ldrb	r3, [r7, #14]
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d816      	bhi.n	800e224 <USBD_LL_Start+0x54>
 800e1f6:	a201      	add	r2, pc, #4	; (adr r2, 800e1fc <USBD_LL_Start+0x2c>)
 800e1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fc:	0800e20d 	.word	0x0800e20d
 800e200:	0800e213 	.word	0x0800e213
 800e204:	0800e219 	.word	0x0800e219
 800e208:	0800e21f 	.word	0x0800e21f
    case HAL_OK :
      usb_status = USBD_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	73fb      	strb	r3, [r7, #15]
    break;
 800e210:	e00b      	b.n	800e22a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e212:	2302      	movs	r3, #2
 800e214:	73fb      	strb	r3, [r7, #15]
    break;
 800e216:	e008      	b.n	800e22a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e218:	2301      	movs	r3, #1
 800e21a:	73fb      	strb	r3, [r7, #15]
    break;
 800e21c:	e005      	b.n	800e22a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e21e:	2302      	movs	r3, #2
 800e220:	73fb      	strb	r3, [r7, #15]
    break;
 800e222:	e002      	b.n	800e22a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e224:	2302      	movs	r3, #2
 800e226:	73fb      	strb	r3, [r7, #15]
    break;
 800e228:	bf00      	nop
  }
  return usb_status;
 800e22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	4608      	mov	r0, r1
 800e23e:	4611      	mov	r1, r2
 800e240:	461a      	mov	r2, r3
 800e242:	4603      	mov	r3, r0
 800e244:	70fb      	strb	r3, [r7, #3]
 800e246:	460b      	mov	r3, r1
 800e248:	70bb      	strb	r3, [r7, #2]
 800e24a:	4613      	mov	r3, r2
 800e24c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e252:	2300      	movs	r3, #0
 800e254:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e25c:	78bb      	ldrb	r3, [r7, #2]
 800e25e:	883a      	ldrh	r2, [r7, #0]
 800e260:	78f9      	ldrb	r1, [r7, #3]
 800e262:	f7f5 fb0a 	bl	800387a <HAL_PCD_EP_Open>
 800e266:	4603      	mov	r3, r0
 800e268:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e26a:	7bbb      	ldrb	r3, [r7, #14]
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d817      	bhi.n	800e2a0 <USBD_LL_OpenEP+0x6c>
 800e270:	a201      	add	r2, pc, #4	; (adr r2, 800e278 <USBD_LL_OpenEP+0x44>)
 800e272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e276:	bf00      	nop
 800e278:	0800e289 	.word	0x0800e289
 800e27c:	0800e28f 	.word	0x0800e28f
 800e280:	0800e295 	.word	0x0800e295
 800e284:	0800e29b 	.word	0x0800e29b
    case HAL_OK :
      usb_status = USBD_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
    break;
 800e28c:	e00b      	b.n	800e2a6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e28e:	2302      	movs	r3, #2
 800e290:	73fb      	strb	r3, [r7, #15]
    break;
 800e292:	e008      	b.n	800e2a6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e294:	2301      	movs	r3, #1
 800e296:	73fb      	strb	r3, [r7, #15]
    break;
 800e298:	e005      	b.n	800e2a6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e29a:	2302      	movs	r3, #2
 800e29c:	73fb      	strb	r3, [r7, #15]
    break;
 800e29e:	e002      	b.n	800e2a6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e2a4:	bf00      	nop
  }
  return usb_status;
 800e2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e2ca:	78fa      	ldrb	r2, [r7, #3]
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7f5 fb3b 	bl	800394a <HAL_PCD_EP_Close>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800e2d8:	7bbb      	ldrb	r3, [r7, #14]
 800e2da:	2b03      	cmp	r3, #3
 800e2dc:	d816      	bhi.n	800e30c <USBD_LL_CloseEP+0x5c>
 800e2de:	a201      	add	r2, pc, #4	; (adr r2, 800e2e4 <USBD_LL_CloseEP+0x34>)
 800e2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e4:	0800e2f5 	.word	0x0800e2f5
 800e2e8:	0800e2fb 	.word	0x0800e2fb
 800e2ec:	0800e301 	.word	0x0800e301
 800e2f0:	0800e307 	.word	0x0800e307
    case HAL_OK :
      usb_status = USBD_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e2f8:	e00b      	b.n	800e312 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e2fa:	2302      	movs	r3, #2
 800e2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e2fe:	e008      	b.n	800e312 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e300:	2301      	movs	r3, #1
 800e302:	73fb      	strb	r3, [r7, #15]
    break;
 800e304:	e005      	b.n	800e312 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e306:	2302      	movs	r3, #2
 800e308:	73fb      	strb	r3, [r7, #15]
    break;
 800e30a:	e002      	b.n	800e312 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e30c:	2302      	movs	r3, #2
 800e30e:	73fb      	strb	r3, [r7, #15]
    break;
 800e310:	bf00      	nop
  }
  return usb_status;  
 800e312:	7bfb      	ldrb	r3, [r7, #15]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	460b      	mov	r3, r1
 800e326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e336:	78fa      	ldrb	r2, [r7, #3]
 800e338:	4611      	mov	r1, r2
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7f5 fbe2 	bl	8003b04 <HAL_PCD_EP_SetStall>
 800e340:	4603      	mov	r3, r0
 800e342:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e344:	7bbb      	ldrb	r3, [r7, #14]
 800e346:	2b03      	cmp	r3, #3
 800e348:	d816      	bhi.n	800e378 <USBD_LL_StallEP+0x5c>
 800e34a:	a201      	add	r2, pc, #4	; (adr r2, 800e350 <USBD_LL_StallEP+0x34>)
 800e34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e350:	0800e361 	.word	0x0800e361
 800e354:	0800e367 	.word	0x0800e367
 800e358:	0800e36d 	.word	0x0800e36d
 800e35c:	0800e373 	.word	0x0800e373
    case HAL_OK :
      usb_status = USBD_OK;
 800e360:	2300      	movs	r3, #0
 800e362:	73fb      	strb	r3, [r7, #15]
    break;
 800e364:	e00b      	b.n	800e37e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e366:	2302      	movs	r3, #2
 800e368:	73fb      	strb	r3, [r7, #15]
    break;
 800e36a:	e008      	b.n	800e37e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e36c:	2301      	movs	r3, #1
 800e36e:	73fb      	strb	r3, [r7, #15]
    break;
 800e370:	e005      	b.n	800e37e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e372:	2302      	movs	r3, #2
 800e374:	73fb      	strb	r3, [r7, #15]
    break;
 800e376:	e002      	b.n	800e37e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e378:	2302      	movs	r3, #2
 800e37a:	73fb      	strb	r3, [r7, #15]
    break;
 800e37c:	bf00      	nop
  }
  return usb_status;  
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	460b      	mov	r3, r1
 800e392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e394:	2300      	movs	r3, #0
 800e396:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e3a2:	78fa      	ldrb	r2, [r7, #3]
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f5 fc0e 	bl	8003bc8 <HAL_PCD_EP_ClrStall>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
 800e3b2:	2b03      	cmp	r3, #3
 800e3b4:	d816      	bhi.n	800e3e4 <USBD_LL_ClearStallEP+0x5c>
 800e3b6:	a201      	add	r2, pc, #4	; (adr r2, 800e3bc <USBD_LL_ClearStallEP+0x34>)
 800e3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3bc:	0800e3cd 	.word	0x0800e3cd
 800e3c0:	0800e3d3 	.word	0x0800e3d3
 800e3c4:	0800e3d9 	.word	0x0800e3d9
 800e3c8:	0800e3df 	.word	0x0800e3df
    case HAL_OK :
      usb_status = USBD_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d0:	e00b      	b.n	800e3ea <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d6:	e008      	b.n	800e3ea <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	73fb      	strb	r3, [r7, #15]
    break;
 800e3dc:	e005      	b.n	800e3ea <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3de:	2302      	movs	r3, #2
 800e3e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e3e2:	e002      	b.n	800e3ea <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e3e8:	bf00      	nop
  }
  return usb_status; 
 800e3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3710      	adds	r7, #16
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e406:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	da0b      	bge.n	800e428 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e416:	68f9      	ldr	r1, [r7, #12]
 800e418:	4613      	mov	r3, r2
 800e41a:	00db      	lsls	r3, r3, #3
 800e41c:	1a9b      	subs	r3, r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	440b      	add	r3, r1
 800e422:	333e      	adds	r3, #62	; 0x3e
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	e00b      	b.n	800e440 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e428:	78fb      	ldrb	r3, [r7, #3]
 800e42a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e42e:	68f9      	ldr	r1, [r7, #12]
 800e430:	4613      	mov	r3, r2
 800e432:	00db      	lsls	r3, r3, #3
 800e434:	1a9b      	subs	r3, r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	440b      	add	r3, r1
 800e43a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e43e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	460b      	mov	r3, r1
 800e456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e45c:	2300      	movs	r3, #0
 800e45e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e466:	78fa      	ldrb	r2, [r7, #3]
 800e468:	4611      	mov	r1, r2
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f5 f9e0 	bl	8003830 <HAL_PCD_SetAddress>
 800e470:	4603      	mov	r3, r0
 800e472:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	2b03      	cmp	r3, #3
 800e478:	d816      	bhi.n	800e4a8 <USBD_LL_SetUSBAddress+0x5c>
 800e47a:	a201      	add	r2, pc, #4	; (adr r2, 800e480 <USBD_LL_SetUSBAddress+0x34>)
 800e47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e480:	0800e491 	.word	0x0800e491
 800e484:	0800e497 	.word	0x0800e497
 800e488:	0800e49d 	.word	0x0800e49d
 800e48c:	0800e4a3 	.word	0x0800e4a3
    case HAL_OK :
      usb_status = USBD_OK;
 800e490:	2300      	movs	r3, #0
 800e492:	73fb      	strb	r3, [r7, #15]
    break;
 800e494:	e00b      	b.n	800e4ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e496:	2302      	movs	r3, #2
 800e498:	73fb      	strb	r3, [r7, #15]
    break;
 800e49a:	e008      	b.n	800e4ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e49c:	2301      	movs	r3, #1
 800e49e:	73fb      	strb	r3, [r7, #15]
    break;
 800e4a0:	e005      	b.n	800e4ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e4a2:	2302      	movs	r3, #2
 800e4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e4a6:	e002      	b.n	800e4ae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e4ac:	bf00      	nop
  }
  return usb_status;  
 800e4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3710      	adds	r7, #16
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b086      	sub	sp, #24
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	607a      	str	r2, [r7, #4]
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	72fb      	strb	r3, [r7, #11]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e4da:	893b      	ldrh	r3, [r7, #8]
 800e4dc:	7af9      	ldrb	r1, [r7, #11]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	f7f5 fad3 	bl	8003a8a <HAL_PCD_EP_Transmit>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800e4e8:	7dbb      	ldrb	r3, [r7, #22]
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d816      	bhi.n	800e51c <USBD_LL_Transmit+0x64>
 800e4ee:	a201      	add	r2, pc, #4	; (adr r2, 800e4f4 <USBD_LL_Transmit+0x3c>)
 800e4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f4:	0800e505 	.word	0x0800e505
 800e4f8:	0800e50b 	.word	0x0800e50b
 800e4fc:	0800e511 	.word	0x0800e511
 800e500:	0800e517 	.word	0x0800e517
    case HAL_OK :
      usb_status = USBD_OK;
 800e504:	2300      	movs	r3, #0
 800e506:	75fb      	strb	r3, [r7, #23]
    break;
 800e508:	e00b      	b.n	800e522 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e50a:	2302      	movs	r3, #2
 800e50c:	75fb      	strb	r3, [r7, #23]
    break;
 800e50e:	e008      	b.n	800e522 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e510:	2301      	movs	r3, #1
 800e512:	75fb      	strb	r3, [r7, #23]
    break;
 800e514:	e005      	b.n	800e522 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e516:	2302      	movs	r3, #2
 800e518:	75fb      	strb	r3, [r7, #23]
    break;
 800e51a:	e002      	b.n	800e522 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800e51c:	2302      	movs	r3, #2
 800e51e:	75fb      	strb	r3, [r7, #23]
    break;
 800e520:	bf00      	nop
  }
  return usb_status;    
 800e522:	7dfb      	ldrb	r3, [r7, #23]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3718      	adds	r7, #24
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	607a      	str	r2, [r7, #4]
 800e536:	461a      	mov	r2, r3
 800e538:	460b      	mov	r3, r1
 800e53a:	72fb      	strb	r3, [r7, #11]
 800e53c:	4613      	mov	r3, r2
 800e53e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e544:	2300      	movs	r3, #0
 800e546:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e54e:	893b      	ldrh	r3, [r7, #8]
 800e550:	7af9      	ldrb	r1, [r7, #11]
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	f7f5 fa43 	bl	80039de <HAL_PCD_EP_Receive>
 800e558:	4603      	mov	r3, r0
 800e55a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800e55c:	7dbb      	ldrb	r3, [r7, #22]
 800e55e:	2b03      	cmp	r3, #3
 800e560:	d816      	bhi.n	800e590 <USBD_LL_PrepareReceive+0x64>
 800e562:	a201      	add	r2, pc, #4	; (adr r2, 800e568 <USBD_LL_PrepareReceive+0x3c>)
 800e564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e568:	0800e579 	.word	0x0800e579
 800e56c:	0800e57f 	.word	0x0800e57f
 800e570:	0800e585 	.word	0x0800e585
 800e574:	0800e58b 	.word	0x0800e58b
    case HAL_OK :
      usb_status = USBD_OK;
 800e578:	2300      	movs	r3, #0
 800e57a:	75fb      	strb	r3, [r7, #23]
    break;
 800e57c:	e00b      	b.n	800e596 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e57e:	2302      	movs	r3, #2
 800e580:	75fb      	strb	r3, [r7, #23]
    break;
 800e582:	e008      	b.n	800e596 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e584:	2301      	movs	r3, #1
 800e586:	75fb      	strb	r3, [r7, #23]
    break;
 800e588:	e005      	b.n	800e596 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e58a:	2302      	movs	r3, #2
 800e58c:	75fb      	strb	r3, [r7, #23]
    break;
 800e58e:	e002      	b.n	800e596 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800e590:	2302      	movs	r3, #2
 800e592:	75fb      	strb	r3, [r7, #23]
    break;
 800e594:	bf00      	nop
  }
  return usb_status; 
 800e596:	7dfb      	ldrb	r3, [r7, #23]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3718      	adds	r7, #24
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e5b2:	78fa      	ldrb	r2, [r7, #3]
 800e5b4:	4611      	mov	r1, r2
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7f5 fa4f 	bl	8003a5a <HAL_PCD_EP_GetRxCount>
 800e5bc:	4603      	mov	r3, r0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
	...

0800e5c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e5d4:	78fb      	ldrb	r3, [r7, #3]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <HAL_PCDEx_LPM_Callback+0x18>
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d01f      	beq.n	800e61e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800e5de:	e03b      	b.n	800e658 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a1b      	ldr	r3, [r3, #32]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d007      	beq.n	800e5f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e5e8:	f000 f854 	bl	800e694 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5ec:	4b1c      	ldr	r3, [pc, #112]	; (800e660 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	4a1b      	ldr	r2, [pc, #108]	; (800e660 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5f2:	f023 0306 	bic.w	r3, r3, #6
 800e5f6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	6812      	ldr	r2, [r2, #0]
 800e606:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e60a:	f023 0301 	bic.w	r3, r3, #1
 800e60e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e616:	4618      	mov	r0, r3
 800e618:	f7fc fbcc 	bl	800adb4 <USBD_LL_Resume>
    break;
 800e61c:	e01c      	b.n	800e658 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	6812      	ldr	r2, [r2, #0]
 800e62c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e630:	f043 0301 	orr.w	r3, r3, #1
 800e634:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fc fba4 	bl	800ad8a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6a1b      	ldr	r3, [r3, #32]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d005      	beq.n	800e656 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e64a:	4b05      	ldr	r3, [pc, #20]	; (800e660 <HAL_PCDEx_LPM_Callback+0x98>)
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	4a04      	ldr	r2, [pc, #16]	; (800e660 <HAL_PCDEx_LPM_Callback+0x98>)
 800e650:	f043 0306 	orr.w	r3, r3, #6
 800e654:	6113      	str	r3, [r2, #16]
    break;   
 800e656:	bf00      	nop
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	e000ed00 	.word	0xe000ed00

0800e664 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e66c:	4b03      	ldr	r3, [pc, #12]	; (800e67c <USBD_static_malloc+0x18>)
}
 800e66e:	4618      	mov	r0, r3
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	20000254 	.word	0x20000254

0800e680 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]

}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e698:	f7fd fc8e 	bl	800bfb8 <SystemClock_Config>
}
 800e69c:	bf00      	nop
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	6039      	str	r1, [r7, #0]
 800e6aa:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	2212      	movs	r2, #18
 800e6b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e6b2:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	2000014c 	.word	0x2000014c

0800e6c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	6039      	str	r1, [r7, #0]
 800e6ce:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	2204      	movs	r2, #4
 800e6d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6d6:	4b03      	ldr	r3, [pc, #12]	; (800e6e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	2000016c 	.word	0x2000016c

0800e6e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	6039      	str	r1, [r7, #0]
 800e6f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6f4:	79fb      	ldrb	r3, [r7, #7]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d105      	bne.n	800e706 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	4907      	ldr	r1, [pc, #28]	; (800e71c <USBD_FS_ProductStrDescriptor+0x34>)
 800e6fe:	4808      	ldr	r0, [pc, #32]	; (800e720 <USBD_FS_ProductStrDescriptor+0x38>)
 800e700:	f7fd f89c 	bl	800b83c <USBD_GetString>
 800e704:	e004      	b.n	800e710 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	4904      	ldr	r1, [pc, #16]	; (800e71c <USBD_FS_ProductStrDescriptor+0x34>)
 800e70a:	4805      	ldr	r0, [pc, #20]	; (800e720 <USBD_FS_ProductStrDescriptor+0x38>)
 800e70c:	f7fd f896 	bl	800b83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e710:	4b02      	ldr	r3, [pc, #8]	; (800e71c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e712:	4618      	mov	r0, r3
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	200272bc 	.word	0x200272bc
 800e720:	080104d4 	.word	0x080104d4

0800e724 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	4603      	mov	r3, r0
 800e72c:	6039      	str	r1, [r7, #0]
 800e72e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e730:	683a      	ldr	r2, [r7, #0]
 800e732:	4904      	ldr	r1, [pc, #16]	; (800e744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e734:	4804      	ldr	r0, [pc, #16]	; (800e748 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e736:	f7fd f881 	bl	800b83c <USBD_GetString>
  return USBD_StrDesc;
 800e73a:	4b02      	ldr	r3, [pc, #8]	; (800e744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	200272bc 	.word	0x200272bc
 800e748:	080104ec 	.word	0x080104ec

0800e74c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	4603      	mov	r3, r0
 800e754:	6039      	str	r1, [r7, #0]
 800e756:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	221a      	movs	r2, #26
 800e75c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e75e:	f000 f855 	bl	800e80c <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800e762:	4b02      	ldr	r3, [pc, #8]	; (800e76c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	20000170 	.word	0x20000170

0800e770 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	4603      	mov	r3, r0
 800e778:	6039      	str	r1, [r7, #0]
 800e77a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d105      	bne.n	800e78e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e782:	683a      	ldr	r2, [r7, #0]
 800e784:	4907      	ldr	r1, [pc, #28]	; (800e7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e786:	4808      	ldr	r0, [pc, #32]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e788:	f7fd f858 	bl	800b83c <USBD_GetString>
 800e78c:	e004      	b.n	800e798 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	4904      	ldr	r1, [pc, #16]	; (800e7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e792:	4805      	ldr	r0, [pc, #20]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e794:	f7fd f852 	bl	800b83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e798:	4b02      	ldr	r3, [pc, #8]	; (800e7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	200272bc 	.word	0x200272bc
 800e7a8:	08010500 	.word	0x08010500

0800e7ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	6039      	str	r1, [r7, #0]
 800e7b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d105      	bne.n	800e7ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	4907      	ldr	r1, [pc, #28]	; (800e7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7c2:	4808      	ldr	r0, [pc, #32]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7c4:	f7fd f83a 	bl	800b83c <USBD_GetString>
 800e7c8:	e004      	b.n	800e7d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7ca:	683a      	ldr	r2, [r7, #0]
 800e7cc:	4904      	ldr	r1, [pc, #16]	; (800e7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7ce:	4805      	ldr	r0, [pc, #20]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7d0:	f7fd f834 	bl	800b83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7d4:	4b02      	ldr	r3, [pc, #8]	; (800e7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	200272bc 	.word	0x200272bc
 800e7e4:	0801050c 	.word	0x0801050c

0800e7e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	6039      	str	r1, [r7, #0]
 800e7f2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	220c      	movs	r2, #12
 800e7f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e7fa:	4b03      	ldr	r3, [pc, #12]	; (800e808 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	20000160 	.word	0x20000160

0800e80c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e812:	4b0f      	ldr	r3, [pc, #60]	; (800e850 <Get_SerialNum+0x44>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e818:	4b0e      	ldr	r3, [pc, #56]	; (800e854 <Get_SerialNum+0x48>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e81e:	4b0e      	ldr	r3, [pc, #56]	; (800e858 <Get_SerialNum+0x4c>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4413      	add	r3, r2
 800e82a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d009      	beq.n	800e846 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e832:	2208      	movs	r2, #8
 800e834:	4909      	ldr	r1, [pc, #36]	; (800e85c <Get_SerialNum+0x50>)
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f000 f814 	bl	800e864 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e83c:	2204      	movs	r2, #4
 800e83e:	4908      	ldr	r1, [pc, #32]	; (800e860 <Get_SerialNum+0x54>)
 800e840:	68b8      	ldr	r0, [r7, #8]
 800e842:	f000 f80f 	bl	800e864 <IntToUnicode>
  }
}
 800e846:	bf00      	nop
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	1fff7590 	.word	0x1fff7590
 800e854:	1fff7594 	.word	0x1fff7594
 800e858:	1fff7598 	.word	0x1fff7598
 800e85c:	20000172 	.word	0x20000172
 800e860:	20000182 	.word	0x20000182

0800e864 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	4613      	mov	r3, r2
 800e870:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e876:	2300      	movs	r3, #0
 800e878:	75fb      	strb	r3, [r7, #23]
 800e87a:	e027      	b.n	800e8cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	0f1b      	lsrs	r3, r3, #28
 800e880:	2b09      	cmp	r3, #9
 800e882:	d80b      	bhi.n	800e89c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	0f1b      	lsrs	r3, r3, #28
 800e888:	b2da      	uxtb	r2, r3
 800e88a:	7dfb      	ldrb	r3, [r7, #23]
 800e88c:	005b      	lsls	r3, r3, #1
 800e88e:	4619      	mov	r1, r3
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	440b      	add	r3, r1
 800e894:	3230      	adds	r2, #48	; 0x30
 800e896:	b2d2      	uxtb	r2, r2
 800e898:	701a      	strb	r2, [r3, #0]
 800e89a:	e00a      	b.n	800e8b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	0f1b      	lsrs	r3, r3, #28
 800e8a0:	b2da      	uxtb	r2, r3
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	440b      	add	r3, r1
 800e8ac:	3237      	adds	r2, #55	; 0x37
 800e8ae:	b2d2      	uxtb	r2, r2
 800e8b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	011b      	lsls	r3, r3, #4
 800e8b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e8b8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ba:	005b      	lsls	r3, r3, #1
 800e8bc:	3301      	adds	r3, #1
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e8c6:	7dfb      	ldrb	r3, [r7, #23]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	75fb      	strb	r3, [r7, #23]
 800e8cc:	7dfa      	ldrb	r2, [r7, #23]
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d3d3      	bcc.n	800e87c <IntToUnicode+0x18>
  }
}
 800e8d4:	bf00      	nop
 800e8d6:	371c      	adds	r7, #28
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e8e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e918 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800e8e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800e8e6:	e003      	b.n	800e8f0 <LoopCopyDataInit>

0800e8e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800e8e8:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800e8ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800e8ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800e8ee:	3104      	adds	r1, #4

0800e8f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800e8f0:	480b      	ldr	r0, [pc, #44]	; (800e920 <LoopForever+0xa>)
	ldr	r3, =_edata
 800e8f2:	4b0c      	ldr	r3, [pc, #48]	; (800e924 <LoopForever+0xe>)
	adds	r2, r0, r1
 800e8f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800e8f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800e8f8:	d3f6      	bcc.n	800e8e8 <CopyDataInit>
	ldr	r2, =_sbss
 800e8fa:	4a0b      	ldr	r2, [pc, #44]	; (800e928 <LoopForever+0x12>)
	b	LoopFillZerobss
 800e8fc:	e002      	b.n	800e904 <LoopFillZerobss>

0800e8fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800e8fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800e900:	f842 3b04 	str.w	r3, [r2], #4

0800e904 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800e904:	4b09      	ldr	r3, [pc, #36]	; (800e92c <LoopForever+0x16>)
	cmp	r2, r3
 800e906:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800e908:	d3f9      	bcc.n	800e8fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e90a:	f7ff f9b9 	bl	800dc80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e90e:	f001 f933 	bl	800fb78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e912:	f7fd f981 	bl	800bc18 <main>

0800e916 <LoopForever>:

LoopForever:
    b LoopForever
 800e916:	e7fe      	b.n	800e916 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e918:	2004ffff 	.word	0x2004ffff
	ldr	r3, =_sidata
 800e91c:	08035858 	.word	0x08035858
	ldr	r0, =_sdata
 800e920:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800e924:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 800e928:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 800e92c:	200274c0 	.word	0x200274c0

0800e930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e930:	e7fe      	b.n	800e930 <ADC1_2_IRQHandler>
	...

0800e934 <arm_max_f32>:
 800e934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e938:	1e4f      	subs	r7, r1, #1
 800e93a:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800e93e:	f100 0e04 	add.w	lr, r0, #4
 800e942:	edd0 7a00 	vldr	s15, [r0]
 800e946:	d058      	beq.n	800e9fa <arm_max_f32+0xc6>
 800e948:	3014      	adds	r0, #20
 800e94a:	46c4      	mov	ip, r8
 800e94c:	2604      	movs	r6, #4
 800e94e:	2400      	movs	r4, #0
 800e950:	ed10 6a04 	vldr	s12, [r0, #-16]
 800e954:	ed50 6a03 	vldr	s13, [r0, #-12]
 800e958:	ed10 7a02 	vldr	s14, [r0, #-8]
 800e95c:	ed50 5a01 	vldr	s11, [r0, #-4]
 800e960:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e968:	bfc8      	it	gt
 800e96a:	eef0 7a46 	vmovgt.f32	s15, s12
 800e96e:	f1a6 0503 	sub.w	r5, r6, #3
 800e972:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e976:	bfc8      	it	gt
 800e978:	462c      	movgt	r4, r5
 800e97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97e:	bf48      	it	mi
 800e980:	eef0 7a66 	vmovmi.f32	s15, s13
 800e984:	f1a6 0502 	sub.w	r5, r6, #2
 800e988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e98c:	bf48      	it	mi
 800e98e:	462c      	movmi	r4, r5
 800e990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e994:	bf48      	it	mi
 800e996:	eef0 7a47 	vmovmi.f32	s15, s14
 800e99a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800e99e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e9a2:	bf48      	it	mi
 800e9a4:	462c      	movmi	r4, r5
 800e9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9aa:	bf48      	it	mi
 800e9ac:	4634      	movmi	r4, r6
 800e9ae:	bf48      	it	mi
 800e9b0:	eef0 7a65 	vmovmi.f32	s15, s11
 800e9b4:	f1bc 0c01 	subs.w	ip, ip, #1
 800e9b8:	f106 0604 	add.w	r6, r6, #4
 800e9bc:	f100 0010 	add.w	r0, r0, #16
 800e9c0:	d1c6      	bne.n	800e950 <arm_max_f32+0x1c>
 800e9c2:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800e9c6:	f017 0003 	ands.w	r0, r7, #3
 800e9ca:	d018      	beq.n	800e9fe <arm_max_f32+0xca>
 800e9cc:	1a08      	subs	r0, r1, r0
 800e9ce:	ecbe 7a01 	vldmia	lr!, {s14}
 800e9d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9da:	bfc8      	it	gt
 800e9dc:	4604      	movgt	r4, r0
 800e9de:	f100 0001 	add.w	r0, r0, #1
 800e9e2:	bfd8      	it	le
 800e9e4:	eeb0 7a67 	vmovle.f32	s14, s15
 800e9e8:	4288      	cmp	r0, r1
 800e9ea:	eef0 7a47 	vmov.f32	s15, s14
 800e9ee:	d1ee      	bne.n	800e9ce <arm_max_f32+0x9a>
 800e9f0:	ed82 7a00 	vstr	s14, [r2]
 800e9f4:	601c      	str	r4, [r3, #0]
 800e9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9fa:	4644      	mov	r4, r8
 800e9fc:	e7e3      	b.n	800e9c6 <arm_max_f32+0x92>
 800e9fe:	eeb0 7a67 	vmov.f32	s14, s15
 800ea02:	e7f5      	b.n	800e9f0 <arm_max_f32+0xbc>

0800ea04 <arm_rfft_fast_init_f32>:
 800ea04:	084b      	lsrs	r3, r1, #1
 800ea06:	2b80      	cmp	r3, #128	; 0x80
 800ea08:	b410      	push	{r4}
 800ea0a:	8201      	strh	r1, [r0, #16]
 800ea0c:	8003      	strh	r3, [r0, #0]
 800ea0e:	d047      	beq.n	800eaa0 <arm_rfft_fast_init_f32+0x9c>
 800ea10:	d917      	bls.n	800ea42 <arm_rfft_fast_init_f32+0x3e>
 800ea12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea16:	d03d      	beq.n	800ea94 <arm_rfft_fast_init_f32+0x90>
 800ea18:	d929      	bls.n	800ea6e <arm_rfft_fast_init_f32+0x6a>
 800ea1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea1e:	d020      	beq.n	800ea62 <arm_rfft_fast_init_f32+0x5e>
 800ea20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea24:	d113      	bne.n	800ea4e <arm_rfft_fast_init_f32+0x4a>
 800ea26:	4921      	ldr	r1, [pc, #132]	; (800eaac <arm_rfft_fast_init_f32+0xa8>)
 800ea28:	4a21      	ldr	r2, [pc, #132]	; (800eab0 <arm_rfft_fast_init_f32+0xac>)
 800ea2a:	4b22      	ldr	r3, [pc, #136]	; (800eab4 <arm_rfft_fast_init_f32+0xb0>)
 800ea2c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800ea30:	8184      	strh	r4, [r0, #12]
 800ea32:	6081      	str	r1, [r0, #8]
 800ea34:	6042      	str	r2, [r0, #4]
 800ea36:	6143      	str	r3, [r0, #20]
 800ea38:	2000      	movs	r0, #0
 800ea3a:	b240      	sxtb	r0, r0
 800ea3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	2b20      	cmp	r3, #32
 800ea44:	d01c      	beq.n	800ea80 <arm_rfft_fast_init_f32+0x7c>
 800ea46:	2b40      	cmp	r3, #64	; 0x40
 800ea48:	d006      	beq.n	800ea58 <arm_rfft_fast_init_f32+0x54>
 800ea4a:	2b10      	cmp	r3, #16
 800ea4c:	d01d      	beq.n	800ea8a <arm_rfft_fast_init_f32+0x86>
 800ea4e:	20ff      	movs	r0, #255	; 0xff
 800ea50:	b240      	sxtb	r0, r0
 800ea52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	2438      	movs	r4, #56	; 0x38
 800ea5a:	4917      	ldr	r1, [pc, #92]	; (800eab8 <arm_rfft_fast_init_f32+0xb4>)
 800ea5c:	4a17      	ldr	r2, [pc, #92]	; (800eabc <arm_rfft_fast_init_f32+0xb8>)
 800ea5e:	4b18      	ldr	r3, [pc, #96]	; (800eac0 <arm_rfft_fast_init_f32+0xbc>)
 800ea60:	e7e6      	b.n	800ea30 <arm_rfft_fast_init_f32+0x2c>
 800ea62:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800ea66:	4917      	ldr	r1, [pc, #92]	; (800eac4 <arm_rfft_fast_init_f32+0xc0>)
 800ea68:	4a17      	ldr	r2, [pc, #92]	; (800eac8 <arm_rfft_fast_init_f32+0xc4>)
 800ea6a:	4b18      	ldr	r3, [pc, #96]	; (800eacc <arm_rfft_fast_init_f32+0xc8>)
 800ea6c:	e7e0      	b.n	800ea30 <arm_rfft_fast_init_f32+0x2c>
 800ea6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea72:	d1ec      	bne.n	800ea4e <arm_rfft_fast_init_f32+0x4a>
 800ea74:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800ea78:	4915      	ldr	r1, [pc, #84]	; (800ead0 <arm_rfft_fast_init_f32+0xcc>)
 800ea7a:	4a16      	ldr	r2, [pc, #88]	; (800ead4 <arm_rfft_fast_init_f32+0xd0>)
 800ea7c:	4b16      	ldr	r3, [pc, #88]	; (800ead8 <arm_rfft_fast_init_f32+0xd4>)
 800ea7e:	e7d7      	b.n	800ea30 <arm_rfft_fast_init_f32+0x2c>
 800ea80:	2430      	movs	r4, #48	; 0x30
 800ea82:	4916      	ldr	r1, [pc, #88]	; (800eadc <arm_rfft_fast_init_f32+0xd8>)
 800ea84:	4a16      	ldr	r2, [pc, #88]	; (800eae0 <arm_rfft_fast_init_f32+0xdc>)
 800ea86:	4b17      	ldr	r3, [pc, #92]	; (800eae4 <arm_rfft_fast_init_f32+0xe0>)
 800ea88:	e7d2      	b.n	800ea30 <arm_rfft_fast_init_f32+0x2c>
 800ea8a:	2414      	movs	r4, #20
 800ea8c:	4916      	ldr	r1, [pc, #88]	; (800eae8 <arm_rfft_fast_init_f32+0xe4>)
 800ea8e:	4a17      	ldr	r2, [pc, #92]	; (800eaec <arm_rfft_fast_init_f32+0xe8>)
 800ea90:	4b17      	ldr	r3, [pc, #92]	; (800eaf0 <arm_rfft_fast_init_f32+0xec>)
 800ea92:	e7cd      	b.n	800ea30 <arm_rfft_fast_init_f32+0x2c>
 800ea94:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800ea98:	4916      	ldr	r1, [pc, #88]	; (800eaf4 <arm_rfft_fast_init_f32+0xf0>)
 800ea9a:	4a17      	ldr	r2, [pc, #92]	; (800eaf8 <arm_rfft_fast_init_f32+0xf4>)
 800ea9c:	4b17      	ldr	r3, [pc, #92]	; (800eafc <arm_rfft_fast_init_f32+0xf8>)
 800ea9e:	e7c7      	b.n	800ea30 <arm_rfft_fast_init_f32+0x2c>
 800eaa0:	24d0      	movs	r4, #208	; 0xd0
 800eaa2:	4917      	ldr	r1, [pc, #92]	; (800eb00 <arm_rfft_fast_init_f32+0xfc>)
 800eaa4:	4a17      	ldr	r2, [pc, #92]	; (800eb04 <arm_rfft_fast_init_f32+0x100>)
 800eaa6:	4b18      	ldr	r3, [pc, #96]	; (800eb08 <arm_rfft_fast_init_f32+0x104>)
 800eaa8:	e7c2      	b.n	800ea30 <arm_rfft_fast_init_f32+0x2c>
 800eaaa:	bf00      	nop
 800eaac:	080309ec 	.word	0x080309ec
 800eab0:	080186d4 	.word	0x080186d4
 800eab4:	08021f04 	.word	0x08021f04
 800eab8:	0801f6d4 	.word	0x0801f6d4
 800eabc:	080327ac 	.word	0x080327ac
 800eac0:	08035474 	.word	0x08035474
 800eac4:	0802c4e4 	.word	0x0802c4e4
 800eac8:	0802a3e4 	.word	0x0802a3e4
 800eacc:	0801f744 	.word	0x0801f744
 800ead0:	08034e84 	.word	0x08034e84
 800ead4:	08025f04 	.word	0x08025f04
 800ead8:	080329ac 	.word	0x080329ac
 800eadc:	0802d3cc 	.word	0x0802d3cc
 800eae0:	0802c3e4 	.word	0x0802c3e4
 800eae4:	0801f5d4 	.word	0x0801f5d4
 800eae8:	0802d324 	.word	0x0802d324
 800eaec:	08027364 	.word	0x08027364
 800eaf0:	0802d34c 	.word	0x0802d34c
 800eaf4:	080331ac 	.word	0x080331ac
 800eaf8:	0802f9ec 	.word	0x0802f9ec
 800eafc:	08033a84 	.word	0x08033a84
 800eb00:	08035674 	.word	0x08035674
 800eb04:	0802d42c 	.word	0x0802d42c
 800eb08:	08034a84 	.word	0x08034a84

0800eb0c <arm_rfft_fast_f32>:
 800eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb10:	8a06      	ldrh	r6, [r0, #16]
 800eb12:	0876      	lsrs	r6, r6, #1
 800eb14:	4607      	mov	r7, r0
 800eb16:	4615      	mov	r5, r2
 800eb18:	8006      	strh	r6, [r0, #0]
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d15c      	bne.n	800ebda <arm_rfft_fast_f32+0xce>
 800eb20:	461a      	mov	r2, r3
 800eb22:	2301      	movs	r3, #1
 800eb24:	f000 fbe6 	bl	800f2f4 <arm_cfft_f32>
 800eb28:	edd4 7a00 	vldr	s15, [r4]
 800eb2c:	ed94 7a01 	vldr	s14, [r4, #4]
 800eb30:	883e      	ldrh	r6, [r7, #0]
 800eb32:	6978      	ldr	r0, [r7, #20]
 800eb34:	ee37 7a07 	vadd.f32	s14, s14, s14
 800eb38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eb3c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800eb40:	ee77 6a87 	vadd.f32	s13, s15, s14
 800eb44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb48:	3e01      	subs	r6, #1
 800eb4a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800eb4e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800eb52:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800eb56:	ed85 7a00 	vstr	s14, [r5]
 800eb5a:	edc5 7a01 	vstr	s15, [r5, #4]
 800eb5e:	3010      	adds	r0, #16
 800eb60:	f105 0210 	add.w	r2, r5, #16
 800eb64:	3b08      	subs	r3, #8
 800eb66:	f104 0110 	add.w	r1, r4, #16
 800eb6a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800eb6e:	ed93 5a02 	vldr	s10, [r3, #8]
 800eb72:	ed11 7a01 	vldr	s14, [r1, #-4]
 800eb76:	ed10 6a02 	vldr	s12, [r0, #-8]
 800eb7a:	edd3 5a03 	vldr	s11, [r3, #12]
 800eb7e:	ed50 6a01 	vldr	s13, [r0, #-4]
 800eb82:	ee75 7a64 	vsub.f32	s15, s10, s9
 800eb86:	ee35 4a87 	vadd.f32	s8, s11, s14
 800eb8a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800eb8e:	ee77 5a65 	vsub.f32	s11, s14, s11
 800eb92:	ee66 4a27 	vmul.f32	s9, s12, s15
 800eb96:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800eb9a:	ee34 5a85 	vadd.f32	s10, s9, s10
 800eb9e:	ee26 6a04 	vmul.f32	s12, s12, s8
 800eba2:	ee66 6a84 	vmul.f32	s13, s13, s8
 800eba6:	ee77 7a25 	vadd.f32	s15, s14, s11
 800ebaa:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ebae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ebb2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ebb6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ebba:	3e01      	subs	r6, #1
 800ebbc:	ed42 6a02 	vstr	s13, [r2, #-8]
 800ebc0:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ebc4:	f1a3 0308 	sub.w	r3, r3, #8
 800ebc8:	f101 0108 	add.w	r1, r1, #8
 800ebcc:	f100 0008 	add.w	r0, r0, #8
 800ebd0:	f102 0208 	add.w	r2, r2, #8
 800ebd4:	d1c9      	bne.n	800eb6a <arm_rfft_fast_f32+0x5e>
 800ebd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebda:	edd1 7a00 	vldr	s15, [r1]
 800ebde:	edd1 6a01 	vldr	s13, [r1, #4]
 800ebe2:	6941      	ldr	r1, [r0, #20]
 800ebe4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ebe8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ebec:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800ebf0:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ebf4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ebf8:	3e01      	subs	r6, #1
 800ebfa:	ed82 7a00 	vstr	s14, [r2]
 800ebfe:	edc2 7a01 	vstr	s15, [r2, #4]
 800ec02:	00f0      	lsls	r0, r6, #3
 800ec04:	b3ee      	cbz	r6, 800ec82 <arm_rfft_fast_f32+0x176>
 800ec06:	3808      	subs	r0, #8
 800ec08:	f101 0e10 	add.w	lr, r1, #16
 800ec0c:	4420      	add	r0, r4
 800ec0e:	f104 0110 	add.w	r1, r4, #16
 800ec12:	f102 0c10 	add.w	ip, r2, #16
 800ec16:	ed90 7a02 	vldr	s14, [r0, #8]
 800ec1a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800ec1e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800ec22:	ed90 4a03 	vldr	s8, [r0, #12]
 800ec26:	ed11 5a01 	vldr	s10, [r1, #-4]
 800ec2a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800ec2e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800ec32:	ee74 4a05 	vadd.f32	s9, s8, s10
 800ec36:	ee26 3a27 	vmul.f32	s6, s12, s15
 800ec3a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800ec3e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ec42:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800ec46:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ec4a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800ec4e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ec52:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800ec56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ec5a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800ec5e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ec62:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ec66:	3e01      	subs	r6, #1
 800ec68:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800ec6c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800ec70:	f1a0 0008 	sub.w	r0, r0, #8
 800ec74:	f101 0108 	add.w	r1, r1, #8
 800ec78:	f10e 0e08 	add.w	lr, lr, #8
 800ec7c:	f10c 0c08 	add.w	ip, ip, #8
 800ec80:	d1c9      	bne.n	800ec16 <arm_rfft_fast_f32+0x10a>
 800ec82:	4638      	mov	r0, r7
 800ec84:	4629      	mov	r1, r5
 800ec86:	461a      	mov	r2, r3
 800ec88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	f000 bb31 	b.w	800f2f4 <arm_cfft_f32>
 800ec92:	bf00      	nop

0800ec94 <arm_cfft_radix8by2_f32>:
 800ec94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec98:	ed2d 8b08 	vpush	{d8-d11}
 800ec9c:	f8b0 e000 	ldrh.w	lr, [r0]
 800eca0:	6842      	ldr	r2, [r0, #4]
 800eca2:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800eca6:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800ecaa:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800ecae:	4607      	mov	r7, r0
 800ecb0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800ecb4:	f000 80af 	beq.w	800ee16 <arm_cfft_radix8by2_f32+0x182>
 800ecb8:	3310      	adds	r3, #16
 800ecba:	18ce      	adds	r6, r1, r3
 800ecbc:	3210      	adds	r2, #16
 800ecbe:	4443      	add	r3, r8
 800ecc0:	f101 0510 	add.w	r5, r1, #16
 800ecc4:	f108 0410 	add.w	r4, r8, #16
 800ecc8:	ed54 1a04 	vldr	s3, [r4, #-16]
 800eccc:	ed13 4a04 	vldr	s8, [r3, #-16]
 800ecd0:	ed53 3a03 	vldr	s7, [r3, #-12]
 800ecd4:	ed53 5a02 	vldr	s11, [r3, #-8]
 800ecd8:	ed13 5a01 	vldr	s10, [r3, #-4]
 800ecdc:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ece0:	ed14 0a02 	vldr	s0, [r4, #-8]
 800ece4:	ed16 2a04 	vldr	s4, [r6, #-16]
 800ece8:	ed56 2a03 	vldr	s5, [r6, #-12]
 800ecec:	ed15 6a03 	vldr	s12, [r5, #-12]
 800ecf0:	ed15 7a01 	vldr	s14, [r5, #-4]
 800ecf4:	ed15 3a04 	vldr	s6, [r5, #-16]
 800ecf8:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ecfc:	ed56 0a02 	vldr	s1, [r6, #-8]
 800ed00:	ed16 1a01 	vldr	s2, [r6, #-4]
 800ed04:	ed55 4a02 	vldr	s9, [r5, #-8]
 800ed08:	ee73 ba21 	vadd.f32	s23, s6, s3
 800ed0c:	ee36 ba26 	vadd.f32	s22, s12, s13
 800ed10:	ee37 aa27 	vadd.f32	s20, s14, s15
 800ed14:	ee72 9a04 	vadd.f32	s19, s4, s8
 800ed18:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800ed1c:	ee31 8a05 	vadd.f32	s16, s2, s10
 800ed20:	ee74 aa80 	vadd.f32	s21, s9, s0
 800ed24:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800ed28:	ed45 ba04 	vstr	s23, [r5, #-16]
 800ed2c:	ed05 ba03 	vstr	s22, [r5, #-12]
 800ed30:	ed45 aa02 	vstr	s21, [r5, #-8]
 800ed34:	ed05 aa01 	vstr	s20, [r5, #-4]
 800ed38:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ed3c:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ed40:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ed44:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ed48:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ed4c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800ed50:	ed12 6a03 	vldr	s12, [r2, #-12]
 800ed54:	ed52 2a04 	vldr	s5, [r2, #-16]
 800ed58:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ed5c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ed60:	ee26 8a86 	vmul.f32	s16, s13, s12
 800ed64:	ee24 2a06 	vmul.f32	s4, s8, s12
 800ed68:	ee63 1a22 	vmul.f32	s3, s6, s5
 800ed6c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ed70:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ed74:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ed78:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ed7c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ed80:	ee36 6a04 	vadd.f32	s12, s12, s8
 800ed84:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ed88:	ee72 3a63 	vsub.f32	s7, s4, s7
 800ed8c:	ee71 2a88 	vadd.f32	s5, s3, s16
 800ed90:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ed94:	ed44 2a04 	vstr	s5, [r4, #-16]
 800ed98:	ed43 3a04 	vstr	s7, [r3, #-16]
 800ed9c:	ed03 6a03 	vstr	s12, [r3, #-12]
 800eda0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eda4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800eda8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800edac:	ed52 5a02 	vldr	s11, [r2, #-8]
 800edb0:	ee35 6a41 	vsub.f32	s12, s10, s2
 800edb4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800edb8:	ee67 3a87 	vmul.f32	s7, s15, s14
 800edbc:	ee26 5a87 	vmul.f32	s10, s13, s14
 800edc0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800edc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edc8:	ee64 4a87 	vmul.f32	s9, s9, s14
 800edcc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800edd0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800edd4:	ee26 6a25 	vmul.f32	s12, s12, s11
 800edd8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800eddc:	ee74 5a23 	vadd.f32	s11, s8, s7
 800ede0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ede4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ede8:	f1be 0e01 	subs.w	lr, lr, #1
 800edec:	ed44 5a02 	vstr	s11, [r4, #-8]
 800edf0:	f105 0510 	add.w	r5, r5, #16
 800edf4:	ed44 7a01 	vstr	s15, [r4, #-4]
 800edf8:	f106 0610 	add.w	r6, r6, #16
 800edfc:	ed03 6a02 	vstr	s12, [r3, #-8]
 800ee00:	ed03 7a01 	vstr	s14, [r3, #-4]
 800ee04:	f102 0210 	add.w	r2, r2, #16
 800ee08:	f104 0410 	add.w	r4, r4, #16
 800ee0c:	f103 0310 	add.w	r3, r3, #16
 800ee10:	f47f af5a 	bne.w	800ecc8 <arm_cfft_radix8by2_f32+0x34>
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	fa1f f48c 	uxth.w	r4, ip
 800ee1a:	4608      	mov	r0, r1
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	4621      	mov	r1, r4
 800ee20:	f000 fbc2 	bl	800f5a8 <arm_radix8_butterfly_f32>
 800ee24:	ecbd 8b08 	vpop	{d8-d11}
 800ee28:	4640      	mov	r0, r8
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	2302      	movs	r3, #2
 800ee30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee34:	f000 bbb8 	b.w	800f5a8 <arm_radix8_butterfly_f32>

0800ee38 <arm_cfft_radix8by4_f32>:
 800ee38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3c:	ed2d 8b0a 	vpush	{d8-d12}
 800ee40:	8802      	ldrh	r2, [r0, #0]
 800ee42:	ed91 6a00 	vldr	s12, [r1]
 800ee46:	b08f      	sub	sp, #60	; 0x3c
 800ee48:	460f      	mov	r7, r1
 800ee4a:	0852      	lsrs	r2, r2, #1
 800ee4c:	0093      	lsls	r3, r2, #2
 800ee4e:	900c      	str	r0, [sp, #48]	; 0x30
 800ee50:	9103      	str	r1, [sp, #12]
 800ee52:	6841      	ldr	r1, [r0, #4]
 800ee54:	ed97 7a01 	vldr	s14, [r7, #4]
 800ee58:	4638      	mov	r0, r7
 800ee5a:	4418      	add	r0, r3
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	9009      	str	r0, [sp, #36]	; 0x24
 800ee60:	4418      	add	r0, r3
 800ee62:	edd0 6a00 	vldr	s13, [r0]
 800ee66:	edd6 3a00 	vldr	s7, [r6]
 800ee6a:	edd6 2a01 	vldr	s5, [r6, #4]
 800ee6e:	edd0 7a01 	vldr	s15, [r0, #4]
 800ee72:	900a      	str	r0, [sp, #40]	; 0x28
 800ee74:	ee76 5a26 	vadd.f32	s11, s12, s13
 800ee78:	4604      	mov	r4, r0
 800ee7a:	4625      	mov	r5, r4
 800ee7c:	441c      	add	r4, r3
 800ee7e:	ed94 4a00 	vldr	s8, [r4]
 800ee82:	ed94 5a01 	vldr	s10, [r4, #4]
 800ee86:	9401      	str	r4, [sp, #4]
 800ee88:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ee92:	463e      	mov	r6, r7
 800ee94:	ee14 ea90 	vmov	lr, s9
 800ee98:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ee9c:	f846 eb08 	str.w	lr, [r6], #8
 800eea0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800eea4:	edd0 4a01 	vldr	s9, [r0, #4]
 800eea8:	9604      	str	r6, [sp, #16]
 800eeaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeae:	9e01      	ldr	r6, [sp, #4]
 800eeb0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800eeb4:	ed96 2a01 	vldr	s4, [r6, #4]
 800eeb8:	ee36 7a24 	vadd.f32	s14, s12, s9
 800eebc:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800eec0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800eec4:	ee36 6a62 	vsub.f32	s12, s12, s5
 800eec8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800eecc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800eed0:	ee73 3a45 	vsub.f32	s7, s6, s10
 800eed4:	4604      	mov	r4, r0
 800eed6:	ee36 6a45 	vsub.f32	s12, s12, s10
 800eeda:	ee75 6a26 	vadd.f32	s13, s10, s13
 800eede:	46a3      	mov	fp, r4
 800eee0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800eee4:	ee34 5a84 	vadd.f32	s10, s9, s8
 800eee8:	ee13 8a90 	vmov	r8, s7
 800eeec:	46a4      	mov	ip, r4
 800eeee:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800eef2:	ed87 7a01 	vstr	s14, [r7, #4]
 800eef6:	f84b 8b08 	str.w	r8, [fp], #8
 800eefa:	f1ac 0704 	sub.w	r7, ip, #4
 800eefe:	ed8c 5a01 	vstr	s10, [ip, #4]
 800ef02:	f101 0c08 	add.w	ip, r1, #8
 800ef06:	462c      	mov	r4, r5
 800ef08:	f8cd c014 	str.w	ip, [sp, #20]
 800ef0c:	ee15 ca90 	vmov	ip, s11
 800ef10:	f844 cb08 	str.w	ip, [r4], #8
 800ef14:	9407      	str	r4, [sp, #28]
 800ef16:	f101 0410 	add.w	r4, r1, #16
 800ef1a:	ed85 6a01 	vstr	s12, [r5, #4]
 800ef1e:	0852      	lsrs	r2, r2, #1
 800ef20:	9402      	str	r4, [sp, #8]
 800ef22:	462c      	mov	r4, r5
 800ef24:	f101 0518 	add.w	r5, r1, #24
 800ef28:	920b      	str	r2, [sp, #44]	; 0x2c
 800ef2a:	46b2      	mov	sl, r6
 800ef2c:	9506      	str	r5, [sp, #24]
 800ef2e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800ef32:	3a02      	subs	r2, #2
 800ef34:	ee16 5a90 	vmov	r5, s13
 800ef38:	46b6      	mov	lr, r6
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	0852      	lsrs	r2, r2, #1
 800ef3e:	f84a 5b08 	str.w	r5, [sl], #8
 800ef42:	f1a0 0604 	sub.w	r6, r0, #4
 800ef46:	edce 7a01 	vstr	s15, [lr, #4]
 800ef4a:	9208      	str	r2, [sp, #32]
 800ef4c:	f000 8130 	beq.w	800f1b0 <arm_cfft_radix8by4_f32+0x378>
 800ef50:	4691      	mov	r9, r2
 800ef52:	9a03      	ldr	r2, [sp, #12]
 800ef54:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ef58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ef5c:	3b08      	subs	r3, #8
 800ef5e:	f102 0510 	add.w	r5, r2, #16
 800ef62:	f101 0c20 	add.w	ip, r1, #32
 800ef66:	f1a4 020c 	sub.w	r2, r4, #12
 800ef6a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800ef6e:	4433      	add	r3, r6
 800ef70:	3410      	adds	r4, #16
 800ef72:	4650      	mov	r0, sl
 800ef74:	4659      	mov	r1, fp
 800ef76:	ed55 3a02 	vldr	s7, [r5, #-8]
 800ef7a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800ef7e:	ed91 7a00 	vldr	s14, [r1]
 800ef82:	edd0 7a00 	vldr	s15, [r0]
 800ef86:	ed15 4a01 	vldr	s8, [r5, #-4]
 800ef8a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ef8e:	edd0 6a01 	vldr	s13, [r0, #4]
 800ef92:	ed91 6a01 	vldr	s12, [r1, #4]
 800ef96:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ef9a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800ef9e:	ee78 4a07 	vadd.f32	s9, s16, s14
 800efa2:	ee74 5a65 	vsub.f32	s11, s8, s11
 800efa6:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800efaa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800efae:	ed45 4a02 	vstr	s9, [r5, #-8]
 800efb2:	edd1 4a01 	vldr	s9, [r1, #4]
 800efb6:	ed90 4a01 	vldr	s8, [r0, #4]
 800efba:	ee70 4a24 	vadd.f32	s9, s0, s9
 800efbe:	ee76 aa05 	vadd.f32	s21, s12, s10
 800efc2:	ee74 4a84 	vadd.f32	s9, s9, s8
 800efc6:	ee35 aac7 	vsub.f32	s20, s11, s14
 800efca:	ed45 4a01 	vstr	s9, [r5, #-4]
 800efce:	edd6 1a00 	vldr	s3, [r6]
 800efd2:	edd7 0a00 	vldr	s1, [r7]
 800efd6:	ed92 4a02 	vldr	s8, [r2, #8]
 800efda:	edd3 3a02 	vldr	s7, [r3, #8]
 800efde:	ed93 2a01 	vldr	s4, [r3, #4]
 800efe2:	ed16 1a01 	vldr	s2, [r6, #-4]
 800efe6:	edd2 2a01 	vldr	s5, [r2, #4]
 800efea:	ed57 9a01 	vldr	s19, [r7, #-4]
 800efee:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800eff2:	ee39 3a81 	vadd.f32	s6, s19, s2
 800eff6:	ee74 8a84 	vadd.f32	s17, s9, s8
 800effa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800effe:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800f002:	ee7a aae6 	vsub.f32	s21, s21, s13
 800f006:	ee18 aa90 	vmov	sl, s17
 800f00a:	f847 a908 	str.w	sl, [r7], #-8
 800f00e:	edd2 8a01 	vldr	s17, [r2, #4]
 800f012:	ed93 9a01 	vldr	s18, [r3, #4]
 800f016:	ee73 8a28 	vadd.f32	s17, s6, s17
 800f01a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800f01e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800f022:	ee74 0a63 	vsub.f32	s1, s8, s7
 800f026:	edc7 8a01 	vstr	s17, [r7, #4]
 800f02a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800f02e:	ed58 8a01 	vldr	s17, [r8, #-4]
 800f032:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800f036:	ee6a ba28 	vmul.f32	s23, s20, s17
 800f03a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800f03e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800f042:	ee30 9a81 	vadd.f32	s18, s1, s2
 800f046:	ee79 9a82 	vadd.f32	s19, s19, s4
 800f04a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800f04e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800f052:	ee69 baa8 	vmul.f32	s23, s19, s17
 800f056:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800f05a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800f05e:	ee69 8a28 	vmul.f32	s17, s18, s17
 800f062:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800f066:	ee1c aa10 	vmov	sl, s24
 800f06a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800f06e:	f841 ab08 	str.w	sl, [r1], #8
 800f072:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800f076:	ee3b bacb 	vsub.f32	s22, s23, s22
 800f07a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800f07e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800f082:	ed01 aa01 	vstr	s20, [r1, #-4]
 800f086:	edc2 8a01 	vstr	s17, [r2, #4]
 800f08a:	ed82 ba02 	vstr	s22, [r2, #8]
 800f08e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800f092:	ee74 3a63 	vsub.f32	s7, s8, s7
 800f096:	ee38 8a47 	vsub.f32	s16, s16, s14
 800f09a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800f09e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800f0a2:	ee33 3a42 	vsub.f32	s6, s6, s4
 800f0a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f0aa:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f0ae:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800f0b2:	ee63 8a04 	vmul.f32	s17, s6, s8
 800f0b6:	ee28 aa24 	vmul.f32	s20, s16, s9
 800f0ba:	ee60 9a04 	vmul.f32	s19, s0, s8
 800f0be:	ee28 8a04 	vmul.f32	s16, s16, s8
 800f0c2:	ee20 0a24 	vmul.f32	s0, s0, s9
 800f0c6:	ee63 3a84 	vmul.f32	s7, s7, s8
 800f0ca:	ee39 4a68 	vsub.f32	s8, s18, s17
 800f0ce:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800f0d2:	ee14 aa10 	vmov	sl, s8
 800f0d6:	ee30 0a48 	vsub.f32	s0, s0, s16
 800f0da:	ee63 4a24 	vmul.f32	s9, s6, s9
 800f0de:	ed44 9a02 	vstr	s19, [r4, #-8]
 800f0e2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800f0e6:	ed04 0a01 	vstr	s0, [r4, #-4]
 800f0ea:	f846 a908 	str.w	sl, [r6], #-8
 800f0ee:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f0f2:	ee35 7a87 	vadd.f32	s14, s11, s14
 800f0f6:	edc6 3a01 	vstr	s7, [r6, #4]
 800f0fa:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f0fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f102:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800f106:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800f10a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800f10e:	ee26 5a87 	vmul.f32	s10, s13, s14
 800f112:	ee72 2a62 	vsub.f32	s5, s4, s5
 800f116:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800f11a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800f11e:	ee75 5a25 	vadd.f32	s11, s10, s11
 800f122:	ee62 0a86 	vmul.f32	s1, s5, s12
 800f126:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f12a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f12e:	ee21 6a06 	vmul.f32	s12, s2, s12
 800f132:	ee62 2a87 	vmul.f32	s5, s5, s14
 800f136:	ee21 1a07 	vmul.f32	s2, s2, s14
 800f13a:	ee15 aa90 	vmov	sl, s11
 800f13e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f142:	f840 ab08 	str.w	sl, [r0], #8
 800f146:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800f14a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800f14e:	f1b9 0901 	subs.w	r9, r9, #1
 800f152:	ed40 7a01 	vstr	s15, [r0, #-4]
 800f156:	f105 0508 	add.w	r5, r5, #8
 800f15a:	ed83 1a02 	vstr	s2, [r3, #8]
 800f15e:	edc3 2a01 	vstr	s5, [r3, #4]
 800f162:	f108 0808 	add.w	r8, r8, #8
 800f166:	f1a2 0208 	sub.w	r2, r2, #8
 800f16a:	f10c 0c10 	add.w	ip, ip, #16
 800f16e:	f104 0408 	add.w	r4, r4, #8
 800f172:	f10e 0e18 	add.w	lr, lr, #24
 800f176:	f1a3 0308 	sub.w	r3, r3, #8
 800f17a:	f47f aefc 	bne.w	800ef76 <arm_cfft_radix8by4_f32+0x13e>
 800f17e:	9908      	ldr	r1, [sp, #32]
 800f180:	9802      	ldr	r0, [sp, #8]
 800f182:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800f186:	00cb      	lsls	r3, r1, #3
 800f188:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800f18c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800f190:	9102      	str	r1, [sp, #8]
 800f192:	9904      	ldr	r1, [sp, #16]
 800f194:	4419      	add	r1, r3
 800f196:	9104      	str	r1, [sp, #16]
 800f198:	9905      	ldr	r1, [sp, #20]
 800f19a:	4419      	add	r1, r3
 800f19c:	9105      	str	r1, [sp, #20]
 800f19e:	9907      	ldr	r1, [sp, #28]
 800f1a0:	449b      	add	fp, r3
 800f1a2:	4419      	add	r1, r3
 800f1a4:	449a      	add	sl, r3
 800f1a6:	9b06      	ldr	r3, [sp, #24]
 800f1a8:	9107      	str	r1, [sp, #28]
 800f1aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1ae:	9306      	str	r3, [sp, #24]
 800f1b0:	9a04      	ldr	r2, [sp, #16]
 800f1b2:	9807      	ldr	r0, [sp, #28]
 800f1b4:	edd2 3a00 	vldr	s7, [r2]
 800f1b8:	ed90 4a00 	vldr	s8, [r0]
 800f1bc:	eddb 7a00 	vldr	s15, [fp]
 800f1c0:	ed9a 3a00 	vldr	s6, [sl]
 800f1c4:	edd2 4a01 	vldr	s9, [r2, #4]
 800f1c8:	ed90 7a01 	vldr	s14, [r0, #4]
 800f1cc:	ed9b 2a01 	vldr	s4, [fp, #4]
 800f1d0:	edda 5a01 	vldr	s11, [sl, #4]
 800f1d4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800f1d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f1da:	ee73 6a84 	vadd.f32	s13, s7, s8
 800f1de:	ee34 6a87 	vadd.f32	s12, s9, s14
 800f1e2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800f1e6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800f1ea:	ee33 5a05 	vadd.f32	s10, s6, s10
 800f1ee:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800f1f2:	ed82 5a00 	vstr	s10, [r2]
 800f1f6:	ed9b 5a01 	vldr	s10, [fp, #4]
 800f1fa:	edda 4a01 	vldr	s9, [sl, #4]
 800f1fe:	ee36 5a05 	vadd.f32	s10, s12, s10
 800f202:	ee72 3a04 	vadd.f32	s7, s4, s8
 800f206:	ee35 5a24 	vadd.f32	s10, s10, s9
 800f20a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800f20e:	ed82 5a01 	vstr	s10, [r2, #4]
 800f212:	9a05      	ldr	r2, [sp, #20]
 800f214:	ee34 5a83 	vadd.f32	s10, s9, s6
 800f218:	edd2 1a00 	vldr	s3, [r2]
 800f21c:	edd2 2a01 	vldr	s5, [r2, #4]
 800f220:	9a02      	ldr	r2, [sp, #8]
 800f222:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800f226:	ee36 6a42 	vsub.f32	s12, s12, s4
 800f22a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800f22e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800f232:	ee65 2a22 	vmul.f32	s5, s10, s5
 800f236:	ee25 5a21 	vmul.f32	s10, s10, s3
 800f23a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800f23e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f242:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f246:	edcb 2a00 	vstr	s5, [fp]
 800f24a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800f24e:	edd2 3a01 	vldr	s7, [r2, #4]
 800f252:	ed92 5a00 	vldr	s10, [r2]
 800f256:	9a06      	ldr	r2, [sp, #24]
 800f258:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f25c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800f260:	ee66 4a85 	vmul.f32	s9, s13, s10
 800f264:	ee26 5a05 	vmul.f32	s10, s12, s10
 800f268:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800f26c:	ee26 6a23 	vmul.f32	s12, s12, s7
 800f270:	ee75 6a66 	vsub.f32	s13, s10, s13
 800f274:	ee34 6a86 	vadd.f32	s12, s9, s12
 800f278:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f27c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f280:	edc0 6a01 	vstr	s13, [r0, #4]
 800f284:	ed80 6a00 	vstr	s12, [r0]
 800f288:	ed92 6a01 	vldr	s12, [r2, #4]
 800f28c:	9803      	ldr	r0, [sp, #12]
 800f28e:	ee77 7a43 	vsub.f32	s15, s14, s6
 800f292:	ee75 5a84 	vadd.f32	s11, s11, s8
 800f296:	ed92 7a00 	vldr	s14, [r2]
 800f29a:	ee65 6a87 	vmul.f32	s13, s11, s14
 800f29e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f2a2:	ee65 5a86 	vmul.f32	s11, s11, s12
 800f2a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f2aa:	ee77 5a65 	vsub.f32	s11, s14, s11
 800f2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2b2:	edca 5a01 	vstr	s11, [sl, #4]
 800f2b6:	edca 7a00 	vstr	s15, [sl]
 800f2ba:	6872      	ldr	r2, [r6, #4]
 800f2bc:	4621      	mov	r1, r4
 800f2be:	2304      	movs	r3, #4
 800f2c0:	f000 f972 	bl	800f5a8 <arm_radix8_butterfly_f32>
 800f2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2c6:	6872      	ldr	r2, [r6, #4]
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	2304      	movs	r3, #4
 800f2cc:	f000 f96c 	bl	800f5a8 <arm_radix8_butterfly_f32>
 800f2d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f2d2:	6872      	ldr	r2, [r6, #4]
 800f2d4:	4621      	mov	r1, r4
 800f2d6:	2304      	movs	r3, #4
 800f2d8:	f000 f966 	bl	800f5a8 <arm_radix8_butterfly_f32>
 800f2dc:	9801      	ldr	r0, [sp, #4]
 800f2de:	6872      	ldr	r2, [r6, #4]
 800f2e0:	4621      	mov	r1, r4
 800f2e2:	2304      	movs	r3, #4
 800f2e4:	b00f      	add	sp, #60	; 0x3c
 800f2e6:	ecbd 8b0a 	vpop	{d8-d12}
 800f2ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ee:	f000 b95b 	b.w	800f5a8 <arm_radix8_butterfly_f32>
 800f2f2:	bf00      	nop

0800f2f4 <arm_cfft_f32>:
 800f2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f8:	2a01      	cmp	r2, #1
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	4617      	mov	r7, r2
 800f2fe:	460c      	mov	r4, r1
 800f300:	4698      	mov	r8, r3
 800f302:	8805      	ldrh	r5, [r0, #0]
 800f304:	d054      	beq.n	800f3b0 <arm_cfft_f32+0xbc>
 800f306:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f30a:	d04c      	beq.n	800f3a6 <arm_cfft_f32+0xb2>
 800f30c:	d916      	bls.n	800f33c <arm_cfft_f32+0x48>
 800f30e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800f312:	d01a      	beq.n	800f34a <arm_cfft_f32+0x56>
 800f314:	d95c      	bls.n	800f3d0 <arm_cfft_f32+0xdc>
 800f316:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800f31a:	d044      	beq.n	800f3a6 <arm_cfft_f32+0xb2>
 800f31c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800f320:	d105      	bne.n	800f32e <arm_cfft_f32+0x3a>
 800f322:	4620      	mov	r0, r4
 800f324:	4629      	mov	r1, r5
 800f326:	6872      	ldr	r2, [r6, #4]
 800f328:	2301      	movs	r3, #1
 800f32a:	f000 f93d 	bl	800f5a8 <arm_radix8_butterfly_f32>
 800f32e:	f1b8 0f00 	cmp.w	r8, #0
 800f332:	d111      	bne.n	800f358 <arm_cfft_f32+0x64>
 800f334:	2f01      	cmp	r7, #1
 800f336:	d016      	beq.n	800f366 <arm_cfft_f32+0x72>
 800f338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f33c:	2d20      	cmp	r5, #32
 800f33e:	d032      	beq.n	800f3a6 <arm_cfft_f32+0xb2>
 800f340:	d94a      	bls.n	800f3d8 <arm_cfft_f32+0xe4>
 800f342:	2d40      	cmp	r5, #64	; 0x40
 800f344:	d0ed      	beq.n	800f322 <arm_cfft_f32+0x2e>
 800f346:	2d80      	cmp	r5, #128	; 0x80
 800f348:	d1f1      	bne.n	800f32e <arm_cfft_f32+0x3a>
 800f34a:	4630      	mov	r0, r6
 800f34c:	4621      	mov	r1, r4
 800f34e:	f7ff fca1 	bl	800ec94 <arm_cfft_radix8by2_f32>
 800f352:	f1b8 0f00 	cmp.w	r8, #0
 800f356:	d0ed      	beq.n	800f334 <arm_cfft_f32+0x40>
 800f358:	4620      	mov	r0, r4
 800f35a:	89b1      	ldrh	r1, [r6, #12]
 800f35c:	68b2      	ldr	r2, [r6, #8]
 800f35e:	f7f0 ff47 	bl	80001f0 <arm_bitreversal_32>
 800f362:	2f01      	cmp	r7, #1
 800f364:	d1e8      	bne.n	800f338 <arm_cfft_f32+0x44>
 800f366:	ee07 5a90 	vmov	s15, r5
 800f36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f36e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f372:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800f376:	2d00      	cmp	r5, #0
 800f378:	d0de      	beq.n	800f338 <arm_cfft_f32+0x44>
 800f37a:	f104 0108 	add.w	r1, r4, #8
 800f37e:	2300      	movs	r3, #0
 800f380:	3301      	adds	r3, #1
 800f382:	429d      	cmp	r5, r3
 800f384:	f101 0108 	add.w	r1, r1, #8
 800f388:	ed11 7a04 	vldr	s14, [r1, #-16]
 800f38c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f390:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f394:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f398:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f39c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f3a0:	d1ee      	bne.n	800f380 <arm_cfft_f32+0x8c>
 800f3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	4621      	mov	r1, r4
 800f3aa:	f7ff fd45 	bl	800ee38 <arm_cfft_radix8by4_f32>
 800f3ae:	e7be      	b.n	800f32e <arm_cfft_f32+0x3a>
 800f3b0:	b1ad      	cbz	r5, 800f3de <arm_cfft_f32+0xea>
 800f3b2:	f101 030c 	add.w	r3, r1, #12
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f3bc:	3201      	adds	r2, #1
 800f3be:	eef1 7a67 	vneg.f32	s15, s15
 800f3c2:	4295      	cmp	r5, r2
 800f3c4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800f3c8:	f103 0308 	add.w	r3, r3, #8
 800f3cc:	d1f4      	bne.n	800f3b8 <arm_cfft_f32+0xc4>
 800f3ce:	e79a      	b.n	800f306 <arm_cfft_f32+0x12>
 800f3d0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f3d4:	d0a5      	beq.n	800f322 <arm_cfft_f32+0x2e>
 800f3d6:	e7aa      	b.n	800f32e <arm_cfft_f32+0x3a>
 800f3d8:	2d10      	cmp	r5, #16
 800f3da:	d0b6      	beq.n	800f34a <arm_cfft_f32+0x56>
 800f3dc:	e7a7      	b.n	800f32e <arm_cfft_f32+0x3a>
 800f3de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f3e2:	d894      	bhi.n	800f30e <arm_cfft_f32+0x1a>
 800f3e4:	e7aa      	b.n	800f33c <arm_cfft_f32+0x48>
 800f3e6:	bf00      	nop

0800f3e8 <arm_rfft_init_q15>:
 800f3e8:	b289      	uxth	r1, r1
 800f3ea:	b430      	push	{r4, r5}
 800f3ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f3f0:	4d36      	ldr	r5, [pc, #216]	; (800f4cc <arm_rfft_init_q15+0xe4>)
 800f3f2:	4c37      	ldr	r4, [pc, #220]	; (800f4d0 <arm_rfft_init_q15+0xe8>)
 800f3f4:	7102      	strb	r2, [r0, #4]
 800f3f6:	7143      	strb	r3, [r0, #5]
 800f3f8:	6001      	str	r1, [r0, #0]
 800f3fa:	60c5      	str	r5, [r0, #12]
 800f3fc:	6104      	str	r4, [r0, #16]
 800f3fe:	d050      	beq.n	800f4a2 <arm_rfft_init_q15+0xba>
 800f400:	d911      	bls.n	800f426 <arm_rfft_init_q15+0x3e>
 800f402:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800f406:	d054      	beq.n	800f4b2 <arm_rfft_init_q15+0xca>
 800f408:	d938      	bls.n	800f47c <arm_rfft_init_q15+0x94>
 800f40a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800f40e:	d022      	beq.n	800f456 <arm_rfft_init_q15+0x6e>
 800f410:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800f414:	d155      	bne.n	800f4c2 <arm_rfft_init_q15+0xda>
 800f416:	2201      	movs	r2, #1
 800f418:	4b2e      	ldr	r3, [pc, #184]	; (800f4d4 <arm_rfft_init_q15+0xec>)
 800f41a:	6082      	str	r2, [r0, #8]
 800f41c:	6143      	str	r3, [r0, #20]
 800f41e:	2000      	movs	r0, #0
 800f420:	b240      	sxtb	r0, r0
 800f422:	bc30      	pop	{r4, r5}
 800f424:	4770      	bx	lr
 800f426:	2940      	cmp	r1, #64	; 0x40
 800f428:	d033      	beq.n	800f492 <arm_rfft_init_q15+0xaa>
 800f42a:	d91c      	bls.n	800f466 <arm_rfft_init_q15+0x7e>
 800f42c:	2980      	cmp	r1, #128	; 0x80
 800f42e:	d00a      	beq.n	800f446 <arm_rfft_init_q15+0x5e>
 800f430:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f434:	d145      	bne.n	800f4c2 <arm_rfft_init_q15+0xda>
 800f436:	2220      	movs	r2, #32
 800f438:	4b27      	ldr	r3, [pc, #156]	; (800f4d8 <arm_rfft_init_q15+0xf0>)
 800f43a:	6082      	str	r2, [r0, #8]
 800f43c:	6143      	str	r3, [r0, #20]
 800f43e:	2000      	movs	r0, #0
 800f440:	b240      	sxtb	r0, r0
 800f442:	bc30      	pop	{r4, r5}
 800f444:	4770      	bx	lr
 800f446:	2240      	movs	r2, #64	; 0x40
 800f448:	4b24      	ldr	r3, [pc, #144]	; (800f4dc <arm_rfft_init_q15+0xf4>)
 800f44a:	6082      	str	r2, [r0, #8]
 800f44c:	6143      	str	r3, [r0, #20]
 800f44e:	2000      	movs	r0, #0
 800f450:	b240      	sxtb	r0, r0
 800f452:	bc30      	pop	{r4, r5}
 800f454:	4770      	bx	lr
 800f456:	2202      	movs	r2, #2
 800f458:	4b21      	ldr	r3, [pc, #132]	; (800f4e0 <arm_rfft_init_q15+0xf8>)
 800f45a:	6082      	str	r2, [r0, #8]
 800f45c:	6143      	str	r3, [r0, #20]
 800f45e:	2000      	movs	r0, #0
 800f460:	b240      	sxtb	r0, r0
 800f462:	bc30      	pop	{r4, r5}
 800f464:	4770      	bx	lr
 800f466:	2920      	cmp	r1, #32
 800f468:	d12b      	bne.n	800f4c2 <arm_rfft_init_q15+0xda>
 800f46a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f46e:	4b1d      	ldr	r3, [pc, #116]	; (800f4e4 <arm_rfft_init_q15+0xfc>)
 800f470:	6082      	str	r2, [r0, #8]
 800f472:	6143      	str	r3, [r0, #20]
 800f474:	2000      	movs	r0, #0
 800f476:	b240      	sxtb	r0, r0
 800f478:	bc30      	pop	{r4, r5}
 800f47a:	4770      	bx	lr
 800f47c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f480:	d11f      	bne.n	800f4c2 <arm_rfft_init_q15+0xda>
 800f482:	2208      	movs	r2, #8
 800f484:	4b18      	ldr	r3, [pc, #96]	; (800f4e8 <arm_rfft_init_q15+0x100>)
 800f486:	6082      	str	r2, [r0, #8]
 800f488:	6143      	str	r3, [r0, #20]
 800f48a:	2000      	movs	r0, #0
 800f48c:	b240      	sxtb	r0, r0
 800f48e:	bc30      	pop	{r4, r5}
 800f490:	4770      	bx	lr
 800f492:	2280      	movs	r2, #128	; 0x80
 800f494:	4b15      	ldr	r3, [pc, #84]	; (800f4ec <arm_rfft_init_q15+0x104>)
 800f496:	6082      	str	r2, [r0, #8]
 800f498:	6143      	str	r3, [r0, #20]
 800f49a:	2000      	movs	r0, #0
 800f49c:	b240      	sxtb	r0, r0
 800f49e:	bc30      	pop	{r4, r5}
 800f4a0:	4770      	bx	lr
 800f4a2:	2210      	movs	r2, #16
 800f4a4:	4b12      	ldr	r3, [pc, #72]	; (800f4f0 <arm_rfft_init_q15+0x108>)
 800f4a6:	6082      	str	r2, [r0, #8]
 800f4a8:	6143      	str	r3, [r0, #20]
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	b240      	sxtb	r0, r0
 800f4ae:	bc30      	pop	{r4, r5}
 800f4b0:	4770      	bx	lr
 800f4b2:	2204      	movs	r2, #4
 800f4b4:	4b0f      	ldr	r3, [pc, #60]	; (800f4f4 <arm_rfft_init_q15+0x10c>)
 800f4b6:	6082      	str	r2, [r0, #8]
 800f4b8:	6143      	str	r3, [r0, #20]
 800f4ba:	2000      	movs	r0, #0
 800f4bc:	b240      	sxtb	r0, r0
 800f4be:	bc30      	pop	{r4, r5}
 800f4c0:	4770      	bx	lr
 800f4c2:	20ff      	movs	r0, #255	; 0xff
 800f4c4:	b240      	sxtb	r0, r0
 800f4c6:	bc30      	pop	{r4, r5}
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	08010564 	.word	0x08010564
 800f4d0:	08014564 	.word	0x08014564
 800f4d4:	08018594 	.word	0x08018594
 800f4d8:	080185d4 	.word	0x080185d4
 800f4dc:	080185b4 	.word	0x080185b4
 800f4e0:	080185e4 	.word	0x080185e4
 800f4e4:	08018574 	.word	0x08018574
 800f4e8:	080185a4 	.word	0x080185a4
 800f4ec:	08018584 	.word	0x08018584
 800f4f0:	080185c4 	.word	0x080185c4
 800f4f4:	08018564 	.word	0x08018564

0800f4f8 <arm_cmplx_mag_squared_f32>:
 800f4f8:	b470      	push	{r4, r5, r6}
 800f4fa:	0896      	lsrs	r6, r2, #2
 800f4fc:	d03e      	beq.n	800f57c <arm_cmplx_mag_squared_f32+0x84>
 800f4fe:	f100 0320 	add.w	r3, r0, #32
 800f502:	f101 0410 	add.w	r4, r1, #16
 800f506:	4635      	mov	r5, r6
 800f508:	ed13 6a08 	vldr	s12, [r3, #-32]	; 0xffffffe0
 800f50c:	ed13 4a07 	vldr	s8, [r3, #-28]	; 0xffffffe4
 800f510:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800f514:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
 800f518:	ed13 7a04 	vldr	s14, [r3, #-16]
 800f51c:	ed13 5a03 	vldr	s10, [r3, #-12]
 800f520:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f524:	ed53 5a01 	vldr	s11, [r3, #-4]
 800f528:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f52c:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f530:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f534:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f538:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f53c:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f540:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f544:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f548:	ee36 6a04 	vadd.f32	s12, s12, s8
 800f54c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f550:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f554:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f558:	3d01      	subs	r5, #1
 800f55a:	ed04 6a04 	vstr	s12, [r4, #-16]
 800f55e:	ed44 6a03 	vstr	s13, [r4, #-12]
 800f562:	ed04 7a02 	vstr	s14, [r4, #-8]
 800f566:	ed44 7a01 	vstr	s15, [r4, #-4]
 800f56a:	f103 0320 	add.w	r3, r3, #32
 800f56e:	f104 0410 	add.w	r4, r4, #16
 800f572:	d1c9      	bne.n	800f508 <arm_cmplx_mag_squared_f32+0x10>
 800f574:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800f578:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800f57c:	f012 0203 	ands.w	r2, r2, #3
 800f580:	d010      	beq.n	800f5a4 <arm_cmplx_mag_squared_f32+0xac>
 800f582:	3008      	adds	r0, #8
 800f584:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f588:	ed10 7a01 	vldr	s14, [r0, #-4]
 800f58c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f590:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f594:	3a01      	subs	r2, #1
 800f596:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f59a:	f100 0008 	add.w	r0, r0, #8
 800f59e:	ece1 7a01 	vstmia	r1!, {s15}
 800f5a2:	d1ef      	bne.n	800f584 <arm_cmplx_mag_squared_f32+0x8c>
 800f5a4:	bc70      	pop	{r4, r5, r6}
 800f5a6:	4770      	bx	lr

0800f5a8 <arm_radix8_butterfly_f32>:
 800f5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ac:	ed2d 8b10 	vpush	{d8-d15}
 800f5b0:	b09d      	sub	sp, #116	; 0x74
 800f5b2:	461c      	mov	r4, r3
 800f5b4:	ed9f bac8 	vldr	s22, [pc, #800]	; 800f8d8 <arm_radix8_butterfly_f32+0x330>
 800f5b8:	921a      	str	r2, [sp, #104]	; 0x68
 800f5ba:	1d03      	adds	r3, r0, #4
 800f5bc:	4682      	mov	sl, r0
 800f5be:	4689      	mov	r9, r1
 800f5c0:	468b      	mov	fp, r1
 800f5c2:	931b      	str	r3, [sp, #108]	; 0x6c
 800f5c4:	9400      	str	r4, [sp, #0]
 800f5c6:	469e      	mov	lr, r3
 800f5c8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f5cc:	005a      	lsls	r2, r3, #1
 800f5ce:	18d6      	adds	r6, r2, r3
 800f5d0:	18f5      	adds	r5, r6, r3
 800f5d2:	9203      	str	r2, [sp, #12]
 800f5d4:	195a      	adds	r2, r3, r5
 800f5d6:	18d0      	adds	r0, r2, r3
 800f5d8:	00df      	lsls	r7, r3, #3
 800f5da:	1819      	adds	r1, r3, r0
 800f5dc:	463c      	mov	r4, r7
 800f5de:	9701      	str	r7, [sp, #4]
 800f5e0:	4457      	add	r7, sl
 800f5e2:	930c      	str	r3, [sp, #48]	; 0x30
 800f5e4:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800f5e8:	011b      	lsls	r3, r3, #4
 800f5ea:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800f5ee:	eb07 0c04 	add.w	ip, r7, r4
 800f5f2:	9c00      	ldr	r4, [sp, #0]
 800f5f4:	9302      	str	r3, [sp, #8]
 800f5f6:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800f5fa:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800f5fe:	3204      	adds	r2, #4
 800f600:	3104      	adds	r1, #4
 800f602:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800f606:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f60a:	f04f 0800 	mov.w	r8, #0
 800f60e:	eddc 7a00 	vldr	s15, [ip]
 800f612:	edd7 6a00 	vldr	s13, [r7]
 800f616:	edd6 3a00 	vldr	s7, [r6]
 800f61a:	ed5e aa01 	vldr	s21, [lr, #-4]
 800f61e:	edd5 4a00 	vldr	s9, [r5]
 800f622:	ed90 2a00 	vldr	s4, [r0]
 800f626:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f62a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800f62e:	ee77 8a82 	vadd.f32	s17, s15, s4
 800f632:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800f636:	ee76 1a87 	vadd.f32	s3, s13, s14
 800f63a:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800f63e:	ee31 6a84 	vadd.f32	s12, s3, s8
 800f642:	ee33 5a28 	vadd.f32	s10, s6, s17
 800f646:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f64a:	ee75 6a06 	vadd.f32	s13, s10, s12
 800f64e:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f652:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800f656:	ed85 5a00 	vstr	s10, [r5]
 800f65a:	ed96 1a01 	vldr	s2, [r6, #4]
 800f65e:	edd7 5a01 	vldr	s11, [r7, #4]
 800f662:	ed92 aa00 	vldr	s20, [r2]
 800f666:	ed91 6a00 	vldr	s12, [r1]
 800f66a:	ed9e 9a00 	vldr	s18, [lr]
 800f66e:	ed95 5a01 	vldr	s10, [r5, #4]
 800f672:	eddc 6a01 	vldr	s13, [ip, #4]
 800f676:	edd0 9a01 	vldr	s19, [r0, #4]
 800f67a:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800f67e:	ee71 2a46 	vsub.f32	s5, s2, s12
 800f682:	ee75 3aca 	vsub.f32	s7, s11, s20
 800f686:	ee37 0a60 	vsub.f32	s0, s14, s1
 800f68a:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800f68e:	ee37 7a20 	vadd.f32	s14, s14, s1
 800f692:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800f696:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800f69a:	ee79 3a05 	vadd.f32	s7, s18, s10
 800f69e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800f6a2:	ee39 5a45 	vsub.f32	s10, s18, s10
 800f6a6:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800f6aa:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800f6ae:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800f6b2:	ee31 6a06 	vadd.f32	s12, s2, s12
 800f6b6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800f6ba:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800f6be:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800f6c2:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800f6c6:	ee33 3a68 	vsub.f32	s6, s6, s17
 800f6ca:	ee36 0a88 	vadd.f32	s0, s13, s16
 800f6ce:	ee75 8a86 	vadd.f32	s17, s11, s12
 800f6d2:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800f6d6:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800f6da:	ee75 6a62 	vsub.f32	s13, s10, s5
 800f6de:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800f6e2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f6e6:	ee33 1a89 	vadd.f32	s2, s7, s18
 800f6ea:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800f6ee:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800f6f2:	ee75 4a22 	vadd.f32	s9, s10, s5
 800f6f6:	ee32 5a27 	vadd.f32	s10, s4, s15
 800f6fa:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f6fe:	ee33 8a06 	vadd.f32	s16, s6, s12
 800f702:	ee75 2a87 	vadd.f32	s5, s11, s14
 800f706:	ee31 9a28 	vadd.f32	s18, s2, s17
 800f70a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f70e:	ee74 0a61 	vsub.f32	s1, s8, s3
 800f712:	ee33 2a80 	vadd.f32	s4, s7, s0
 800f716:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f71a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800f71e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f722:	ee31 1a68 	vsub.f32	s2, s2, s17
 800f726:	ee34 4a21 	vadd.f32	s8, s8, s3
 800f72a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800f72e:	ee74 4a85 	vadd.f32	s9, s9, s10
 800f732:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f736:	44d8      	add	r8, fp
 800f738:	45c1      	cmp	r9, r8
 800f73a:	ed8e 9a00 	vstr	s18, [lr]
 800f73e:	ed85 1a01 	vstr	s2, [r5, #4]
 800f742:	449e      	add	lr, r3
 800f744:	ed8c 8a00 	vstr	s16, [ip]
 800f748:	441d      	add	r5, r3
 800f74a:	ed80 6a00 	vstr	s12, [r0]
 800f74e:	edcc 0a01 	vstr	s1, [ip, #4]
 800f752:	ed80 4a01 	vstr	s8, [r0, #4]
 800f756:	449c      	add	ip, r3
 800f758:	ed87 2a00 	vstr	s4, [r7]
 800f75c:	4418      	add	r0, r3
 800f75e:	ed41 3a01 	vstr	s7, [r1, #-4]
 800f762:	ed42 2a01 	vstr	s5, [r2, #-4]
 800f766:	ed86 7a00 	vstr	s14, [r6]
 800f76a:	ed87 3a01 	vstr	s6, [r7, #4]
 800f76e:	edc1 4a00 	vstr	s9, [r1]
 800f772:	441f      	add	r7, r3
 800f774:	edc2 5a00 	vstr	s11, [r2]
 800f778:	4419      	add	r1, r3
 800f77a:	edc6 6a01 	vstr	s13, [r6, #4]
 800f77e:	441a      	add	r2, r3
 800f780:	441e      	add	r6, r3
 800f782:	f63f af44 	bhi.w	800f60e <arm_radix8_butterfly_f32+0x66>
 800f786:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f788:	2907      	cmp	r1, #7
 800f78a:	4620      	mov	r0, r4
 800f78c:	f240 81e9 	bls.w	800fb62 <arm_radix8_butterfly_f32+0x5ba>
 800f790:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800f794:	193e      	adds	r6, r7, r4
 800f796:	1935      	adds	r5, r6, r4
 800f798:	9c03      	ldr	r4, [sp, #12]
 800f79a:	9000      	str	r0, [sp, #0]
 800f79c:	4622      	mov	r2, r4
 800f79e:	3201      	adds	r2, #1
 800f7a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f7a4:	9900      	ldr	r1, [sp, #0]
 800f7a6:	1828      	adds	r0, r5, r0
 800f7a8:	eb00 0e01 	add.w	lr, r0, r1
 800f7ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f7ae:	440a      	add	r2, r1
 800f7b0:	eb04 0c01 	add.w	ip, r4, r1
 800f7b4:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800f7b8:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800f7bc:	9a00      	ldr	r2, [sp, #0]
 800f7be:	940f      	str	r4, [sp, #60]	; 0x3c
 800f7c0:	00ed      	lsls	r5, r5, #3
 800f7c2:	9511      	str	r5, [sp, #68]	; 0x44
 800f7c4:	00d5      	lsls	r5, r2, #3
 800f7c6:	950d      	str	r5, [sp, #52]	; 0x34
 800f7c8:	9d01      	ldr	r5, [sp, #4]
 800f7ca:	3508      	adds	r5, #8
 800f7cc:	9516      	str	r5, [sp, #88]	; 0x58
 800f7ce:	9d02      	ldr	r5, [sp, #8]
 800f7d0:	3508      	adds	r5, #8
 800f7d2:	0114      	lsls	r4, r2, #4
 800f7d4:	9517      	str	r5, [sp, #92]	; 0x5c
 800f7d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7d8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f7da:	940e      	str	r4, [sp, #56]	; 0x38
 800f7dc:	00c0      	lsls	r0, r0, #3
 800f7de:	9010      	str	r0, [sp, #64]	; 0x40
 800f7e0:	18aa      	adds	r2, r5, r2
 800f7e2:	9207      	str	r2, [sp, #28]
 800f7e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f7e8:	18aa      	adds	r2, r5, r2
 800f7ea:	9208      	str	r2, [sp, #32]
 800f7ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f7ee:	18aa      	adds	r2, r5, r2
 800f7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800f7f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f7f6:	f10e 0204 	add.w	r2, lr, #4
 800f7fa:	920a      	str	r2, [sp, #40]	; 0x28
 800f7fc:	00c9      	lsls	r1, r1, #3
 800f7fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f800:	310c      	adds	r1, #12
 800f802:	00f6      	lsls	r6, r6, #3
 800f804:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800f808:	9114      	str	r1, [sp, #80]	; 0x50
 800f80a:	18a9      	adds	r1, r5, r2
 800f80c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f80e:	9612      	str	r6, [sp, #72]	; 0x48
 800f810:	00ff      	lsls	r7, r7, #3
 800f812:	19ae      	adds	r6, r5, r6
 800f814:	3008      	adds	r0, #8
 800f816:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800f81a:	9606      	str	r6, [sp, #24]
 800f81c:	9019      	str	r0, [sp, #100]	; 0x64
 800f81e:	18aa      	adds	r2, r5, r2
 800f820:	0164      	lsls	r4, r4, #5
 800f822:	19ee      	adds	r6, r5, r7
 800f824:	f10c 000c 	add.w	r0, ip, #12
 800f828:	9713      	str	r7, [sp, #76]	; 0x4c
 800f82a:	9604      	str	r6, [sp, #16]
 800f82c:	9015      	str	r0, [sp, #84]	; 0x54
 800f82e:	9103      	str	r1, [sp, #12]
 800f830:	9205      	str	r2, [sp, #20]
 800f832:	f104 0208 	add.w	r2, r4, #8
 800f836:	9218      	str	r2, [sp, #96]	; 0x60
 800f838:	f04f 0801 	mov.w	r8, #1
 800f83c:	2200      	movs	r2, #0
 800f83e:	f102 0108 	add.w	r1, r2, #8
 800f842:	460f      	mov	r7, r1
 800f844:	910b      	str	r1, [sp, #44]	; 0x2c
 800f846:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f848:	188e      	adds	r6, r1, r2
 800f84a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f84c:	188d      	adds	r5, r1, r2
 800f84e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f850:	188c      	adds	r4, r1, r2
 800f852:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f854:	1888      	adds	r0, r1, r2
 800f856:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f858:	eb01 0c02 	add.w	ip, r1, r2
 800f85c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f85e:	440a      	add	r2, r1
 800f860:	9903      	ldr	r1, [sp, #12]
 800f862:	edd1 fa00 	vldr	s31, [r1]
 800f866:	9905      	ldr	r1, [sp, #20]
 800f868:	ed91 fa00 	vldr	s30, [r1]
 800f86c:	9904      	ldr	r1, [sp, #16]
 800f86e:	edd1 ea00 	vldr	s29, [r1]
 800f872:	9906      	ldr	r1, [sp, #24]
 800f874:	ed91 ea00 	vldr	s28, [r1]
 800f878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f87a:	edd1 da00 	vldr	s27, [r1]
 800f87e:	9908      	ldr	r1, [sp, #32]
 800f880:	ed91 da00 	vldr	s26, [r1]
 800f884:	9907      	ldr	r1, [sp, #28]
 800f886:	edd1 ca00 	vldr	s25, [r1]
 800f88a:	9903      	ldr	r1, [sp, #12]
 800f88c:	ed91 ca01 	vldr	s24, [r1, #4]
 800f890:	9905      	ldr	r1, [sp, #20]
 800f892:	edd1 ba01 	vldr	s23, [r1, #4]
 800f896:	9904      	ldr	r1, [sp, #16]
 800f898:	edd1 aa01 	vldr	s21, [r1, #4]
 800f89c:	9906      	ldr	r1, [sp, #24]
 800f89e:	ed91 aa01 	vldr	s20, [r1, #4]
 800f8a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8a4:	edd1 7a01 	vldr	s15, [r1, #4]
 800f8a8:	9908      	ldr	r1, [sp, #32]
 800f8aa:	edcd 7a00 	vstr	s15, [sp]
 800f8ae:	edd1 7a01 	vldr	s15, [r1, #4]
 800f8b2:	9907      	ldr	r1, [sp, #28]
 800f8b4:	edcd 7a01 	vstr	s15, [sp, #4]
 800f8b8:	edd1 7a01 	vldr	s15, [r1, #4]
 800f8bc:	eb0a 0e07 	add.w	lr, sl, r7
 800f8c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f8c2:	edcd 7a02 	vstr	s15, [sp, #8]
 800f8c6:	eb0c 010a 	add.w	r1, ip, sl
 800f8ca:	4456      	add	r6, sl
 800f8cc:	4455      	add	r5, sl
 800f8ce:	4454      	add	r4, sl
 800f8d0:	4450      	add	r0, sl
 800f8d2:	4452      	add	r2, sl
 800f8d4:	46c4      	mov	ip, r8
 800f8d6:	e001      	b.n	800f8dc <arm_radix8_butterfly_f32+0x334>
 800f8d8:	3f3504f3 	.word	0x3f3504f3
 800f8dc:	ed96 5a00 	vldr	s10, [r6]
 800f8e0:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f8e4:	ed11 6a01 	vldr	s12, [r1, #-4]
 800f8e8:	edd0 7a00 	vldr	s15, [r0]
 800f8ec:	ed17 7a01 	vldr	s14, [r7, #-4]
 800f8f0:	edde 3a00 	vldr	s7, [lr]
 800f8f4:	ed94 3a00 	vldr	s6, [r4]
 800f8f8:	ed95 2a00 	vldr	s4, [r5]
 800f8fc:	ed9e 0a01 	vldr	s0, [lr, #4]
 800f900:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f904:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f908:	ee33 4a29 	vadd.f32	s8, s6, s19
 800f90c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f910:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f914:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f918:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f91c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f920:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f924:	ed8e 6a00 	vstr	s12, [lr]
 800f928:	edd0 8a01 	vldr	s17, [r0, #4]
 800f92c:	ed95 9a01 	vldr	s18, [r5, #4]
 800f930:	edd1 2a00 	vldr	s5, [r1]
 800f934:	ed97 7a00 	vldr	s14, [r7]
 800f938:	edd4 0a01 	vldr	s1, [r4, #4]
 800f93c:	ed96 6a01 	vldr	s12, [r6, #4]
 800f940:	edd2 5a00 	vldr	s11, [r2]
 800f944:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f948:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f94c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f950:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800f954:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f958:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f95c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f960:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f964:	ee75 8a69 	vsub.f32	s17, s10, s19
 800f968:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f96c:	ee35 5a29 	vadd.f32	s10, s10, s19
 800f970:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f974:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f978:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800f97c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f980:	ee32 9a08 	vadd.f32	s18, s4, s16
 800f984:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f988:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f98c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f990:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f994:	ee32 1a87 	vadd.f32	s2, s5, s14
 800f998:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f99c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f9a0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f9a4:	ee73 0a29 	vadd.f32	s1, s6, s19
 800f9a8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f9ac:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f9b0:	ee32 7a64 	vsub.f32	s14, s4, s9
 800f9b4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800f9b8:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f9bc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f9c0:	ee75 8a85 	vadd.f32	s17, s11, s10
 800f9c4:	ee74 3a22 	vadd.f32	s7, s8, s5
 800f9c8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800f9cc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f9d0:	ee79 1a41 	vsub.f32	s3, s18, s2
 800f9d4:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800f9d8:	ee76 5a43 	vsub.f32	s11, s12, s6
 800f9dc:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f9e0:	ee72 4a24 	vadd.f32	s9, s4, s9
 800f9e4:	ee30 4a60 	vsub.f32	s8, s0, s1
 800f9e8:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800f9ec:	ee30 0a20 	vadd.f32	s0, s0, s1
 800f9f0:	ee77 9a85 	vadd.f32	s19, s15, s10
 800f9f4:	ee36 6a03 	vadd.f32	s12, s12, s6
 800f9f8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f9fc:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800fa00:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800fa04:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800fa08:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800fa0c:	ee39 1a01 	vadd.f32	s2, s18, s2
 800fa10:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800fa14:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800fa18:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800fa1c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800fa20:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800fa24:	ee35 3a03 	vadd.f32	s6, s10, s6
 800fa28:	ee72 6a66 	vsub.f32	s13, s4, s13
 800fa2c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800fa30:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800fa34:	ed9d 4a02 	vldr	s8, [sp, #8]
 800fa38:	ed8e 1a01 	vstr	s2, [lr, #4]
 800fa3c:	ee77 3a63 	vsub.f32	s7, s14, s7
 800fa40:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800fa44:	ed9d 7a01 	vldr	s14, [sp, #4]
 800fa48:	ed86 3a00 	vstr	s6, [r6]
 800fa4c:	ee30 9a89 	vadd.f32	s18, s1, s18
 800fa50:	ee32 2a05 	vadd.f32	s4, s4, s10
 800fa54:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800fa58:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800fa5c:	ee67 2a22 	vmul.f32	s5, s14, s5
 800fa60:	ee64 1a00 	vmul.f32	s3, s8, s0
 800fa64:	ee27 7a24 	vmul.f32	s14, s14, s9
 800fa68:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800fa6c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800fa70:	ee64 8a28 	vmul.f32	s17, s8, s17
 800fa74:	ed9d 4a00 	vldr	s8, [sp]
 800fa78:	edc6 6a01 	vstr	s13, [r6, #4]
 800fa7c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800fa80:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800fa84:	ee64 9a29 	vmul.f32	s19, s8, s19
 800fa88:	ee24 4a25 	vmul.f32	s8, s8, s11
 800fa8c:	ee30 7a87 	vadd.f32	s14, s1, s14
 800fa90:	ee74 4a84 	vadd.f32	s9, s9, s8
 800fa94:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800fa98:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800fa9c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800faa0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800faa4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800faa8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800faac:	ee75 1a21 	vadd.f32	s3, s10, s3
 800fab0:	ee30 0a68 	vsub.f32	s0, s0, s17
 800fab4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800fab8:	ee70 0a84 	vadd.f32	s1, s1, s8
 800fabc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800fac0:	44dc      	add	ip, fp
 800fac2:	45e1      	cmp	r9, ip
 800fac4:	ed84 9a00 	vstr	s18, [r4]
 800fac8:	edc4 3a01 	vstr	s7, [r4, #4]
 800facc:	449e      	add	lr, r3
 800face:	ed02 7a01 	vstr	s14, [r2, #-4]
 800fad2:	edc2 2a00 	vstr	s5, [r2]
 800fad6:	441e      	add	r6, r3
 800fad8:	ed85 2a00 	vstr	s4, [r5]
 800fadc:	ed85 8a01 	vstr	s16, [r5, #4]
 800fae0:	441c      	add	r4, r3
 800fae2:	ed47 1a01 	vstr	s3, [r7, #-4]
 800fae6:	ed87 0a00 	vstr	s0, [r7]
 800faea:	441a      	add	r2, r3
 800faec:	ed41 4a01 	vstr	s9, [r1, #-4]
 800faf0:	edc1 9a00 	vstr	s19, [r1]
 800faf4:	441d      	add	r5, r3
 800faf6:	edc0 0a00 	vstr	s1, [r0]
 800fafa:	441f      	add	r7, r3
 800fafc:	ed80 6a01 	vstr	s12, [r0, #4]
 800fb00:	4419      	add	r1, r3
 800fb02:	4418      	add	r0, r3
 800fb04:	f63f aeea 	bhi.w	800f8dc <arm_radix8_butterfly_f32+0x334>
 800fb08:	9a03      	ldr	r2, [sp, #12]
 800fb0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fb0c:	440a      	add	r2, r1
 800fb0e:	9203      	str	r2, [sp, #12]
 800fb10:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fb12:	9a05      	ldr	r2, [sp, #20]
 800fb14:	440a      	add	r2, r1
 800fb16:	9205      	str	r2, [sp, #20]
 800fb18:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fb1a:	9a04      	ldr	r2, [sp, #16]
 800fb1c:	440a      	add	r2, r1
 800fb1e:	9204      	str	r2, [sp, #16]
 800fb20:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fb22:	9a06      	ldr	r2, [sp, #24]
 800fb24:	440a      	add	r2, r1
 800fb26:	9206      	str	r2, [sp, #24]
 800fb28:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb2c:	440a      	add	r2, r1
 800fb2e:	9209      	str	r2, [sp, #36]	; 0x24
 800fb30:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fb32:	9a08      	ldr	r2, [sp, #32]
 800fb34:	440a      	add	r2, r1
 800fb36:	9208      	str	r2, [sp, #32]
 800fb38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fb3a:	9a07      	ldr	r2, [sp, #28]
 800fb3c:	440a      	add	r2, r1
 800fb3e:	9207      	str	r2, [sp, #28]
 800fb40:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fb42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb44:	f108 0801 	add.w	r8, r8, #1
 800fb48:	3208      	adds	r2, #8
 800fb4a:	4588      	cmp	r8, r1
 800fb4c:	920a      	str	r2, [sp, #40]	; 0x28
 800fb4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb50:	f47f ae75 	bne.w	800f83e <arm_radix8_butterfly_f32+0x296>
 800fb54:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	46c3      	mov	fp, r8
 800fb5c:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800fb60:	e532      	b.n	800f5c8 <arm_radix8_butterfly_f32+0x20>
 800fb62:	b01d      	add	sp, #116	; 0x74
 800fb64:	ecbd 8b10 	vpop	{d8-d15}
 800fb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb6c <__errno>:
 800fb6c:	4b01      	ldr	r3, [pc, #4]	; (800fb74 <__errno+0x8>)
 800fb6e:	6818      	ldr	r0, [r3, #0]
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	2000018c 	.word	0x2000018c

0800fb78 <__libc_init_array>:
 800fb78:	b570      	push	{r4, r5, r6, lr}
 800fb7a:	4e0d      	ldr	r6, [pc, #52]	; (800fbb0 <__libc_init_array+0x38>)
 800fb7c:	4c0d      	ldr	r4, [pc, #52]	; (800fbb4 <__libc_init_array+0x3c>)
 800fb7e:	1ba4      	subs	r4, r4, r6
 800fb80:	10a4      	asrs	r4, r4, #2
 800fb82:	2500      	movs	r5, #0
 800fb84:	42a5      	cmp	r5, r4
 800fb86:	d109      	bne.n	800fb9c <__libc_init_array+0x24>
 800fb88:	4e0b      	ldr	r6, [pc, #44]	; (800fbb8 <__libc_init_array+0x40>)
 800fb8a:	4c0c      	ldr	r4, [pc, #48]	; (800fbbc <__libc_init_array+0x44>)
 800fb8c:	f000 fc28 	bl	80103e0 <_init>
 800fb90:	1ba4      	subs	r4, r4, r6
 800fb92:	10a4      	asrs	r4, r4, #2
 800fb94:	2500      	movs	r5, #0
 800fb96:	42a5      	cmp	r5, r4
 800fb98:	d105      	bne.n	800fba6 <__libc_init_array+0x2e>
 800fb9a:	bd70      	pop	{r4, r5, r6, pc}
 800fb9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fba0:	4798      	blx	r3
 800fba2:	3501      	adds	r5, #1
 800fba4:	e7ee      	b.n	800fb84 <__libc_init_array+0xc>
 800fba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fbaa:	4798      	blx	r3
 800fbac:	3501      	adds	r5, #1
 800fbae:	e7f2      	b.n	800fb96 <__libc_init_array+0x1e>
 800fbb0:	08035850 	.word	0x08035850
 800fbb4:	08035850 	.word	0x08035850
 800fbb8:	08035850 	.word	0x08035850
 800fbbc:	08035854 	.word	0x08035854

0800fbc0 <memcpy>:
 800fbc0:	b510      	push	{r4, lr}
 800fbc2:	1e43      	subs	r3, r0, #1
 800fbc4:	440a      	add	r2, r1
 800fbc6:	4291      	cmp	r1, r2
 800fbc8:	d100      	bne.n	800fbcc <memcpy+0xc>
 800fbca:	bd10      	pop	{r4, pc}
 800fbcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbd4:	e7f7      	b.n	800fbc6 <memcpy+0x6>

0800fbd6 <memset>:
 800fbd6:	4402      	add	r2, r0
 800fbd8:	4603      	mov	r3, r0
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d100      	bne.n	800fbe0 <memset+0xa>
 800fbde:	4770      	bx	lr
 800fbe0:	f803 1b01 	strb.w	r1, [r3], #1
 800fbe4:	e7f9      	b.n	800fbda <memset+0x4>
	...

0800fbe8 <siprintf>:
 800fbe8:	b40e      	push	{r1, r2, r3}
 800fbea:	b500      	push	{lr}
 800fbec:	b09c      	sub	sp, #112	; 0x70
 800fbee:	ab1d      	add	r3, sp, #116	; 0x74
 800fbf0:	9002      	str	r0, [sp, #8]
 800fbf2:	9006      	str	r0, [sp, #24]
 800fbf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fbf8:	4809      	ldr	r0, [pc, #36]	; (800fc20 <siprintf+0x38>)
 800fbfa:	9107      	str	r1, [sp, #28]
 800fbfc:	9104      	str	r1, [sp, #16]
 800fbfe:	4909      	ldr	r1, [pc, #36]	; (800fc24 <siprintf+0x3c>)
 800fc00:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc04:	9105      	str	r1, [sp, #20]
 800fc06:	6800      	ldr	r0, [r0, #0]
 800fc08:	9301      	str	r3, [sp, #4]
 800fc0a:	a902      	add	r1, sp, #8
 800fc0c:	f000 f866 	bl	800fcdc <_svfiprintf_r>
 800fc10:	9b02      	ldr	r3, [sp, #8]
 800fc12:	2200      	movs	r2, #0
 800fc14:	701a      	strb	r2, [r3, #0]
 800fc16:	b01c      	add	sp, #112	; 0x70
 800fc18:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc1c:	b003      	add	sp, #12
 800fc1e:	4770      	bx	lr
 800fc20:	2000018c 	.word	0x2000018c
 800fc24:	ffff0208 	.word	0xffff0208

0800fc28 <__ssputs_r>:
 800fc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc2c:	688e      	ldr	r6, [r1, #8]
 800fc2e:	429e      	cmp	r6, r3
 800fc30:	4682      	mov	sl, r0
 800fc32:	460c      	mov	r4, r1
 800fc34:	4690      	mov	r8, r2
 800fc36:	4699      	mov	r9, r3
 800fc38:	d837      	bhi.n	800fcaa <__ssputs_r+0x82>
 800fc3a:	898a      	ldrh	r2, [r1, #12]
 800fc3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc40:	d031      	beq.n	800fca6 <__ssputs_r+0x7e>
 800fc42:	6825      	ldr	r5, [r4, #0]
 800fc44:	6909      	ldr	r1, [r1, #16]
 800fc46:	1a6f      	subs	r7, r5, r1
 800fc48:	6965      	ldr	r5, [r4, #20]
 800fc4a:	2302      	movs	r3, #2
 800fc4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc50:	fb95 f5f3 	sdiv	r5, r5, r3
 800fc54:	f109 0301 	add.w	r3, r9, #1
 800fc58:	443b      	add	r3, r7
 800fc5a:	429d      	cmp	r5, r3
 800fc5c:	bf38      	it	cc
 800fc5e:	461d      	movcc	r5, r3
 800fc60:	0553      	lsls	r3, r2, #21
 800fc62:	d530      	bpl.n	800fcc6 <__ssputs_r+0x9e>
 800fc64:	4629      	mov	r1, r5
 800fc66:	f000 fb21 	bl	80102ac <_malloc_r>
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	b950      	cbnz	r0, 800fc84 <__ssputs_r+0x5c>
 800fc6e:	230c      	movs	r3, #12
 800fc70:	f8ca 3000 	str.w	r3, [sl]
 800fc74:	89a3      	ldrh	r3, [r4, #12]
 800fc76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc7a:	81a3      	strh	r3, [r4, #12]
 800fc7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc84:	463a      	mov	r2, r7
 800fc86:	6921      	ldr	r1, [r4, #16]
 800fc88:	f7ff ff9a 	bl	800fbc0 <memcpy>
 800fc8c:	89a3      	ldrh	r3, [r4, #12]
 800fc8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc96:	81a3      	strh	r3, [r4, #12]
 800fc98:	6126      	str	r6, [r4, #16]
 800fc9a:	6165      	str	r5, [r4, #20]
 800fc9c:	443e      	add	r6, r7
 800fc9e:	1bed      	subs	r5, r5, r7
 800fca0:	6026      	str	r6, [r4, #0]
 800fca2:	60a5      	str	r5, [r4, #8]
 800fca4:	464e      	mov	r6, r9
 800fca6:	454e      	cmp	r6, r9
 800fca8:	d900      	bls.n	800fcac <__ssputs_r+0x84>
 800fcaa:	464e      	mov	r6, r9
 800fcac:	4632      	mov	r2, r6
 800fcae:	4641      	mov	r1, r8
 800fcb0:	6820      	ldr	r0, [r4, #0]
 800fcb2:	f000 fa93 	bl	80101dc <memmove>
 800fcb6:	68a3      	ldr	r3, [r4, #8]
 800fcb8:	1b9b      	subs	r3, r3, r6
 800fcba:	60a3      	str	r3, [r4, #8]
 800fcbc:	6823      	ldr	r3, [r4, #0]
 800fcbe:	441e      	add	r6, r3
 800fcc0:	6026      	str	r6, [r4, #0]
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	e7dc      	b.n	800fc80 <__ssputs_r+0x58>
 800fcc6:	462a      	mov	r2, r5
 800fcc8:	f000 fb4a 	bl	8010360 <_realloc_r>
 800fccc:	4606      	mov	r6, r0
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	d1e2      	bne.n	800fc98 <__ssputs_r+0x70>
 800fcd2:	6921      	ldr	r1, [r4, #16]
 800fcd4:	4650      	mov	r0, sl
 800fcd6:	f000 fa9b 	bl	8010210 <_free_r>
 800fcda:	e7c8      	b.n	800fc6e <__ssputs_r+0x46>

0800fcdc <_svfiprintf_r>:
 800fcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce0:	461d      	mov	r5, r3
 800fce2:	898b      	ldrh	r3, [r1, #12]
 800fce4:	061f      	lsls	r7, r3, #24
 800fce6:	b09d      	sub	sp, #116	; 0x74
 800fce8:	4680      	mov	r8, r0
 800fcea:	460c      	mov	r4, r1
 800fcec:	4616      	mov	r6, r2
 800fcee:	d50f      	bpl.n	800fd10 <_svfiprintf_r+0x34>
 800fcf0:	690b      	ldr	r3, [r1, #16]
 800fcf2:	b96b      	cbnz	r3, 800fd10 <_svfiprintf_r+0x34>
 800fcf4:	2140      	movs	r1, #64	; 0x40
 800fcf6:	f000 fad9 	bl	80102ac <_malloc_r>
 800fcfa:	6020      	str	r0, [r4, #0]
 800fcfc:	6120      	str	r0, [r4, #16]
 800fcfe:	b928      	cbnz	r0, 800fd0c <_svfiprintf_r+0x30>
 800fd00:	230c      	movs	r3, #12
 800fd02:	f8c8 3000 	str.w	r3, [r8]
 800fd06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd0a:	e0c8      	b.n	800fe9e <_svfiprintf_r+0x1c2>
 800fd0c:	2340      	movs	r3, #64	; 0x40
 800fd0e:	6163      	str	r3, [r4, #20]
 800fd10:	2300      	movs	r3, #0
 800fd12:	9309      	str	r3, [sp, #36]	; 0x24
 800fd14:	2320      	movs	r3, #32
 800fd16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd1a:	2330      	movs	r3, #48	; 0x30
 800fd1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd20:	9503      	str	r5, [sp, #12]
 800fd22:	f04f 0b01 	mov.w	fp, #1
 800fd26:	4637      	mov	r7, r6
 800fd28:	463d      	mov	r5, r7
 800fd2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fd2e:	b10b      	cbz	r3, 800fd34 <_svfiprintf_r+0x58>
 800fd30:	2b25      	cmp	r3, #37	; 0x25
 800fd32:	d13e      	bne.n	800fdb2 <_svfiprintf_r+0xd6>
 800fd34:	ebb7 0a06 	subs.w	sl, r7, r6
 800fd38:	d00b      	beq.n	800fd52 <_svfiprintf_r+0x76>
 800fd3a:	4653      	mov	r3, sl
 800fd3c:	4632      	mov	r2, r6
 800fd3e:	4621      	mov	r1, r4
 800fd40:	4640      	mov	r0, r8
 800fd42:	f7ff ff71 	bl	800fc28 <__ssputs_r>
 800fd46:	3001      	adds	r0, #1
 800fd48:	f000 80a4 	beq.w	800fe94 <_svfiprintf_r+0x1b8>
 800fd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd4e:	4453      	add	r3, sl
 800fd50:	9309      	str	r3, [sp, #36]	; 0x24
 800fd52:	783b      	ldrb	r3, [r7, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f000 809d 	beq.w	800fe94 <_svfiprintf_r+0x1b8>
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd64:	9304      	str	r3, [sp, #16]
 800fd66:	9307      	str	r3, [sp, #28]
 800fd68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd6c:	931a      	str	r3, [sp, #104]	; 0x68
 800fd6e:	462f      	mov	r7, r5
 800fd70:	2205      	movs	r2, #5
 800fd72:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fd76:	4850      	ldr	r0, [pc, #320]	; (800feb8 <_svfiprintf_r+0x1dc>)
 800fd78:	f7f0 faa2 	bl	80002c0 <memchr>
 800fd7c:	9b04      	ldr	r3, [sp, #16]
 800fd7e:	b9d0      	cbnz	r0, 800fdb6 <_svfiprintf_r+0xda>
 800fd80:	06d9      	lsls	r1, r3, #27
 800fd82:	bf44      	itt	mi
 800fd84:	2220      	movmi	r2, #32
 800fd86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fd8a:	071a      	lsls	r2, r3, #28
 800fd8c:	bf44      	itt	mi
 800fd8e:	222b      	movmi	r2, #43	; 0x2b
 800fd90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fd94:	782a      	ldrb	r2, [r5, #0]
 800fd96:	2a2a      	cmp	r2, #42	; 0x2a
 800fd98:	d015      	beq.n	800fdc6 <_svfiprintf_r+0xea>
 800fd9a:	9a07      	ldr	r2, [sp, #28]
 800fd9c:	462f      	mov	r7, r5
 800fd9e:	2000      	movs	r0, #0
 800fda0:	250a      	movs	r5, #10
 800fda2:	4639      	mov	r1, r7
 800fda4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fda8:	3b30      	subs	r3, #48	; 0x30
 800fdaa:	2b09      	cmp	r3, #9
 800fdac:	d94d      	bls.n	800fe4a <_svfiprintf_r+0x16e>
 800fdae:	b1b8      	cbz	r0, 800fde0 <_svfiprintf_r+0x104>
 800fdb0:	e00f      	b.n	800fdd2 <_svfiprintf_r+0xf6>
 800fdb2:	462f      	mov	r7, r5
 800fdb4:	e7b8      	b.n	800fd28 <_svfiprintf_r+0x4c>
 800fdb6:	4a40      	ldr	r2, [pc, #256]	; (800feb8 <_svfiprintf_r+0x1dc>)
 800fdb8:	1a80      	subs	r0, r0, r2
 800fdba:	fa0b f000 	lsl.w	r0, fp, r0
 800fdbe:	4318      	orrs	r0, r3
 800fdc0:	9004      	str	r0, [sp, #16]
 800fdc2:	463d      	mov	r5, r7
 800fdc4:	e7d3      	b.n	800fd6e <_svfiprintf_r+0x92>
 800fdc6:	9a03      	ldr	r2, [sp, #12]
 800fdc8:	1d11      	adds	r1, r2, #4
 800fdca:	6812      	ldr	r2, [r2, #0]
 800fdcc:	9103      	str	r1, [sp, #12]
 800fdce:	2a00      	cmp	r2, #0
 800fdd0:	db01      	blt.n	800fdd6 <_svfiprintf_r+0xfa>
 800fdd2:	9207      	str	r2, [sp, #28]
 800fdd4:	e004      	b.n	800fde0 <_svfiprintf_r+0x104>
 800fdd6:	4252      	negs	r2, r2
 800fdd8:	f043 0302 	orr.w	r3, r3, #2
 800fddc:	9207      	str	r2, [sp, #28]
 800fdde:	9304      	str	r3, [sp, #16]
 800fde0:	783b      	ldrb	r3, [r7, #0]
 800fde2:	2b2e      	cmp	r3, #46	; 0x2e
 800fde4:	d10c      	bne.n	800fe00 <_svfiprintf_r+0x124>
 800fde6:	787b      	ldrb	r3, [r7, #1]
 800fde8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdea:	d133      	bne.n	800fe54 <_svfiprintf_r+0x178>
 800fdec:	9b03      	ldr	r3, [sp, #12]
 800fdee:	1d1a      	adds	r2, r3, #4
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	9203      	str	r2, [sp, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	bfb8      	it	lt
 800fdf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fdfc:	3702      	adds	r7, #2
 800fdfe:	9305      	str	r3, [sp, #20]
 800fe00:	4d2e      	ldr	r5, [pc, #184]	; (800febc <_svfiprintf_r+0x1e0>)
 800fe02:	7839      	ldrb	r1, [r7, #0]
 800fe04:	2203      	movs	r2, #3
 800fe06:	4628      	mov	r0, r5
 800fe08:	f7f0 fa5a 	bl	80002c0 <memchr>
 800fe0c:	b138      	cbz	r0, 800fe1e <_svfiprintf_r+0x142>
 800fe0e:	2340      	movs	r3, #64	; 0x40
 800fe10:	1b40      	subs	r0, r0, r5
 800fe12:	fa03 f000 	lsl.w	r0, r3, r0
 800fe16:	9b04      	ldr	r3, [sp, #16]
 800fe18:	4303      	orrs	r3, r0
 800fe1a:	3701      	adds	r7, #1
 800fe1c:	9304      	str	r3, [sp, #16]
 800fe1e:	7839      	ldrb	r1, [r7, #0]
 800fe20:	4827      	ldr	r0, [pc, #156]	; (800fec0 <_svfiprintf_r+0x1e4>)
 800fe22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe26:	2206      	movs	r2, #6
 800fe28:	1c7e      	adds	r6, r7, #1
 800fe2a:	f7f0 fa49 	bl	80002c0 <memchr>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d038      	beq.n	800fea4 <_svfiprintf_r+0x1c8>
 800fe32:	4b24      	ldr	r3, [pc, #144]	; (800fec4 <_svfiprintf_r+0x1e8>)
 800fe34:	bb13      	cbnz	r3, 800fe7c <_svfiprintf_r+0x1a0>
 800fe36:	9b03      	ldr	r3, [sp, #12]
 800fe38:	3307      	adds	r3, #7
 800fe3a:	f023 0307 	bic.w	r3, r3, #7
 800fe3e:	3308      	adds	r3, #8
 800fe40:	9303      	str	r3, [sp, #12]
 800fe42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe44:	444b      	add	r3, r9
 800fe46:	9309      	str	r3, [sp, #36]	; 0x24
 800fe48:	e76d      	b.n	800fd26 <_svfiprintf_r+0x4a>
 800fe4a:	fb05 3202 	mla	r2, r5, r2, r3
 800fe4e:	2001      	movs	r0, #1
 800fe50:	460f      	mov	r7, r1
 800fe52:	e7a6      	b.n	800fda2 <_svfiprintf_r+0xc6>
 800fe54:	2300      	movs	r3, #0
 800fe56:	3701      	adds	r7, #1
 800fe58:	9305      	str	r3, [sp, #20]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	250a      	movs	r5, #10
 800fe5e:	4638      	mov	r0, r7
 800fe60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe64:	3a30      	subs	r2, #48	; 0x30
 800fe66:	2a09      	cmp	r2, #9
 800fe68:	d903      	bls.n	800fe72 <_svfiprintf_r+0x196>
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d0c8      	beq.n	800fe00 <_svfiprintf_r+0x124>
 800fe6e:	9105      	str	r1, [sp, #20]
 800fe70:	e7c6      	b.n	800fe00 <_svfiprintf_r+0x124>
 800fe72:	fb05 2101 	mla	r1, r5, r1, r2
 800fe76:	2301      	movs	r3, #1
 800fe78:	4607      	mov	r7, r0
 800fe7a:	e7f0      	b.n	800fe5e <_svfiprintf_r+0x182>
 800fe7c:	ab03      	add	r3, sp, #12
 800fe7e:	9300      	str	r3, [sp, #0]
 800fe80:	4622      	mov	r2, r4
 800fe82:	4b11      	ldr	r3, [pc, #68]	; (800fec8 <_svfiprintf_r+0x1ec>)
 800fe84:	a904      	add	r1, sp, #16
 800fe86:	4640      	mov	r0, r8
 800fe88:	f3af 8000 	nop.w
 800fe8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800fe90:	4681      	mov	r9, r0
 800fe92:	d1d6      	bne.n	800fe42 <_svfiprintf_r+0x166>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	065b      	lsls	r3, r3, #25
 800fe98:	f53f af35 	bmi.w	800fd06 <_svfiprintf_r+0x2a>
 800fe9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe9e:	b01d      	add	sp, #116	; 0x74
 800fea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea4:	ab03      	add	r3, sp, #12
 800fea6:	9300      	str	r3, [sp, #0]
 800fea8:	4622      	mov	r2, r4
 800feaa:	4b07      	ldr	r3, [pc, #28]	; (800fec8 <_svfiprintf_r+0x1ec>)
 800feac:	a904      	add	r1, sp, #16
 800feae:	4640      	mov	r0, r8
 800feb0:	f000 f882 	bl	800ffb8 <_printf_i>
 800feb4:	e7ea      	b.n	800fe8c <_svfiprintf_r+0x1b0>
 800feb6:	bf00      	nop
 800feb8:	08035814 	.word	0x08035814
 800febc:	0803581a 	.word	0x0803581a
 800fec0:	0803581e 	.word	0x0803581e
 800fec4:	00000000 	.word	0x00000000
 800fec8:	0800fc29 	.word	0x0800fc29

0800fecc <_printf_common>:
 800fecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fed0:	4691      	mov	r9, r2
 800fed2:	461f      	mov	r7, r3
 800fed4:	688a      	ldr	r2, [r1, #8]
 800fed6:	690b      	ldr	r3, [r1, #16]
 800fed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fedc:	4293      	cmp	r3, r2
 800fede:	bfb8      	it	lt
 800fee0:	4613      	movlt	r3, r2
 800fee2:	f8c9 3000 	str.w	r3, [r9]
 800fee6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800feea:	4606      	mov	r6, r0
 800feec:	460c      	mov	r4, r1
 800feee:	b112      	cbz	r2, 800fef6 <_printf_common+0x2a>
 800fef0:	3301      	adds	r3, #1
 800fef2:	f8c9 3000 	str.w	r3, [r9]
 800fef6:	6823      	ldr	r3, [r4, #0]
 800fef8:	0699      	lsls	r1, r3, #26
 800fefa:	bf42      	ittt	mi
 800fefc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ff00:	3302      	addmi	r3, #2
 800ff02:	f8c9 3000 	strmi.w	r3, [r9]
 800ff06:	6825      	ldr	r5, [r4, #0]
 800ff08:	f015 0506 	ands.w	r5, r5, #6
 800ff0c:	d107      	bne.n	800ff1e <_printf_common+0x52>
 800ff0e:	f104 0a19 	add.w	sl, r4, #25
 800ff12:	68e3      	ldr	r3, [r4, #12]
 800ff14:	f8d9 2000 	ldr.w	r2, [r9]
 800ff18:	1a9b      	subs	r3, r3, r2
 800ff1a:	42ab      	cmp	r3, r5
 800ff1c:	dc28      	bgt.n	800ff70 <_printf_common+0xa4>
 800ff1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ff22:	6822      	ldr	r2, [r4, #0]
 800ff24:	3300      	adds	r3, #0
 800ff26:	bf18      	it	ne
 800ff28:	2301      	movne	r3, #1
 800ff2a:	0692      	lsls	r2, r2, #26
 800ff2c:	d42d      	bmi.n	800ff8a <_printf_common+0xbe>
 800ff2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff32:	4639      	mov	r1, r7
 800ff34:	4630      	mov	r0, r6
 800ff36:	47c0      	blx	r8
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d020      	beq.n	800ff7e <_printf_common+0xb2>
 800ff3c:	6823      	ldr	r3, [r4, #0]
 800ff3e:	68e5      	ldr	r5, [r4, #12]
 800ff40:	f8d9 2000 	ldr.w	r2, [r9]
 800ff44:	f003 0306 	and.w	r3, r3, #6
 800ff48:	2b04      	cmp	r3, #4
 800ff4a:	bf08      	it	eq
 800ff4c:	1aad      	subeq	r5, r5, r2
 800ff4e:	68a3      	ldr	r3, [r4, #8]
 800ff50:	6922      	ldr	r2, [r4, #16]
 800ff52:	bf0c      	ite	eq
 800ff54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff58:	2500      	movne	r5, #0
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	bfc4      	itt	gt
 800ff5e:	1a9b      	subgt	r3, r3, r2
 800ff60:	18ed      	addgt	r5, r5, r3
 800ff62:	f04f 0900 	mov.w	r9, #0
 800ff66:	341a      	adds	r4, #26
 800ff68:	454d      	cmp	r5, r9
 800ff6a:	d11a      	bne.n	800ffa2 <_printf_common+0xd6>
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	e008      	b.n	800ff82 <_printf_common+0xb6>
 800ff70:	2301      	movs	r3, #1
 800ff72:	4652      	mov	r2, sl
 800ff74:	4639      	mov	r1, r7
 800ff76:	4630      	mov	r0, r6
 800ff78:	47c0      	blx	r8
 800ff7a:	3001      	adds	r0, #1
 800ff7c:	d103      	bne.n	800ff86 <_printf_common+0xba>
 800ff7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff86:	3501      	adds	r5, #1
 800ff88:	e7c3      	b.n	800ff12 <_printf_common+0x46>
 800ff8a:	18e1      	adds	r1, r4, r3
 800ff8c:	1c5a      	adds	r2, r3, #1
 800ff8e:	2030      	movs	r0, #48	; 0x30
 800ff90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff94:	4422      	add	r2, r4
 800ff96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff9e:	3302      	adds	r3, #2
 800ffa0:	e7c5      	b.n	800ff2e <_printf_common+0x62>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	4622      	mov	r2, r4
 800ffa6:	4639      	mov	r1, r7
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	47c0      	blx	r8
 800ffac:	3001      	adds	r0, #1
 800ffae:	d0e6      	beq.n	800ff7e <_printf_common+0xb2>
 800ffb0:	f109 0901 	add.w	r9, r9, #1
 800ffb4:	e7d8      	b.n	800ff68 <_printf_common+0x9c>
	...

0800ffb8 <_printf_i>:
 800ffb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ffc0:	460c      	mov	r4, r1
 800ffc2:	7e09      	ldrb	r1, [r1, #24]
 800ffc4:	b085      	sub	sp, #20
 800ffc6:	296e      	cmp	r1, #110	; 0x6e
 800ffc8:	4617      	mov	r7, r2
 800ffca:	4606      	mov	r6, r0
 800ffcc:	4698      	mov	r8, r3
 800ffce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffd0:	f000 80b3 	beq.w	801013a <_printf_i+0x182>
 800ffd4:	d822      	bhi.n	801001c <_printf_i+0x64>
 800ffd6:	2963      	cmp	r1, #99	; 0x63
 800ffd8:	d036      	beq.n	8010048 <_printf_i+0x90>
 800ffda:	d80a      	bhi.n	800fff2 <_printf_i+0x3a>
 800ffdc:	2900      	cmp	r1, #0
 800ffde:	f000 80b9 	beq.w	8010154 <_printf_i+0x19c>
 800ffe2:	2958      	cmp	r1, #88	; 0x58
 800ffe4:	f000 8083 	beq.w	80100ee <_printf_i+0x136>
 800ffe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fff0:	e032      	b.n	8010058 <_printf_i+0xa0>
 800fff2:	2964      	cmp	r1, #100	; 0x64
 800fff4:	d001      	beq.n	800fffa <_printf_i+0x42>
 800fff6:	2969      	cmp	r1, #105	; 0x69
 800fff8:	d1f6      	bne.n	800ffe8 <_printf_i+0x30>
 800fffa:	6820      	ldr	r0, [r4, #0]
 800fffc:	6813      	ldr	r3, [r2, #0]
 800fffe:	0605      	lsls	r5, r0, #24
 8010000:	f103 0104 	add.w	r1, r3, #4
 8010004:	d52a      	bpl.n	801005c <_printf_i+0xa4>
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6011      	str	r1, [r2, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	da03      	bge.n	8010016 <_printf_i+0x5e>
 801000e:	222d      	movs	r2, #45	; 0x2d
 8010010:	425b      	negs	r3, r3
 8010012:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010016:	486f      	ldr	r0, [pc, #444]	; (80101d4 <_printf_i+0x21c>)
 8010018:	220a      	movs	r2, #10
 801001a:	e039      	b.n	8010090 <_printf_i+0xd8>
 801001c:	2973      	cmp	r1, #115	; 0x73
 801001e:	f000 809d 	beq.w	801015c <_printf_i+0x1a4>
 8010022:	d808      	bhi.n	8010036 <_printf_i+0x7e>
 8010024:	296f      	cmp	r1, #111	; 0x6f
 8010026:	d020      	beq.n	801006a <_printf_i+0xb2>
 8010028:	2970      	cmp	r1, #112	; 0x70
 801002a:	d1dd      	bne.n	800ffe8 <_printf_i+0x30>
 801002c:	6823      	ldr	r3, [r4, #0]
 801002e:	f043 0320 	orr.w	r3, r3, #32
 8010032:	6023      	str	r3, [r4, #0]
 8010034:	e003      	b.n	801003e <_printf_i+0x86>
 8010036:	2975      	cmp	r1, #117	; 0x75
 8010038:	d017      	beq.n	801006a <_printf_i+0xb2>
 801003a:	2978      	cmp	r1, #120	; 0x78
 801003c:	d1d4      	bne.n	800ffe8 <_printf_i+0x30>
 801003e:	2378      	movs	r3, #120	; 0x78
 8010040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010044:	4864      	ldr	r0, [pc, #400]	; (80101d8 <_printf_i+0x220>)
 8010046:	e055      	b.n	80100f4 <_printf_i+0x13c>
 8010048:	6813      	ldr	r3, [r2, #0]
 801004a:	1d19      	adds	r1, r3, #4
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	6011      	str	r1, [r2, #0]
 8010050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010058:	2301      	movs	r3, #1
 801005a:	e08c      	b.n	8010176 <_printf_i+0x1be>
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	6011      	str	r1, [r2, #0]
 8010060:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010064:	bf18      	it	ne
 8010066:	b21b      	sxthne	r3, r3
 8010068:	e7cf      	b.n	801000a <_printf_i+0x52>
 801006a:	6813      	ldr	r3, [r2, #0]
 801006c:	6825      	ldr	r5, [r4, #0]
 801006e:	1d18      	adds	r0, r3, #4
 8010070:	6010      	str	r0, [r2, #0]
 8010072:	0628      	lsls	r0, r5, #24
 8010074:	d501      	bpl.n	801007a <_printf_i+0xc2>
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	e002      	b.n	8010080 <_printf_i+0xc8>
 801007a:	0668      	lsls	r0, r5, #25
 801007c:	d5fb      	bpl.n	8010076 <_printf_i+0xbe>
 801007e:	881b      	ldrh	r3, [r3, #0]
 8010080:	4854      	ldr	r0, [pc, #336]	; (80101d4 <_printf_i+0x21c>)
 8010082:	296f      	cmp	r1, #111	; 0x6f
 8010084:	bf14      	ite	ne
 8010086:	220a      	movne	r2, #10
 8010088:	2208      	moveq	r2, #8
 801008a:	2100      	movs	r1, #0
 801008c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010090:	6865      	ldr	r5, [r4, #4]
 8010092:	60a5      	str	r5, [r4, #8]
 8010094:	2d00      	cmp	r5, #0
 8010096:	f2c0 8095 	blt.w	80101c4 <_printf_i+0x20c>
 801009a:	6821      	ldr	r1, [r4, #0]
 801009c:	f021 0104 	bic.w	r1, r1, #4
 80100a0:	6021      	str	r1, [r4, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d13d      	bne.n	8010122 <_printf_i+0x16a>
 80100a6:	2d00      	cmp	r5, #0
 80100a8:	f040 808e 	bne.w	80101c8 <_printf_i+0x210>
 80100ac:	4665      	mov	r5, ip
 80100ae:	2a08      	cmp	r2, #8
 80100b0:	d10b      	bne.n	80100ca <_printf_i+0x112>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	07db      	lsls	r3, r3, #31
 80100b6:	d508      	bpl.n	80100ca <_printf_i+0x112>
 80100b8:	6923      	ldr	r3, [r4, #16]
 80100ba:	6862      	ldr	r2, [r4, #4]
 80100bc:	429a      	cmp	r2, r3
 80100be:	bfde      	ittt	le
 80100c0:	2330      	movle	r3, #48	; 0x30
 80100c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80100ca:	ebac 0305 	sub.w	r3, ip, r5
 80100ce:	6123      	str	r3, [r4, #16]
 80100d0:	f8cd 8000 	str.w	r8, [sp]
 80100d4:	463b      	mov	r3, r7
 80100d6:	aa03      	add	r2, sp, #12
 80100d8:	4621      	mov	r1, r4
 80100da:	4630      	mov	r0, r6
 80100dc:	f7ff fef6 	bl	800fecc <_printf_common>
 80100e0:	3001      	adds	r0, #1
 80100e2:	d14d      	bne.n	8010180 <_printf_i+0x1c8>
 80100e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100e8:	b005      	add	sp, #20
 80100ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100ee:	4839      	ldr	r0, [pc, #228]	; (80101d4 <_printf_i+0x21c>)
 80100f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80100f4:	6813      	ldr	r3, [r2, #0]
 80100f6:	6821      	ldr	r1, [r4, #0]
 80100f8:	1d1d      	adds	r5, r3, #4
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	6015      	str	r5, [r2, #0]
 80100fe:	060a      	lsls	r2, r1, #24
 8010100:	d50b      	bpl.n	801011a <_printf_i+0x162>
 8010102:	07ca      	lsls	r2, r1, #31
 8010104:	bf44      	itt	mi
 8010106:	f041 0120 	orrmi.w	r1, r1, #32
 801010a:	6021      	strmi	r1, [r4, #0]
 801010c:	b91b      	cbnz	r3, 8010116 <_printf_i+0x15e>
 801010e:	6822      	ldr	r2, [r4, #0]
 8010110:	f022 0220 	bic.w	r2, r2, #32
 8010114:	6022      	str	r2, [r4, #0]
 8010116:	2210      	movs	r2, #16
 8010118:	e7b7      	b.n	801008a <_printf_i+0xd2>
 801011a:	064d      	lsls	r5, r1, #25
 801011c:	bf48      	it	mi
 801011e:	b29b      	uxthmi	r3, r3
 8010120:	e7ef      	b.n	8010102 <_printf_i+0x14a>
 8010122:	4665      	mov	r5, ip
 8010124:	fbb3 f1f2 	udiv	r1, r3, r2
 8010128:	fb02 3311 	mls	r3, r2, r1, r3
 801012c:	5cc3      	ldrb	r3, [r0, r3]
 801012e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010132:	460b      	mov	r3, r1
 8010134:	2900      	cmp	r1, #0
 8010136:	d1f5      	bne.n	8010124 <_printf_i+0x16c>
 8010138:	e7b9      	b.n	80100ae <_printf_i+0xf6>
 801013a:	6813      	ldr	r3, [r2, #0]
 801013c:	6825      	ldr	r5, [r4, #0]
 801013e:	6961      	ldr	r1, [r4, #20]
 8010140:	1d18      	adds	r0, r3, #4
 8010142:	6010      	str	r0, [r2, #0]
 8010144:	0628      	lsls	r0, r5, #24
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	d501      	bpl.n	801014e <_printf_i+0x196>
 801014a:	6019      	str	r1, [r3, #0]
 801014c:	e002      	b.n	8010154 <_printf_i+0x19c>
 801014e:	066a      	lsls	r2, r5, #25
 8010150:	d5fb      	bpl.n	801014a <_printf_i+0x192>
 8010152:	8019      	strh	r1, [r3, #0]
 8010154:	2300      	movs	r3, #0
 8010156:	6123      	str	r3, [r4, #16]
 8010158:	4665      	mov	r5, ip
 801015a:	e7b9      	b.n	80100d0 <_printf_i+0x118>
 801015c:	6813      	ldr	r3, [r2, #0]
 801015e:	1d19      	adds	r1, r3, #4
 8010160:	6011      	str	r1, [r2, #0]
 8010162:	681d      	ldr	r5, [r3, #0]
 8010164:	6862      	ldr	r2, [r4, #4]
 8010166:	2100      	movs	r1, #0
 8010168:	4628      	mov	r0, r5
 801016a:	f7f0 f8a9 	bl	80002c0 <memchr>
 801016e:	b108      	cbz	r0, 8010174 <_printf_i+0x1bc>
 8010170:	1b40      	subs	r0, r0, r5
 8010172:	6060      	str	r0, [r4, #4]
 8010174:	6863      	ldr	r3, [r4, #4]
 8010176:	6123      	str	r3, [r4, #16]
 8010178:	2300      	movs	r3, #0
 801017a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801017e:	e7a7      	b.n	80100d0 <_printf_i+0x118>
 8010180:	6923      	ldr	r3, [r4, #16]
 8010182:	462a      	mov	r2, r5
 8010184:	4639      	mov	r1, r7
 8010186:	4630      	mov	r0, r6
 8010188:	47c0      	blx	r8
 801018a:	3001      	adds	r0, #1
 801018c:	d0aa      	beq.n	80100e4 <_printf_i+0x12c>
 801018e:	6823      	ldr	r3, [r4, #0]
 8010190:	079b      	lsls	r3, r3, #30
 8010192:	d413      	bmi.n	80101bc <_printf_i+0x204>
 8010194:	68e0      	ldr	r0, [r4, #12]
 8010196:	9b03      	ldr	r3, [sp, #12]
 8010198:	4298      	cmp	r0, r3
 801019a:	bfb8      	it	lt
 801019c:	4618      	movlt	r0, r3
 801019e:	e7a3      	b.n	80100e8 <_printf_i+0x130>
 80101a0:	2301      	movs	r3, #1
 80101a2:	464a      	mov	r2, r9
 80101a4:	4639      	mov	r1, r7
 80101a6:	4630      	mov	r0, r6
 80101a8:	47c0      	blx	r8
 80101aa:	3001      	adds	r0, #1
 80101ac:	d09a      	beq.n	80100e4 <_printf_i+0x12c>
 80101ae:	3501      	adds	r5, #1
 80101b0:	68e3      	ldr	r3, [r4, #12]
 80101b2:	9a03      	ldr	r2, [sp, #12]
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	42ab      	cmp	r3, r5
 80101b8:	dcf2      	bgt.n	80101a0 <_printf_i+0x1e8>
 80101ba:	e7eb      	b.n	8010194 <_printf_i+0x1dc>
 80101bc:	2500      	movs	r5, #0
 80101be:	f104 0919 	add.w	r9, r4, #25
 80101c2:	e7f5      	b.n	80101b0 <_printf_i+0x1f8>
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1ac      	bne.n	8010122 <_printf_i+0x16a>
 80101c8:	7803      	ldrb	r3, [r0, #0]
 80101ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101d2:	e76c      	b.n	80100ae <_printf_i+0xf6>
 80101d4:	08035825 	.word	0x08035825
 80101d8:	08035836 	.word	0x08035836

080101dc <memmove>:
 80101dc:	4288      	cmp	r0, r1
 80101de:	b510      	push	{r4, lr}
 80101e0:	eb01 0302 	add.w	r3, r1, r2
 80101e4:	d807      	bhi.n	80101f6 <memmove+0x1a>
 80101e6:	1e42      	subs	r2, r0, #1
 80101e8:	4299      	cmp	r1, r3
 80101ea:	d00a      	beq.n	8010202 <memmove+0x26>
 80101ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80101f4:	e7f8      	b.n	80101e8 <memmove+0xc>
 80101f6:	4283      	cmp	r3, r0
 80101f8:	d9f5      	bls.n	80101e6 <memmove+0xa>
 80101fa:	1881      	adds	r1, r0, r2
 80101fc:	1ad2      	subs	r2, r2, r3
 80101fe:	42d3      	cmn	r3, r2
 8010200:	d100      	bne.n	8010204 <memmove+0x28>
 8010202:	bd10      	pop	{r4, pc}
 8010204:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010208:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801020c:	e7f7      	b.n	80101fe <memmove+0x22>
	...

08010210 <_free_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4605      	mov	r5, r0
 8010214:	2900      	cmp	r1, #0
 8010216:	d045      	beq.n	80102a4 <_free_r+0x94>
 8010218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801021c:	1f0c      	subs	r4, r1, #4
 801021e:	2b00      	cmp	r3, #0
 8010220:	bfb8      	it	lt
 8010222:	18e4      	addlt	r4, r4, r3
 8010224:	f000 f8d2 	bl	80103cc <__malloc_lock>
 8010228:	4a1f      	ldr	r2, [pc, #124]	; (80102a8 <_free_r+0x98>)
 801022a:	6813      	ldr	r3, [r2, #0]
 801022c:	4610      	mov	r0, r2
 801022e:	b933      	cbnz	r3, 801023e <_free_r+0x2e>
 8010230:	6063      	str	r3, [r4, #4]
 8010232:	6014      	str	r4, [r2, #0]
 8010234:	4628      	mov	r0, r5
 8010236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801023a:	f000 b8c8 	b.w	80103ce <__malloc_unlock>
 801023e:	42a3      	cmp	r3, r4
 8010240:	d90c      	bls.n	801025c <_free_r+0x4c>
 8010242:	6821      	ldr	r1, [r4, #0]
 8010244:	1862      	adds	r2, r4, r1
 8010246:	4293      	cmp	r3, r2
 8010248:	bf04      	itt	eq
 801024a:	681a      	ldreq	r2, [r3, #0]
 801024c:	685b      	ldreq	r3, [r3, #4]
 801024e:	6063      	str	r3, [r4, #4]
 8010250:	bf04      	itt	eq
 8010252:	1852      	addeq	r2, r2, r1
 8010254:	6022      	streq	r2, [r4, #0]
 8010256:	6004      	str	r4, [r0, #0]
 8010258:	e7ec      	b.n	8010234 <_free_r+0x24>
 801025a:	4613      	mov	r3, r2
 801025c:	685a      	ldr	r2, [r3, #4]
 801025e:	b10a      	cbz	r2, 8010264 <_free_r+0x54>
 8010260:	42a2      	cmp	r2, r4
 8010262:	d9fa      	bls.n	801025a <_free_r+0x4a>
 8010264:	6819      	ldr	r1, [r3, #0]
 8010266:	1858      	adds	r0, r3, r1
 8010268:	42a0      	cmp	r0, r4
 801026a:	d10b      	bne.n	8010284 <_free_r+0x74>
 801026c:	6820      	ldr	r0, [r4, #0]
 801026e:	4401      	add	r1, r0
 8010270:	1858      	adds	r0, r3, r1
 8010272:	4282      	cmp	r2, r0
 8010274:	6019      	str	r1, [r3, #0]
 8010276:	d1dd      	bne.n	8010234 <_free_r+0x24>
 8010278:	6810      	ldr	r0, [r2, #0]
 801027a:	6852      	ldr	r2, [r2, #4]
 801027c:	605a      	str	r2, [r3, #4]
 801027e:	4401      	add	r1, r0
 8010280:	6019      	str	r1, [r3, #0]
 8010282:	e7d7      	b.n	8010234 <_free_r+0x24>
 8010284:	d902      	bls.n	801028c <_free_r+0x7c>
 8010286:	230c      	movs	r3, #12
 8010288:	602b      	str	r3, [r5, #0]
 801028a:	e7d3      	b.n	8010234 <_free_r+0x24>
 801028c:	6820      	ldr	r0, [r4, #0]
 801028e:	1821      	adds	r1, r4, r0
 8010290:	428a      	cmp	r2, r1
 8010292:	bf04      	itt	eq
 8010294:	6811      	ldreq	r1, [r2, #0]
 8010296:	6852      	ldreq	r2, [r2, #4]
 8010298:	6062      	str	r2, [r4, #4]
 801029a:	bf04      	itt	eq
 801029c:	1809      	addeq	r1, r1, r0
 801029e:	6021      	streq	r1, [r4, #0]
 80102a0:	605c      	str	r4, [r3, #4]
 80102a2:	e7c7      	b.n	8010234 <_free_r+0x24>
 80102a4:	bd38      	pop	{r3, r4, r5, pc}
 80102a6:	bf00      	nop
 80102a8:	20000474 	.word	0x20000474

080102ac <_malloc_r>:
 80102ac:	b570      	push	{r4, r5, r6, lr}
 80102ae:	1ccd      	adds	r5, r1, #3
 80102b0:	f025 0503 	bic.w	r5, r5, #3
 80102b4:	3508      	adds	r5, #8
 80102b6:	2d0c      	cmp	r5, #12
 80102b8:	bf38      	it	cc
 80102ba:	250c      	movcc	r5, #12
 80102bc:	2d00      	cmp	r5, #0
 80102be:	4606      	mov	r6, r0
 80102c0:	db01      	blt.n	80102c6 <_malloc_r+0x1a>
 80102c2:	42a9      	cmp	r1, r5
 80102c4:	d903      	bls.n	80102ce <_malloc_r+0x22>
 80102c6:	230c      	movs	r3, #12
 80102c8:	6033      	str	r3, [r6, #0]
 80102ca:	2000      	movs	r0, #0
 80102cc:	bd70      	pop	{r4, r5, r6, pc}
 80102ce:	f000 f87d 	bl	80103cc <__malloc_lock>
 80102d2:	4a21      	ldr	r2, [pc, #132]	; (8010358 <_malloc_r+0xac>)
 80102d4:	6814      	ldr	r4, [r2, #0]
 80102d6:	4621      	mov	r1, r4
 80102d8:	b991      	cbnz	r1, 8010300 <_malloc_r+0x54>
 80102da:	4c20      	ldr	r4, [pc, #128]	; (801035c <_malloc_r+0xb0>)
 80102dc:	6823      	ldr	r3, [r4, #0]
 80102de:	b91b      	cbnz	r3, 80102e8 <_malloc_r+0x3c>
 80102e0:	4630      	mov	r0, r6
 80102e2:	f000 f863 	bl	80103ac <_sbrk_r>
 80102e6:	6020      	str	r0, [r4, #0]
 80102e8:	4629      	mov	r1, r5
 80102ea:	4630      	mov	r0, r6
 80102ec:	f000 f85e 	bl	80103ac <_sbrk_r>
 80102f0:	1c43      	adds	r3, r0, #1
 80102f2:	d124      	bne.n	801033e <_malloc_r+0x92>
 80102f4:	230c      	movs	r3, #12
 80102f6:	6033      	str	r3, [r6, #0]
 80102f8:	4630      	mov	r0, r6
 80102fa:	f000 f868 	bl	80103ce <__malloc_unlock>
 80102fe:	e7e4      	b.n	80102ca <_malloc_r+0x1e>
 8010300:	680b      	ldr	r3, [r1, #0]
 8010302:	1b5b      	subs	r3, r3, r5
 8010304:	d418      	bmi.n	8010338 <_malloc_r+0x8c>
 8010306:	2b0b      	cmp	r3, #11
 8010308:	d90f      	bls.n	801032a <_malloc_r+0x7e>
 801030a:	600b      	str	r3, [r1, #0]
 801030c:	50cd      	str	r5, [r1, r3]
 801030e:	18cc      	adds	r4, r1, r3
 8010310:	4630      	mov	r0, r6
 8010312:	f000 f85c 	bl	80103ce <__malloc_unlock>
 8010316:	f104 000b 	add.w	r0, r4, #11
 801031a:	1d23      	adds	r3, r4, #4
 801031c:	f020 0007 	bic.w	r0, r0, #7
 8010320:	1ac3      	subs	r3, r0, r3
 8010322:	d0d3      	beq.n	80102cc <_malloc_r+0x20>
 8010324:	425a      	negs	r2, r3
 8010326:	50e2      	str	r2, [r4, r3]
 8010328:	e7d0      	b.n	80102cc <_malloc_r+0x20>
 801032a:	428c      	cmp	r4, r1
 801032c:	684b      	ldr	r3, [r1, #4]
 801032e:	bf16      	itet	ne
 8010330:	6063      	strne	r3, [r4, #4]
 8010332:	6013      	streq	r3, [r2, #0]
 8010334:	460c      	movne	r4, r1
 8010336:	e7eb      	b.n	8010310 <_malloc_r+0x64>
 8010338:	460c      	mov	r4, r1
 801033a:	6849      	ldr	r1, [r1, #4]
 801033c:	e7cc      	b.n	80102d8 <_malloc_r+0x2c>
 801033e:	1cc4      	adds	r4, r0, #3
 8010340:	f024 0403 	bic.w	r4, r4, #3
 8010344:	42a0      	cmp	r0, r4
 8010346:	d005      	beq.n	8010354 <_malloc_r+0xa8>
 8010348:	1a21      	subs	r1, r4, r0
 801034a:	4630      	mov	r0, r6
 801034c:	f000 f82e 	bl	80103ac <_sbrk_r>
 8010350:	3001      	adds	r0, #1
 8010352:	d0cf      	beq.n	80102f4 <_malloc_r+0x48>
 8010354:	6025      	str	r5, [r4, #0]
 8010356:	e7db      	b.n	8010310 <_malloc_r+0x64>
 8010358:	20000474 	.word	0x20000474
 801035c:	20000478 	.word	0x20000478

08010360 <_realloc_r>:
 8010360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010362:	4607      	mov	r7, r0
 8010364:	4614      	mov	r4, r2
 8010366:	460e      	mov	r6, r1
 8010368:	b921      	cbnz	r1, 8010374 <_realloc_r+0x14>
 801036a:	4611      	mov	r1, r2
 801036c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010370:	f7ff bf9c 	b.w	80102ac <_malloc_r>
 8010374:	b922      	cbnz	r2, 8010380 <_realloc_r+0x20>
 8010376:	f7ff ff4b 	bl	8010210 <_free_r>
 801037a:	4625      	mov	r5, r4
 801037c:	4628      	mov	r0, r5
 801037e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010380:	f000 f826 	bl	80103d0 <_malloc_usable_size_r>
 8010384:	42a0      	cmp	r0, r4
 8010386:	d20f      	bcs.n	80103a8 <_realloc_r+0x48>
 8010388:	4621      	mov	r1, r4
 801038a:	4638      	mov	r0, r7
 801038c:	f7ff ff8e 	bl	80102ac <_malloc_r>
 8010390:	4605      	mov	r5, r0
 8010392:	2800      	cmp	r0, #0
 8010394:	d0f2      	beq.n	801037c <_realloc_r+0x1c>
 8010396:	4631      	mov	r1, r6
 8010398:	4622      	mov	r2, r4
 801039a:	f7ff fc11 	bl	800fbc0 <memcpy>
 801039e:	4631      	mov	r1, r6
 80103a0:	4638      	mov	r0, r7
 80103a2:	f7ff ff35 	bl	8010210 <_free_r>
 80103a6:	e7e9      	b.n	801037c <_realloc_r+0x1c>
 80103a8:	4635      	mov	r5, r6
 80103aa:	e7e7      	b.n	801037c <_realloc_r+0x1c>

080103ac <_sbrk_r>:
 80103ac:	b538      	push	{r3, r4, r5, lr}
 80103ae:	4c06      	ldr	r4, [pc, #24]	; (80103c8 <_sbrk_r+0x1c>)
 80103b0:	2300      	movs	r3, #0
 80103b2:	4605      	mov	r5, r0
 80103b4:	4608      	mov	r0, r1
 80103b6:	6023      	str	r3, [r4, #0]
 80103b8:	f7fd fc36 	bl	800dc28 <_sbrk>
 80103bc:	1c43      	adds	r3, r0, #1
 80103be:	d102      	bne.n	80103c6 <_sbrk_r+0x1a>
 80103c0:	6823      	ldr	r3, [r4, #0]
 80103c2:	b103      	cbz	r3, 80103c6 <_sbrk_r+0x1a>
 80103c4:	602b      	str	r3, [r5, #0]
 80103c6:	bd38      	pop	{r3, r4, r5, pc}
 80103c8:	200274bc 	.word	0x200274bc

080103cc <__malloc_lock>:
 80103cc:	4770      	bx	lr

080103ce <__malloc_unlock>:
 80103ce:	4770      	bx	lr

080103d0 <_malloc_usable_size_r>:
 80103d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103d4:	1f18      	subs	r0, r3, #4
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	bfbc      	itt	lt
 80103da:	580b      	ldrlt	r3, [r1, r0]
 80103dc:	18c0      	addlt	r0, r0, r3
 80103de:	4770      	bx	lr

080103e0 <_init>:
 80103e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e2:	bf00      	nop
 80103e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103e6:	bc08      	pop	{r3}
 80103e8:	469e      	mov	lr, r3
 80103ea:	4770      	bx	lr

080103ec <_fini>:
 80103ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ee:	bf00      	nop
 80103f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103f2:	bc08      	pop	{r3}
 80103f4:	469e      	mov	lr, r3
 80103f6:	4770      	bx	lr
