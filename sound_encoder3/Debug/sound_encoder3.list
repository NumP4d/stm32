
sound_encoder3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaa0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800ec50  0800ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed54  0800ed54  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed54  0800ed54  0001ed54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed5c  0800ed5c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed5c  0800ed5c  0001ed5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed60  0800ed60  0001ed60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ed64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00031134  200001f0  0800ef54  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20031324  0800ef54  00021324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f09b  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005281  00000000  00000000  0004f2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002530  00000000  00000000  00054540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022d0  00000000  00000000  00056a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033456  00000000  00000000  00058d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020196  00000000  00000000  0008c196  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012420b  00000000  00000000  000ac32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d0537  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a290  00000000  00000000  001d05b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ec38 	.word	0x0800ec38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0800ec38 	.word	0x0800ec38

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005aa:	2003      	movs	r0, #3
 80005ac:	f001 f896 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f80d 	bl	80005d0 <HAL_InitTick>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e001      	b.n	80005c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005c2:	f00c f9ab 	bl	800c91c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <HAL_InitTick+0x68>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d022      	beq.n	800062a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_InitTick+0x6c>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_InitTick+0x68>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 f8a4 	bl	8001746 <HAL_SYSTICK_Config>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10f      	bne.n	8000624 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b0f      	cmp	r3, #15
 8000608:	d809      	bhi.n	800061e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060a:	2200      	movs	r2, #0
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000612:	f001 f86e 	bl	80016f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <HAL_InitTick+0x70>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	e007      	b.n	800062e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e004      	b.n	800062e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
 8000628:	e001      	b.n	800062e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004
 800063c:	20000118 	.word	0x20000118
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4413      	add	r3, r2
 8000652:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x1c>)
 8000654:	6013      	str	r3, [r2, #0]
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	2000047c 	.word	0x2000047c
 8000664:	20000004 	.word	0x20000004

08000668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <HAL_GetTick+0x14>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	2000047c 	.word	0x2000047c

08000680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000698:	d004      	beq.n	80006a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_Delay+0x40>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006a4:	bf00      	nop
 80006a6:	f7ff ffdf 	bl	8000668 <HAL_GetTick>
 80006aa:	4602      	mov	r2, r0
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d8f7      	bhi.n	80006a6 <HAL_Delay+0x26>
  {
  }
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000004 	.word	0x20000004

080006c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	431a      	orrs	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	609a      	str	r2, [r3, #8]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	431a      	orrs	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	609a      	str	r2, [r3, #8]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800072c:	b490      	push	{r4, r7}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	3360      	adds	r3, #96	; 0x60
 800073e:	461a      	mov	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000748:	6822      	ldr	r2, [r4, #0]
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <LL_ADC_SetOffset+0x40>)
 800074c:	4013      	ands	r3, r2
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	430a      	orrs	r2, r1
 8000758:	4313      	orrs	r3, r2
 800075a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bc90      	pop	{r4, r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	03fff000 	.word	0x03fff000

08000770 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000770:	b490      	push	{r4, r7}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3360      	adds	r3, #96	; 0x60
 800077e:	461a      	mov	r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bc90      	pop	{r4, r7}
 8000796:	4770      	bx	lr

08000798 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000798:	b490      	push	{r4, r7}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3360      	adds	r3, #96	; 0x60
 80007a8:	461a      	mov	r2, r3
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc90      	pop	{r4, r7}
 80007c6:	4770      	bx	lr

080007c8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	431a      	orrs	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	615a      	str	r2, [r3, #20]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007ee:	b490      	push	{r4, r7}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3330      	adds	r3, #48	; 0x30
 80007fe:	461a      	mov	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	f003 030c 	and.w	r3, r3, #12
 800080a:	4413      	add	r3, r2
 800080c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800080e:	6822      	ldr	r2, [r4, #0]
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	f003 031f 	and.w	r3, r3, #31
 8000816:	211f      	movs	r1, #31
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	43db      	mvns	r3, r3
 800081e:	401a      	ands	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	0e9b      	lsrs	r3, r3, #26
 8000824:	f003 011f 	and.w	r1, r3, #31
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	f003 031f 	and.w	r3, r3, #31
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bc90      	pop	{r4, r7}
 800083e:	4770      	bx	lr

08000840 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000840:	b490      	push	{r4, r7}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3314      	adds	r3, #20
 8000850:	461a      	mov	r2, r3
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	0e5b      	lsrs	r3, r3, #25
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	4413      	add	r3, r2
 800085e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000860:	6822      	ldr	r2, [r4, #0]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	0d1b      	lsrs	r3, r3, #20
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	2107      	movs	r1, #7
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	401a      	ands	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	0d1b      	lsrs	r3, r3, #20
 8000878:	f003 031f 	and.w	r3, r3, #31
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bc90      	pop	{r4, r7}
 800088e:	4770      	bx	lr

08000890 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008a8:	43db      	mvns	r3, r3
 80008aa:	401a      	ands	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0318 	and.w	r3, r3, #24
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008b4:	40d9      	lsrs	r1, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	400b      	ands	r3, r1
 80008ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008be:	431a      	orrs	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	0007ffff 	.word	0x0007ffff

080008d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80008e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	6093      	str	r3, [r2, #8]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800090c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000910:	d101      	bne.n	8000916 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000912:	2301      	movs	r3, #1
 8000914:	e000      	b.n	8000918 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000938:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000960:	d101      	bne.n	8000966 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b01      	cmp	r3, #1
 8000986:	d101      	bne.n	800098c <LL_ADC_IsEnabled+0x18>
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <LL_ADC_IsEnabled+0x1a>
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d101      	bne.n	80009b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d101      	bne.n	80009d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e137      	b.n	8000c72 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	691b      	ldr	r3, [r3, #16]
 8000a06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f00b ffa7 	bl	800c964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff67 	bl	80008fc <LL_ADC_IsDeepPowerDownEnabled>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d004      	beq.n	8000a3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff4d 	bl	80008d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff82 	bl	800094c <LL_ADC_IsInternalRegulatorEnabled>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d113      	bne.n	8000a76 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff66 	bl	8000924 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000a58:	4b88      	ldr	r3, [pc, #544]	; (8000c7c <HAL_ADC_Init+0x294>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	099b      	lsrs	r3, r3, #6
 8000a5e:	4a88      	ldr	r2, [pc, #544]	; (8000c80 <HAL_ADC_Init+0x298>)
 8000a60:	fba2 2303 	umull	r2, r3, r2, r3
 8000a64:	099b      	lsrs	r3, r3, #6
 8000a66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a68:	e002      	b.n	8000a70 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f9      	bne.n	8000a6a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff66 	bl	800094c <LL_ADC_IsInternalRegulatorEnabled>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10d      	bne.n	8000aa2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f043 0210 	orr.w	r2, r3, #16
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a96:	f043 0201 	orr.w	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff77 	bl	800099a <LL_ADC_REG_IsConversionOngoing>
 8000aac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 80d2 	bne.w	8000c60 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 80ce 	bne.w	8000c60 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000acc:	f043 0202 	orr.w	r2, r3, #2
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff4b 	bl	8000974 <LL_ADC_IsEnabled>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d115      	bne.n	8000b10 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ae4:	4867      	ldr	r0, [pc, #412]	; (8000c84 <HAL_ADC_Init+0x29c>)
 8000ae6:	f7ff ff45 	bl	8000974 <LL_ADC_IsEnabled>
 8000aea:	4604      	mov	r4, r0
 8000aec:	4866      	ldr	r0, [pc, #408]	; (8000c88 <HAL_ADC_Init+0x2a0>)
 8000aee:	f7ff ff41 	bl	8000974 <LL_ADC_IsEnabled>
 8000af2:	4603      	mov	r3, r0
 8000af4:	431c      	orrs	r4, r3
 8000af6:	4865      	ldr	r0, [pc, #404]	; (8000c8c <HAL_ADC_Init+0x2a4>)
 8000af8:	f7ff ff3c 	bl	8000974 <LL_ADC_IsEnabled>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4323      	orrs	r3, r4
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d105      	bne.n	8000b10 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4861      	ldr	r0, [pc, #388]	; (8000c90 <HAL_ADC_Init+0x2a8>)
 8000b0c:	f7ff fdda 	bl	80006c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7e5b      	ldrb	r3, [r3, #25]
 8000b14:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b1a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000b20:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000b26:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b2e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d106      	bne.n	8000b4c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	3b01      	subs	r3, #1
 8000b44:	045b      	lsls	r3, r3, #17
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d009      	beq.n	8000b68 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b58:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <HAL_ADC_Init+0x2ac>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	69b9      	ldr	r1, [r7, #24]
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff0a 	bl	800099a <LL_ADC_REG_IsConversionOngoing>
 8000b86:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff17 	bl	80009c0 <LL_ADC_INJ_IsConversionOngoing>
 8000b92:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d140      	bne.n	8000c1c <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d13d      	bne.n	8000c1c <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7e1b      	ldrb	r3, [r3, #24]
 8000ba8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000baa:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000bb2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bc2:	f023 0306 	bic.w	r3, r3, #6
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	69b9      	ldr	r1, [r7, #24]
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d118      	bne.n	8000c0c <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000be4:	f023 0304 	bic.w	r3, r3, #4
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bf0:	4311      	orrs	r1, r2
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bf6:	4311      	orrs	r1, r2
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f042 0201 	orr.w	r2, r2, #1
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	e007      	b.n	8000c1c <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 0201 	bic.w	r2, r2, #1
 8000c1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d10c      	bne.n	8000c3e <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f023 010f 	bic.w	r1, r3, #15
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	1e5a      	subs	r2, r3, #1
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000c3c:	e007      	b.n	8000c4e <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 020f 	bic.w	r2, r2, #15
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f023 0303 	bic.w	r3, r3, #3
 8000c56:	f043 0201 	orr.w	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	659a      	str	r2, [r3, #88]	; 0x58
 8000c5e:	e007      	b.n	8000c70 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c64:	f043 0210 	orr.w	r2, r3, #16
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000118 	.word	0x20000118
 8000c80:	053e2d63 	.word	0x053e2d63
 8000c84:	50040000 	.word	0x50040000
 8000c88:	50040100 	.word	0x50040100
 8000c8c:	50040200 	.word	0x50040200
 8000c90:	50040300 	.word	0x50040300
 8000c94:	fff0c007 	.word	0xfff0c007

08000c98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0a6      	sub	sp, #152	; 0x98
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d101      	bne.n	8000cba <HAL_ADC_ConfigChannel+0x22>
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e364      	b.n	8001384 <HAL_ADC_ConfigChannel+0x6ec>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fe67 	bl	800099a <LL_ADC_REG_IsConversionOngoing>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 8345 	bne.w	800135e <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b05      	cmp	r3, #5
 8000cda:	d824      	bhi.n	8000d26 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	3b02      	subs	r3, #2
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d81b      	bhi.n	8000d1e <HAL_ADC_ConfigChannel+0x86>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <HAL_ADC_ConfigChannel+0x54>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000cfd 	.word	0x08000cfd
 8000cf0:	08000d05 	.word	0x08000d05
 8000cf4:	08000d0d 	.word	0x08000d0d
 8000cf8:	08000d15 	.word	0x08000d15
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	220c      	movs	r2, #12
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	e011      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2212      	movs	r2, #18
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	e00d      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2218      	movs	r2, #24
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	e009      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	e004      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	2206      	movs	r2, #6
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	e000      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000d26:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6859      	ldr	r1, [r3, #4]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	f7ff fd5a 	bl	80007ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fe2b 	bl	800099a <LL_ADC_REG_IsConversionOngoing>
 8000d44:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe37 	bl	80009c0 <LL_ADC_INJ_IsConversionOngoing>
 8000d52:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f040 8163 	bne.w	8001026 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f040 815e 	bne.w	8001026 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	d10f      	bne.n	8000d94 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f7ff fd5e 	bl	8000840 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fd1b 	bl	80007c8 <LL_ADC_SetSamplingTimeCommonConfig>
 8000d92:	e00e      	b.n	8000db2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	461a      	mov	r2, r3
 8000da2:	f7ff fd4d 	bl	8000840 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fd0b 	bl	80007c8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d00a      	beq.n	8000dea <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6919      	ldr	r1, [r3, #16]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000de4:	f7ff fca2 	bl	800072c <LL_ADC_SetOffset>
 8000de8:	e11d      	b.n	8001026 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fcbd 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10a      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x17e>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fcb2 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	0e9b      	lsrs	r3, r3, #26
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	e012      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x1a4>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fca7 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d105      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1bc>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	0e9b      	lsrs	r3, r3, #26
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	e00a      	b.n	8000e6a <HAL_ADC_ConfigChannel+0x1d2>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e64:	fab3 f383 	clz	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d106      	bne.n	8000e7c <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc8e 	bl	8000798 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fc74 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10a      	bne.n	8000ea8 <HAL_ADC_ConfigChannel+0x210>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2101      	movs	r1, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fc69 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	0e9b      	lsrs	r3, r3, #26
 8000ea2:	f003 021f 	and.w	r2, r3, #31
 8000ea6:	e010      	b.n	8000eca <HAL_ADC_ConfigChannel+0x232>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2101      	movs	r1, #1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fc5e 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ec2:	fab3 f383 	clz	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d105      	bne.n	8000ee2 <HAL_ADC_ConfigChannel+0x24a>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0e9b      	lsrs	r3, r3, #26
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	e00a      	b.n	8000ef8 <HAL_ADC_ConfigChannel+0x260>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ef2:	fab3 f383 	clz	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d106      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2200      	movs	r2, #0
 8000f02:	2101      	movs	r1, #1
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fc47 	bl	8000798 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc2d 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10a      	bne.n	8000f36 <HAL_ADC_ConfigChannel+0x29e>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2102      	movs	r1, #2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fc22 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	0e9b      	lsrs	r3, r3, #26
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	e010      	b.n	8000f58 <HAL_ADC_ConfigChannel+0x2c0>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fc17 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <HAL_ADC_ConfigChannel+0x2d8>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0e9b      	lsrs	r3, r3, #26
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	e00a      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x2ee>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d106      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2102      	movs	r1, #2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fc00 	bl	8000798 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fbe6 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10a      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x32c>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fbdb 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	0e9b      	lsrs	r3, r3, #26
 8000fbe:	f003 021f 	and.w	r2, r3, #31
 8000fc2:	e010      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x34e>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2103      	movs	r1, #3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fbd0 	bl	8000770 <LL_ADC_GetOffsetChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <HAL_ADC_ConfigChannel+0x366>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	0e9b      	lsrs	r3, r3, #26
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	e00a      	b.n	8001014 <HAL_ADC_ConfigChannel+0x37c>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800100c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	429a      	cmp	r2, r3
 8001016:	d106      	bne.n	8001026 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	2103      	movs	r1, #3
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fbb9 	bl	8000798 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fca2 	bl	8000974 <LL_ADC_IsEnabled>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	f040 810c 	bne.w	8001250 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	461a      	mov	r2, r3
 8001046:	f7ff fc23 	bl	8000890 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	4aae      	ldr	r2, [pc, #696]	; (8001308 <HAL_ADC_ConfigChannel+0x670>)
 8001050:	4293      	cmp	r3, r2
 8001052:	f040 80fd 	bne.w	8001250 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10b      	bne.n	800107e <HAL_ADC_ConfigChannel+0x3e6>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	0e9b      	lsrs	r3, r3, #26
 800106c:	3301      	adds	r3, #1
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	2b09      	cmp	r3, #9
 8001074:	bf94      	ite	ls
 8001076:	2301      	movls	r3, #1
 8001078:	2300      	movhi	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	e012      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x40c>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800108c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3301      	adds	r3, #1
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	2b09      	cmp	r3, #9
 800109c:	bf94      	ite	ls
 800109e:	2301      	movls	r3, #1
 80010a0:	2300      	movhi	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d064      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d107      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x42c>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0e9b      	lsrs	r3, r3, #26
 80010ba:	3301      	adds	r3, #1
 80010bc:	069b      	lsls	r3, r3, #26
 80010be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010c2:	e00e      	b.n	80010e2 <HAL_ADC_ConfigChannel+0x44a>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80010d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	069b      	lsls	r3, r3, #26
 80010de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <HAL_ADC_ConfigChannel+0x46a>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0e9b      	lsrs	r3, r3, #26
 80010f4:	3301      	adds	r3, #1
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	e010      	b.n	8001124 <HAL_ADC_ConfigChannel+0x48c>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	3301      	adds	r3, #1
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	ea42 0103 	orr.w	r1, r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10a      	bne.n	800114a <HAL_ADC_ConfigChannel+0x4b2>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0e9b      	lsrs	r3, r3, #26
 800113a:	3301      	adds	r3, #1
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	051b      	lsls	r3, r3, #20
 8001148:	e011      	b.n	800116e <HAL_ADC_ConfigChannel+0x4d6>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	fab3 f383 	clz	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	f003 021f 	and.w	r2, r3, #31
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800116e:	430b      	orrs	r3, r1
 8001170:	e069      	b.n	8001246 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800117a:	2b00      	cmp	r3, #0
 800117c:	d107      	bne.n	800118e <HAL_ADC_ConfigChannel+0x4f6>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	0e9b      	lsrs	r3, r3, #26
 8001184:	3301      	adds	r3, #1
 8001186:	069b      	lsls	r3, r3, #26
 8001188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800118c:	e00e      	b.n	80011ac <HAL_ADC_ConfigChannel+0x514>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	61fb      	str	r3, [r7, #28]
  return result;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3301      	adds	r3, #1
 80011a6:	069b      	lsls	r3, r3, #26
 80011a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d109      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x534>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	0e9b      	lsrs	r3, r3, #26
 80011be:	3301      	adds	r3, #1
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	e010      	b.n	80011ee <HAL_ADC_ConfigChannel+0x556>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	617b      	str	r3, [r7, #20]
  return result;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	ea42 0103 	orr.w	r1, r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10d      	bne.n	800121a <HAL_ADC_ConfigChannel+0x582>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0e9b      	lsrs	r3, r3, #26
 8001204:	3301      	adds	r3, #1
 8001206:	f003 021f 	and.w	r2, r3, #31
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	3b1e      	subs	r3, #30
 8001212:	051b      	lsls	r3, r3, #20
 8001214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001218:	e014      	b.n	8001244 <HAL_ADC_ConfigChannel+0x5ac>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	60fb      	str	r3, [r7, #12]
  return result;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	3301      	adds	r3, #1
 8001232:	f003 021f 	and.w	r2, r3, #31
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	3b1e      	subs	r3, #30
 800123e:	051b      	lsls	r3, r3, #20
 8001240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001244:	430b      	orrs	r3, r1
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	6892      	ldr	r2, [r2, #8]
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff faf8 	bl	8000840 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_ADC_ConfigChannel+0x674>)
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 808d 	beq.w	8001378 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800125e:	482c      	ldr	r0, [pc, #176]	; (8001310 <HAL_ADC_ConfigChannel+0x678>)
 8001260:	f7ff fa56 	bl	8000710 <LL_ADC_GetCommonPathInternalCh>
 8001264:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a29      	ldr	r2, [pc, #164]	; (8001314 <HAL_ADC_ConfigChannel+0x67c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x632>
 8001272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d125      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a25      	ldr	r2, [pc, #148]	; (8001318 <HAL_ADC_ConfigChannel+0x680>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d004      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x5fa>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a23      	ldr	r2, [pc, #140]	; (800131c <HAL_ADC_ConfigChannel+0x684>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d16f      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001296:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800129a:	4619      	mov	r1, r3
 800129c:	481c      	ldr	r0, [pc, #112]	; (8001310 <HAL_ADC_ConfigChannel+0x678>)
 800129e:	f7ff fa24 	bl	80006ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_ADC_ConfigChannel+0x688>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	099b      	lsrs	r3, r3, #6
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_ADC_ConfigChannel+0x68c>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	099a      	lsrs	r2, r3, #6
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80012ba:	e002      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3b01      	subs	r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f9      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80012c8:	e053      	b.n	8001372 <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a16      	ldr	r2, [pc, #88]	; (8001328 <HAL_ADC_ConfigChannel+0x690>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d12b      	bne.n	800132c <HAL_ADC_ConfigChannel+0x694>
 80012d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d125      	bne.n	800132c <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_ADC_ConfigChannel+0x680>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d004      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x65c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_ADC_ConfigChannel+0x684>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d140      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012fc:	4619      	mov	r1, r3
 80012fe:	4804      	ldr	r0, [pc, #16]	; (8001310 <HAL_ADC_ConfigChannel+0x678>)
 8001300:	f7ff f9f3 	bl	80006ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001304:	e037      	b.n	8001376 <HAL_ADC_ConfigChannel+0x6de>
 8001306:	bf00      	nop
 8001308:	407f0000 	.word	0x407f0000
 800130c:	80080000 	.word	0x80080000
 8001310:	50040300 	.word	0x50040300
 8001314:	c7520000 	.word	0xc7520000
 8001318:	50040000 	.word	0x50040000
 800131c:	50040200 	.word	0x50040200
 8001320:	20000118 	.word	0x20000118
 8001324:	053e2d63 	.word	0x053e2d63
 8001328:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a16      	ldr	r2, [pc, #88]	; (800138c <HAL_ADC_ConfigChannel+0x6f4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d120      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800133a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d11a      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <HAL_ADC_ConfigChannel+0x6f8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d115      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800134c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001350:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001354:	4619      	mov	r1, r3
 8001356:	480f      	ldr	r0, [pc, #60]	; (8001394 <HAL_ADC_ConfigChannel+0x6fc>)
 8001358:	f7ff f9c7 	bl	80006ea <LL_ADC_SetCommonPathInternalCh>
 800135c:	e00c      	b.n	8001378 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f043 0220 	orr.w	r2, r3, #32
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001370:	e002      	b.n	8001378 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001372:	bf00      	nop
 8001374:	e000      	b.n	8001378 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001376:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001380:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001384:	4618      	mov	r0, r3
 8001386:	3798      	adds	r7, #152	; 0x98
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	80000001 	.word	0x80000001
 8001390:	50040000 	.word	0x50040000
 8001394:	50040300 	.word	0x50040300

08001398 <LL_ADC_IsEnabled>:
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <LL_ADC_IsEnabled+0x18>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <LL_ADC_IsEnabled+0x1a>
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_ADC_REG_IsConversionOngoing>:
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d101      	bne.n	80013d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b0a1      	sub	sp, #132	; 0x84
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80013fe:	2302      	movs	r3, #2
 8001400:	e08f      	b.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a47      	ldr	r2, [pc, #284]	; (800152c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d102      	bne.n	800141a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001414:	4b46      	ldr	r3, [pc, #280]	; (8001530 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e001      	b.n	800141e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10b      	bne.n	800143c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f043 0220 	orr.w	r2, r3, #32
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e072      	b.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ffbd 	bl	80013be <LL_ADC_REG_IsConversionOngoing>
 8001444:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ffb7 	bl	80013be <LL_ADC_REG_IsConversionOngoing>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d154      	bne.n	8001500 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001458:	2b00      	cmp	r3, #0
 800145a:	d151      	bne.n	8001500 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800145e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d02c      	beq.n	80014c2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800147a:	035b      	lsls	r3, r3, #13
 800147c:	430b      	orrs	r3, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001482:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001484:	4829      	ldr	r0, [pc, #164]	; (800152c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001486:	f7ff ff87 	bl	8001398 <LL_ADC_IsEnabled>
 800148a:	4604      	mov	r4, r0
 800148c:	4828      	ldr	r0, [pc, #160]	; (8001530 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800148e:	f7ff ff83 	bl	8001398 <LL_ADC_IsEnabled>
 8001492:	4603      	mov	r3, r0
 8001494:	431c      	orrs	r4, r3
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001498:	f7ff ff7e 	bl	8001398 <LL_ADC_IsEnabled>
 800149c:	4603      	mov	r3, r0
 800149e:	4323      	orrs	r3, r4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d137      	bne.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80014a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014ac:	f023 030f 	bic.w	r3, r3, #15
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	6811      	ldr	r1, [r2, #0]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	6892      	ldr	r2, [r2, #8]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80014c0:	e028      	b.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80014c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80014d0:	f7ff ff62 	bl	8001398 <LL_ADC_IsEnabled>
 80014d4:	4604      	mov	r4, r0
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80014d8:	f7ff ff5e 	bl	8001398 <LL_ADC_IsEnabled>
 80014dc:	4603      	mov	r3, r0
 80014de:	431c      	orrs	r4, r3
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80014e2:	f7ff ff59 	bl	8001398 <LL_ADC_IsEnabled>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4323      	orrs	r3, r4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d112      	bne.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80014ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014f6:	f023 030f 	bic.w	r3, r3, #15
 80014fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80014fe:	e009      	b.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f043 0220 	orr.w	r2, r3, #32
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001512:	e000      	b.n	8001516 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001514:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800151e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001522:	4618      	mov	r0, r3
 8001524:	3784      	adds	r7, #132	; 0x84
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}
 800152a:	bf00      	nop
 800152c:	50040000 	.word	0x50040000
 8001530:	50040100 	.word	0x50040100
 8001534:	50040300 	.word	0x50040300
 8001538:	50040200 	.word	0x50040200

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e075      	b.n	800185e <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f00b f9bc 	bl	800cb04 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_DCMI_Init+0x108>)
 80017be:	400b      	ands	r3, r1
 80017c0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80017d6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80017e2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80017ee:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80017fa:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001806:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b10      	cmp	r3, #16
 8001816:	d112      	bne.n	800183e <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7f1b      	ldrb	r3, [r3, #28]
 800181c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7f5b      	ldrb	r3, [r3, #29]
 8001822:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001824:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7f9b      	ldrb	r3, [r3, #30]
 800182a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800182c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7fdb      	ldrb	r3, [r3, #31]
 8001834:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800183a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800183c:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 021f 	orr.w	r2, r2, #31
 800184c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	ffe0f007 	.word	0xffe0f007

0800186c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0ac      	b.n	80019d8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fc46 	bl	8002114 <DFSDM_GetChannelFromInstance>
 8001888:	4602      	mov	r2, r0
 800188a:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <HAL_DFSDM_ChannelInit+0x174>)
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e09f      	b.n	80019d8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f00b fa65 	bl	800cd68 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800189e:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <HAL_DFSDM_ChannelInit+0x178>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a4f      	ldr	r2, [pc, #316]	; (80019e4 <HAL_DFSDM_ChannelInit+0x178>)
 80018a6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80018a8:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <HAL_DFSDM_ChannelInit+0x178>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d125      	bne.n	80018fc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a4c      	ldr	r2, [pc, #304]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018ba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4948      	ldr	r1, [pc, #288]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018d0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80018d4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	791b      	ldrb	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	493f      	ldr	r1, [pc, #252]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018f0:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018fa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800190a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6819      	ldr	r1, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800191a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001920:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 020f 	bic.w	r2, r2, #15
 8001938:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001960:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	3b01      	subs	r3, #1
 8001972:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f002 0207 	and.w	r2, r2, #7
 800198c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fba4 	bl	8002114 <DFSDM_GetChannelFromInstance>
 80019cc:	4601      	mov	r1, r0
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_DFSDM_ChannelInit+0x174>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000210 	.word	0x20000210
 80019e4:	2000020c 	.word	0x2000020c
 80019e8:	40016000 	.word	0x40016000

080019ec <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0ca      	b.n	8001bbc <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a66      	ldr	r2, [pc, #408]	; (8001bc4 <HAL_DFSDM_FilterInit+0x1b0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d109      	bne.n	8001a44 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d003      	beq.n	8001a40 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0bb      	b.n	8001bbc <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f00b f8d1 	bl	800cc04 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001a70:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7a1b      	ldrb	r3, [r3, #8]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e007      	b.n	8001a9c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001a9a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7a5b      	ldrb	r3, [r3, #9]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e007      	b.n	8001ac6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001ad4:	f023 0308 	bic.w	r3, r3, #8
 8001ad8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d108      	bne.n	8001af4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7c1b      	ldrb	r3, [r3, #16]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d108      	bne.n	8001b0e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0210 	orr.w	r2, r2, #16
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e007      	b.n	8001b1e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0210 	bic.w	r2, r2, #16
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7c5b      	ldrb	r3, [r3, #17]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0220 	orr.w	r2, r2, #32
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0220 	bic.w	r2, r2, #32
 8001b46:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001b56:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001b5a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6959      	ldr	r1, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b6e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001b76:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7c1a      	ldrb	r2, [r3, #16]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40016100 	.word	0x40016100

08001bc8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d02e      	beq.n	8001c40 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001be8:	2bff      	cmp	r3, #255	; 0xff
 8001bea:	d029      	beq.n	8001c40 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d10d      	bne.n	8001c22 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c14:	431a      	orrs	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e00a      	b.n	8001c38 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3e:	e001      	b.n	8001c44 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]
 8001c74:	e064      	b.n	8001d40 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c84:	d002      	beq.n	8001c8c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
 8001c8a:	e059      	b.n	8001d40 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10e      	bne.n	8001cb2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d002      	beq.n	8001cb2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	75fb      	strb	r3, [r7, #23]
 8001cb0:	e046      	b.n	8001d40 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d102      	bne.n	8001cd2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]
 8001cd0:	e036      	b.n	8001d40 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d004      	beq.n	8001ce6 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d12a      	bne.n	8001d3c <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001cec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d101      	bne.n	8001d04 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001d02:	e000      	b.n	8001d06 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001d04:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
//    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
//                         (uint32_t) pData, Length) != HAL_OK)
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (((uint32_t)&hdfsdm_filter->Instance->FLTRDATAR) + 2), \
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	331c      	adds	r3, #28
 8001d16:	1c99      	adds	r1, r3, #2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f000 fbac 	bl	8002478 <HAL_DMA_Start_IT>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	22ff      	movs	r2, #255	; 0xff
 8001d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (((uint32_t)&hdfsdm_filter->Instance->FLTRDATAR) + 2), \
 8001d32:	e005      	b.n	8001d40 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 fa43 	bl	80021c0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (((uint32_t)&hdfsdm_filter->Instance->FLTRDATAR) + 2), \
 8001d3a:	e001      	b.n	8001d40 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	080020d5 	.word	0x080020d5
 8001d50:	080020f1 	.word	0x080020f1
 8001d54:	080020b9 	.word	0x080020b9

08001d58 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d007      	beq.n	8001d7e <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d002      	beq.n	8001d7e <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e011      	b.n	8001da2 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if (HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fbd8 	bl	8002538 <HAL_DMA_Abort>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d006      	beq.n	8001d9c <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	e002      	b.n	8001da2 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa65 	bl	800226c <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	; 0x30
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00f      	beq.n	8001dee <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2208      	movs	r2, #8
 8001dde:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f95c 	bl	80020a4 <HAL_DFSDM_FilterErrorCallback>
 8001dec:	e13b      	b.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00f      	beq.n	8001e18 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2204      	movs	r2, #4
 8001e08:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f947 	bl	80020a4 <HAL_DFSDM_FilterErrorCallback>
 8001e16:	e126      	b.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d025      	beq.n	8001e6e <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f009 fcb7 	bl	800b7a0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8114 	bne.w	8002064 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 810f 	bne.w	8002064 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0202 	bic.w	r2, r2, #2
 8001e54:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d101      	bne.n	8001e64 <HAL_DFSDM_IRQHandler+0xb8>
 8001e60:	2201      	movs	r2, #1
 8001e62:	e000      	b.n	8001e66 <HAL_DFSDM_IRQHandler+0xba>
 8001e64:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001e6c:	e0fa      	b.n	8002064 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d034      	beq.n	8001ee2 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d02f      	beq.n	8001ee2 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8f8 	bl	8002078 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80e5 	bne.w	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d112      	bne.n	8001eca <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d101      	bne.n	8001ec2 <HAL_DFSDM_IRQHandler+0x116>
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_DFSDM_IRQHandler+0x118>
 8001ec2:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d102      	bne.n	8001eda <HAL_DFSDM_IRQHandler+0x12e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	e000      	b.n	8001edc <HAL_DFSDM_IRQHandler+0x130>
 8001eda:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001ee0:	e0c1      	b.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d03d      	beq.n	8001f68 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d038      	beq.n	8001f68 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8001f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_DFSDM_IRQHandler+0x162>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_DFSDM_IRQHandler+0x164>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001f1e:	e005      	b.n	8001f2c <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	3301      	adds	r3, #1
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_DFSDM_IRQHandler+0x190>
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d9f1      	bls.n	8001f20 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_DFSDM_IRQHandler+0x1a2>
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	3308      	adds	r3, #8
 8001f46:	2201      	movs	r2, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	e003      	b.n	8001f56 <HAL_DFSDM_IRQHandler+0x1aa>
 8001f4e:	2201      	movs	r2, #1
 8001f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f893 	bl	800208c <HAL_DFSDM_FilterAwdCallback>
  {
 8001f66:	e07e      	b.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a40      	ldr	r2, [pc, #256]	; (8002070 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d141      	bne.n	8001ff6 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d03c      	beq.n	8001ff6 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d037      	beq.n	8001ff6 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001f96:	e02a      	b.n	8001fee <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_DFSDM_IRQHandler+0x236>
 8001fa2:	4a34      	ldr	r2, [pc, #208]	; (8002074 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d019      	beq.n	8001fe2 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8001fae:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00f      	beq.n	8001fe2 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f103 0210 	add.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd2:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8001fd4:	4a27      	ldr	r2, [pc, #156]	; (8002074 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fd05 	bl	80019ec <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	2b07      	cmp	r3, #7
 8001ff2:	d9d1      	bls.n	8001f98 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8001ff4:	e037      	b.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d132      	bne.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8002006:	2b00      	cmp	r3, #0
 8002008:	d02d      	beq.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8002010:	2b00      	cmp	r3, #0
 8002012:	d028      	beq.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0e1b      	lsrs	r3, r3, #24
 8002020:	b2db      	uxtb	r3, r3
 8002022:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8002024:	e005      	b.n	8002032 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	3301      	adds	r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	085b      	lsrs	r3, r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <HAL_DFSDM_IRQHandler+0x296>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d9f1      	bls.n	8002026 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f103 0218 	add.w	r2, r3, #24
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_DFSDM_IRQHandler+0x2c8>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fccf 	bl	8001a00 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8002062:	e000      	b.n	8002066 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002064:	bf00      	nop
}
 8002066:	bf00      	nop
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40016100 	.word	0x40016100
 8002074:	20000210 	.word	0x20000210

08002078 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f009 fbbc 	bl	800b844 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f009 fb5c 	bl	800b7a0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2203      	movs	r2, #3
 8002102:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff ffcd 	bl	80020a4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d102      	bne.n	800212a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e032      	b.n	8002190 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <DFSDM_GetChannelFromInstance+0x90>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d102      	bne.n	8002138 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e02b      	b.n	8002190 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <DFSDM_GetChannelFromInstance+0x94>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d102      	bne.n	8002146 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002140:	2302      	movs	r3, #2
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e024      	b.n	8002190 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a18      	ldr	r2, [pc, #96]	; (80021ac <DFSDM_GetChannelFromInstance+0x98>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d102      	bne.n	8002154 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800214e:	2303      	movs	r3, #3
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e01d      	b.n	8002190 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <DFSDM_GetChannelFromInstance+0x9c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d102      	bne.n	8002162 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800215c:	2304      	movs	r3, #4
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e016      	b.n	8002190 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <DFSDM_GetChannelFromInstance+0xa0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d102      	bne.n	8002170 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800216a:	2305      	movs	r3, #5
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e00f      	b.n	8002190 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <DFSDM_GetChannelFromInstance+0xa4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d102      	bne.n	800217e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002178:	2306      	movs	r3, #6
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e008      	b.n	8002190 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <DFSDM_GetChannelFromInstance+0xa8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d102      	bne.n	800218c <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8002186:	2307      	movs	r3, #7
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e001      	b.n	8002190 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002190:	68fb      	ldr	r3, [r7, #12]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40016000 	.word	0x40016000
 80021a4:	40016020 	.word	0x40016020
 80021a8:	40016040 	.word	0x40016040
 80021ac:	40016060 	.word	0x40016060
 80021b0:	40016080 	.word	0x40016080
 80021b4:	400160a0 	.word	0x400160a0
 80021b8:	400160c0 	.word	0x400160c0
 80021bc:	400160e0 	.word	0x400160e0

080021c0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e033      	b.n	800224a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002200:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002218:	2b03      	cmp	r3, #3
 800221a:	d116      	bne.n	800224a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0202 	orr.w	r2, r2, #2
 8002232:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <DFSDM_RegConvStart+0x84>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	e000      	b.n	8002246 <DFSDM_RegConvStart+0x86>
 8002244:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <DFSDM_RegConvStart+0x98>
 8002254:	2202      	movs	r2, #2
 8002256:	e000      	b.n	800225a <DFSDM_RegConvStart+0x9a>
 8002258:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	2b01      	cmp	r3, #1
 800228a:	d107      	bne.n	800229c <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800229a:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d116      	bne.n	80022e4 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0202 	orr.w	r2, r2, #2
 80022cc:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <DFSDM_RegConvStop+0x72>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	e000      	b.n	80022e0 <DFSDM_RegConvStop+0x74>
 80022de:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d101      	bne.n	80022f2 <DFSDM_RegConvStop+0x86>
 80022ee:	2201      	movs	r2, #1
 80022f0:	e000      	b.n	80022f4 <DFSDM_RegConvStop+0x88>
 80022f2:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e098      	b.n	800244c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	4b4d      	ldr	r3, [pc, #308]	; (8002458 <HAL_DMA_Init+0x150>)
 8002322:	429a      	cmp	r2, r3
 8002324:	d80f      	bhi.n	8002346 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	4b4b      	ldr	r3, [pc, #300]	; (800245c <HAL_DMA_Init+0x154>)
 800232e:	4413      	add	r3, r2
 8002330:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_DMA_Init+0x158>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	009a      	lsls	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_DMA_Init+0x15c>)
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
 8002344:	e00e      	b.n	8002364 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_DMA_Init+0x160>)
 800234e:	4413      	add	r3, r2
 8002350:	4a43      	ldr	r2, [pc, #268]	; (8002460 <HAL_DMA_Init+0x158>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	009a      	lsls	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a42      	ldr	r2, [pc, #264]	; (800246c <HAL_DMA_Init+0x164>)
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800237a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023be:	d039      	beq.n	8002434 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	4a27      	ldr	r2, [pc, #156]	; (8002464 <HAL_DMA_Init+0x15c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d11a      	bne.n	8002400 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_DMA_Init+0x168>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f003 031c 	and.w	r3, r3, #28
 80023d6:	210f      	movs	r1, #15
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	4924      	ldr	r1, [pc, #144]	; (8002470 <HAL_DMA_Init+0x168>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_DMA_Init+0x168>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f003 031c 	and.w	r3, r3, #28
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	491d      	ldr	r1, [pc, #116]	; (8002470 <HAL_DMA_Init+0x168>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
 80023fe:	e019      	b.n	8002434 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <HAL_DMA_Init+0x16c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f003 031c 	and.w	r3, r3, #28
 800240c:	210f      	movs	r1, #15
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	4917      	ldr	r1, [pc, #92]	; (8002474 <HAL_DMA_Init+0x16c>)
 8002416:	4013      	ands	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_DMA_Init+0x16c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f003 031c 	and.w	r3, r3, #28
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	4911      	ldr	r1, [pc, #68]	; (8002474 <HAL_DMA_Init+0x16c>)
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40020407 	.word	0x40020407
 800245c:	bffdfff8 	.word	0xbffdfff8
 8002460:	cccccccd 	.word	0xcccccccd
 8002464:	40020000 	.word	0x40020000
 8002468:	bffdfbf8 	.word	0xbffdfbf8
 800246c:	40020400 	.word	0x40020400
 8002470:	400200a8 	.word	0x400200a8
 8002474:	400204a8 	.word	0x400204a8

08002478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_DMA_Start_IT+0x20>
 8002494:	2302      	movs	r3, #2
 8002496:	e04b      	b.n	8002530 <HAL_DMA_Start_IT+0xb8>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d13a      	bne.n	8002522 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f95f 	bl	8002794 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 020e 	orr.w	r2, r2, #14
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e00f      	b.n	8002510 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 020a 	orr.w	r2, r2, #10
 800250e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e005      	b.n	800252e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d008      	beq.n	8002562 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2204      	movs	r2, #4
 8002554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e022      	b.n	80025a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 020e 	bic.w	r2, r2, #14
 8002570:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0201 	bic.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f003 021c 	and.w	r2, r3, #28
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d005      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2204      	movs	r2, #4
 80025d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e029      	b.n	800262c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 020e 	bic.w	r2, r2, #14
 80025e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f003 021c 	and.w	r2, r3, #28
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
    }
  }
  return status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f003 031c 	and.w	r3, r3, #28
 8002656:	2204      	movs	r2, #4
 8002658:	409a      	lsls	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d026      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7a>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d021      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d107      	bne.n	800268a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0204 	bic.w	r2, r2, #4
 8002688:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f003 021c 	and.w	r2, r3, #28
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2104      	movs	r1, #4
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d071      	beq.n	800278a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80026ae:	e06c      	b.n	800278a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f003 031c 	and.w	r3, r3, #28
 80026b8:	2202      	movs	r2, #2
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02e      	beq.n	8002722 <HAL_DMA_IRQHandler+0xec>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d029      	beq.n	8002722 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020a 	bic.w	r2, r2, #10
 80026ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	f003 021c 	and.w	r2, r3, #28
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2102      	movs	r1, #2
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d038      	beq.n	800278a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002720:	e033      	b.n	800278a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f003 031c 	and.w	r3, r3, #28
 800272a:	2208      	movs	r2, #8
 800272c:	409a      	lsls	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02a      	beq.n	800278c <HAL_DMA_IRQHandler+0x156>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d025      	beq.n	800278c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 020e 	bic.w	r2, r2, #14
 800274e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f003 021c 	and.w	r2, r3, #28
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800278a:	bf00      	nop
 800278c:	bf00      	nop
}
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f003 021c 	and.w	r2, r3, #28
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d108      	bne.n	80027d8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027d6:	e007      	b.n	80027e8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002802:	e166      	b.n	8002ad2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8158 	beq.w	8002acc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x38>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b12      	cmp	r3, #18
 800282a:	d123      	bne.n	8002874 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	6939      	ldr	r1, [r7, #16]
 8002870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0203 	and.w	r2, r3, #3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d00b      	beq.n	80028c8 <HAL_GPIO_Init+0xd4>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d007      	beq.n	80028c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028bc:	2b11      	cmp	r3, #17
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b12      	cmp	r3, #18
 80028c6:	d130      	bne.n	800292a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028fe:	2201      	movs	r2, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 0201 	and.w	r2, r3, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80b2 	beq.w	8002acc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6613      	str	r3, [r2, #96]	; 0x60
 8002974:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002980:	4a5c      	ldr	r2, [pc, #368]	; (8002af4 <HAL_GPIO_Init+0x300>)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029aa:	d02b      	beq.n	8002a04 <HAL_GPIO_Init+0x210>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_GPIO_Init+0x304>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d025      	beq.n	8002a00 <HAL_GPIO_Init+0x20c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a51      	ldr	r2, [pc, #324]	; (8002afc <HAL_GPIO_Init+0x308>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d01f      	beq.n	80029fc <HAL_GPIO_Init+0x208>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a50      	ldr	r2, [pc, #320]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d019      	beq.n	80029f8 <HAL_GPIO_Init+0x204>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <HAL_GPIO_Init+0x310>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_GPIO_Init+0x200>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4e      	ldr	r2, [pc, #312]	; (8002b08 <HAL_GPIO_Init+0x314>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00d      	beq.n	80029f0 <HAL_GPIO_Init+0x1fc>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a4d      	ldr	r2, [pc, #308]	; (8002b0c <HAL_GPIO_Init+0x318>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <HAL_GPIO_Init+0x1f8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a4c      	ldr	r2, [pc, #304]	; (8002b10 <HAL_GPIO_Init+0x31c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_GPIO_Init+0x1f4>
 80029e4:	2307      	movs	r3, #7
 80029e6:	e00e      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029e8:	2308      	movs	r3, #8
 80029ea:	e00c      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029ec:	2306      	movs	r3, #6
 80029ee:	e00a      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029f0:	2305      	movs	r3, #5
 80029f2:	e008      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029f4:	2304      	movs	r3, #4
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029f8:	2303      	movs	r3, #3
 80029fa:	e004      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 8002a04:	2300      	movs	r3, #0
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	4093      	lsls	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a16:	4937      	ldr	r1, [pc, #220]	; (8002af4 <HAL_GPIO_Init+0x300>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a24:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a48:	4a32      	ldr	r2, [pc, #200]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a72:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f ae91 	bne.w	8002804 <HAL_GPIO_Init+0x10>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	48001000 	.word	0x48001000
 8002b08:	48001400 	.word	0x48001400
 8002b0c:	48001800 	.word	0x48001800
 8002b10:	48001c00 	.word	0x48001c00
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b60:	887a      	ldrh	r2, [r7, #2]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002b66:	e002      	b.n	8002b6e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e081      	b.n	8002c90 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f00a f94d 	bl	800ce40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2224      	movs	r2, #36	; 0x24
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	e006      	b.n	8002c02 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d104      	bne.n	8002c14 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c26:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	ea42 0103 	orr.w	r1, r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	021a      	lsls	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69d9      	ldr	r1, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1a      	ldr	r2, [r3, #32]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d138      	bne.n	8002d20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e032      	b.n	8002d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d139      	bne.n	8002db8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e033      	b.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2224      	movs	r2, #36	; 0x24
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc8:	b08f      	sub	sp, #60	; 0x3c
 8002dca:	af0a      	add	r7, sp, #40	; 0x28
 8002dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e116      	b.n	8003006 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f00a fd82 	bl	800d8fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f006 f8cb 	bl	8008fb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	687e      	ldr	r6, [r7, #4]
 8002e24:	466d      	mov	r5, sp
 8002e26:	f106 0410 	add.w	r4, r6, #16
 8002e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3a:	1d33      	adds	r3, r6, #4
 8002e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3e:	6838      	ldr	r0, [r7, #0]
 8002e40:	f005 ffb8 	bl	8008db4 <USB_CoreInit>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0d7      	b.n	8003006 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f006 f8b9 	bl	8008fd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e04a      	b.n	8002efe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	333d      	adds	r3, #61	; 0x3d
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	333c      	adds	r3, #60	; 0x3c
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	b298      	uxth	r0, r3
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3342      	adds	r3, #66	; 0x42
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	333f      	adds	r3, #63	; 0x3f
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3344      	adds	r3, #68	; 0x44
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3348      	adds	r3, #72	; 0x48
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3350      	adds	r3, #80	; 0x50
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	3301      	adds	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3af      	bcc.n	8002e68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e044      	b.n	8002f98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	3301      	adds	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3b5      	bcc.n	8002f0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	687e      	ldr	r6, [r7, #4]
 8002faa:	466d      	mov	r5, sp
 8002fac:	f106 0410 	add.w	r4, r6, #16
 8002fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc0:	1d33      	adds	r3, r6, #4
 8002fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	f006 f82f 	bl	8009028 <USB_DevInit>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e014      	b.n	8003006 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d102      	bne.n	8002ffa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 ff3f 	bl	8003e78 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f006 ff46 	bl	8009e90 <USB_DevDisconnect>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800300e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_PCD_Start+0x1c>
 8003026:	2302      	movs	r3, #2
 8003028:	e01c      	b.n	8003064 <HAL_PCD_Start+0x56>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f006 ff08 	bl	8009e60 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f005 ff9b 	bl	8008f90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b08d      	sub	sp, #52	; 0x34
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f006 ffad 	bl	8009fe6 <USB_GetMode>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 836b 	bne.w	800376a <HAL_PCD_IRQHandler+0x6fe>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f006 ff11 	bl	8009ec0 <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8361 	beq.w	8003768 <HAL_PCD_IRQHandler+0x6fc>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f006 ff08 	bl	8009ec0 <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d107      	bne.n	80030ca <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f002 0202 	and.w	r2, r2, #2
 80030c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f006 fef6 	bl	8009ec0 <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030de:	d16e      	bne.n	80031be <HAL_PCD_IRQHandler+0x152>
    {
      epnum = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f006 fefc 	bl	8009ee6 <USB_ReadDevAllOutEpInterrupt>
 80030ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030f0:	e062      	b.n	80031b8 <HAL_PCD_IRQHandler+0x14c>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d057      	beq.n	80031ac <HAL_PCD_IRQHandler+0x140>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f006 ff21 	bl	8009f4e <USB_ReadDevOutEPInterrupt>
 800310c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003124:	461a      	mov	r2, r3
 8003126:	2301      	movs	r3, #1
 8003128:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800312a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fdc9 	bl	8003cc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00c      	beq.n	8003156 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800313c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fe0e 	bl	8003d60 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003150:	461a      	mov	r2, r3
 8003152:	2308      	movs	r3, #8
 8003154:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316c:	461a      	mov	r2, r3
 800316e:	2310      	movs	r3, #16
 8003170:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_PCD_IRQHandler+0x122>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003188:	461a      	mov	r2, r3
 800318a:	2320      	movs	r3, #32
 800318c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_PCD_IRQHandler+0x140>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	461a      	mov	r2, r3
 80031a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	3301      	adds	r3, #1
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d199      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f006 fe7c 	bl	8009ec0 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d2:	f040 8087 	bne.w	80032e4 <HAL_PCD_IRQHandler+0x278>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f006 fe9d 	bl	8009f1a <USB_ReadDevAllInEpInterrupt>
 80031e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80031e6:	e07a      	b.n	80032de <HAL_PCD_IRQHandler+0x272>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d06f      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x266>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f006 fec4 	bl	8009f8a <USB_ReadDevInEPInterrupt>
 8003202:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d020      	beq.n	8003250 <HAL_PCD_IRQHandler+0x1e4>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	2201      	movs	r2, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	43db      	mvns	r3, r3
 8003228:	69f9      	ldr	r1, [r7, #28]
 800322a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800322e:	4013      	ands	r3, r2
 8003230:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323e:	461a      	mov	r2, r3
 8003240:	2301      	movs	r3, #1
 8003242:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f00a fbe9 	bl	800da22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_PCD_IRQHandler+0x200>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003266:	461a      	mov	r2, r3
 8003268:	2308      	movs	r3, #8
 800326a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_PCD_IRQHandler+0x21c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003282:	461a      	mov	r2, r3
 8003284:	2310      	movs	r3, #16
 8003286:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_PCD_IRQHandler+0x238>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329e:	461a      	mov	r2, r3
 80032a0:	2340      	movs	r3, #64	; 0x40
 80032a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x254>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ba:	461a      	mov	r2, r3
 80032bc:	2302      	movs	r3, #2
 80032be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x266>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fc71 	bl	8003bb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	3301      	adds	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d181      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x17c>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f006 fde9 	bl	8009ec0 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032f8:	d122      	bne.n	8003340 <HAL_PCD_IRQHandler+0x2d4>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003314:	2b01      	cmp	r3, #1
 8003316:	d108      	bne.n	800332a <HAL_PCD_IRQHandler+0x2be>
      {
        hpcd->LPM_State = LPM_L0;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003320:	2100      	movs	r1, #0
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f00a fe9a 	bl	800e05c <HAL_PCDEx_LPM_Callback>
 8003328:	e002      	b.n	8003330 <HAL_PCD_IRQHandler+0x2c4>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f00a fbe6 	bl	800dafc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800333e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f006 fdbb 	bl	8009ec0 <USB_ReadInterrupts>
 800334a:	4603      	mov	r3, r0
 800334c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003354:	d112      	bne.n	800337c <HAL_PCD_IRQHandler+0x310>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d102      	bne.n	800336c <HAL_PCD_IRQHandler+0x300>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f00a fba2 	bl	800dab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800337a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f006 fd9d 	bl	8009ec0 <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800338c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003390:	d121      	bne.n	80033d6 <HAL_PCD_IRQHandler+0x36a>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80033a0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d111      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x364>
      {
        hpcd->LPM_State = LPM_L1;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033c6:	2101      	movs	r1, #1
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f00a fe47 	bl	800e05c <HAL_PCDEx_LPM_Callback>
 80033ce:	e002      	b.n	80033d6 <HAL_PCD_IRQHandler+0x36a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f00a fb6d 	bl	800dab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f006 fd70 	bl	8009ec0 <USB_ReadInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ea:	f040 80a5 	bne.w	8003538 <HAL_PCD_IRQHandler+0x4cc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2110      	movs	r1, #16
 8003408:	4618      	mov	r0, r3
 800340a:	f005 ff4f 	bl	80092ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340e:	2300      	movs	r3, #0
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003412:	e036      	b.n	8003482 <HAL_PCD_IRQHandler+0x416>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003420:	461a      	mov	r2, r3
 8003422:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003426:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003438:	0151      	lsls	r1, r2, #5
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	440a      	add	r2, r1
 800343e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003446:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	461a      	mov	r2, r3
 8003456:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800345a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346c:	0151      	lsls	r1, r2, #5
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	440a      	add	r2, r1
 8003472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800347a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	3301      	adds	r3, #1
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d3c3      	bcc.n	8003414 <HAL_PCD_IRQHandler+0x3a8>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800349e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d016      	beq.n	80034d6 <HAL_PCD_IRQHandler+0x46a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034b8:	f043 030b 	orr.w	r3, r3, #11
 80034bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ce:	f043 030b 	orr.w	r3, r3, #11
 80034d2:	6453      	str	r3, [r2, #68]	; 0x44
 80034d4:	e015      	b.n	8003502 <HAL_PCD_IRQHandler+0x496>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034fc:	f043 030b 	orr.w	r3, r3, #11
 8003500:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003510:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003514:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f006 fda2 	bl	800a06c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f006 fcbf 	bl	8009ec0 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354c:	d124      	bne.n	8003598 <HAL_PCD_IRQHandler+0x52c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f006 fd55 	bl	800a002 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f005 ff06 	bl	800936e <USB_GetDevSpeed>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681c      	ldr	r4, [r3, #0]
 800356e:	f001 fb63 	bl	8004c38 <HAL_RCC_GetHCLKFreq>
 8003572:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	4620      	mov	r0, r4
 800357e:	f005 fc6b 	bl	8008e58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f00a fa75 	bl	800da72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003596:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f006 fc8f 	bl	8009ec0 <USB_ReadInterrupts>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d161      	bne.n	8003670 <HAL_PCD_IRQHandler+0x604>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0210 	bic.w	r2, r2, #16
 80035ba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	0c5b      	lsrs	r3, r3, #17
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d124      	bne.n	8003632 <HAL_PCD_IRQHandler+0x5c6>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d035      	beq.n	8003660 <HAL_PCD_IRQHandler+0x5f4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003602:	b29b      	uxth	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	6a38      	ldr	r0, [r7, #32]
 8003608:	f006 fb07 	bl	8009c1a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003618:	441a      	add	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	619a      	str	r2, [r3, #24]
 8003630:	e016      	b.n	8003660 <HAL_PCD_IRQHandler+0x5f4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	0c5b      	lsrs	r3, r3, #17
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	2b06      	cmp	r3, #6
 800363c:	d110      	bne.n	8003660 <HAL_PCD_IRQHandler+0x5f4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003644:	2208      	movs	r2, #8
 8003646:	4619      	mov	r1, r3
 8003648:	6a38      	ldr	r0, [r7, #32]
 800364a:	f006 fae6 	bl	8009c1a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800365a:	441a      	add	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0210 	orr.w	r2, r2, #16
 800366e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f006 fc23 	bl	8009ec0 <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b08      	cmp	r3, #8
 8003682:	d10a      	bne.n	800369a <HAL_PCD_IRQHandler+0x62e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f00a f9e6 	bl	800da56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f002 0208 	and.w	r2, r2, #8
 8003698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f006 fc0e 	bl	8009ec0 <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ae:	d10d      	bne.n	80036cc <HAL_PCD_IRQHandler+0x660>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f00a fa5a 	bl	800db70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80036ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f006 fbf5 	bl	8009ec0 <USB_ReadInterrupts>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e0:	d10d      	bne.n	80036fe <HAL_PCD_IRQHandler+0x692>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f00a fa2f 	bl	800db4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f006 fbdc 	bl	8009ec0 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d10a      	bne.n	800372a <HAL_PCD_IRQHandler+0x6be>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f00a fa3d 	bl	800db94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f006 fbc6 	bl	8009ec0 <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d115      	bne.n	800376a <HAL_PCD_IRQHandler+0x6fe>
    {
      temp = hpcd->Instance->GOTGINT;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_PCD_IRQHandler+0x6ea>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f00a fa2d 	bl	800dbb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6859      	ldr	r1, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	e000      	b.n	800376a <HAL_PCD_IRQHandler+0x6fe>
      return;
 8003768:	bf00      	nop
    }
  }
}
 800376a:	3734      	adds	r7, #52	; 0x34
 800376c:	46bd      	mov	sp, r7
 800376e:	bd90      	pop	{r4, r7, pc}

08003770 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_PCD_SetAddress+0x1a>
 8003786:	2302      	movs	r3, #2
 8003788:	e013      	b.n	80037b2 <HAL_PCD_SetAddress+0x42>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f006 fb36 	bl	8009e14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	4608      	mov	r0, r1
 80037c4:	4611      	mov	r1, r2
 80037c6:	461a      	mov	r2, r3
 80037c8:	4603      	mov	r3, r0
 80037ca:	70fb      	strb	r3, [r7, #3]
 80037cc:	460b      	mov	r3, r1
 80037ce:	803b      	strh	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	da0f      	bge.n	8003800 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	3338      	adds	r3, #56	; 0x38
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	705a      	strb	r2, [r3, #1]
 80037fe:	e00f      	b.n	8003820 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800382c:	883a      	ldrh	r2, [r7, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	78ba      	ldrb	r2, [r7, #2]
 8003836:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800384a:	78bb      	ldrb	r3, [r7, #2]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d102      	bne.n	8003856 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_PCD_EP_Open+0xaa>
 8003860:	2302      	movs	r3, #2
 8003862:	e00e      	b.n	8003882 <HAL_PCD_EP_Open+0xc8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	4618      	mov	r0, r3
 8003874:	f005 fd9a 	bl	80093ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003880:	7afb      	ldrb	r3, [r7, #11]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389a:	2b00      	cmp	r3, #0
 800389c:	da0f      	bge.n	80038be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3338      	adds	r3, #56	; 0x38
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	3304      	adds	r3, #4
 80038b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	705a      	strb	r2, [r3, #1]
 80038bc:	e00f      	b.n	80038de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	f003 020f 	and.w	r2, r3, #15
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	3304      	adds	r3, #4
 80038d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_PCD_EP_Close+0x6e>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e00e      	b.n	8003916 <HAL_PCD_EP_Close+0x8c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	4618      	mov	r0, r3
 8003908:	f005 fdd8 	bl	80094bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	460b      	mov	r3, r1
 800392c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392e:	7afb      	ldrb	r3, [r7, #11]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	b2da      	uxtb	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800396c:	7afb      	ldrb	r3, [r7, #11]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	4618      	mov	r0, r3
 800397e:	f005 fffd 	bl	800997c <USB_EP0StartXfer>
 8003982:	e005      	b.n	8003990 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6979      	ldr	r1, [r7, #20]
 800398a:	4618      	mov	r0, r3
 800398c:	f005 fe1a 	bl	80095c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 020f 	and.w	r2, r3, #15
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039bc:	681b      	ldr	r3, [r3, #0]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	460b      	mov	r3, r1
 80039d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	f003 020f 	and.w	r2, r3, #15
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	3338      	adds	r3, #56	; 0x38
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	3304      	adds	r3, #4
 80039f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2201      	movs	r2, #1
 8003a08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a16:	7afb      	ldrb	r3, [r7, #11]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 ffa8 	bl	800997c <USB_EP0StartXfer>
 8003a2c:	e005      	b.n	8003a3a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6979      	ldr	r1, [r7, #20]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f005 fdc5 	bl	80095c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d901      	bls.n	8003a62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e04e      	b.n	8003b00 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	da0f      	bge.n	8003a8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 020f 	and.w	r2, r3, #15
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	3338      	adds	r3, #56	; 0x38
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3304      	adds	r3, #4
 8003a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	705a      	strb	r2, [r3, #1]
 8003a88:	e00d      	b.n	8003aa6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_PCD_EP_SetStall+0x82>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e01c      	b.n	8003b00 <HAL_PCD_EP_SetStall+0xbc>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f006 f8c9 	bl	8009c6c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d108      	bne.n	8003af6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f006 fabb 	bl	800a06c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 020f 	and.w	r2, r3, #15
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d901      	bls.n	8003b26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e042      	b.n	8003bac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	da0f      	bge.n	8003b4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3338      	adds	r3, #56	; 0x38
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	705a      	strb	r2, [r3, #1]
 8003b4c:	e00f      	b.n	8003b6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	3304      	adds	r3, #4
 8003b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_PCD_EP_ClrStall+0x86>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e00e      	b.n	8003bac <HAL_PCD_EP_ClrStall+0xa4>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f006 f8d3 	bl	8009d48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	3338      	adds	r3, #56	; 0x38
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d901      	bls.n	8003bec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e067      	b.n	8003cbc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d902      	bls.n	8003c08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3303      	adds	r3, #3
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c10:	e026      	b.n	8003c60 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d902      	bls.n	8003c2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3303      	adds	r3, #3
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68d9      	ldr	r1, [r3, #12]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	6978      	ldr	r0, [r7, #20]
 8003c44:	f005 ffb8 	bl	8009bb8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	441a      	add	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	441a      	add	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d809      	bhi.n	8003c8a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d203      	bcs.n	8003c8a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1c3      	bne.n	8003c12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d811      	bhi.n	8003cba <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	6939      	ldr	r1, [r7, #16]
 8003cb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	333c      	adds	r3, #60	; 0x3c
 8003cdc:	3304      	adds	r3, #4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <PCD_EP_OutXfrComplete_int+0x98>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d124      	bne.n	8003d44 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d10:	461a      	mov	r2, r3
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	6093      	str	r3, [r2, #8]
 8003d18:	e01a      	b.n	8003d50 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	2320      	movs	r3, #32
 8003d34:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f009 fe55 	bl	800d9ec <HAL_PCD_DataOutStageCallback>
 8003d42:	e005      	b.n	8003d50 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f009 fe4e 	bl	800d9ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	4f54310a 	.word	0x4f54310a

08003d60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	333c      	adds	r3, #60	; 0x3c
 8003d78:	3304      	adds	r3, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60bb      	str	r3, [r7, #8]


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <PCD_EP_OutSetupPacket_int+0x64>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10e      	bne.n	8003db4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	461a      	mov	r2, r3
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f009 fe07 	bl	800d9c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	4f54310a 	.word	0x4f54310a

08003dc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d107      	bne.n	8003df6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003de6:	883b      	ldrh	r3, [r7, #0]
 8003de8:	0419      	lsls	r1, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
 8003df4:	e028      	b.n	8003e48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4413      	add	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e00d      	b.n	8003e26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	3340      	adds	r3, #64	; 0x40
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	3301      	adds	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3ec      	bcc.n	8003e0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e30:	883b      	ldrh	r3, [r7, #0]
 8003e32:	0418      	lsls	r0, r3, #16
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	4302      	orrs	r2, r0
 8003e40:	3340      	adds	r3, #64	; 0x40
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	f043 0303 	orr.w	r3, r3, #3
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a04      	ldr	r2, [pc, #16]	; (8003edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ece:	6013      	str	r3, [r2, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40007000 	.word	0x40007000

08003ee0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40007000 	.word	0x40007000

08003efc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0a:	d130      	bne.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f0c:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f18:	d038      	beq.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f22:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2232      	movs	r2, #50	; 0x32
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0c9b      	lsrs	r3, r3, #18
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f40:	e002      	b.n	8003f48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f48:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f54:	d102      	bne.n	8003f5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f2      	bne.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f68:	d110      	bne.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e00f      	b.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d007      	beq.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f7c:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f84:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	20000118 	.word	0x20000118
 8003fa4:	431bde83 	.word	0x431bde83

08003fa8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fb6:	6053      	str	r3, [r2, #4]
}
 8003fb8:	bf00      	nop
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40007000 	.word	0x40007000

08003fc8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd6:	6053      	str	r3, [r2, #4]
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40007000 	.word	0x40007000

08003fe8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ff0:	f7fc fb3a 	bl	8000668 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e075      	b.n	80040ec <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_QSPI_Init+0x28>
 800400c:	2302      	movs	r3, #2
 800400e:	e06d      	b.n	80040ec <HAL_QSPI_Init+0x104>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f009 f889 	bl	800d144 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004032:	f241 3188 	movw	r1, #5000	; 0x1388
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f85e 	bl	80040f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	3b01      	subs	r3, #1
 800404c:	021a      	lsls	r2, r3, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	2120      	movs	r1, #32
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f856 	bl	8004114 <QSPI_WaitFlagStateUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800406c:	7afb      	ldrb	r3, [r7, #11]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d137      	bne.n	80040e2 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800407c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6852      	ldr	r2, [r2, #4]
 8004084:	0611      	lsls	r1, r2, #24
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	4311      	orrs	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	69d2      	ldr	r2, [r2, #28]
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6a12      	ldr	r2, [r2, #32]
 8004096:	4311      	orrs	r1, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	430b      	orrs	r3, r1
 800409e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_QSPI_Init+0x10c>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6912      	ldr	r2, [r2, #16]
 80040ae:	0411      	lsls	r1, r2, #16
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6952      	ldr	r2, [r2, #20]
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6992      	ldr	r2, [r2, #24]
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80040ea:	7afb      	ldrb	r3, [r7, #11]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	ffe0f8fe 	.word	0xffe0f8fe

080040f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004124:	e01a      	b.n	800415c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800412c:	d016      	beq.n	800415c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fc fa9b 	bl	8000668 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2204      	movs	r2, #4
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	f043 0201 	orr.w	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e00e      	b.n	800417a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	429a      	cmp	r2, r3
 8004176:	d1d6      	bne.n	8004126 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e3db      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	4ba4      	ldr	r3, [pc, #656]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a0:	4ba1      	ldr	r3, [pc, #644]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80e1 	beq.w	800437a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <HAL_RCC_OscConfig+0x4a>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	f040 8088 	bne.w	80042d6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	f040 8084 	bne.w	80042d6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041ce:	4b96      	ldr	r3, [pc, #600]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_RCC_OscConfig+0x62>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e3b3      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	4b8f      	ldr	r3, [pc, #572]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <HAL_RCC_OscConfig+0x7c>
 80041f6:	4b8c      	ldr	r3, [pc, #560]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fe:	e005      	b.n	800420c <HAL_RCC_OscConfig+0x88>
 8004200:	4b89      	ldr	r3, [pc, #548]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800420c:	4293      	cmp	r3, r2
 800420e:	d223      	bcs.n	8004258 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fd47 	bl	8004ca8 <RCC_SetFlashLatencyFromMSIRange>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e394      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004224:	4b80      	ldr	r3, [pc, #512]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7f      	ldr	r2, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800422a:	f043 0308 	orr.w	r3, r3, #8
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b7d      	ldr	r3, [pc, #500]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	497a      	ldr	r1, [pc, #488]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004242:	4b79      	ldr	r3, [pc, #484]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	4975      	ldr	r1, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
 8004256:	e022      	b.n	800429e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004258:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a72      	ldr	r2, [pc, #456]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800425e:	f043 0308 	orr.w	r3, r3, #8
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	496d      	ldr	r1, [pc, #436]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004276:	4b6c      	ldr	r3, [pc, #432]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4968      	ldr	r1, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fd0a 	bl	8004ca8 <RCC_SetFlashLatencyFromMSIRange>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e357      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429e:	f000 fc41 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 80042a2:	4601      	mov	r1, r0
 80042a4:	4b60      	ldr	r3, [pc, #384]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	4a5f      	ldr	r2, [pc, #380]	; (800442c <HAL_RCC_OscConfig+0x2a8>)
 80042b0:	5cd3      	ldrb	r3, [r2, r3]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	fa21 f303 	lsr.w	r3, r1, r3
 80042ba:	4a5d      	ldr	r2, [pc, #372]	; (8004430 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042be:	4b5d      	ldr	r3, [pc, #372]	; (8004434 <HAL_RCC_OscConfig+0x2b0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc f984 	bl	80005d0 <HAL_InitTick>
 80042c8:	4603      	mov	r3, r0
 80042ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d052      	beq.n	8004378 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	e33b      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d032      	beq.n	8004344 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042de:	4b52      	ldr	r3, [pc, #328]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a51      	ldr	r2, [pc, #324]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042ea:	f7fc f9bd 	bl	8000668 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042f2:	f7fc f9b9 	bl	8000668 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e324      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004304:	4b48      	ldr	r3, [pc, #288]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004310:	4b45      	ldr	r3, [pc, #276]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a44      	ldr	r2, [pc, #272]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004316:	f043 0308 	orr.w	r3, r3, #8
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	493f      	ldr	r1, [pc, #252]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800432e:	4b3e      	ldr	r3, [pc, #248]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	493a      	ldr	r1, [pc, #232]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
 8004342:	e01a      	b.n	800437a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004344:	4b38      	ldr	r3, [pc, #224]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a37      	ldr	r2, [pc, #220]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004350:	f7fc f98a 	bl	8000668 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004358:	f7fc f986 	bl	8000668 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e2f1      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x1d4>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d074      	beq.n	8004470 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d005      	beq.n	8004398 <HAL_RCC_OscConfig+0x214>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d10e      	bne.n	80043b0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d10b      	bne.n	80043b0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	4b23      	ldr	r3, [pc, #140]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d064      	beq.n	800446e <HAL_RCC_OscConfig+0x2ea>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d160      	bne.n	800446e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e2ce      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b8:	d106      	bne.n	80043c8 <HAL_RCC_OscConfig+0x244>
 80043ba:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e01d      	b.n	8004404 <HAL_RCC_OscConfig+0x280>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0x268>
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a14      	ldr	r2, [pc, #80]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a11      	ldr	r2, [pc, #68]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0x280>
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <HAL_RCC_OscConfig+0x2a4>)
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01c      	beq.n	8004446 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fc f92c 	bl	8000668 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004412:	e011      	b.n	8004438 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fc f928 	bl	8000668 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d90a      	bls.n	8004438 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e293      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	0800ecd8 	.word	0x0800ecd8
 8004430:	20000118 	.word	0x20000118
 8004434:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004438:	4bae      	ldr	r3, [pc, #696]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0e7      	beq.n	8004414 <HAL_RCC_OscConfig+0x290>
 8004444:	e014      	b.n	8004470 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fc f90f 	bl	8000668 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444e:	f7fc f90b 	bl	8000668 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b64      	cmp	r3, #100	; 0x64
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e276      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004460:	4ba4      	ldr	r3, [pc, #656]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x2ca>
 800446c:	e000      	b.n	8004470 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d060      	beq.n	800453e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b04      	cmp	r3, #4
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x30a>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b0c      	cmp	r3, #12
 8004486:	d119      	bne.n	80044bc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d116      	bne.n	80044bc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448e:	4b99      	ldr	r3, [pc, #612]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_RCC_OscConfig+0x322>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e253      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b93      	ldr	r3, [pc, #588]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	498f      	ldr	r1, [pc, #572]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ba:	e040      	b.n	800453e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d023      	beq.n	800450c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c4:	4b8b      	ldr	r3, [pc, #556]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a8a      	ldr	r2, [pc, #552]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80044ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fc f8ca 	bl	8000668 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d8:	f7fc f8c6 	bl	8000668 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e231      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ea:	4b82      	ldr	r3, [pc, #520]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4b7f      	ldr	r3, [pc, #508]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	061b      	lsls	r3, r3, #24
 8004504:	497b      	ldr	r1, [pc, #492]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004506:	4313      	orrs	r3, r2
 8004508:	604b      	str	r3, [r1, #4]
 800450a:	e018      	b.n	800453e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450c:	4b79      	ldr	r3, [pc, #484]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a78      	ldr	r2, [pc, #480]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fc f8a6 	bl	8000668 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004520:	f7fc f8a2 	bl	8000668 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e20d      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004532:	4b70      	ldr	r3, [pc, #448]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03c      	beq.n	80045c4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01c      	beq.n	800458c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004552:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004558:	4a66      	ldr	r2, [pc, #408]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fc f881 	bl	8000668 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456a:	f7fc f87d 	bl	8000668 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e1e8      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800457c:	4b5d      	ldr	r3, [pc, #372]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 800457e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ef      	beq.n	800456a <HAL_RCC_OscConfig+0x3e6>
 800458a:	e01b      	b.n	80045c4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458c:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 800458e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004592:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fc f864 	bl	8000668 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fc f860 	bl	8000668 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e1cb      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045b6:	4b4f      	ldr	r3, [pc, #316]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80045b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ef      	bne.n	80045a4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a5 	beq.w	800471c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e2:	4b44      	ldr	r3, [pc, #272]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	4a43      	ldr	r2, [pc, #268]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80045e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ec:	6593      	str	r3, [r2, #88]	; 0x58
 80045ee:	4b41      	ldr	r3, [pc, #260]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fa:	2301      	movs	r3, #1
 80045fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fe:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <HAL_RCC_OscConfig+0x574>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d118      	bne.n	800463c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800460a:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_RCC_OscConfig+0x574>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a3a      	ldr	r2, [pc, #232]	; (80046f8 <HAL_RCC_OscConfig+0x574>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004616:	f7fc f827 	bl	8000668 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fc f823 	bl	8000668 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e18e      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004630:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <HAL_RCC_OscConfig+0x574>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d108      	bne.n	8004656 <HAL_RCC_OscConfig+0x4d2>
 8004644:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004654:	e024      	b.n	80046a0 <HAL_RCC_OscConfig+0x51c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b05      	cmp	r3, #5
 800465c:	d110      	bne.n	8004680 <HAL_RCC_OscConfig+0x4fc>
 800465e:	4b25      	ldr	r3, [pc, #148]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004666:	f043 0304 	orr.w	r3, r3, #4
 800466a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800466e:	4b21      	ldr	r3, [pc, #132]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800467e:	e00f      	b.n	80046a0 <HAL_RCC_OscConfig+0x51c>
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 8004698:	f023 0304 	bic.w	r3, r3, #4
 800469c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d016      	beq.n	80046d6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fb ffde 	bl	8000668 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7fb ffda 	bl	8000668 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e143      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_OscConfig+0x570>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0ed      	beq.n	80046b0 <HAL_RCC_OscConfig+0x52c>
 80046d4:	e019      	b.n	800470a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fb ffc7 	bl	8000668 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046dc:	e00e      	b.n	80046fc <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fb ffc3 	bl	8000668 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d905      	bls.n	80046fc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e12c      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046fc:	4b96      	ldr	r3, [pc, #600]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e9      	bne.n	80046de <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800470a:	7ffb      	ldrb	r3, [r7, #31]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004710:	4b91      	ldr	r3, [pc, #580]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	4a90      	ldr	r2, [pc, #576]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d03c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01c      	beq.n	800476a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004730:	4b89      	ldr	r3, [pc, #548]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004736:	4a88      	ldr	r2, [pc, #544]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fb ff92 	bl	8000668 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004748:	f7fb ff8e 	bl	8000668 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0f9      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800475a:	4b7f      	ldr	r3, [pc, #508]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 800475c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ef      	beq.n	8004748 <HAL_RCC_OscConfig+0x5c4>
 8004768:	e01b      	b.n	80047a2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800476a:	4b7b      	ldr	r3, [pc, #492]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 800476c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004770:	4a79      	ldr	r2, [pc, #484]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477a:	f7fb ff75 	bl	8000668 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004782:	f7fb ff71 	bl	8000668 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e0dc      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004794:	4b70      	ldr	r3, [pc, #448]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1ef      	bne.n	8004782 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80d0 	beq.w	800494c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	f000 808d 	beq.w	80048ce <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d15a      	bne.n	8004872 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047bc:	4b66      	ldr	r3, [pc, #408]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 80047c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fb ff4e 	bl	8000668 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fb ff4a 	bl	8000668 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0b5      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e2:	4b5d      	ldr	r3, [pc, #372]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ee:	4b5a      	ldr	r3, [pc, #360]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	4b5a      	ldr	r3, [pc, #360]	; (800495c <HAL_RCC_OscConfig+0x7d8>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047fe:	3a01      	subs	r2, #1
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004808:	0212      	lsls	r2, r2, #8
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004810:	0852      	lsrs	r2, r2, #1
 8004812:	3a01      	subs	r2, #1
 8004814:	0552      	lsls	r2, r2, #21
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800481c:	0852      	lsrs	r2, r2, #1
 800481e:	3a01      	subs	r2, #1
 8004820:	0652      	lsls	r2, r2, #25
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004828:	06d2      	lsls	r2, r2, #27
 800482a:	430a      	orrs	r2, r1
 800482c:	494a      	ldr	r1, [pc, #296]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004832:	4b49      	ldr	r3, [pc, #292]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a48      	ldr	r2, [pc, #288]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004838:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800483c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800483e:	4b46      	ldr	r3, [pc, #280]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	4a45      	ldr	r2, [pc, #276]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004848:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fb ff0d 	bl	8000668 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004852:	f7fb ff09 	bl	8000668 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e074      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004864:	4b3c      	ldr	r3, [pc, #240]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x6ce>
 8004870:	e06c      	b.n	800494c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b39      	ldr	r3, [pc, #228]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a38      	ldr	r2, [pc, #224]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004878:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800487e:	4b36      	ldr	r3, [pc, #216]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800488a:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004890:	f023 0303 	bic.w	r3, r3, #3
 8004894:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004896:	4b30      	ldr	r3, [pc, #192]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 800489c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80048a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fb fedf 	bl	8000668 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ae:	f7fb fedb 	bl	8000668 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e046      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x72a>
 80048cc:	e03e      	b.n	800494c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e039      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80048da:	4b1f      	ldr	r3, [pc, #124]	; (8004958 <HAL_RCC_OscConfig+0x7d4>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f003 0203 	and.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d12c      	bne.n	8004948 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	3b01      	subs	r3, #1
 80048fa:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d123      	bne.n	8004948 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d11b      	bne.n	8004948 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d113      	bne.n	8004948 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	3b01      	subs	r3, #1
 800492e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d109      	bne.n	8004948 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
 800495c:	019d808c 	.word	0x019d808c

08004960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0c8      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004974:	4b66      	ldr	r3, [pc, #408]	; (8004b10 <HAL_RCC_ClockConfig+0x1b0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d910      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCC_ClockConfig+0x1b0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 0207 	bic.w	r2, r3, #7
 800498a:	4961      	ldr	r1, [pc, #388]	; (8004b10 <HAL_RCC_ClockConfig+0x1b0>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b5f      	ldr	r3, [pc, #380]	; (8004b10 <HAL_RCC_ClockConfig+0x1b0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0b0      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d04c      	beq.n	8004a4a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b8:	4b56      	ldr	r3, [pc, #344]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d121      	bne.n	8004a08 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e09e      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d115      	bne.n	8004a08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e092      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d107      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e8:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d109      	bne.n	8004a08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e086      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f8:	4b46      	ldr	r3, [pc, #280]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e07e      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a08:	4b42      	ldr	r3, [pc, #264]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 0203 	bic.w	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	493f      	ldr	r1, [pc, #252]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1a:	f7fb fe25 	bl	8000668 <HAL_GetTick>
 8004a1e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a22:	f7fb fe21 	bl	8000668 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e066      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a38:	4b36      	ldr	r3, [pc, #216]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 020c 	and.w	r2, r3, #12
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d1eb      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	492c      	ldr	r1, [pc, #176]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a68:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <HAL_RCC_ClockConfig+0x1b0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d210      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <HAL_RCC_ClockConfig+0x1b0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	4924      	ldr	r1, [pc, #144]	; (8004b10 <HAL_RCC_ClockConfig+0x1b0>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_RCC_ClockConfig+0x1b0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e036      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4918      	ldr	r1, [pc, #96]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4910      	ldr	r1, [pc, #64]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ad6:	f000 f825 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8004ada:	4601      	mov	r1, r0
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <HAL_RCC_ClockConfig+0x1b4>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	; (8004b18 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	5cd3      	ldrb	r3, [r2, r3]
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	fa21 f303 	lsr.w	r3, r1, r3
 8004af2:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fd68 	bl	80005d0 <HAL_InitTick>
 8004b00:	4603      	mov	r3, r0
 8004b02:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b04:	7afb      	ldrb	r3, [r7, #11]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40022000 	.word	0x40022000
 8004b14:	40021000 	.word	0x40021000
 8004b18:	0800ecd8 	.word	0x0800ecd8
 8004b1c:	20000118 	.word	0x20000118
 8004b20:	20000000 	.word	0x20000000

08004b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b089      	sub	sp, #36	; 0x24
 8004b28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b32:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b3c:	4b3a      	ldr	r3, [pc, #232]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x34>
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d121      	bne.n	8004b96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d11e      	bne.n	8004b96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b58:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d107      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b64:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e005      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b74:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b80:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10d      	bne.n	8004bac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b94:	e00a      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d102      	bne.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b9c:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e004      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ba8:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004baa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b0c      	cmp	r3, #12
 8004bb0:	d133      	bne.n	8004c1a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d002      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xa4>
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0xaa>
 8004bc6:	e005      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bca:	617b      	str	r3, [r7, #20]
      break;
 8004bcc:	e005      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bce:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd0:	617b      	str	r3, [r7, #20]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	617b      	str	r3, [r7, #20]
      break;
 8004bd8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	3301      	adds	r3, #1
 8004be6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	fb02 f203 	mul.w	r2, r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0e5b      	lsrs	r3, r3, #25
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3724      	adds	r7, #36	; 0x24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800ecf0 	.word	0x0800ecf0
 8004c30:	00f42400 	.word	0x00f42400
 8004c34:	007a1200 	.word	0x007a1200

08004c38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000118 	.word	0x20000118

08004c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c54:	f7ff fff0 	bl	8004c38 <HAL_RCC_GetHCLKFreq>
 8004c58:	4601      	mov	r1, r0
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c66:	5cd3      	ldrb	r3, [r2, r3]
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	0800ece8 	.word	0x0800ece8

08004c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c80:	f7ff ffda 	bl	8004c38 <HAL_RCC_GetHCLKFreq>
 8004c84:	4601      	mov	r1, r0
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0adb      	lsrs	r3, r3, #11
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c92:	5cd3      	ldrb	r3, [r2, r3]
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	0800ece8 	.word	0x0800ece8

08004ca8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cb4:	4b2a      	ldr	r3, [pc, #168]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cc0:	f7ff f90e 	bl	8003ee0 <HAL_PWREx_GetVoltageRange>
 8004cc4:	6178      	str	r0, [r7, #20]
 8004cc6:	e014      	b.n	8004cf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cd4:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ce0:	f7ff f8fe 	bl	8003ee0 <HAL_PWREx_GetVoltageRange>
 8004ce4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ce6:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d10b      	bne.n	8004d12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	d919      	bls.n	8004d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2ba0      	cmp	r3, #160	; 0xa0
 8004d04:	d902      	bls.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d06:	2302      	movs	r3, #2
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	e013      	b.n	8004d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e010      	b.n	8004d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d902      	bls.n	8004d1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d18:	2303      	movs	r3, #3
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	e00a      	b.n	8004d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d102      	bne.n	8004d2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d24:	2302      	movs	r3, #2
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	e004      	b.n	8004d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b70      	cmp	r3, #112	; 0x70
 8004d2e:	d101      	bne.n	8004d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d30:	2301      	movs	r3, #1
 8004d32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 0207 	bic.w	r2, r3, #7
 8004d3c:	4909      	ldr	r1, [pc, #36]	; (8004d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d44:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d001      	beq.n	8004d56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40022000 	.word	0x40022000

08004d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d70:	2300      	movs	r3, #0
 8004d72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d74:	2300      	movs	r3, #0
 8004d76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d03f      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8c:	d01c      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d92:	d802      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00e      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d98:	e01f      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004d9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d9e:	d003      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004da0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004da4:	d01c      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004da6:	e018      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004da8:	4b85      	ldr	r3, [pc, #532]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	4a84      	ldr	r2, [pc, #528]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004db4:	e015      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 ff91 	bl	8005ce4 <RCCEx_PLLSAI1_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dc6:	e00c      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3320      	adds	r3, #32
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 f878 	bl	8005ec4 <RCCEx_PLLSAI2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dd8:	e003      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	74fb      	strb	r3, [r7, #19]
      break;
 8004dde:	e000      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004de8:	4b75      	ldr	r3, [pc, #468]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df6:	4972      	ldr	r1, [pc, #456]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dfe:	e001      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d03f      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e18:	d01c      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004e1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e1e:	d802      	bhi.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00e      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004e24:	e01f      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e2a:	d003      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004e2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e30:	d01c      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004e32:	e018      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e34:	4b62      	ldr	r3, [pc, #392]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a61      	ldr	r2, [pc, #388]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e40:	e015      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3304      	adds	r3, #4
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 ff4b 	bl	8005ce4 <RCCEx_PLLSAI1_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e52:	e00c      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3320      	adds	r3, #32
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 f832 	bl	8005ec4 <RCCEx_PLLSAI2_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e64:	e003      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	74fb      	strb	r3, [r7, #19]
      break;
 8004e6a:	e000      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e74:	4b52      	ldr	r3, [pc, #328]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e82:	494f      	ldr	r1, [pc, #316]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e8a:	e001      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a0 	beq.w	8004fde <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ea2:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb8:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebc:	4a40      	ldr	r2, [pc, #256]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec4:	4b3e      	ldr	r3, [pc, #248]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed4:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3a      	ldr	r2, [pc, #232]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ee0:	f7fb fbc2 	bl	8000668 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ee6:	e009      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee8:	f7fb fbbe 	bl	8000668 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d902      	bls.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	74fb      	strb	r3, [r7, #19]
        break;
 8004efa:	e005      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004efc:	4b31      	ldr	r3, [pc, #196]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ef      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d15c      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01f      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d019      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f38:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	4a1c      	ldr	r2, [pc, #112]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f58:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d016      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6a:	f7fb fb7d 	bl	8000668 <HAL_GetTick>
 8004f6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f70:	e00b      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fb fb79 	bl	8000668 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d902      	bls.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	74fb      	strb	r3, [r7, #19]
            break;
 8004f88:	e006      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ec      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004f98:	7cfb      	ldrb	r3, [r7, #19]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	4904      	ldr	r1, [pc, #16]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fb6:	e009      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	74bb      	strb	r3, [r7, #18]
 8004fbc:	e006      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fcc:	7c7b      	ldrb	r3, [r7, #17]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d105      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd2:	4ba6      	ldr	r3, [pc, #664]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	4aa5      	ldr	r2, [pc, #660]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fea:	4ba0      	ldr	r3, [pc, #640]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f023 0203 	bic.w	r2, r3, #3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	499c      	ldr	r1, [pc, #624]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800500c:	4b97      	ldr	r3, [pc, #604]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005012:	f023 020c 	bic.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	4994      	ldr	r1, [pc, #592]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800502e:	4b8f      	ldr	r3, [pc, #572]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	498b      	ldr	r1, [pc, #556]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005050:	4b86      	ldr	r3, [pc, #536]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	4983      	ldr	r1, [pc, #524]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005072:	4b7e      	ldr	r3, [pc, #504]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005080:	497a      	ldr	r1, [pc, #488]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005094:	4b75      	ldr	r3, [pc, #468]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a2:	4972      	ldr	r1, [pc, #456]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050b6:	4b6d      	ldr	r3, [pc, #436]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c4:	4969      	ldr	r1, [pc, #420]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050d8:	4b64      	ldr	r3, [pc, #400]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e6:	4961      	ldr	r1, [pc, #388]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050fa:	4b5c      	ldr	r3, [pc, #368]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005108:	4958      	ldr	r1, [pc, #352]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800511c:	4b53      	ldr	r3, [pc, #332]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005122:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	4950      	ldr	r1, [pc, #320]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800513e:	4b4b      	ldr	r3, [pc, #300]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	4947      	ldr	r1, [pc, #284]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005160:	4b42      	ldr	r3, [pc, #264]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005166:	f023 0203 	bic.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	493f      	ldr	r1, [pc, #252]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d028      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005182:	4b3a      	ldr	r3, [pc, #232]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4936      	ldr	r1, [pc, #216]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a0:	d106      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a2:	4b32      	ldr	r3, [pc, #200]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	4a31      	ldr	r2, [pc, #196]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ac:	60d3      	str	r3, [r2, #12]
 80051ae:	e011      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	2101      	movs	r1, #1
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fd8f 	bl	8005ce4 <RCCEx_PLLSAI1_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051ca:	7cfb      	ldrb	r3, [r7, #19]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d028      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051e0:	4b22      	ldr	r3, [pc, #136]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ee:	491f      	ldr	r1, [pc, #124]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fe:	d106      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005200:	4b1a      	ldr	r3, [pc, #104]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800520a:	60d3      	str	r3, [r2, #12]
 800520c:	e011      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005216:	d10c      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	2101      	movs	r1, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fd60 	bl	8005ce4 <RCCEx_PLLSAI1_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d02a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800524c:	4907      	ldr	r1, [pc, #28]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800525c:	d108      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800525e:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4a02      	ldr	r2, [pc, #8]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005268:	60d3      	str	r3, [r2, #12]
 800526a:	e013      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800526c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005278:	d10c      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	2101      	movs	r1, #1
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fd2f 	bl	8005ce4 <RCCEx_PLLSAI1_Config>
 8005286:	4603      	mov	r3, r0
 8005288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800528a:	7cfb      	ldrb	r3, [r7, #19]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02f      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a0:	4b2c      	ldr	r3, [pc, #176]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ae:	4929      	ldr	r1, [pc, #164]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052be:	d10d      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	2102      	movs	r1, #2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fd0c 	bl	8005ce4 <RCCEx_PLLSAI1_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052d0:	7cfb      	ldrb	r3, [r7, #19]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d014      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	74bb      	strb	r3, [r7, #18]
 80052da:	e011      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3320      	adds	r3, #32
 80052ea:	2102      	movs	r1, #2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fde9 	bl	8005ec4 <RCCEx_PLLSAI2_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531c:	490d      	ldr	r1, [pc, #52]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00b      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005330:	4b08      	ldr	r3, [pc, #32]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005340:	4904      	ldr	r1, [pc, #16]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005348:	7cbb      	ldrb	r3, [r7, #18]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000

08005358 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800536a:	d137      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800536c:	4ba8      	ldr	r3, [pc, #672]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537e:	d014      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005384:	d01e      	beq.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8005386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538a:	d001      	beq.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800538c:	f000 bc90 	b.w	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005390:	4b9f      	ldr	r3, [pc, #636]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b02      	cmp	r3, #2
 800539c:	f040 8483 	bne.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
        frequency = LSE_VALUE;
 80053a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053a4:	61fb      	str	r3, [r7, #28]
      break;
 80053a6:	f000 bc7e 	b.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80053aa:	4b99      	ldr	r3, [pc, #612]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	f040 8478 	bne.w	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x952>
          frequency = LSI_VALUE;
 80053ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80053be:	61fb      	str	r3, [r7, #28]
      break;
 80053c0:	f000 bc73 	b.w	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x952>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80053c4:	4b92      	ldr	r3, [pc, #584]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053d0:	f040 846d 	bne.w	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        frequency = HSE_VALUE / 32U;
 80053d4:	4b8f      	ldr	r3, [pc, #572]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80053d6:	61fb      	str	r3, [r7, #28]
      break;
 80053d8:	f000 bc69 	b.w	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053dc:	4b8c      	ldr	r3, [pc, #560]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d023      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d02e      	beq.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d139      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80053f4:	4b86      	ldr	r3, [pc, #536]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d116      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005400:	4b83      	ldr	r3, [pc, #524]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800540c:	4b80      	ldr	r3, [pc, #512]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	e005      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005418:	4b7d      	ldr	r3, [pc, #500]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	4a7c      	ldr	r2, [pc, #496]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800542c:	e01f      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
      break;
 8005432:	e01c      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005434:	4b76      	ldr	r3, [pc, #472]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005440:	d102      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8005442:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005444:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005446:	e012      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
      break;
 800544c:	e00f      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800544e:	4b70      	ldr	r3, [pc, #448]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800545a:	d102      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 800545c:	4b70      	ldr	r3, [pc, #448]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800545e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005460:	e005      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
      break;
 8005466:	e002      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
      break;
 800546c:	bf00      	nop
    }

    switch(PeriphClk)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005474:	f000 8374 	beq.w	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547c:	d827      	bhi.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800547e:	2b10      	cmp	r3, #16
 8005480:	f000 81f9 	beq.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d811      	bhi.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005488:	2b02      	cmp	r3, #2
 800548a:	f000 8142 	beq.w	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800548e:	2b02      	cmp	r3, #2
 8005490:	d804      	bhi.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005492:	2b01      	cmp	r3, #1
 8005494:	f000 8105 	beq.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005498:	f000 bc0a 	b.w	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800549c:	2b04      	cmp	r3, #4
 800549e:	f000 8182 	beq.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	f000 81b3 	beq.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
      break;
 80054a8:	f000 bc02 	b.w	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	f000 82cd 	beq.w	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d803      	bhi.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	f000 821c 	beq.w	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
      break;
 80054bc:	e3f8      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	f000 82e7 	beq.w	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80054c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c8:	f000 8306 	beq.w	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
      break;
 80054cc:	e3f0      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 80054ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d2:	f000 8247 	beq.w	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80054d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054da:	d811      	bhi.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e0:	d025      	beq.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80054e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e6:	d804      	bhi.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	f000 837e 	beq.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80054f0:	e3de      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	d021      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d025      	beq.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
      break;
 80054fe:	e3d7      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 8005500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005504:	d021      	beq.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8005506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800550a:	d808      	bhi.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800550c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005510:	f000 83ad 	beq.w	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005518:	f000 8287 	beq.w	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
      break;
 800551c:	e3c8      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
    switch(PeriphClk)
 800551e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005522:	d012      	beq.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8005524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005528:	f000 82f9 	beq.w	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      break;
 800552c:	e3c0      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800552e:	69b9      	ldr	r1, [r7, #24]
 8005530:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005534:	f000 fda0 	bl	8006078 <RCCEx_GetSAIxPeriphCLKFreq>
 8005538:	61f8      	str	r0, [r7, #28]
      break;
 800553a:	e3b9      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800553c:	69b9      	ldr	r1, [r7, #24]
 800553e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005542:	f000 fd99 	bl	8006078 <RCCEx_GetSAIxPeriphCLKFreq>
 8005546:	61f8      	str	r0, [r7, #28]
      break;
 8005548:	e3b2      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800554a:	4b31      	ldr	r3, [pc, #196]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005554:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800555c:	d062      	beq.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800555e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005562:	d803      	bhi.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 808a 	beq.w	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
          break;
 800556a:	e099      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        switch(srcclk)
 800556c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005570:	d021      	beq.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005572:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005576:	d000      	beq.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          break;
 8005578:	e092      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800557a:	4b25      	ldr	r3, [pc, #148]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	f040 8085 	bne.w	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005588:	4b21      	ldr	r3, [pc, #132]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005594:	4b1e      	ldr	r3, [pc, #120]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	e005      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80055a0:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	4a1a      	ldr	r2, [pc, #104]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80055ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b2:	61fb      	str	r3, [r7, #28]
          break;
 80055b4:	e06d      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80055b6:	4b16      	ldr	r3, [pc, #88]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055c2:	d168      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d0:	d161      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055d2:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055dc:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	fb02 f203 	mul.w	r2, r2, r3
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	3301      	adds	r3, #1
 80055f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80055f8:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0d5b      	lsrs	r3, r3, #21
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	3301      	adds	r3, #1
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	61fb      	str	r3, [r7, #28]
          break;
 800560e:	e042      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
 8005610:	40021000 	.word	0x40021000
 8005614:	0003d090 	.word	0x0003d090
 8005618:	0800ecf0 	.word	0x0800ecf0
 800561c:	00f42400 	.word	0x00f42400
 8005620:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005624:	4bb0      	ldr	r3, [pc, #704]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800562c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005630:	d133      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005632:	4bad      	ldr	r3, [pc, #692]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563e:	d12c      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005640:	4ba9      	ldr	r3, [pc, #676]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	fb02 f203 	mul.w	r2, r2, r3
 8005654:	4ba4      	ldr	r3, [pc, #656]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	3301      	adds	r3, #1
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005666:	4ba0      	ldr	r3, [pc, #640]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	0d5b      	lsrs	r3, r3, #21
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	3301      	adds	r3, #1
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	61fb      	str	r3, [r7, #28]
          break;
 800567c:	e00d      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800567e:	4b9a      	ldr	r3, [pc, #616]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b02      	cmp	r3, #2
 800568a:	d108      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            frequency = HSI48_VALUE;
 800568c:	4b97      	ldr	r3, [pc, #604]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800568e:	61fb      	str	r3, [r7, #28]
          break;
 8005690:	e005      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          break;
 8005692:	bf00      	nop
 8005694:	e30c      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005696:	bf00      	nop
 8005698:	e30a      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800569a:	bf00      	nop
 800569c:	e308      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800569e:	bf00      	nop
        break;
 80056a0:	e306      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80056a2:	4b91      	ldr	r3, [pc, #580]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d828      	bhi.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80056b4:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	080056cd 	.word	0x080056cd
 80056c0:	080056d5 	.word	0x080056d5
 80056c4:	080056dd 	.word	0x080056dd
 80056c8:	080056f1 	.word	0x080056f1
          frequency = HAL_RCC_GetPCLK2Freq();
 80056cc:	f7ff fad6 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 80056d0:	61f8      	str	r0, [r7, #28]
          break;
 80056d2:	e01d      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetSysClockFreq();
 80056d4:	f7ff fa26 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 80056d8:	61f8      	str	r0, [r7, #28]
          break;
 80056da:	e019      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056dc:	4b82      	ldr	r3, [pc, #520]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e8:	d10f      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
            frequency = HSI_VALUE;
 80056ea:	4b81      	ldr	r3, [pc, #516]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80056ec:	61fb      	str	r3, [r7, #28]
          break;
 80056ee:	e00c      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056f0:	4b7d      	ldr	r3, [pc, #500]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d107      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = LSE_VALUE;
 80056fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005702:	61fb      	str	r3, [r7, #28]
          break;
 8005704:	e003      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          break;
 8005706:	bf00      	nop
 8005708:	e2d2      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800570a:	bf00      	nop
 800570c:	e2d0      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800570e:	bf00      	nop
        break;
 8005710:	e2ce      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005712:	4b75      	ldr	r3, [pc, #468]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b0c      	cmp	r3, #12
 8005722:	d83a      	bhi.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005724:	a201      	add	r2, pc, #4	; (adr r2, 800572c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005761 	.word	0x08005761
 8005730:	0800579b 	.word	0x0800579b
 8005734:	0800579b 	.word	0x0800579b
 8005738:	0800579b 	.word	0x0800579b
 800573c:	08005769 	.word	0x08005769
 8005740:	0800579b 	.word	0x0800579b
 8005744:	0800579b 	.word	0x0800579b
 8005748:	0800579b 	.word	0x0800579b
 800574c:	08005771 	.word	0x08005771
 8005750:	0800579b 	.word	0x0800579b
 8005754:	0800579b 	.word	0x0800579b
 8005758:	0800579b 	.word	0x0800579b
 800575c:	08005785 	.word	0x08005785
          frequency = HAL_RCC_GetPCLK1Freq();
 8005760:	f7ff fa76 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005764:	61f8      	str	r0, [r7, #28]
          break;
 8005766:	e01d      	b.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005768:	f7ff f9dc 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 800576c:	61f8      	str	r0, [r7, #28]
          break;
 800576e:	e019      	b.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005770:	4b5d      	ldr	r3, [pc, #372]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577c:	d10f      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HSI_VALUE;
 800577e:	4b5c      	ldr	r3, [pc, #368]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005780:	61fb      	str	r3, [r7, #28]
          break;
 8005782:	e00c      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005784:	4b58      	ldr	r3, [pc, #352]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b02      	cmp	r3, #2
 8005790:	d107      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005796:	61fb      	str	r3, [r7, #28]
          break;
 8005798:	e003      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          break;
 800579a:	bf00      	nop
 800579c:	e288      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800579e:	bf00      	nop
 80057a0:	e286      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80057a2:	bf00      	nop
        break;
 80057a4:	e284      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80057a6:	4b50      	ldr	r3, [pc, #320]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057b0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d00d      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d802      	bhi.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          break;
 80057c0:	e024      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        switch(srcclk)
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80057c6:	2b30      	cmp	r3, #48	; 0x30
 80057c8:	d012      	beq.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
          break;
 80057ca:	e01f      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7ff fa40 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 80057d0:	61f8      	str	r0, [r7, #28]
          break;
 80057d2:	e01b      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          frequency = HAL_RCC_GetSysClockFreq();
 80057d4:	f7ff f9a6 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 80057d8:	61f8      	str	r0, [r7, #28]
          break;
 80057da:	e017      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057dc:	4b42      	ldr	r3, [pc, #264]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	d10d      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
            frequency = HSI_VALUE;
 80057ea:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057ec:	61fb      	str	r3, [r7, #28]
          break;
 80057ee:	e00a      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057f0:	4b3d      	ldr	r3, [pc, #244]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d105      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005802:	61fb      	str	r3, [r7, #28]
          break;
 8005804:	e001      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          break;
 8005806:	bf00      	nop
 8005808:	e252      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800580a:	bf00      	nop
        break;
 800580c:	e250      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005818:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d00d      	beq.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d802      	bhi.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
          break;
 8005828:	e024      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        switch(srcclk)
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800582e:	2bc0      	cmp	r3, #192	; 0xc0
 8005830:	d012      	beq.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
          break;
 8005832:	e01f      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005834:	f7ff fa0c 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005838:	61f8      	str	r0, [r7, #28]
          break;
 800583a:	e01b      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          frequency = HAL_RCC_GetSysClockFreq();
 800583c:	f7ff f972 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8005840:	61f8      	str	r0, [r7, #28]
          break;
 8005842:	e017      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005844:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005850:	d10d      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSI_VALUE;
 8005852:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005854:	61fb      	str	r3, [r7, #28]
          break;
 8005856:	e00a      	b.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b02      	cmp	r3, #2
 8005864:	d105      	bne.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = LSE_VALUE;
 8005866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586a:	61fb      	str	r3, [r7, #28]
          break;
 800586c:	e001      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          break;
 800586e:	bf00      	nop
 8005870:	e21e      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005872:	bf00      	nop
        break;
 8005874:	e21c      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005876:	4b1c      	ldr	r3, [pc, #112]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005880:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005888:	d010      	beq.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800588a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588e:	d802      	bhi.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
          break;
 8005894:	e026      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
        switch(srcclk)
 8005896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589a:	d00b      	beq.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 800589c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a0:	d012      	beq.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          break;
 80058a2:	e01f      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058a4:	f7ff f9d4 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 80058a8:	61f8      	str	r0, [r7, #28]
          break;
 80058aa:	e01b      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          frequency = HAL_RCC_GetSysClockFreq();
 80058ac:	f7ff f93a 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 80058b0:	61f8      	str	r0, [r7, #28]
          break;
 80058b2:	e017      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c0:	d10d      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x586>
            frequency = HSI_VALUE;
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80058c4:	61fb      	str	r3, [r7, #28]
          break;
 80058c6:	e00a      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058c8:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d105      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = LSE_VALUE;
 80058d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058da:	61fb      	str	r3, [r7, #28]
          break;
 80058dc:	e001      	b.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          break;
 80058de:	bf00      	nop
 80058e0:	e1e6      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 80058e2:	bf00      	nop
        break;
 80058e4:	e1e4      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80058e6:	bf00      	nop
 80058e8:	40021000 	.word	0x40021000
 80058ec:	02dc6c00 	.word	0x02dc6c00
 80058f0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80058f4:	4ba8      	ldr	r3, [pc, #672]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058fe:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005906:	d010      	beq.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590c:	d802      	bhi.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
          break;
 8005912:	e026      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        switch(srcclk)
 8005914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005918:	d00b      	beq.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800591a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800591e:	d012      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          break;
 8005920:	e01f      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005922:	f7ff f995 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005926:	61f8      	str	r0, [r7, #28]
          break;
 8005928:	e01b      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = HAL_RCC_GetSysClockFreq();
 800592a:	f7ff f8fb 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 800592e:	61f8      	str	r0, [r7, #28]
          break;
 8005930:	e017      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005932:	4b99      	ldr	r3, [pc, #612]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593e:	d10d      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
            frequency = HSI_VALUE;
 8005940:	4b96      	ldr	r3, [pc, #600]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005942:	61fb      	str	r3, [r7, #28]
          break;
 8005944:	e00a      	b.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005946:	4b94      	ldr	r3, [pc, #592]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d105      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = LSE_VALUE;
 8005954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005958:	61fb      	str	r3, [r7, #28]
          break;
 800595a:	e001      	b.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          break;
 800595c:	bf00      	nop
 800595e:	e1a7      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005960:	bf00      	nop
        break;
 8005962:	e1a5      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005964:	4b8c      	ldr	r3, [pc, #560]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800596e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005976:	d02f      	beq.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800597c:	d003      	beq.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800597e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005982:	d004      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
          break;
 8005984:	e050      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005986:	f7ff f8cd 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 800598a:	61f8      	str	r0, [r7, #28]
          break;
 800598c:	e04c      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800598e:	4b82      	ldr	r3, [pc, #520]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d043      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800599a:	4b7f      	ldr	r3, [pc, #508]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	fb02 f203 	mul.w	r2, r2, r3
 80059ae:	4b7a      	ldr	r3, [pc, #488]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	3301      	adds	r3, #1
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80059c0:	4b75      	ldr	r3, [pc, #468]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	0e5b      	lsrs	r3, r3, #25
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	3301      	adds	r3, #1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d4:	61fb      	str	r3, [r7, #28]
          break;
 80059d6:	e024      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80059d8:	4b6f      	ldr	r3, [pc, #444]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d020      	beq.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80059e4:	4b6c      	ldr	r3, [pc, #432]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	0a1b      	lsrs	r3, r3, #8
 80059ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ee:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	fb02 f203 	mul.w	r2, r2, r3
 80059f8:	4b67      	ldr	r3, [pc, #412]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	3301      	adds	r3, #1
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005a0a:	4b63      	ldr	r3, [pc, #396]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	0e5b      	lsrs	r3, r3, #25
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	3301      	adds	r3, #1
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	61fb      	str	r3, [r7, #28]
          break;
 8005a20:	e001      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
          break;
 8005a22:	bf00      	nop
 8005a24:	e144      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005a26:	bf00      	nop
        break;
 8005a28:	e142      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005a2a:	4b5b      	ldr	r3, [pc, #364]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a34:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a3c:	f7ff f91e 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8005a40:	61f8      	str	r0, [r7, #28]
        break;
 8005a42:	e135      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a44:	f7ff f86e 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8005a48:	61f8      	str	r0, [r7, #28]
        break;
 8005a4a:	e131      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005a4c:	4b52      	ldr	r3, [pc, #328]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a56:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	d009      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8005a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d000      	beq.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
          break;
 8005a6a:	e011      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a6c:	f7ff f8f0 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005a70:	61f8      	str	r0, [r7, #28]
          break;
 8005a72:	e00d      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a74:	f7ff f856 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8005a78:	61f8      	str	r0, [r7, #28]
          break;
 8005a7a:	e009      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a7c:	4b46      	ldr	r3, [pc, #280]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a88:	d101      	bne.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x736>
            frequency = HSI_VALUE;
 8005a8a:	4b44      	ldr	r3, [pc, #272]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005a8c:	61fb      	str	r3, [r7, #28]
          break;
 8005a8e:	bf00      	nop
        break;
 8005a90:	e10e      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a9c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa4:	d009      	beq.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
 8005aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d000      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          break;
 8005ab0:	e011      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ab2:	f7ff f8cd 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005ab6:	61f8      	str	r0, [r7, #28]
          break;
 8005ab8:	e00d      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005aba:	f7ff f833 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8005abe:	61f8      	str	r0, [r7, #28]
          break;
 8005ac0:	e009      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ac2:	4b35      	ldr	r3, [pc, #212]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ace:	d101      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
            frequency = HSI_VALUE;
 8005ad0:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005ad2:	61fb      	str	r3, [r7, #28]
          break;
 8005ad4:	bf00      	nop
        break;
 8005ad6:	e0eb      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005ad8:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ae2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aea:	d009      	beq.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d000      	beq.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          break;
 8005af6:	e011      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7ff f8aa 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005afc:	61f8      	str	r0, [r7, #28]
          break;
 8005afe:	e00d      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b00:	f7ff f810 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8005b04:	61f8      	str	r0, [r7, #28]
          break;
 8005b06:	e009      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b14:	d101      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
            frequency = HSI_VALUE;
 8005b16:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005b18:	61fb      	str	r3, [r7, #28]
          break;
 8005b1a:	bf00      	nop
        break;
 8005b1c:	e0c8      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005b1e:	4b1e      	ldr	r3, [pc, #120]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d302      	bcc.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d008      	beq.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          break;
 8005b38:	e011      	b.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b3a:	f7ff f889 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005b3e:	61f8      	str	r0, [r7, #28]
          break;
 8005b40:	e00d      	b.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b42:	f7fe ffef 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8005b46:	61f8      	str	r0, [r7, #28]
          break;
 8005b48:	e009      	b.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b56:	d101      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
            frequency = HSI_VALUE;
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005b5a:	61fb      	str	r3, [r7, #28]
          break;
 8005b5c:	bf00      	nop
        break;
 8005b5e:	e0a7      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b6a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b72:	d015      	beq.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8005b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b78:	d802      	bhi.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
 8005b7e:	e034      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        switch(srcclk)
 8005b80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b84:	d017      	beq.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005b86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b8a:	d01e      	beq.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005b8c:	e02d      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b8e:	f7ff f85f 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005b92:	61f8      	str	r0, [r7, #28]
          break;
 8005b94:	e029      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005b96:	bf00      	nop
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ba0:	4b46      	ldr	r3, [pc, #280]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d118      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
              frequency = LSI_VALUE;
 8005bae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005bb2:	61fb      	str	r3, [r7, #28]
          break;
 8005bb4:	e014      	b.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bb6:	4b41      	ldr	r3, [pc, #260]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc2:	d10f      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
            frequency = HSI_VALUE;
 8005bc4:	4b3e      	ldr	r3, [pc, #248]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8005bc6:	61fb      	str	r3, [r7, #28]
          break;
 8005bc8:	e00c      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bca:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
            frequency = LSE_VALUE;
 8005bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bdc:	61fb      	str	r3, [r7, #28]
          break;
 8005bde:	e003      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          break;
 8005be0:	bf00      	nop
 8005be2:	e065      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005be4:	bf00      	nop
 8005be6:	e063      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005be8:	bf00      	nop
        break;
 8005bea:	e061      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005bec:	4b33      	ldr	r3, [pc, #204]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005bf6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfe:	d010      	beq.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c04:	d802      	bhi.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          break;
 8005c0a:	e02f      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
        switch(srcclk)
 8005c0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c10:	d012      	beq.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 8005c12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c16:	d019      	beq.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005c18:	e028      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c1a:	f7ff f819 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005c1e:	61f8      	str	r0, [r7, #28]
          break;
 8005c20:	e024      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c22:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d118      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
              frequency = LSI_VALUE;
 8005c30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c34:	61fb      	str	r3, [r7, #28]
          break;
 8005c36:	e014      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c38:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c44:	d10f      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
            frequency = HSI_VALUE;
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8005c48:	61fb      	str	r3, [r7, #28]
          break;
 8005c4a:	e00c      	b.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x90e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d107      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
            frequency = LSE_VALUE;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5e:	61fb      	str	r3, [r7, #28]
          break;
 8005c60:	e003      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8005c62:	bf00      	nop
 8005c64:	e024      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005c66:	bf00      	nop
 8005c68:	e022      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8005c6a:	bf00      	nop
        break;
 8005c6c:	e020      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c78:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d004      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8005c86:	e00d      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c88:	f7fe ffe2 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8005c8c:	61f8      	str	r0, [r7, #28]
          break;
 8005c8e:	e009      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            frequency = HSI_VALUE;
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
 8005ca0:	61fb      	str	r3, [r7, #28]
          break;
 8005ca2:	bf00      	nop
        break;
 8005ca4:	e004      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
      break;
 8005cae:	bf00      	nop
    }
  }

  return(frequency);
 8005cb0:	69fb      	ldr	r3, [r7, #28]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	00f42400 	.word	0x00f42400

08005cc4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005cc8:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005cce:	f043 0304 	orr.w	r3, r3, #4
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000

08005ce4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cf2:	4b73      	ldr	r3, [pc, #460]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d018      	beq.n	8005d30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cfe:	4b70      	ldr	r3, [pc, #448]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0203 	and.w	r2, r3, #3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d10d      	bne.n	8005d2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
       ||
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d16:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
       ||
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d044      	beq.n	8005db4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	e041      	b.n	8005db4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d00c      	beq.n	8005d52 <RCCEx_PLLSAI1_Config+0x6e>
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d013      	beq.n	8005d64 <RCCEx_PLLSAI1_Config+0x80>
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d120      	bne.n	8005d82 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d40:	4b5f      	ldr	r3, [pc, #380]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11d      	bne.n	8005d88 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d50:	e01a      	b.n	8005d88 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d52:	4b5b      	ldr	r3, [pc, #364]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d62:	e013      	b.n	8005d8c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d64:	4b56      	ldr	r3, [pc, #344]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10f      	bne.n	8005d90 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d70:	4b53      	ldr	r3, [pc, #332]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d109      	bne.n	8005d90 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d80:	e006      	b.n	8005d90 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
      break;
 8005d86:	e004      	b.n	8005d92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005d88:	bf00      	nop
 8005d8a:	e002      	b.n	8005d92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005d90:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10d      	bne.n	8005db4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d98:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	430b      	orrs	r3, r1
 8005dae:	4944      	ldr	r1, [pc, #272]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d17c      	bne.n	8005eb4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005dba:	4b41      	ldr	r3, [pc, #260]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a40      	ldr	r2, [pc, #256]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc6:	f7fa fc4f 	bl	8000668 <HAL_GetTick>
 8005dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dcc:	e009      	b.n	8005de2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dce:	f7fa fc4b 	bl	8000668 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d902      	bls.n	8005de2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	73fb      	strb	r3, [r7, #15]
        break;
 8005de0:	e005      	b.n	8005dee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005de2:	4b37      	ldr	r3, [pc, #220]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ef      	bne.n	8005dce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d15f      	bne.n	8005eb4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d110      	bne.n	8005e1c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dfa:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005e02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6892      	ldr	r2, [r2, #8]
 8005e0a:	0211      	lsls	r1, r2, #8
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68d2      	ldr	r2, [r2, #12]
 8005e10:	06d2      	lsls	r2, r2, #27
 8005e12:	430a      	orrs	r2, r1
 8005e14:	492a      	ldr	r1, [pc, #168]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	610b      	str	r3, [r1, #16]
 8005e1a:	e027      	b.n	8005e6c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d112      	bne.n	8005e48 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e22:	4b27      	ldr	r3, [pc, #156]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6892      	ldr	r2, [r2, #8]
 8005e32:	0211      	lsls	r1, r2, #8
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6912      	ldr	r2, [r2, #16]
 8005e38:	0852      	lsrs	r2, r2, #1
 8005e3a:	3a01      	subs	r2, #1
 8005e3c:	0552      	lsls	r2, r2, #21
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	491f      	ldr	r1, [pc, #124]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	610b      	str	r3, [r1, #16]
 8005e46:	e011      	b.n	8005e6c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e48:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6892      	ldr	r2, [r2, #8]
 8005e58:	0211      	lsls	r1, r2, #8
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6952      	ldr	r2, [r2, #20]
 8005e5e:	0852      	lsrs	r2, r2, #1
 8005e60:	3a01      	subs	r2, #1
 8005e62:	0652      	lsls	r2, r2, #25
 8005e64:	430a      	orrs	r2, r1
 8005e66:	4916      	ldr	r1, [pc, #88]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e6c:	4b14      	ldr	r3, [pc, #80]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e78:	f7fa fbf6 	bl	8000668 <HAL_GetTick>
 8005e7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e7e:	e009      	b.n	8005e94 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e80:	f7fa fbf2 	bl	8000668 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d902      	bls.n	8005e94 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	73fb      	strb	r3, [r7, #15]
          break;
 8005e92:	e005      	b.n	8005ea0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0ef      	beq.n	8005e80 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	4904      	ldr	r1, [pc, #16]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40021000 	.word	0x40021000

08005ec4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ed2:	4b68      	ldr	r3, [pc, #416]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d018      	beq.n	8005f10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ede:	4b65      	ldr	r3, [pc, #404]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f003 0203 	and.w	r2, r3, #3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d10d      	bne.n	8005f0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ef6:	4b5f      	ldr	r3, [pc, #380]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
       ||
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d044      	beq.n	8005f94 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
 8005f0e:	e041      	b.n	8005f94 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d00c      	beq.n	8005f32 <RCCEx_PLLSAI2_Config+0x6e>
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d013      	beq.n	8005f44 <RCCEx_PLLSAI2_Config+0x80>
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d120      	bne.n	8005f62 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f20:	4b54      	ldr	r3, [pc, #336]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d11d      	bne.n	8005f68 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f30:	e01a      	b.n	8005f68 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f32:	4b50      	ldr	r3, [pc, #320]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d116      	bne.n	8005f6c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f42:	e013      	b.n	8005f6c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f44:	4b4b      	ldr	r3, [pc, #300]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10f      	bne.n	8005f70 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f50:	4b48      	ldr	r3, [pc, #288]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f60:	e006      	b.n	8005f70 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
      break;
 8005f66:	e004      	b.n	8005f72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005f68:	bf00      	nop
 8005f6a:	e002      	b.n	8005f72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005f6c:	bf00      	nop
 8005f6e:	e000      	b.n	8005f72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005f70:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f78:	4b3e      	ldr	r3, [pc, #248]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	4939      	ldr	r1, [pc, #228]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d166      	bne.n	8006068 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f9a:	4b36      	ldr	r3, [pc, #216]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a35      	ldr	r2, [pc, #212]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa6:	f7fa fb5f 	bl	8000668 <HAL_GetTick>
 8005faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fac:	e009      	b.n	8005fc2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fae:	f7fa fb5b 	bl	8000668 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d902      	bls.n	8005fc2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	73fb      	strb	r3, [r7, #15]
        break;
 8005fc0:	e005      	b.n	8005fce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fc2:	4b2c      	ldr	r3, [pc, #176]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1ef      	bne.n	8005fae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d149      	bne.n	8006068 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d110      	bne.n	8005ffc <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fda:	4b26      	ldr	r3, [pc, #152]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005fe2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6892      	ldr	r2, [r2, #8]
 8005fea:	0211      	lsls	r1, r2, #8
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68d2      	ldr	r2, [r2, #12]
 8005ff0:	06d2      	lsls	r2, r2, #27
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	491f      	ldr	r1, [pc, #124]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	614b      	str	r3, [r1, #20]
 8005ffa:	e011      	b.n	8006020 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ffc:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6892      	ldr	r2, [r2, #8]
 800600c:	0211      	lsls	r1, r2, #8
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6912      	ldr	r2, [r2, #16]
 8006012:	0852      	lsrs	r2, r2, #1
 8006014:	3a01      	subs	r2, #1
 8006016:	0652      	lsls	r2, r2, #25
 8006018:	430a      	orrs	r2, r1
 800601a:	4916      	ldr	r1, [pc, #88]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 800601c:	4313      	orrs	r3, r2
 800601e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006020:	4b14      	ldr	r3, [pc, #80]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fa fb1c 	bl	8000668 <HAL_GetTick>
 8006030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006032:	e009      	b.n	8006048 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006034:	f7fa fb18 	bl	8000668 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d902      	bls.n	8006048 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
          break;
 8006046:	e005      	b.n	8006054 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ef      	beq.n	8006034 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800605a:	4b06      	ldr	r3, [pc, #24]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4904      	ldr	r1, [pc, #16]	; (8006074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006064:	4313      	orrs	r3, r2
 8006066:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000

08006078 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006078:	b480      	push	{r7}
 800607a:	b089      	sub	sp, #36	; 0x24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006094:	d10c      	bne.n	80060b0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006096:	4b6b      	ldr	r3, [pc, #428]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80060a0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060a8:	d112      	bne.n	80060d0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80060aa:	4b67      	ldr	r3, [pc, #412]	; (8006248 <RCCEx_GetSAIxPeriphCLKFreq+0x1d0>)
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	e00f      	b.n	80060d0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	d10b      	bne.n	80060d0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80060b8:	4b62      	ldr	r3, [pc, #392]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80060ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060be:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80060c2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060ca:	d101      	bne.n	80060d0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80060cc:	4b5e      	ldr	r3, [pc, #376]	; (8006248 <RCCEx_GetSAIxPeriphCLKFreq+0x1d0>)
 80060ce:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f040 80ae 	bne.w	8006234 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
  {
    pllvco = InputFrequency;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060e2:	d003      	beq.n	80060ec <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060ea:	d133      	bne.n	8006154 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80060ec:	4b55      	ldr	r3, [pc, #340]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 809d 	beq.w	8006234 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060fa:	4b52      	ldr	r3, [pc, #328]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	3301      	adds	r3, #1
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800610e:	4b4d      	ldr	r3, [pc, #308]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	0a1b      	lsrs	r3, r3, #8
 8006114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006118:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800611a:	4b4a      	ldr	r3, [pc, #296]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	0edb      	lsrs	r3, r3, #27
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800612c:	4b45      	ldr	r3, [pc, #276]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
          {
            pllp = 17U;
 8006138:	2311      	movs	r3, #17
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e001      	b.n	8006142 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          }
          else
          {
            pllp = 7U;
 800613e:	2307      	movs	r3, #7
 8006140:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	fb02 f203 	mul.w	r2, r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006152:	e06f      	b.n	8006234 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d132      	bne.n	80061c0 <RCCEx_GetSAIxPeriphCLKFreq+0x148>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800615a:	4b3a      	ldr	r3, [pc, #232]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d066      	beq.n	8006234 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006166:	4b37      	ldr	r3, [pc, #220]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	091b      	lsrs	r3, r3, #4
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	3301      	adds	r3, #1
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800617a:	4b32      	ldr	r3, [pc, #200]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006184:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006186:	4b2f      	ldr	r3, [pc, #188]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	0edb      	lsrs	r3, r3, #27
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <RCCEx_GetSAIxPeriphCLKFreq+0x136>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006198:	4b2a      	ldr	r3, [pc, #168]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <RCCEx_GetSAIxPeriphCLKFreq+0x132>
          {
            pllp = 17U;
 80061a4:	2311      	movs	r3, #17
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e001      	b.n	80061ae <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          }
          else
          {
            pllp = 7U;
 80061aa:	2307      	movs	r3, #7
 80061ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	fb02 f203 	mul.w	r2, r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	e039      	b.n	8006234 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c6:	d003      	beq.n	80061d0 <RCCEx_GetSAIxPeriphCLKFreq+0x158>
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061ce:	d131      	bne.n	8006234 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80061d0:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d02b      	beq.n	8006234 <RCCEx_GetSAIxPeriphCLKFreq+0x1bc>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061dc:	4b19      	ldr	r3, [pc, #100]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	3301      	adds	r3, #1
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80061f0:	4b14      	ldr	r3, [pc, #80]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80061fc:	4b11      	ldr	r3, [pc, #68]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	0edb      	lsrs	r3, r3, #27
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800620e:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <RCCEx_GetSAIxPeriphCLKFreq+0x1cc>)
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>
          {
            pllp = 17U;
 800621a:	2311      	movs	r3, #17
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e001      	b.n	8006224 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>
          }
          else
          {
            pllp = 7U;
 8006220:	2307      	movs	r3, #7
 8006222:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	fb02 f203 	mul.w	r2, r2, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006234:	69fb      	ldr	r3, [r7, #28]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3724      	adds	r7, #36	; 0x24
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40021000 	.word	0x40021000
 8006248:	001fff68 	.word	0x001fff68

0800624c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e14a      	b.n	80064f4 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f007 f952 	bl	800d51c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f94d 	bl	8006518 <SAI_Disable>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e135      	b.n	80064f4 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d007      	beq.n	80062a8 <HAL_SAI_Init+0x5c>
 8006298:	2b01      	cmp	r3, #1
 800629a:	d302      	bcc.n	80062a2 <HAL_SAI_Init+0x56>
 800629c:	2b02      	cmp	r3, #2
 800629e:	d006      	beq.n	80062ae <HAL_SAI_Init+0x62>
 80062a0:	e008      	b.n	80062b4 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
      break;
 80062a6:	e008      	b.n	80062ba <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80062a8:	2310      	movs	r3, #16
 80062aa:	61fb      	str	r3, [r7, #28]
      break;
 80062ac:	e005      	b.n	80062ba <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80062ae:	2320      	movs	r3, #32
 80062b0:	61fb      	str	r3, [r7, #28]
      break;
 80062b2:	e002      	b.n	80062ba <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61fb      	str	r3, [r7, #28]
      break;
 80062b8:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d81d      	bhi.n	80062fe <HAL_SAI_Init+0xb2>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <HAL_SAI_Init+0x7c>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	080062df 	.word	0x080062df
 80062d0:	080062e7 	.word	0x080062e7
 80062d4:	080062ef 	.word	0x080062ef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
      break;
 80062dc:	e012      	b.n	8006304 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80062de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e2:	617b      	str	r3, [r7, #20]
      break;
 80062e4:	e00e      	b.n	8006304 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062ea:	617b      	str	r3, [r7, #20]
      break;
 80062ec:	e00a      	b.n	8006304 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062f2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
      break;
 80062fc:	e002      	b.n	8006304 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
      break;
 8006302:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a7c      	ldr	r2, [pc, #496]	; (80064fc <HAL_SAI_Init+0x2b0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_SAI_Init+0xcc>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a7b      	ldr	r2, [pc, #492]	; (8006500 <HAL_SAI_Init+0x2b4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d103      	bne.n	8006320 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006318:	4a7a      	ldr	r2, [pc, #488]	; (8006504 <HAL_SAI_Init+0x2b8>)
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e002      	b.n	8006326 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006320:	4a79      	ldr	r2, [pc, #484]	; (8006508 <HAL_SAI_Init+0x2bc>)
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d038      	beq.n	80063a0 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a72      	ldr	r2, [pc, #456]	; (80064fc <HAL_SAI_Init+0x2b0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_SAI_Init+0xf6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a70      	ldr	r2, [pc, #448]	; (8006500 <HAL_SAI_Init+0x2b4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d105      	bne.n	800634e <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006342:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006346:	f7ff f807 	bl	8005358 <HAL_RCCEx_GetPeriphCLKFreq>
 800634a:	6138      	str	r0, [r7, #16]
 800634c:	e004      	b.n	8006358 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800634e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006352:	f7ff f801 	bl	8005358 <HAL_RCCEx_GetPeriphCLKFreq>
 8006356:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	025b      	lsls	r3, r3, #9
 800636a:	fbb2 f3f3 	udiv	r3, r2, r3
 800636e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a66      	ldr	r2, [pc, #408]	; (800650c <HAL_SAI_Init+0x2c0>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	08da      	lsrs	r2, r3, #3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	4b62      	ldr	r3, [pc, #392]	; (800650c <HAL_SAI_Init+0x2c0>)
 8006382:	fba3 2301 	umull	r2, r3, r3, r1
 8006386:	08da      	lsrs	r2, r3, #3
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	1aca      	subs	r2, r1, r3
 8006392:	2a08      	cmp	r2, #8
 8006394:	d904      	bls.n	80063a0 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_SAI_Init+0x164>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d109      	bne.n	80063c4 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_SAI_Init+0x170>
 80063b8:	2300      	movs	r3, #0
 80063ba:	e001      	b.n	80063c0 <HAL_SAI_Init+0x174>
 80063bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e008      	b.n	80063d6 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <HAL_SAI_Init+0x186>
 80063cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d0:	e000      	b.n	80063d4 <HAL_SAI_Init+0x188>
 80063d2:	2300      	movs	r3, #0
 80063d4:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6819      	ldr	r1, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4b4b      	ldr	r3, [pc, #300]	; (8006510 <HAL_SAI_Init+0x2c4>)
 80063e2:	400b      	ands	r3, r1
 80063e4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6819      	ldr	r1, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063fa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	431a      	orrs	r2, r3
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800640e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800641a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	051b      	lsls	r3, r3, #20
 8006422:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800643a:	f023 030f 	bic.w	r3, r3, #15
 800643e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6899      	ldr	r1, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b2a      	ldr	r3, [pc, #168]	; (8006514 <HAL_SAI_Init+0x2c8>)
 800646a:	400b      	ands	r3, r1
 800646c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6899      	ldr	r1, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800647e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8006484:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800648a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006490:	3b01      	subs	r3, #1
 8006492:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006494:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68d9      	ldr	r1, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	f24f 0320 	movw	r3, #61472	; 0xf020
 80064ac:	400b      	ands	r3, r1
 80064ae:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68d9      	ldr	r1, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064be:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064c6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	3b01      	subs	r3, #1
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3720      	adds	r7, #32
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40015404 	.word	0x40015404
 8006500:	40015424 	.word	0x40015424
 8006504:	40015400 	.word	0x40015400
 8006508:	40015800 	.word	0x40015800
 800650c:	cccccccd 	.word	0xcccccccd
 8006510:	ff05c010 	.word	0xff05c010
 8006514:	fff88000 	.word	0xfff88000

08006518 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006518:	b490      	push	{r4, r7}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <SAI_Disable+0x60>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a15      	ldr	r2, [pc, #84]	; (800657c <SAI_Disable+0x64>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	0b1b      	lsrs	r3, r3, #12
 800652c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006540:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006542:	2c00      	cmp	r4, #0
 8006544:	d10a      	bne.n	800655c <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800654c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	73fb      	strb	r3, [r7, #15]
      break;
 800655a:	e007      	b.n	800656c <SAI_Disable+0x54>
    }
    count--;
 800655c:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1ea      	bne.n	8006542 <SAI_Disable+0x2a>

  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bc90      	pop	{r4, r7}
 8006576:	4770      	bx	lr
 8006578:	20000118 	.word	0x20000118
 800657c:	95cbec1b 	.word	0x95cbec1b

08006580 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e022      	b.n	80065d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d105      	bne.n	80065aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f006 fe2f 	bl	800d208 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2203      	movs	r2, #3
 80065ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f814 	bl	80065e0 <HAL_SD_InitCard>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e00a      	b.n	80065d8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065e0:	b5b0      	push	{r4, r5, r7, lr}
 80065e2:	b08e      	sub	sp, #56	; 0x38
 80065e4:	af04      	add	r7, sp, #16
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80065fc:	2376      	movs	r3, #118	; 0x76
 80065fe:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681d      	ldr	r5, [r3, #0]
 8006604:	466c      	mov	r4, sp
 8006606:	f107 0314 	add.w	r3, r7, #20
 800660a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800660e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006618:	4628      	mov	r0, r5
 800661a:	f001 ff41 	bl	80084a0 <SDMMC_Init>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e044      	b.n	80066ba <HAL_SD_InitCard+0xda>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800663e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f001 ff65 	bl	8008514 <SDMMC_PowerState_ON>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e02e      	b.n	80066ba <HAL_SD_InitCard+0xda>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800666a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fb17 	bl	8006ca0 <SD_PowerON>
 8006672:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e013      	b.n	80066ba <HAL_SD_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa36 	bl	8006b04 <SD_InitCard>
 8006698:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_SD_InitCard+0xda>
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3728      	adds	r7, #40	; 0x28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080066c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d2:	0f9b      	lsrs	r3, r3, #30
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066de:	0e9b      	lsrs	r3, r3, #26
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f0:	0e1b      	lsrs	r3, r3, #24
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006702:	0c1b      	lsrs	r3, r3, #16
 8006704:	b2da      	uxtb	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	b2da      	uxtb	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671a:	b2da      	uxtb	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006724:	0d1b      	lsrs	r3, r3, #20
 8006726:	b29a      	uxth	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	b2da      	uxtb	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006742:	0bdb      	lsrs	r3, r3, #15
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006754:	0b9b      	lsrs	r3, r3, #14
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	b2da      	uxtb	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006766:	0b5b      	lsrs	r3, r3, #13
 8006768:	b2db      	uxtb	r3, r3
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	b2da      	uxtb	r2, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006778:	0b1b      	lsrs	r3, r3, #12
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2200      	movs	r2, #0
 800678a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006790:	2b00      	cmp	r3, #0
 8006792:	d163      	bne.n	800685c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006798:	009a      	lsls	r2, r3, #2
 800679a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800679e:	4013      	ands	r3, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80067a4:	0f92      	lsrs	r2, r2, #30
 80067a6:	431a      	orrs	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b0:	0edb      	lsrs	r3, r3, #27
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c2:	0e1b      	lsrs	r3, r3, #24
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d4:	0d5b      	lsrs	r3, r3, #21
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e6:	0c9b      	lsrs	r3, r3, #18
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	0bdb      	lsrs	r3, r3, #15
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	b2da      	uxtb	r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	7e1b      	ldrb	r3, [r3, #24]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	3302      	adds	r3, #2
 800681c:	2201      	movs	r2, #1
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006826:	fb02 f203 	mul.w	r2, r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	7a1b      	ldrb	r3, [r3, #8]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	2201      	movs	r2, #1
 800683a:	409a      	lsls	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006848:	0a52      	lsrs	r2, r2, #9
 800684a:	fb02 f203 	mul.w	r2, r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006858:	661a      	str	r2, [r3, #96]	; 0x60
 800685a:	e031      	b.n	80068c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006860:	2b01      	cmp	r3, #1
 8006862:	d11d      	bne.n	80068a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	431a      	orrs	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	3301      	adds	r3, #1
 8006880:	029a      	lsls	r2, r3, #10
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006894:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	661a      	str	r2, [r3, #96]	; 0x60
 800689e:	e00f      	b.n	80068c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a58      	ldr	r2, [pc, #352]	; (8006a08 <HAL_SD_GetCardCSD+0x344>)
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e09d      	b.n	80069fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c4:	0b9b      	lsrs	r3, r3, #14
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d6:	09db      	lsrs	r3, r3, #7
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f8:	0fdb      	lsrs	r3, r3, #31
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006904:	0f5b      	lsrs	r3, r3, #29
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	b2da      	uxtb	r2, r3
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	0e9b      	lsrs	r3, r3, #26
 8006918:	b2db      	uxtb	r3, r3
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	b2da      	uxtb	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	0d9b      	lsrs	r3, r3, #22
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	b2da      	uxtb	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	0d5b      	lsrs	r3, r3, #21
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	b2da      	uxtb	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	0bdb      	lsrs	r3, r3, #15
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	b2da      	uxtb	r2, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	0b9b      	lsrs	r3, r3, #14
 8006980:	b2db      	uxtb	r3, r3
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	b2da      	uxtb	r2, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006992:	0b5b      	lsrs	r3, r3, #13
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	0b1b      	lsrs	r3, r3, #12
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ba:	0a9b      	lsrs	r3, r3, #10
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	085b      	lsrs	r3, r3, #1
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	004005ff 	.word	0x004005ff

08006a0c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006a0c:	b5b0      	push	{r4, r5, r7, lr}
 8006a0e:	b08e      	sub	sp, #56	; 0x38
 8006a10:	af04      	add	r7, sp, #16
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d02e      	beq.n	8006a84 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2c:	d106      	bne.n	8006a3c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
 8006a3a:	e029      	b.n	8006a90 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a42:	d10a      	bne.n	8006a5a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9b9 	bl	8006dbc <SD_WideBus_Enable>
 8006a4a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
 8006a58:	e01a      	b.n	8006a90 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9f6 	bl	8006e52 <SD_WideBus_Disable>
 8006a66:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
 8006a74:	e00c      	b.n	8006a90 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	639a      	str	r2, [r3, #56]	; 0x38
 8006a82:	e005      	b.n	8006a90 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d009      	beq.n	8006aac <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e024      	b.n	8006af6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	61fb      	str	r3, [r7, #28]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	623b      	str	r3, [r7, #32]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681d      	ldr	r5, [r3, #0]
 8006ad2:	466c      	mov	r4, sp
 8006ad4:	f107 0318 	add.w	r3, r7, #24
 8006ad8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ae0:	f107 030c 	add.w	r3, r7, #12
 8006ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f001 fcda 	bl	80084a0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3728      	adds	r7, #40	; 0x28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bdb0      	pop	{r4, r5, r7, pc}
 8006afe:	bf00      	nop
 8006b00:	004005ff 	.word	0x004005ff

08006b04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b04:	b5b0      	push	{r4, r5, r7, lr}
 8006b06:	b094      	sub	sp, #80	; 0x50
 8006b08:	af04      	add	r7, sp, #16
 8006b0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fd0c 	bl	8008532 <SDMMC_GetPowerState>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d102      	bne.n	8006b26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b24:	e0b7      	b.n	8006c96 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d02f      	beq.n	8006b8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fe8b 	bl	800884e <SDMMC_CmdSendCID>
 8006b38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <SD_InitCard+0x40>
    {
      return errorstate;
 8006b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b42:	e0a8      	b.n	8006c96 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 fd36 	bl	80085bc <SDMMC_GetResponse>
 8006b50:	4602      	mov	r2, r0
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2104      	movs	r1, #4
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fd2d 	bl	80085bc <SDMMC_GetResponse>
 8006b62:	4602      	mov	r2, r0
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2108      	movs	r1, #8
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 fd24 	bl	80085bc <SDMMC_GetResponse>
 8006b74:	4602      	mov	r2, r0
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	210c      	movs	r1, #12
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 fd1b 	bl	80085bc <SDMMC_GetResponse>
 8006b86:	4602      	mov	r2, r0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d00d      	beq.n	8006bb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f107 020e 	add.w	r2, r7, #14
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fe91 	bl	80088c8 <SDMMC_CmdSetRelAdd>
 8006ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8006bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb0:	e071      	b.n	8006c96 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d036      	beq.n	8006c28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006bba:	89fb      	ldrh	r3, [r7, #14]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bca:	041b      	lsls	r3, r3, #16
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	f001 fe5b 	bl	800888a <SDMMC_CmdSendCSD>
 8006bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bde:	e05a      	b.n	8006c96 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 fce8 	bl	80085bc <SDMMC_GetResponse>
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 fcdf 	bl	80085bc <SDMMC_GetResponse>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2108      	movs	r1, #8
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fcd6 	bl	80085bc <SDMMC_GetResponse>
 8006c10:	4602      	mov	r2, r0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	210c      	movs	r1, #12
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fccd 	bl	80085bc <SDMMC_GetResponse>
 8006c22:	4602      	mov	r2, r0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2104      	movs	r1, #4
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 fcc4 	bl	80085bc <SDMMC_GetResponse>
 8006c34:	4603      	mov	r3, r0
 8006c36:	0d1a      	lsrs	r2, r3, #20
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006c3c:	f107 0310 	add.w	r3, r7, #16
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fd3e 	bl	80066c4 <HAL_SD_GetCardCSD>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c52:	e020      	b.n	8006c96 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6819      	ldr	r1, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	f04f 0400 	mov.w	r4, #0
 8006c62:	461a      	mov	r2, r3
 8006c64:	4623      	mov	r3, r4
 8006c66:	4608      	mov	r0, r1
 8006c68:	f001 fd09 	bl	800867e <SDMMC_CmdSelDesel>
 8006c6c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <SD_InitCard+0x174>
  {
    return errorstate;
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	e00e      	b.n	8006c96 <SD_InitCard+0x192>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681d      	ldr	r5, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	466c      	mov	r4, sp
 8006c80:	f103 0210 	add.w	r2, r3, #16
 8006c84:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f001 fc06 	bl	80084a0 <SDMMC_Init>
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3740      	adds	r7, #64	; 0x40
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006ca0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f001 fd03 	bl	80086c4 <SDMMC_CmdGoIdleState>
 8006cbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <SD_PowerON+0x2a>
  {
    return errorstate;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	e072      	b.n	8006db0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 fd16 	bl	8008700 <SDMMC_CmdOperCond>
 8006cd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00d      	beq.n	8006cf8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fcec 	bl	80086c4 <SDMMC_CmdGoIdleState>
 8006cec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <SD_PowerON+0x5e>
    {
      return errorstate;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	e05b      	b.n	8006db0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d137      	bne.n	8006d76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 fd16 	bl	800873e <SDMMC_CmdAppCommand>
 8006d12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d02d      	beq.n	8006d76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d1e:	e047      	b.n	8006db0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2100      	movs	r1, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 fd09 	bl	800873e <SDMMC_CmdAppCommand>
 8006d2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <SD_PowerON+0x98>
    {
      return errorstate;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	e03b      	b.n	8006db0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	491e      	ldr	r1, [pc, #120]	; (8006db8 <SD_PowerON+0x118>)
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 fd1f 	bl	8008782 <SDMMC_CmdAppOperCommand>
 8006d44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d50:	e02e      	b.n	8006db0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 fc2f 	bl	80085bc <SDMMC_GetResponse>
 8006d5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	0fdb      	lsrs	r3, r3, #31
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <SD_PowerON+0xcc>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <SD_PowerON+0xce>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]

    count++;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	3301      	adds	r3, #1
 8006d74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d802      	bhi.n	8006d86 <SD_PowerON+0xe6>
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0cc      	beq.n	8006d20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d902      	bls.n	8006d96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d94:	e00c      	b.n	8006db0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
 8006da6:	e002      	b.n	8006dae <SD_PowerON+0x10e>
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	c1100000 	.word	0xc1100000

08006dbc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fbf2 	bl	80085bc <SDMMC_GetResponse>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006de2:	d102      	bne.n	8006dea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006de4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006de8:	e02f      	b.n	8006e4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006dea:	f107 030c 	add.w	r3, r7, #12
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f879 	bl	8006ee8 <SD_FindSCR>
 8006df6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	e023      	b.n	8006e4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01c      	beq.n	8006e46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e14:	041b      	lsls	r3, r3, #16
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f001 fc90 	bl	800873e <SDMMC_CmdAppCommand>
 8006e1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	e00f      	b.n	8006e4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 fcc9 	bl	80087c8 <SDMMC_CmdBusWidth>
 8006e36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	e003      	b.n	8006e4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e001      	b.n	8006e4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b086      	sub	sp, #24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 fba7 	bl	80085bc <SDMMC_GetResponse>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e78:	d102      	bne.n	8006e80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e7e:	e02f      	b.n	8006ee0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e80:	f107 030c 	add.w	r3, r7, #12
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f82e 	bl	8006ee8 <SD_FindSCR>
 8006e8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	e023      	b.n	8006ee0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01c      	beq.n	8006edc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eaa:	041b      	lsls	r3, r3, #16
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f001 fc45 	bl	800873e <SDMMC_CmdAppCommand>
 8006eb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	e00f      	b.n	8006ee0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fc7e 	bl	80087c8 <SDMMC_CmdBusWidth>
 8006ecc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	e003      	b.n	8006ee0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e001      	b.n	8006ee0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006edc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b08f      	sub	sp, #60	; 0x3c
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006ef2:	f7f9 fbb9 	bl	8000668 <HAL_GetTick>
 8006ef6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006efc:	2300      	movs	r3, #0
 8006efe:	60bb      	str	r3, [r7, #8]
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2108      	movs	r1, #8
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fb93 	bl	800863a <SDMMC_CmdBlockLength>
 8006f14:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	e0a9      	b.n	8007074 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	f001 fc06 	bl	800873e <SDMMC_CmdAppCommand>
 8006f32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	e09a      	b.n	8007074 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006f44:	2308      	movs	r3, #8
 8006f46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006f48:	2330      	movs	r3, #48	; 0x30
 8006f4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f107 0210 	add.w	r2, r7, #16
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 fb3d 	bl	80085e2 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f001 fc4d 	bl	800880c <SDMMC_CmdSendSCR>
 8006f72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d022      	beq.n	8006fc0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	e07a      	b.n	8007074 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6819      	ldr	r1, [r3, #0]
 8006f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	f107 0208 	add.w	r2, r7, #8
 8006f98:	18d4      	adds	r4, r2, r3
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	f001 faad 	bl	80084fa <SDMMC_ReadFIFO>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	6023      	str	r3, [r4, #0]
      index++;
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006faa:	f7f9 fb5d 	bl	8000668 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fb8:	d102      	bne.n	8006fc0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006fba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fbe:	e059      	b.n	8007074 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc6:	f240 432a 	movw	r3, #1066	; 0x42a
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0d6      	beq.n	8006f7e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	f003 0308 	and.w	r3, r3, #8
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	e044      	b.n	8007074 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007000:	2302      	movs	r3, #2
 8007002:	e037      	b.n	8007074 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2220      	movs	r2, #32
 8007018:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800701a:	2320      	movs	r3, #32
 800701c:	e02a      	b.n	8007074 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f240 523a 	movw	r2, #1338	; 0x53a
 8007026:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	061a      	lsls	r2, r3, #24
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007034:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800703e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	0e1b      	lsrs	r3, r3, #24
 8007044:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	601a      	str	r2, [r3, #0]
    scr++;
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	3304      	adds	r3, #4
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	061a      	lsls	r2, r3, #24
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800705c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	0a1b      	lsrs	r3, r3, #8
 8007062:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007066:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	0e1b      	lsrs	r3, r3, #24
 800706c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	373c      	adds	r7, #60	; 0x3c
 8007078:	46bd      	mov	sp, r7
 800707a:	bd90      	pop	{r4, r7, pc}

0800707c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e07c      	b.n	8007188 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d106      	bne.n	80070ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f006 f90f 	bl	800d2cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070ce:	d902      	bls.n	80070d6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	e002      	b.n	80070dc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070e4:	d007      	beq.n	80070f6 <HAL_SPI_Init+0x7a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070ee:	d002      	beq.n	80070f6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007106:	d903      	bls.n	8007110 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	631a      	str	r2, [r3, #48]	; 0x30
 800710e:	e002      	b.n	8007116 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	ea42 0103 	orr.w	r1, r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	f003 0204 	and.w	r2, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	ea42 0103 	orr.w	r1, r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	430a      	orrs	r2, r1
 8007176:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e034      	b.n	8007210 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f006 f9a4 	bl	800d508 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3308      	adds	r3, #8
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f001 f866 	bl	800829c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	461a      	mov	r2, r3
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	f001 f8d6 	bl	800838c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6858      	ldr	r0, [r3, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	f001 f91f 	bl	8008430 <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	6892      	ldr	r2, [r2, #8]
 80071fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	6892      	ldr	r2, [r2, #8]
 8007206:	f041 0101 	orr.w	r1, r1, #1
 800720a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e040      	b.n	80072ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f005 fe94 	bl	800cf68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2224      	movs	r2, #36	; 0x24
 8007244:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 faa6 	bl	80077a8 <UART_SetConfig>
 800725c:	4603      	mov	r3, r0
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e022      	b.n	80072ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fde2 	bl	8007e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fe69 	bl	8007f7c <UART_CheckIdleState>
 80072aa:	4603      	mov	r3, r0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08a      	sub	sp, #40	; 0x28
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	f040 8081 	bne.w	80073d0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <HAL_UART_Transmit+0x26>
 80072d4:	88fb      	ldrh	r3, [r7, #6]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e079      	b.n	80073d2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_UART_Transmit+0x38>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e072      	b.n	80073d2 <HAL_UART_Transmit+0x11e>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2221      	movs	r2, #33	; 0x21
 80072fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007300:	f7f9 f9b2 	bl	8000668 <HAL_GetTick>
 8007304:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	88fa      	ldrh	r2, [r7, #6]
 800730a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	88fa      	ldrh	r2, [r7, #6]
 8007312:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731e:	d108      	bne.n	8007332 <HAL_UART_Transmit+0x7e>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007328:	2300      	movs	r3, #0
 800732a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	61bb      	str	r3, [r7, #24]
 8007330:	e003      	b.n	800733a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800733a:	e02d      	b.n	8007398 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2200      	movs	r2, #0
 8007344:	2180      	movs	r1, #128	; 0x80
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fe5d 	bl	8008006 <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e03d      	b.n	80073d2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10b      	bne.n	8007374 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	881a      	ldrh	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007368:	b292      	uxth	r2, r2
 800736a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	3302      	adds	r3, #2
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e008      	b.n	8007386 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	b292      	uxth	r2, r2
 800737e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	3301      	adds	r3, #1
 8007384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1cb      	bne.n	800733c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2200      	movs	r2, #0
 80073ac:	2140      	movs	r1, #64	; 0x40
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 fe29 	bl	8008006 <UART_WaitOnFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e009      	b.n	80073d2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	e000      	b.n	80073d2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80073d0:	2302      	movs	r3, #2
  }
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	f040 808a 	bne.w	8007508 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <HAL_UART_Receive_IT+0x24>
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e082      	b.n	800750a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_UART_Receive_IT+0x36>
 800740e:	2302      	movs	r3, #2
 8007410:	e07b      	b.n	800750a <HAL_UART_Receive_IT+0x12e>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743e:	d10e      	bne.n	800745e <HAL_UART_Receive_IT+0x82>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <HAL_UART_Receive_IT+0x78>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800744e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007452:	e02d      	b.n	80074b0 <HAL_UART_Receive_IT+0xd4>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	22ff      	movs	r2, #255	; 0xff
 8007458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800745c:	e028      	b.n	80074b0 <HAL_UART_Receive_IT+0xd4>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10d      	bne.n	8007482 <HAL_UART_Receive_IT+0xa6>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d104      	bne.n	8007478 <HAL_UART_Receive_IT+0x9c>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	22ff      	movs	r2, #255	; 0xff
 8007472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007476:	e01b      	b.n	80074b0 <HAL_UART_Receive_IT+0xd4>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	227f      	movs	r2, #127	; 0x7f
 800747c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007480:	e016      	b.n	80074b0 <HAL_UART_Receive_IT+0xd4>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800748a:	d10d      	bne.n	80074a8 <HAL_UART_Receive_IT+0xcc>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <HAL_UART_Receive_IT+0xc2>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	227f      	movs	r2, #127	; 0x7f
 8007498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800749c:	e008      	b.n	80074b0 <HAL_UART_Receive_IT+0xd4>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	223f      	movs	r2, #63	; 0x3f
 80074a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074a6:	e003      	b.n	80074b0 <HAL_UART_Receive_IT+0xd4>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2222      	movs	r2, #34	; 0x22
 80074ba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0201 	orr.w	r2, r2, #1
 80074ca:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d4:	d107      	bne.n	80074e6 <HAL_UART_Receive_IT+0x10a>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d103      	bne.n	80074e6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a0d      	ldr	r2, [pc, #52]	; (8007518 <HAL_UART_Receive_IT+0x13c>)
 80074e2:	661a      	str	r2, [r3, #96]	; 0x60
 80074e4:	e002      	b.n	80074ec <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a0c      	ldr	r2, [pc, #48]	; (800751c <HAL_UART_Receive_IT+0x140>)
 80074ea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007502:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	080081df 	.word	0x080081df
 800751c:	08008135 	.word	0x08008135

08007520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d113      	bne.n	8007576 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00e      	beq.n	8007576 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80ff 	beq.w	800776a <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
      }
      return;
 8007574:	e0f9      	b.n	800776a <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80c1 	beq.w	8007700 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d105      	bne.n	8007594 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80b6 	beq.w	8007700 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00e      	beq.n	80075bc <HAL_UART_IRQHandler+0x9c>
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2201      	movs	r2, #1
 80075ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b4:	f043 0201 	orr.w	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00e      	beq.n	80075e4 <HAL_UART_IRQHandler+0xc4>
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2202      	movs	r2, #2
 80075d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075dc:	f043 0204 	orr.w	r2, r3, #4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00e      	beq.n	800760c <HAL_UART_IRQHandler+0xec>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d009      	beq.n	800760c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2204      	movs	r2, #4
 80075fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007604:	f043 0202 	orr.w	r2, r3, #2
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d013      	beq.n	800763e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2208      	movs	r2, #8
 8007630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007636:	f043 0208 	orr.w	r2, r3, #8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8093 	beq.w	800776e <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00c      	beq.n	800766c <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007670:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d004      	beq.n	800768a <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007686:	2b00      	cmp	r3, #0
 8007688:	d031      	beq.n	80076ee <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fd03 	bl	8008096 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d123      	bne.n	80076e6 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d013      	beq.n	80076de <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ba:	4a30      	ldr	r2, [pc, #192]	; (800777c <HAL_UART_IRQHandler+0x25c>)
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fa ff76 	bl	80025b4 <HAL_DMA_Abort_IT>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d016      	beq.n	80076fc <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	e00e      	b.n	80076fc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f858 	bl	8007794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	e00a      	b.n	80076fc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f854 	bl	8007794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	e006      	b.n	80076fc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f850 	bl	8007794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80076fa:	e038      	b.n	800776e <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fc:	bf00      	nop
    return;
 80076fe:	e036      	b.n	800776e <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00d      	beq.n	8007726 <HAL_UART_IRQHandler+0x206>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800771c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fdb2 	bl	8008288 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007724:	e026      	b.n	8007774 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00d      	beq.n	800774c <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007736:	2b00      	cmp	r3, #0
 8007738:	d008      	beq.n	800774c <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773e:	2b00      	cmp	r3, #0
 8007740:	d017      	beq.n	8007772 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
    }
    return;
 800774a:	e012      	b.n	8007772 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <HAL_UART_IRQHandler+0x254>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fcce 	bl	8008102 <UART_EndTransmit_IT>
    return;
 8007766:	bf00      	nop
 8007768:	e004      	b.n	8007774 <HAL_UART_IRQHandler+0x254>
      return;
 800776a:	bf00      	nop
 800776c:	e002      	b.n	8007774 <HAL_UART_IRQHandler+0x254>
    return;
 800776e:	bf00      	nop
 8007770:	e000      	b.n	8007774 <HAL_UART_IRQHandler+0x254>
    return;
 8007772:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007774:	3720      	adds	r7, #32
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	080080d7 	.word	0x080080d7

08007780 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80077ac:	b088      	sub	sp, #32
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	4bac      	ldr	r3, [pc, #688]	; (8007a90 <UART_SetConfig+0x2e8>)
 80077de:	4013      	ands	r3, r2
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	69f9      	ldr	r1, [r7, #28]
 80077e6:	430b      	orrs	r3, r1
 80077e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4aa2      	ldr	r2, [pc, #648]	; (8007a94 <UART_SetConfig+0x2ec>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d004      	beq.n	800781a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	4313      	orrs	r3, r2
 8007818:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	430a      	orrs	r2, r1
 800782c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a99      	ldr	r2, [pc, #612]	; (8007a98 <UART_SetConfig+0x2f0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d121      	bne.n	800787c <UART_SetConfig+0xd4>
 8007838:	4b98      	ldr	r3, [pc, #608]	; (8007a9c <UART_SetConfig+0x2f4>)
 800783a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d816      	bhi.n	8007874 <UART_SetConfig+0xcc>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0xa4>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	0800785d 	.word	0x0800785d
 8007850:	08007869 	.word	0x08007869
 8007854:	08007863 	.word	0x08007863
 8007858:	0800786f 	.word	0x0800786f
 800785c:	2301      	movs	r3, #1
 800785e:	76fb      	strb	r3, [r7, #27]
 8007860:	e0e8      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007862:	2302      	movs	r3, #2
 8007864:	76fb      	strb	r3, [r7, #27]
 8007866:	e0e5      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007868:	2304      	movs	r3, #4
 800786a:	76fb      	strb	r3, [r7, #27]
 800786c:	e0e2      	b.n	8007a34 <UART_SetConfig+0x28c>
 800786e:	2308      	movs	r3, #8
 8007870:	76fb      	strb	r3, [r7, #27]
 8007872:	e0df      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007874:	2310      	movs	r3, #16
 8007876:	76fb      	strb	r3, [r7, #27]
 8007878:	bf00      	nop
 800787a:	e0db      	b.n	8007a34 <UART_SetConfig+0x28c>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a87      	ldr	r2, [pc, #540]	; (8007aa0 <UART_SetConfig+0x2f8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d134      	bne.n	80078f0 <UART_SetConfig+0x148>
 8007886:	4b85      	ldr	r3, [pc, #532]	; (8007a9c <UART_SetConfig+0x2f4>)
 8007888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800788c:	f003 030c 	and.w	r3, r3, #12
 8007890:	2b0c      	cmp	r3, #12
 8007892:	d829      	bhi.n	80078e8 <UART_SetConfig+0x140>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <UART_SetConfig+0xf4>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078d1 	.word	0x080078d1
 80078a0:	080078e9 	.word	0x080078e9
 80078a4:	080078e9 	.word	0x080078e9
 80078a8:	080078e9 	.word	0x080078e9
 80078ac:	080078dd 	.word	0x080078dd
 80078b0:	080078e9 	.word	0x080078e9
 80078b4:	080078e9 	.word	0x080078e9
 80078b8:	080078e9 	.word	0x080078e9
 80078bc:	080078d7 	.word	0x080078d7
 80078c0:	080078e9 	.word	0x080078e9
 80078c4:	080078e9 	.word	0x080078e9
 80078c8:	080078e9 	.word	0x080078e9
 80078cc:	080078e3 	.word	0x080078e3
 80078d0:	2300      	movs	r3, #0
 80078d2:	76fb      	strb	r3, [r7, #27]
 80078d4:	e0ae      	b.n	8007a34 <UART_SetConfig+0x28c>
 80078d6:	2302      	movs	r3, #2
 80078d8:	76fb      	strb	r3, [r7, #27]
 80078da:	e0ab      	b.n	8007a34 <UART_SetConfig+0x28c>
 80078dc:	2304      	movs	r3, #4
 80078de:	76fb      	strb	r3, [r7, #27]
 80078e0:	e0a8      	b.n	8007a34 <UART_SetConfig+0x28c>
 80078e2:	2308      	movs	r3, #8
 80078e4:	76fb      	strb	r3, [r7, #27]
 80078e6:	e0a5      	b.n	8007a34 <UART_SetConfig+0x28c>
 80078e8:	2310      	movs	r3, #16
 80078ea:	76fb      	strb	r3, [r7, #27]
 80078ec:	bf00      	nop
 80078ee:	e0a1      	b.n	8007a34 <UART_SetConfig+0x28c>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a6b      	ldr	r2, [pc, #428]	; (8007aa4 <UART_SetConfig+0x2fc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d120      	bne.n	800793c <UART_SetConfig+0x194>
 80078fa:	4b68      	ldr	r3, [pc, #416]	; (8007a9c <UART_SetConfig+0x2f4>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007900:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007904:	2b10      	cmp	r3, #16
 8007906:	d00f      	beq.n	8007928 <UART_SetConfig+0x180>
 8007908:	2b10      	cmp	r3, #16
 800790a:	d802      	bhi.n	8007912 <UART_SetConfig+0x16a>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <UART_SetConfig+0x174>
 8007910:	e010      	b.n	8007934 <UART_SetConfig+0x18c>
 8007912:	2b20      	cmp	r3, #32
 8007914:	d005      	beq.n	8007922 <UART_SetConfig+0x17a>
 8007916:	2b30      	cmp	r3, #48	; 0x30
 8007918:	d009      	beq.n	800792e <UART_SetConfig+0x186>
 800791a:	e00b      	b.n	8007934 <UART_SetConfig+0x18c>
 800791c:	2300      	movs	r3, #0
 800791e:	76fb      	strb	r3, [r7, #27]
 8007920:	e088      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007922:	2302      	movs	r3, #2
 8007924:	76fb      	strb	r3, [r7, #27]
 8007926:	e085      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007928:	2304      	movs	r3, #4
 800792a:	76fb      	strb	r3, [r7, #27]
 800792c:	e082      	b.n	8007a34 <UART_SetConfig+0x28c>
 800792e:	2308      	movs	r3, #8
 8007930:	76fb      	strb	r3, [r7, #27]
 8007932:	e07f      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007934:	2310      	movs	r3, #16
 8007936:	76fb      	strb	r3, [r7, #27]
 8007938:	bf00      	nop
 800793a:	e07b      	b.n	8007a34 <UART_SetConfig+0x28c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a59      	ldr	r2, [pc, #356]	; (8007aa8 <UART_SetConfig+0x300>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d120      	bne.n	8007988 <UART_SetConfig+0x1e0>
 8007946:	4b55      	ldr	r3, [pc, #340]	; (8007a9c <UART_SetConfig+0x2f4>)
 8007948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007950:	2b40      	cmp	r3, #64	; 0x40
 8007952:	d00f      	beq.n	8007974 <UART_SetConfig+0x1cc>
 8007954:	2b40      	cmp	r3, #64	; 0x40
 8007956:	d802      	bhi.n	800795e <UART_SetConfig+0x1b6>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <UART_SetConfig+0x1c0>
 800795c:	e010      	b.n	8007980 <UART_SetConfig+0x1d8>
 800795e:	2b80      	cmp	r3, #128	; 0x80
 8007960:	d005      	beq.n	800796e <UART_SetConfig+0x1c6>
 8007962:	2bc0      	cmp	r3, #192	; 0xc0
 8007964:	d009      	beq.n	800797a <UART_SetConfig+0x1d2>
 8007966:	e00b      	b.n	8007980 <UART_SetConfig+0x1d8>
 8007968:	2300      	movs	r3, #0
 800796a:	76fb      	strb	r3, [r7, #27]
 800796c:	e062      	b.n	8007a34 <UART_SetConfig+0x28c>
 800796e:	2302      	movs	r3, #2
 8007970:	76fb      	strb	r3, [r7, #27]
 8007972:	e05f      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007974:	2304      	movs	r3, #4
 8007976:	76fb      	strb	r3, [r7, #27]
 8007978:	e05c      	b.n	8007a34 <UART_SetConfig+0x28c>
 800797a:	2308      	movs	r3, #8
 800797c:	76fb      	strb	r3, [r7, #27]
 800797e:	e059      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007980:	2310      	movs	r3, #16
 8007982:	76fb      	strb	r3, [r7, #27]
 8007984:	bf00      	nop
 8007986:	e055      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a47      	ldr	r2, [pc, #284]	; (8007aac <UART_SetConfig+0x304>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d124      	bne.n	80079dc <UART_SetConfig+0x234>
 8007992:	4b42      	ldr	r3, [pc, #264]	; (8007a9c <UART_SetConfig+0x2f4>)
 8007994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a0:	d012      	beq.n	80079c8 <UART_SetConfig+0x220>
 80079a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a6:	d802      	bhi.n	80079ae <UART_SetConfig+0x206>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <UART_SetConfig+0x214>
 80079ac:	e012      	b.n	80079d4 <UART_SetConfig+0x22c>
 80079ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b2:	d006      	beq.n	80079c2 <UART_SetConfig+0x21a>
 80079b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b8:	d009      	beq.n	80079ce <UART_SetConfig+0x226>
 80079ba:	e00b      	b.n	80079d4 <UART_SetConfig+0x22c>
 80079bc:	2300      	movs	r3, #0
 80079be:	76fb      	strb	r3, [r7, #27]
 80079c0:	e038      	b.n	8007a34 <UART_SetConfig+0x28c>
 80079c2:	2302      	movs	r3, #2
 80079c4:	76fb      	strb	r3, [r7, #27]
 80079c6:	e035      	b.n	8007a34 <UART_SetConfig+0x28c>
 80079c8:	2304      	movs	r3, #4
 80079ca:	76fb      	strb	r3, [r7, #27]
 80079cc:	e032      	b.n	8007a34 <UART_SetConfig+0x28c>
 80079ce:	2308      	movs	r3, #8
 80079d0:	76fb      	strb	r3, [r7, #27]
 80079d2:	e02f      	b.n	8007a34 <UART_SetConfig+0x28c>
 80079d4:	2310      	movs	r3, #16
 80079d6:	76fb      	strb	r3, [r7, #27]
 80079d8:	bf00      	nop
 80079da:	e02b      	b.n	8007a34 <UART_SetConfig+0x28c>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <UART_SetConfig+0x2ec>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d124      	bne.n	8007a30 <UART_SetConfig+0x288>
 80079e6:	4b2d      	ldr	r3, [pc, #180]	; (8007a9c <UART_SetConfig+0x2f4>)
 80079e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f4:	d012      	beq.n	8007a1c <UART_SetConfig+0x274>
 80079f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fa:	d802      	bhi.n	8007a02 <UART_SetConfig+0x25a>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <UART_SetConfig+0x268>
 8007a00:	e012      	b.n	8007a28 <UART_SetConfig+0x280>
 8007a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a06:	d006      	beq.n	8007a16 <UART_SetConfig+0x26e>
 8007a08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a0c:	d009      	beq.n	8007a22 <UART_SetConfig+0x27a>
 8007a0e:	e00b      	b.n	8007a28 <UART_SetConfig+0x280>
 8007a10:	2300      	movs	r3, #0
 8007a12:	76fb      	strb	r3, [r7, #27]
 8007a14:	e00e      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007a16:	2302      	movs	r3, #2
 8007a18:	76fb      	strb	r3, [r7, #27]
 8007a1a:	e00b      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	76fb      	strb	r3, [r7, #27]
 8007a20:	e008      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007a22:	2308      	movs	r3, #8
 8007a24:	76fb      	strb	r3, [r7, #27]
 8007a26:	e005      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007a28:	2310      	movs	r3, #16
 8007a2a:	76fb      	strb	r3, [r7, #27]
 8007a2c:	bf00      	nop
 8007a2e:	e001      	b.n	8007a34 <UART_SetConfig+0x28c>
 8007a30:	2310      	movs	r3, #16
 8007a32:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a16      	ldr	r2, [pc, #88]	; (8007a94 <UART_SetConfig+0x2ec>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	f040 80fa 	bne.w	8007c34 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a40:	7efb      	ldrb	r3, [r7, #27]
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	d836      	bhi.n	8007ab4 <UART_SetConfig+0x30c>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <UART_SetConfig+0x2a4>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a71 	.word	0x08007a71
 8007a50:	08007ab5 	.word	0x08007ab5
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007ab5 	.word	0x08007ab5
 8007a5c:	08007a7f 	.word	0x08007a7f
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007ab5 	.word	0x08007ab5
 8007a68:	08007ab5 	.word	0x08007ab5
 8007a6c:	08007a87 	.word	0x08007a87
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007a70:	f7fd f8ee 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8007a74:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a76:	e020      	b.n	8007aba <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007a78:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <UART_SetConfig+0x308>)
 8007a7a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a7c:	e01d      	b.n	8007aba <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007a7e:	f7fd f851 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8007a82:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a84:	e019      	b.n	8007aba <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a8a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a8c:	e015      	b.n	8007aba <UART_SetConfig+0x312>
 8007a8e:	bf00      	nop
 8007a90:	efff69f3 	.word	0xefff69f3
 8007a94:	40008000 	.word	0x40008000
 8007a98:	40013800 	.word	0x40013800
 8007a9c:	40021000 	.word	0x40021000
 8007aa0:	40004400 	.word	0x40004400
 8007aa4:	40004800 	.word	0x40004800
 8007aa8:	40004c00 	.word	0x40004c00
 8007aac:	40005000 	.word	0x40005000
 8007ab0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	74fb      	strb	r3, [r7, #19]
        break;
 8007ab8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 81ac 	beq.w	8007e1a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	4413      	add	r3, r2
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d305      	bcc.n	8007ade <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d902      	bls.n	8007ae4 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	74fb      	strb	r3, [r7, #19]
 8007ae2:	e19a      	b.n	8007e1a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8007ae4:	7efb      	ldrb	r3, [r7, #27]
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	f200 8091 	bhi.w	8007c0e <UART_SetConfig+0x466>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <UART_SetConfig+0x34c>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b19 	.word	0x08007b19
 8007af8:	08007c0f 	.word	0x08007c0f
 8007afc:	08007b65 	.word	0x08007b65
 8007b00:	08007c0f 	.word	0x08007c0f
 8007b04:	08007b99 	.word	0x08007b99
 8007b08:	08007c0f 	.word	0x08007c0f
 8007b0c:	08007c0f 	.word	0x08007c0f
 8007b10:	08007c0f 	.word	0x08007c0f
 8007b14:	08007be5 	.word	0x08007be5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007b18:	f7fd f89a 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	4619      	mov	r1, r3
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	f04f 0400 	mov.w	r4, #0
 8007b2c:	0214      	lsls	r4, r2, #8
 8007b2e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007b32:	020b      	lsls	r3, r1, #8
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6852      	ldr	r2, [r2, #4]
 8007b38:	0852      	lsrs	r2, r2, #1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	f04f 0200 	mov.w	r2, #0
 8007b40:	eb13 0b01 	adds.w	fp, r3, r1
 8007b44:	eb44 0c02 	adc.w	ip, r4, r2
 8007b48:	4658      	mov	r0, fp
 8007b4a:	4661      	mov	r1, ip
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f04f 0400 	mov.w	r4, #0
 8007b54:	461a      	mov	r2, r3
 8007b56:	4623      	mov	r3, r4
 8007b58:	f7f8 fba2 	bl	80002a0 <__aeabi_uldivmod>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007b62:	e057      	b.n	8007c14 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	085b      	lsrs	r3, r3, #1
 8007b6a:	f04f 0400 	mov.w	r4, #0
 8007b6e:	49b1      	ldr	r1, [pc, #708]	; (8007e34 <UART_SetConfig+0x68c>)
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	eb13 0b01 	adds.w	fp, r3, r1
 8007b78:	eb44 0c02 	adc.w	ip, r4, r2
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	4661      	mov	r1, ip
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f04f 0400 	mov.w	r4, #0
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4623      	mov	r3, r4
 8007b8c:	f7f8 fb88 	bl	80002a0 <__aeabi_uldivmod>
 8007b90:	4603      	mov	r3, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007b96:	e03d      	b.n	8007c14 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007b98:	f7fc ffc4 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	f04f 0400 	mov.w	r4, #0
 8007bac:	0214      	lsls	r4, r2, #8
 8007bae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007bb2:	020b      	lsls	r3, r1, #8
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6852      	ldr	r2, [r2, #4]
 8007bb8:	0852      	lsrs	r2, r2, #1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	eb13 0b01 	adds.w	fp, r3, r1
 8007bc4:	eb44 0c02 	adc.w	ip, r4, r2
 8007bc8:	4658      	mov	r0, fp
 8007bca:	4661      	mov	r1, ip
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f04f 0400 	mov.w	r4, #0
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4623      	mov	r3, r4
 8007bd8:	f7f8 fb62 	bl	80002a0 <__aeabi_uldivmod>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007be2:	e017      	b.n	8007c14 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	085b      	lsrs	r3, r3, #1
 8007bea:	f04f 0400 	mov.w	r4, #0
 8007bee:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007bf2:	f144 0100 	adc.w	r1, r4, #0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f04f 0400 	mov.w	r4, #0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	4623      	mov	r3, r4
 8007c02:	f7f8 fb4d 	bl	80002a0 <__aeabi_uldivmod>
 8007c06:	4603      	mov	r3, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007c0c:	e002      	b.n	8007c14 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	74fb      	strb	r3, [r7, #19]
            break;
 8007c12:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c1a:	d308      	bcc.n	8007c2e <UART_SetConfig+0x486>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c22:	d204      	bcs.n	8007c2e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	60da      	str	r2, [r3, #12]
 8007c2c:	e0f5      	b.n	8007e1a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	74fb      	strb	r3, [r7, #19]
 8007c32:	e0f2      	b.n	8007e1a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3c:	d17f      	bne.n	8007d3e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8007c3e:	7efb      	ldrb	r3, [r7, #27]
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d85c      	bhi.n	8007cfe <UART_SetConfig+0x556>
 8007c44:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <UART_SetConfig+0x4a4>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007c8f 	.word	0x08007c8f
 8007c54:	08007cad 	.word	0x08007cad
 8007c58:	08007cff 	.word	0x08007cff
 8007c5c:	08007cc9 	.word	0x08007cc9
 8007c60:	08007cff 	.word	0x08007cff
 8007c64:	08007cff 	.word	0x08007cff
 8007c68:	08007cff 	.word	0x08007cff
 8007c6c:	08007ce7 	.word	0x08007ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007c70:	f7fc ffee 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8007c74:	4603      	mov	r3, r0
 8007c76:	005a      	lsls	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	441a      	add	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007c8c:	e03a      	b.n	8007d04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007c8e:	f7fc fff5 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8007c92:	4603      	mov	r3, r0
 8007c94:	005a      	lsls	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	441a      	add	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007caa:	e02b      	b.n	8007d04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007cb6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6852      	ldr	r2, [r2, #4]
 8007cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007cc6:	e01d      	b.n	8007d04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007cc8:	f7fc ff2c 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	005a      	lsls	r2, r3, #1
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	085b      	lsrs	r3, r3, #1
 8007cd6:	441a      	add	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007ce4:	e00e      	b.n	8007d04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007cfc:	e002      	b.n	8007d04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	74fb      	strb	r3, [r7, #19]
        break;
 8007d02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2b0f      	cmp	r3, #15
 8007d08:	d916      	bls.n	8007d38 <UART_SetConfig+0x590>
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d10:	d212      	bcs.n	8007d38 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f023 030f 	bic.w	r3, r3, #15
 8007d1a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	897b      	ldrh	r3, [r7, #10]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	897a      	ldrh	r2, [r7, #10]
 8007d34:	60da      	str	r2, [r3, #12]
 8007d36:	e070      	b.n	8007e1a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	74fb      	strb	r3, [r7, #19]
 8007d3c:	e06d      	b.n	8007e1a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8007d3e:	7efb      	ldrb	r3, [r7, #27]
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d859      	bhi.n	8007df8 <UART_SetConfig+0x650>
 8007d44:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x5a4>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007d71 	.word	0x08007d71
 8007d50:	08007d8d 	.word	0x08007d8d
 8007d54:	08007da9 	.word	0x08007da9
 8007d58:	08007df9 	.word	0x08007df9
 8007d5c:	08007dc5 	.word	0x08007dc5
 8007d60:	08007df9 	.word	0x08007df9
 8007d64:	08007df9 	.word	0x08007df9
 8007d68:	08007df9 	.word	0x08007df9
 8007d6c:	08007de1 	.word	0x08007de1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d70:	f7fc ff6e 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8007d74:	4602      	mov	r2, r0
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	441a      	add	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007d8a:	e038      	b.n	8007dfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007d8c:	f7fc ff76 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8007d90:	4602      	mov	r2, r0
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	441a      	add	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007da6:	e02a      	b.n	8007dfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007db2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6852      	ldr	r2, [r2, #4]
 8007dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007dc2:	e01c      	b.n	8007dfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007dc4:	f7fc feae 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	441a      	add	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007dde:	e00e      	b.n	8007dfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007df6:	e002      	b.n	8007dfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	74fb      	strb	r3, [r7, #19]
        break;
 8007dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b0f      	cmp	r3, #15
 8007e02:	d908      	bls.n	8007e16 <UART_SetConfig+0x66e>
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0a:	d204      	bcs.n	8007e16 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	60da      	str	r2, [r3, #12]
 8007e14:	e001      	b.n	8007e1a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007e26:	7cfb      	ldrb	r3, [r7, #19]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3720      	adds	r7, #32
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007e32:	bf00      	nop
 8007e34:	f4240000 	.word	0xf4240000

08007e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00a      	beq.n	8007ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01a      	beq.n	8007f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f36:	d10a      	bne.n	8007f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	605a      	str	r2, [r3, #4]
  }
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f8a:	f7f8 fb6d 	bl	8000668 <HAL_GetTick>
 8007f8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d10e      	bne.n	8007fbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f82a 	bl	8008006 <UART_WaitOnFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e020      	b.n	8007ffe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d10e      	bne.n	8007fe8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f814 	bl	8008006 <UART_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e00a      	b.n	8007ffe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008016:	e02a      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800801e:	d026      	beq.n	800806e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008020:	f7f8 fb22 	bl	8000668 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	429a      	cmp	r2, r3
 800802e:	d302      	bcc.n	8008036 <UART_WaitOnFlagUntilTimeout+0x30>
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d11b      	bne.n	800806e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008044:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0201 	bic.w	r2, r2, #1
 8008054:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2220      	movs	r2, #32
 8008060:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e00f      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69da      	ldr	r2, [r3, #28]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4013      	ands	r3, r2
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	429a      	cmp	r2, r3
 800807c:	bf0c      	ite	eq
 800807e:	2301      	moveq	r3, #1
 8008080:	2300      	movne	r3, #0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	429a      	cmp	r2, r3
 800808a:	d0c5      	beq.n	8008018 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080ac:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0201 	bic.w	r2, r2, #1
 80080bc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fb4d 	bl	8007794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080fa:	bf00      	nop
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008118:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fb2a 	bl	8007780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008142:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008148:	2b22      	cmp	r3, #34	; 0x22
 800814a:	d13a      	bne.n	80081c2 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008152:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008154:	89bb      	ldrh	r3, [r7, #12]
 8008156:	b2d9      	uxtb	r1, r3
 8008158:	89fb      	ldrh	r3, [r7, #14]
 800815a:	b2da      	uxtb	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008160:	400a      	ands	r2, r1
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008188:	b29b      	uxth	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d123      	bne.n	80081d6 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800819c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f003 fb4c 	bl	800b858 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081c0:	e009      	b.n	80081d6 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	8b1b      	ldrh	r3, [r3, #24]
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0208 	orr.w	r2, r2, #8
 80081d2:	b292      	uxth	r2, r2
 80081d4:	831a      	strh	r2, [r3, #24]
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f2:	2b22      	cmp	r3, #34	; 0x22
 80081f4:	d13a      	bne.n	800826c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081fc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008204:	89ba      	ldrh	r2, [r7, #12]
 8008206:	89fb      	ldrh	r3, [r7, #14]
 8008208:	4013      	ands	r3, r2
 800820a:	b29a      	uxth	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008214:	1c9a      	adds	r2, r3, #2
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008220:	b29b      	uxth	r3, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	b29a      	uxth	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008232:	b29b      	uxth	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	d123      	bne.n	8008280 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008246:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0201 	bic.w	r2, r2, #1
 8008256:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f003 faf7 	bl	800b858 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800826a:	e009      	b.n	8008280 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	8b1b      	ldrh	r3, [r3, #24]
 8008272:	b29a      	uxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0208 	orr.w	r2, r2, #8
 800827c:	b292      	uxth	r2, r2
 800827e:	831a      	strh	r2, [r3, #24]
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
#if defined(FMC_BCRx_NBLSET)
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
#endif /* FMC_BCRx_NBLSET */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	f023 0101 	bic.w	r1, r3, #1
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b08      	cmp	r3, #8
 80082c4:	d102      	bne.n	80082cc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	e001      	b.n	80082d0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (flashaccess              |
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082da:	4b2b      	ldr	r3, [pc, #172]	; (8008388 <FMC_NORSRAM_Init+0xec>)
 80082dc:	4013      	ands	r3, r2
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	6851      	ldr	r1, [r2, #4]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	4311      	orrs	r1, r2
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	6892      	ldr	r2, [r2, #8]
 80082ea:	4311      	orrs	r1, r2
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	68d2      	ldr	r2, [r2, #12]
 80082f0:	4311      	orrs	r1, r2
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	6912      	ldr	r2, [r2, #16]
 80082f6:	4311      	orrs	r1, r2
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	6952      	ldr	r2, [r2, #20]
 80082fc:	4311      	orrs	r1, r2
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	6992      	ldr	r2, [r2, #24]
 8008302:	4311      	orrs	r1, r2
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	69d2      	ldr	r2, [r2, #28]
 8008308:	4311      	orrs	r1, r2
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	6a12      	ldr	r2, [r2, #32]
 800830e:	4311      	orrs	r1, r2
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008314:	4311      	orrs	r1, r2
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800831a:	4311      	orrs	r1, r2
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008320:	4311      	orrs	r1, r2
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008326:	4311      	orrs	r1, r2
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800832c:	4311      	orrs	r1, r2
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008332:	4311      	orrs	r1, r2
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	6812      	ldr	r2, [r2, #0]
 8008338:	4319      	orrs	r1, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                          Init->NBLSetupTime       |
#endif /* FMC_BCRx_NBLSET */
                                                          Init->PageSize));

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008348:	d10c      	bne.n	8008364 <FMC_NORSRAM_Init+0xc8>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <FMC_NORSRAM_Init+0xc8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
  }

#if defined(FMC_BCR1_WFDIS)
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d006      	beq.n	800837a <FMC_NORSRAM_Init+0xde>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	601a      	str	r2, [r3, #0]
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	ffc00480 	.word	0xffc00480

0800838c <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                             |
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	431a      	orrs	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	431a      	orrs	r2, r3
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	041b      	lsls	r3, r3, #16
 80083c4:	431a      	orrs	r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	051b      	lsls	r3, r3, #20
 80083ce:	431a      	orrs	r2, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	3b02      	subs	r3, #2
 80083d6:	061b      	lsls	r3, r3, #24
 80083d8:	431a      	orrs	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	4313      	orrs	r3, r2
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	3201      	adds	r2, #1
 80083e4:	4319      	orrs	r1, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        (((Timing->CLKDivision) - 1)      << FMC_BTRx_CLKDIV_Pos)        |
                        (((Timing->DataLatency) - 2)      << FMC_BTRx_DATLAT_Pos)        |
                        (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f8:	d113      	bne.n	8008422 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008402:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1) << FMC_BTRx_CLKDIV_Pos);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	3b01      	subs	r3, #1
 800840a:	051b      	lsls	r3, r3, #20
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1], FMC_BTRx_CLKDIV, tmpr);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	431a      	orrs	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008444:	d11d      	bne.n	8008482 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                              |
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008450:	4013      	ands	r3, r2
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	6811      	ldr	r1, [r2, #0]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	6852      	ldr	r2, [r2, #4]
 800845a:	0112      	lsls	r2, r2, #4
 800845c:	4311      	orrs	r1, r2
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	6892      	ldr	r2, [r2, #8]
 8008462:	0212      	lsls	r2, r2, #8
 8008464:	4311      	orrs	r1, r2
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	6992      	ldr	r2, [r2, #24]
 800846a:	4311      	orrs	r1, r2
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	68d2      	ldr	r2, [r2, #12]
 8008470:	0412      	lsls	r2, r2, #16
 8008472:	430a      	orrs	r2, r1
 8008474:	ea43 0102 	orr.w	r1, r3, r2
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008480:	e005      	b.n	800848e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                          Timing->AccessMode                                          |
                          ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800848a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	cff00000 	.word	0xcff00000

080084a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80084a0:	b084      	sub	sp, #16
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	f107 001c 	add.w	r0, r7, #28
 80084ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80084be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 80084c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80084c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80084ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80084ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80084de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	b004      	add	sp, #16
 80084f8:	4770      	bx	lr

080084fa <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2203      	movs	r2, #3
 8008520:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008522:	2002      	movs	r0, #2
 8008524:	f7f8 f8ac 	bl	8000680 <HAL_Delay>

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0303 	and.w	r3, r3, #3
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800856c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008572:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008578:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008588:	f023 030f 	bic.w	r3, r3, #15
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	431a      	orrs	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	b2db      	uxtb	r3, r3
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3314      	adds	r3, #20
 80085ca:	461a      	mov	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	4413      	add	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008608:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800860e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008614:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800862c:	2300      	movs	r3, #0

}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b088      	sub	sp, #32
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008648:	2310      	movs	r3, #16
 800864a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800864c:	2340      	movs	r3, #64	; 0x40
 800864e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008658:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800865a:	f107 0308 	add.w	r3, r7, #8
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff74 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008666:	f241 3288 	movw	r2, #5000	; 0x1388
 800866a:	2110      	movs	r1, #16
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f975 	bl	800895c <SDMMC_GetCmdResp1>
 8008672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008674:	69fb      	ldr	r3, [r7, #28]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b08a      	sub	sp, #40	; 0x28
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800868e:	2307      	movs	r3, #7
 8008690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800869a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800869e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086a0:	f107 0310 	add.w	r3, r7, #16
 80086a4:	4619      	mov	r1, r3
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff ff51 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80086ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b0:	2107      	movs	r1, #7
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 f952 	bl	800895c <SDMMC_GetCmdResp1>
 80086b8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3728      	adds	r7, #40	; 0x28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80086d4:	2300      	movs	r3, #0
 80086d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086e2:	f107 0308 	add.w	r3, r7, #8
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff ff30 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f90c 	bl	800890c <SDMMC_GetCmdError>
 80086f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086f6:	69fb      	ldr	r3, [r7, #28]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3720      	adds	r7, #32
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b088      	sub	sp, #32
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008708:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800870c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800870e:	2308      	movs	r3, #8
 8008710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008712:	2340      	movs	r3, #64	; 0x40
 8008714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008716:	2300      	movs	r3, #0
 8008718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800871a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800871e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008720:	f107 0308 	add.w	r3, r7, #8
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7ff ff11 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 faf5 	bl	8008d1c <SDMMC_GetCmdResp7>
 8008732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008734:	69fb      	ldr	r3, [r7, #28]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3720      	adds	r7, #32
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b088      	sub	sp, #32
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800874c:	2337      	movs	r3, #55	; 0x37
 800874e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008750:	2340      	movs	r3, #64	; 0x40
 8008752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008754:	2300      	movs	r3, #0
 8008756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800875c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800875e:	f107 0308 	add.w	r3, r7, #8
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff fef2 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800876a:	f241 3288 	movw	r2, #5000	; 0x1388
 800876e:	2137      	movs	r1, #55	; 0x37
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f8f3 	bl	800895c <SDMMC_GetCmdResp1>
 8008776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008778:	69fb      	ldr	r3, [r7, #28]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3720      	adds	r7, #32
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b088      	sub	sp, #32
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008796:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008798:	2329      	movs	r3, #41	; 0x29
 800879a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800879c:	2340      	movs	r3, #64	; 0x40
 800879e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087aa:	f107 0308 	add.w	r3, r7, #8
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff fecc 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa02 	bl	8008bc0 <SDMMC_GetCmdResp3>
 80087bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087be:	69fb      	ldr	r3, [r7, #28]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80087d6:	2306      	movs	r3, #6
 80087d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087da:	2340      	movs	r3, #64	; 0x40
 80087dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087de:	2300      	movs	r3, #0
 80087e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087e8:	f107 0308 	add.w	r3, r7, #8
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff fead 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80087f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f8:	2106      	movs	r1, #6
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f8ae 	bl	800895c <SDMMC_GetCmdResp1>
 8008800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008802:	69fb      	ldr	r3, [r7, #28]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3720      	adds	r7, #32
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008818:	2333      	movs	r3, #51	; 0x33
 800881a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008828:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800882a:	f107 0308 	add.w	r3, r7, #8
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff fe8c 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008836:	f241 3288 	movw	r2, #5000	; 0x1388
 800883a:	2133      	movs	r1, #51	; 0x33
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f88d 	bl	800895c <SDMMC_GetCmdResp1>
 8008842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008844:	69fb      	ldr	r3, [r7, #28]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b088      	sub	sp, #32
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800885a:	2302      	movs	r3, #2
 800885c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800885e:	23c0      	movs	r3, #192	; 0xc0
 8008860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008862:	2300      	movs	r3, #0
 8008864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800886a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800886c:	f107 0308 	add.w	r3, r7, #8
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fe6b 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f95b 	bl	8008b34 <SDMMC_GetCmdResp2>
 800887e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008880:	69fb      	ldr	r3, [r7, #28]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008898:	2309      	movs	r3, #9
 800889a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800889c:	23c0      	movs	r3, #192	; 0xc0
 800889e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088a0:	2300      	movs	r3, #0
 80088a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff fe4c 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f93c 	bl	8008b34 <SDMMC_GetCmdResp2>
 80088bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088be:	69fb      	ldr	r3, [r7, #28]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3720      	adds	r7, #32
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80088d6:	2303      	movs	r3, #3
 80088d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088da:	2340      	movs	r3, #64	; 0x40
 80088dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088e8:	f107 0308 	add.w	r3, r7, #8
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff fe2d 	bl	800854e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	2103      	movs	r1, #3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f99b 	bl	8008c34 <SDMMC_GetCmdResp6>
 80088fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008900:	69fb      	ldr	r3, [r7, #28]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3720      	adds	r7, #32
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800890c:	b490      	push	{r4, r7}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008914:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <SDMMC_GetCmdError+0x48>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a0f      	ldr	r2, [pc, #60]	; (8008958 <SDMMC_GetCmdError+0x4c>)
 800891a:	fba2 2303 	umull	r2, r3, r2, r3
 800891e:	0a5b      	lsrs	r3, r3, #9
 8008920:	f241 3288 	movw	r2, #5000	; 0x1388
 8008924:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008928:	4623      	mov	r3, r4
 800892a:	1e5c      	subs	r4, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008934:	e009      	b.n	800894a <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f2      	beq.n	8008928 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	22c5      	movs	r2, #197	; 0xc5
 8008946:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bc90      	pop	{r4, r7}
 8008952:	4770      	bx	lr
 8008954:	20000118 	.word	0x20000118
 8008958:	10624dd3 	.word	0x10624dd3

0800895c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800895c:	b590      	push	{r4, r7, lr}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	460b      	mov	r3, r1
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800896a:	4b6f      	ldr	r3, [pc, #444]	; (8008b28 <SDMMC_GetCmdResp1+0x1cc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a6f      	ldr	r2, [pc, #444]	; (8008b2c <SDMMC_GetCmdResp1+0x1d0>)
 8008970:	fba2 2303 	umull	r2, r3, r2, r3
 8008974:	0a5b      	lsrs	r3, r3, #9
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800897c:	4623      	mov	r3, r4
 800897e:	1e5c      	subs	r4, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	d102      	bne.n	800898a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008988:	e0c9      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	617b      	str	r3, [r7, #20]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0f0      	beq.n	800897c <SDMMC_GetCmdResp1+0x20>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1eb      	bne.n	800897c <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d004      	beq.n	80089ba <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2204      	movs	r2, #4
 80089b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089b6:	2304      	movs	r3, #4
 80089b8:	e0b1      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d004      	beq.n	80089d0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0a6      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	22c5      	movs	r2, #197	; 0xc5
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f7ff fde3 	bl	80085a2 <SDMMC_GetCommandResponse>
 80089dc:	4603      	mov	r3, r0
 80089de:	461a      	mov	r2, r3
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d001      	beq.n	80089ea <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e099      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80089ea:	2100      	movs	r1, #0
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f7ff fde5 	bl	80085bc <SDMMC_GetResponse>
 80089f2:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	4b4e      	ldr	r3, [pc, #312]	; (8008b30 <SDMMC_GetCmdResp1+0x1d4>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	e08d      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	da02      	bge.n	8008a0e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a0c:	e087      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008a18:	2340      	movs	r3, #64	; 0x40
 8008a1a:	e080      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008a26:	2380      	movs	r3, #128	; 0x80
 8008a28:	e079      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a38:	e071      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a48:	e069      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a58:	e061      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a68:	e059      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a78:	e051      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a88:	e049      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a98:	e041      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aa8:	e039      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ab8:	e031      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008ac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ac8:	e029      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008ad4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ad8:	e021      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008ae4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ae8:	e019      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008af4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008af8:	e011      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b08:	e009      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008b14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b18:	e001      	b.n	8008b1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd90      	pop	{r4, r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000118 	.word	0x20000118
 8008b2c:	10624dd3 	.word	0x10624dd3
 8008b30:	fdffe008 	.word	0xfdffe008

08008b34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008b34:	b490      	push	{r4, r7}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b3c:	4b1e      	ldr	r3, [pc, #120]	; (8008bb8 <SDMMC_GetCmdResp2+0x84>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a1e      	ldr	r2, [pc, #120]	; (8008bbc <SDMMC_GetCmdResp2+0x88>)
 8008b42:	fba2 2303 	umull	r2, r3, r2, r3
 8008b46:	0a5b      	lsrs	r3, r3, #9
 8008b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b4c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008b50:	4623      	mov	r3, r4
 8008b52:	1e5c      	subs	r4, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b5c:	e026      	b.n	8008bac <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b62:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0f0      	beq.n	8008b50 <SDMMC_GetCmdResp2+0x1c>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1eb      	bne.n	8008b50 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2204      	movs	r2, #4
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b8a:	2304      	movs	r3, #4
 8008b8c:	e00e      	b.n	8008bac <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e003      	b.n	8008bac <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	22c5      	movs	r2, #197	; 0xc5
 8008ba8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc90      	pop	{r4, r7}
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	20000118 	.word	0x20000118
 8008bbc:	10624dd3 	.word	0x10624dd3

08008bc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008bc0:	b490      	push	{r4, r7}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bc8:	4b18      	ldr	r3, [pc, #96]	; (8008c2c <SDMMC_GetCmdResp3+0x6c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a18      	ldr	r2, [pc, #96]	; (8008c30 <SDMMC_GetCmdResp3+0x70>)
 8008bce:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd2:	0a5b      	lsrs	r3, r3, #9
 8008bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008bdc:	4623      	mov	r3, r4
 8008bde:	1e5c      	subs	r4, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008be4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008be8:	e01b      	b.n	8008c22 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0f0      	beq.n	8008bdc <SDMMC_GetCmdResp3+0x1c>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1eb      	bne.n	8008bdc <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2204      	movs	r2, #4
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c16:	2304      	movs	r3, #4
 8008c18:	e003      	b.n	8008c22 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	22c5      	movs	r2, #197	; 0xc5
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc90      	pop	{r4, r7}
 8008c2a:	4770      	bx	lr
 8008c2c:	20000118 	.word	0x20000118
 8008c30:	10624dd3 	.word	0x10624dd3

08008c34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008c34:	b590      	push	{r4, r7, lr}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c42:	4b34      	ldr	r3, [pc, #208]	; (8008d14 <SDMMC_GetCmdResp6+0xe0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a34      	ldr	r2, [pc, #208]	; (8008d18 <SDMMC_GetCmdResp6+0xe4>)
 8008c48:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4c:	0a5b      	lsrs	r3, r3, #9
 8008c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c52:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008c56:	4623      	mov	r3, r4
 8008c58:	1e5c      	subs	r4, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c62:	e052      	b.n	8008d0a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0f0      	beq.n	8008c56 <SDMMC_GetCmdResp6+0x22>
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1eb      	bne.n	8008c56 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c90:	2304      	movs	r3, #4
 8008c92:	e03a      	b.n	8008d0a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e02f      	b.n	8008d0a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff fc79 	bl	80085a2 <SDMMC_GetCommandResponse>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	7afb      	ldrb	r3, [r7, #11]
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d001      	beq.n	8008cbe <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e025      	b.n	8008d0a <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	22c5      	movs	r2, #197	; 0xc5
 8008cc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7ff fc78 	bl	80085bc <SDMMC_GetResponse>
 8008ccc:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d106      	bne.n	8008ce6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	0c1b      	lsrs	r3, r3, #16
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e011      	b.n	8008d0a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cf4:	e009      	b.n	8008d0a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d04:	e001      	b.n	8008d0a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd90      	pop	{r4, r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000118 	.word	0x20000118
 8008d18:	10624dd3 	.word	0x10624dd3

08008d1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008d1c:	b490      	push	{r4, r7}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d24:	4b21      	ldr	r3, [pc, #132]	; (8008dac <SDMMC_GetCmdResp7+0x90>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a21      	ldr	r2, [pc, #132]	; (8008db0 <SDMMC_GetCmdResp7+0x94>)
 8008d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2e:	0a5b      	lsrs	r3, r3, #9
 8008d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d34:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008d38:	4623      	mov	r3, r4
 8008d3a:	1e5c      	subs	r4, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d44:	e02c      	b.n	8008da0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f0      	beq.n	8008d38 <SDMMC_GetCmdResp7+0x1c>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1eb      	bne.n	8008d38 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d004      	beq.n	8008d76 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2204      	movs	r2, #4
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d72:	2304      	movs	r3, #4
 8008d74:	e014      	b.n	8008da0 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d004      	beq.n	8008d8c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e009      	b.n	8008da0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2240      	movs	r2, #64	; 0x40
 8008d9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008d9e:	2300      	movs	r3, #0

}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc90      	pop	{r4, r7}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000118 	.word	0x20000118
 8008db0:	10624dd3 	.word	0x10624dd3

08008db4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008db4:	b084      	sub	sp, #16
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	f107 001c 	add.w	r0, r7, #28
 8008dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d122      	bne.n	8008e12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d105      	bne.n	8008e06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f001 f978 	bl	800a0fc <USB_CoreReset>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
 8008e10:	e01a      	b.n	8008e48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 f96c 	bl	800a0fc <USB_CoreReset>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	639a      	str	r2, [r3, #56]	; 0x38
 8008e3a:	e005      	b.n	8008e48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e54:	b004      	add	sp, #16
 8008e56:	4770      	bx	lr

08008e58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d165      	bne.n	8008f38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4a3e      	ldr	r2, [pc, #248]	; (8008f68 <USB_SetTurnaroundTime+0x110>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d906      	bls.n	8008e82 <USB_SetTurnaroundTime+0x2a>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4a3d      	ldr	r2, [pc, #244]	; (8008f6c <USB_SetTurnaroundTime+0x114>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d802      	bhi.n	8008e82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e7c:	230f      	movs	r3, #15
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	e05c      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4a39      	ldr	r2, [pc, #228]	; (8008f6c <USB_SetTurnaroundTime+0x114>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d906      	bls.n	8008e98 <USB_SetTurnaroundTime+0x40>
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	4a38      	ldr	r2, [pc, #224]	; (8008f70 <USB_SetTurnaroundTime+0x118>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d802      	bhi.n	8008e98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e92:	230e      	movs	r3, #14
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	e051      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	4a35      	ldr	r2, [pc, #212]	; (8008f70 <USB_SetTurnaroundTime+0x118>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d906      	bls.n	8008eae <USB_SetTurnaroundTime+0x56>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	4a34      	ldr	r2, [pc, #208]	; (8008f74 <USB_SetTurnaroundTime+0x11c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d802      	bhi.n	8008eae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ea8:	230d      	movs	r3, #13
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e046      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4a30      	ldr	r2, [pc, #192]	; (8008f74 <USB_SetTurnaroundTime+0x11c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d906      	bls.n	8008ec4 <USB_SetTurnaroundTime+0x6c>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	4a2f      	ldr	r2, [pc, #188]	; (8008f78 <USB_SetTurnaroundTime+0x120>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d802      	bhi.n	8008ec4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	e03b      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4a2c      	ldr	r2, [pc, #176]	; (8008f78 <USB_SetTurnaroundTime+0x120>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d906      	bls.n	8008eda <USB_SetTurnaroundTime+0x82>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	4a2b      	ldr	r2, [pc, #172]	; (8008f7c <USB_SetTurnaroundTime+0x124>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d802      	bhi.n	8008eda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ed4:	230b      	movs	r3, #11
 8008ed6:	617b      	str	r3, [r7, #20]
 8008ed8:	e030      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	4a27      	ldr	r2, [pc, #156]	; (8008f7c <USB_SetTurnaroundTime+0x124>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d906      	bls.n	8008ef0 <USB_SetTurnaroundTime+0x98>
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	4a26      	ldr	r2, [pc, #152]	; (8008f80 <USB_SetTurnaroundTime+0x128>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d802      	bhi.n	8008ef0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008eea:	230a      	movs	r3, #10
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	e025      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4a23      	ldr	r2, [pc, #140]	; (8008f80 <USB_SetTurnaroundTime+0x128>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d906      	bls.n	8008f06 <USB_SetTurnaroundTime+0xae>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4a22      	ldr	r2, [pc, #136]	; (8008f84 <USB_SetTurnaroundTime+0x12c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d802      	bhi.n	8008f06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008f00:	2309      	movs	r3, #9
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e01a      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4a1e      	ldr	r2, [pc, #120]	; (8008f84 <USB_SetTurnaroundTime+0x12c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d906      	bls.n	8008f1c <USB_SetTurnaroundTime+0xc4>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	4a1d      	ldr	r2, [pc, #116]	; (8008f88 <USB_SetTurnaroundTime+0x130>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d802      	bhi.n	8008f1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f16:	2308      	movs	r3, #8
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e00f      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4a1a      	ldr	r2, [pc, #104]	; (8008f88 <USB_SetTurnaroundTime+0x130>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d906      	bls.n	8008f32 <USB_SetTurnaroundTime+0xda>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <USB_SetTurnaroundTime+0x134>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d802      	bhi.n	8008f32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008f2c:	2307      	movs	r3, #7
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	e004      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008f32:	2306      	movs	r3, #6
 8008f34:	617b      	str	r3, [r7, #20]
 8008f36:	e001      	b.n	8008f3c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f38:	2309      	movs	r3, #9
 8008f3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	029b      	lsls	r3, r3, #10
 8008f50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008f54:	431a      	orrs	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	00d8acbf 	.word	0x00d8acbf
 8008f6c:	00e4e1bf 	.word	0x00e4e1bf
 8008f70:	00f423ff 	.word	0x00f423ff
 8008f74:	0106737f 	.word	0x0106737f
 8008f78:	011a499f 	.word	0x011a499f
 8008f7c:	01312cff 	.word	0x01312cff
 8008f80:	014ca43f 	.word	0x014ca43f
 8008f84:	016e35ff 	.word	0x016e35ff
 8008f88:	01a6ab1f 	.word	0x01a6ab1f
 8008f8c:	01e847ff 	.word	0x01e847ff

08008f90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f043 0201 	orr.w	r2, r3, #1
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f023 0201 	bic.w	r2, r3, #1
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d106      	bne.n	8009000 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60da      	str	r2, [r3, #12]
 8008ffe:	e00b      	b.n	8009018 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60da      	str	r2, [r3, #12]
 8009012:	e001      	b.n	8009018 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e003      	b.n	8009020 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009018:	2032      	movs	r0, #50	; 0x32
 800901a:	f7f7 fb31 	bl	8000680 <HAL_Delay>

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009028:	b084      	sub	sp, #16
 800902a:	b580      	push	{r7, lr}
 800902c:	b086      	sub	sp, #24
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009042:	2300      	movs	r3, #0
 8009044:	613b      	str	r3, [r7, #16]
 8009046:	e009      	b.n	800905c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3340      	adds	r3, #64	; 0x40
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	2200      	movs	r2, #0
 8009054:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3301      	adds	r3, #1
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2b0e      	cmp	r3, #14
 8009060:	d9f2      	bls.n	8009048 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d112      	bne.n	800908e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e005      	b.n	800909a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009092:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a0:	461a      	mov	r2, r3
 80090a2:	2300      	movs	r3, #0
 80090a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ac:	4619      	mov	r1, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b4:	461a      	mov	r2, r3
 80090b6:	680b      	ldr	r3, [r1, #0]
 80090b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090ba:	2103      	movs	r1, #3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f93d 	bl	800933c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090c2:	2110      	movs	r1, #16
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f8f1 	bl	80092ac <USB_FlushTxFifo>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f90f 	bl	80092f8 <USB_FlushRxFifo>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ea:	461a      	mov	r2, r3
 80090ec:	2300      	movs	r3, #0
 80090ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f6:	461a      	mov	r2, r3
 80090f8:	2300      	movs	r3, #0
 80090fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009102:	461a      	mov	r2, r3
 8009104:	2300      	movs	r3, #0
 8009106:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009108:	2300      	movs	r3, #0
 800910a:	613b      	str	r3, [r7, #16]
 800910c:	e043      	b.n	8009196 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009124:	d118      	bne.n	8009158 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10a      	bne.n	8009142 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009138:	461a      	mov	r2, r3
 800913a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	e013      	b.n	800916a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914e:	461a      	mov	r2, r3
 8009150:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	e008      	b.n	800916a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009164:	461a      	mov	r2, r3
 8009166:	2300      	movs	r3, #0
 8009168:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009176:	461a      	mov	r2, r3
 8009178:	2300      	movs	r3, #0
 800917a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	461a      	mov	r2, r3
 800918a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800918e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	3301      	adds	r3, #1
 8009194:	613b      	str	r3, [r7, #16]
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	429a      	cmp	r2, r3
 800919c:	d3b7      	bcc.n	800910e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800919e:	2300      	movs	r3, #0
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	e043      	b.n	800922c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091ba:	d118      	bne.n	80091ee <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10a      	bne.n	80091d8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ce:	461a      	mov	r2, r3
 80091d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	e013      	b.n	8009200 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e4:	461a      	mov	r2, r3
 80091e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	e008      	b.n	8009200 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	461a      	mov	r2, r3
 80091fc:	2300      	movs	r3, #0
 80091fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920c:	461a      	mov	r2, r3
 800920e:	2300      	movs	r3, #0
 8009210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	461a      	mov	r2, r3
 8009220:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009224:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3301      	adds	r3, #1
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	429a      	cmp	r2, r3
 8009232:	d3b7      	bcc.n	80091a4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009246:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009254:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	f043 0210 	orr.w	r2, r3, #16
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	699a      	ldr	r2, [r3, #24]
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <USB_DevInit+0x280>)
 8009268:	4313      	orrs	r3, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800926e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f043 0208 	orr.w	r2, r3, #8
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009282:	2b01      	cmp	r3, #1
 8009284:	d107      	bne.n	8009296 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800928e:	f043 0304 	orr.w	r3, r3, #4
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092a2:	b004      	add	sp, #16
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	803c3800 	.word	0x803c3800

080092ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	019b      	lsls	r3, r3, #6
 80092be:	f043 0220 	orr.w	r2, r3, #32
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4a09      	ldr	r2, [pc, #36]	; (80092f4 <USB_FlushTxFifo+0x48>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d901      	bls.n	80092d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e006      	b.n	80092e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b20      	cmp	r3, #32
 80092e2:	d0f0      	beq.n	80092c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	00030d40 	.word	0x00030d40

080092f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2210      	movs	r2, #16
 8009308:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4a09      	ldr	r2, [pc, #36]	; (8009338 <USB_FlushRxFifo+0x40>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d901      	bls.n	800931c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e006      	b.n	800932a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	f003 0310 	and.w	r3, r3, #16
 8009324:	2b10      	cmp	r3, #16
 8009326:	d0f0      	beq.n	800930a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	00030d40 	.word	0x00030d40

0800933c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	68f9      	ldr	r1, [r7, #12]
 8009358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800935c:	4313      	orrs	r3, r2
 800935e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800936e:	b480      	push	{r7}
 8009370:	b087      	sub	sp, #28
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f003 0306 	and.w	r3, r3, #6
 8009386:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d002      	beq.n	8009394 <USB_GetDevSpeed+0x26>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b06      	cmp	r3, #6
 8009392:	d102      	bne.n	800939a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009394:	2302      	movs	r3, #2
 8009396:	75fb      	strb	r3, [r7, #23]
 8009398:	e001      	b.n	800939e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800939a:	230f      	movs	r3, #15
 800939c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	785b      	ldrb	r3, [r3, #1]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d13a      	bne.n	800943e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 030f 	and.w	r3, r3, #15
 80093d8:	2101      	movs	r1, #1
 80093da:	fa01 f303 	lsl.w	r3, r1, r3
 80093de:	b29b      	uxth	r3, r3
 80093e0:	68f9      	ldr	r1, [r7, #12]
 80093e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e6:	4313      	orrs	r3, r2
 80093e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d155      	bne.n	80094ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	78db      	ldrb	r3, [r3, #3]
 800941a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800941c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	059b      	lsls	r3, r3, #22
 8009422:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009424:	4313      	orrs	r3, r2
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	0151      	lsls	r1, r2, #5
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	440a      	add	r2, r1
 800942e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	e036      	b.n	80094ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009444:	69da      	ldr	r2, [r3, #28]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	f003 030f 	and.w	r3, r3, #15
 800944e:	2101      	movs	r1, #1
 8009450:	fa01 f303 	lsl.w	r3, r1, r3
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800945c:	4313      	orrs	r3, r2
 800945e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d11a      	bne.n	80094ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	78db      	ldrb	r3, [r3, #3]
 8009490:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009492:	430b      	orrs	r3, r1
 8009494:	4313      	orrs	r3, r2
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	0151      	lsls	r1, r2, #5
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	440a      	add	r2, r1
 800949e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d135      	bne.n	8009544 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	f003 030f 	and.w	r3, r3, #15
 80094e8:	2101      	movs	r1, #1
 80094ea:	fa01 f303 	lsl.w	r3, r1, r3
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	43db      	mvns	r3, r3
 80094f2:	68f9      	ldr	r1, [r7, #12]
 80094f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094f8:	4013      	ands	r3, r2
 80094fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009502:	69da      	ldr	r2, [r3, #28]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f003 030f 	and.w	r3, r3, #15
 800950c:	2101      	movs	r1, #1
 800950e:	fa01 f303 	lsl.w	r3, r1, r3
 8009512:	b29b      	uxth	r3, r3
 8009514:	43db      	mvns	r3, r3
 8009516:	68f9      	ldr	r1, [r7, #12]
 8009518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800951c:	4013      	ands	r3, r2
 800951e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	0159      	lsls	r1, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	440b      	add	r3, r1
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	4619      	mov	r1, r3
 800953c:	4b1f      	ldr	r3, [pc, #124]	; (80095bc <USB_DeactivateEndpoint+0x100>)
 800953e:	4013      	ands	r3, r2
 8009540:	600b      	str	r3, [r1, #0]
 8009542:	e034      	b.n	80095ae <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	f003 030f 	and.w	r3, r3, #15
 8009554:	2101      	movs	r1, #1
 8009556:	fa01 f303 	lsl.w	r3, r1, r3
 800955a:	041b      	lsls	r3, r3, #16
 800955c:	43db      	mvns	r3, r3
 800955e:	68f9      	ldr	r1, [r7, #12]
 8009560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009564:	4013      	ands	r3, r2
 8009566:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956e:	69da      	ldr	r2, [r3, #28]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	f003 030f 	and.w	r3, r3, #15
 8009578:	2101      	movs	r1, #1
 800957a:	fa01 f303 	lsl.w	r3, r1, r3
 800957e:	041b      	lsls	r3, r3, #16
 8009580:	43db      	mvns	r3, r3
 8009582:	68f9      	ldr	r1, [r7, #12]
 8009584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009588:	4013      	ands	r3, r2
 800958a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	0159      	lsls	r1, r3, #5
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	440b      	add	r3, r1
 80095a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a6:	4619      	mov	r1, r3
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <USB_DeactivateEndpoint+0x104>)
 80095aa:	4013      	ands	r3, r2
 80095ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	ec337800 	.word	0xec337800
 80095c0:	eff37800 	.word	0xeff37800

080095c4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	f040 810a 	bne.w	80097f6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d132      	bne.n	8009650 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	0151      	lsls	r1, r2, #5
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	440a      	add	r2, r1
 8009600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009604:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009608:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800960c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	0151      	lsls	r1, r2, #5
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	440a      	add	r2, r1
 8009624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009628:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800962c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	4413      	add	r3, r2
 8009636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	0151      	lsls	r1, r2, #5
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	440a      	add	r2, r1
 8009644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009648:	0cdb      	lsrs	r3, r3, #19
 800964a:	04db      	lsls	r3, r3, #19
 800964c:	6113      	str	r3, [r2, #16]
 800964e:	e074      	b.n	800973a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	0151      	lsls	r1, r2, #5
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	440a      	add	r2, r1
 8009666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800966a:	0cdb      	lsrs	r3, r3, #19
 800966c:	04db      	lsls	r3, r3, #19
 800966e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	4413      	add	r3, r2
 8009678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	0151      	lsls	r1, r2, #5
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	440a      	add	r2, r1
 8009686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800968e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a0:	691a      	ldr	r2, [r3, #16]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	6959      	ldr	r1, [r3, #20]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	440b      	add	r3, r1
 80096ac:	1e59      	subs	r1, r3, #1
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80096b6:	04d9      	lsls	r1, r3, #19
 80096b8:	4baf      	ldr	r3, [pc, #700]	; (8009978 <USB_EPStartXfer+0x3b4>)
 80096ba:	400b      	ands	r3, r1
 80096bc:	6939      	ldr	r1, [r7, #16]
 80096be:	0148      	lsls	r0, r1, #5
 80096c0:	6979      	ldr	r1, [r7, #20]
 80096c2:	4401      	add	r1, r0
 80096c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096c8:	4313      	orrs	r3, r2
 80096ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d8:	691a      	ldr	r2, [r3, #16]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096e2:	6939      	ldr	r1, [r7, #16]
 80096e4:	0148      	lsls	r0, r1, #5
 80096e6:	6979      	ldr	r1, [r7, #20]
 80096e8:	4401      	add	r1, r0
 80096ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096ee:	4313      	orrs	r3, r2
 80096f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	78db      	ldrb	r3, [r3, #3]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d11f      	bne.n	800973a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	0151      	lsls	r1, r2, #5
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	440a      	add	r2, r1
 8009710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009714:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009718:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	0151      	lsls	r1, r2, #5
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	440a      	add	r2, r1
 8009730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009734:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009738:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	440a      	add	r2, r1
 8009750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009758:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	78db      	ldrb	r3, [r3, #3]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d015      	beq.n	800978e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 8100 	beq.w	800996c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	2101      	movs	r1, #1
 800977e:	fa01 f303 	lsl.w	r3, r1, r3
 8009782:	6979      	ldr	r1, [r7, #20]
 8009784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009788:	4313      	orrs	r3, r2
 800978a:	634b      	str	r3, [r1, #52]	; 0x34
 800978c:	e0ee      	b.n	800996c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979a:	2b00      	cmp	r3, #0
 800979c:	d110      	bne.n	80097c0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	0151      	lsls	r1, r2, #5
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	440a      	add	r2, r1
 80097b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	e00f      	b.n	80097e0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	0151      	lsls	r1, r2, #5
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	440a      	add	r2, r1
 80097d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097de:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68d9      	ldr	r1, [r3, #12]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f9e2 	bl	8009bb8 <USB_WritePacket>
 80097f4:	e0ba      	b.n	800996c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	0151      	lsls	r1, r2, #5
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	440a      	add	r2, r1
 800980c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009810:	0cdb      	lsrs	r3, r3, #19
 8009812:	04db      	lsls	r3, r3, #19
 8009814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	440a      	add	r2, r1
 800982c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009838:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d123      	bne.n	800988a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009858:	6939      	ldr	r1, [r7, #16]
 800985a:	0148      	lsls	r0, r1, #5
 800985c:	6979      	ldr	r1, [r7, #20]
 800985e:	4401      	add	r1, r0
 8009860:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009864:	4313      	orrs	r3, r2
 8009866:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	0151      	lsls	r1, r2, #5
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	440a      	add	r2, r1
 800987e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009886:	6113      	str	r3, [r2, #16]
 8009888:	e033      	b.n	80098f2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	695a      	ldr	r2, [r3, #20]
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	4413      	add	r3, r2
 8009894:	1e5a      	subs	r2, r3, #1
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	fbb2 f3f3 	udiv	r3, r2, r3
 800989e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	89fb      	ldrh	r3, [r7, #14]
 80098b0:	04d9      	lsls	r1, r3, #19
 80098b2:	4b31      	ldr	r3, [pc, #196]	; (8009978 <USB_EPStartXfer+0x3b4>)
 80098b4:	400b      	ands	r3, r1
 80098b6:	6939      	ldr	r1, [r7, #16]
 80098b8:	0148      	lsls	r0, r1, #5
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	4401      	add	r1, r0
 80098be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098c2:	4313      	orrs	r3, r2
 80098c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	89f9      	ldrh	r1, [r7, #14]
 80098da:	fb01 f303 	mul.w	r3, r1, r3
 80098de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098e2:	6939      	ldr	r1, [r7, #16]
 80098e4:	0148      	lsls	r0, r1, #5
 80098e6:	6979      	ldr	r1, [r7, #20]
 80098e8:	4401      	add	r1, r0
 80098ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098ee:	4313      	orrs	r3, r2
 80098f0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	78db      	ldrb	r3, [r3, #3]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d128      	bne.n	800994c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009906:	2b00      	cmp	r3, #0
 8009908:	d110      	bne.n	800992c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	0151      	lsls	r1, r2, #5
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	440a      	add	r2, r1
 8009920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	e00f      	b.n	800994c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	0151      	lsls	r1, r2, #5
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	440a      	add	r2, r1
 8009942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800994a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	440a      	add	r2, r1
 8009962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009966:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800996a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	1ff80000 	.word	0x1ff80000

0800997c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	785b      	ldrb	r3, [r3, #1]
 8009994:	2b01      	cmp	r3, #1
 8009996:	f040 80ab 	bne.w	8009af0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d132      	bne.n	8009a08 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	0151      	lsls	r1, r2, #5
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	440a      	add	r2, r1
 80099b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a00:	0cdb      	lsrs	r3, r3, #19
 8009a02:	04db      	lsls	r3, r3, #19
 8009a04:	6113      	str	r3, [r2, #16]
 8009a06:	e04e      	b.n	8009aa6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	0151      	lsls	r1, r2, #5
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	440a      	add	r2, r1
 8009a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a22:	0cdb      	lsrs	r3, r3, #19
 8009a24:	04db      	lsls	r3, r3, #19
 8009a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	0151      	lsls	r1, r2, #5
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	440a      	add	r2, r1
 8009a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	695a      	ldr	r2, [r3, #20]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d903      	bls.n	8009a60 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	689a      	ldr	r2, [r3, #8]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8c:	691a      	ldr	r2, [r3, #16]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a96:	68b9      	ldr	r1, [r7, #8]
 8009a98:	0148      	lsls	r0, r1, #5
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	4401      	add	r1, r0
 8009a9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	0151      	lsls	r1, r2, #5
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	440a      	add	r2, r1
 8009abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ac4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d06d      	beq.n	8009baa <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	2101      	movs	r1, #1
 8009ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aea:	4313      	orrs	r3, r2
 8009aec:	634b      	str	r3, [r1, #52]	; 0x34
 8009aee:	e05c      	b.n	8009baa <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	0151      	lsls	r1, r2, #5
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	440a      	add	r2, r1
 8009b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0a:	0cdb      	lsrs	r3, r3, #19
 8009b0c:	04db      	lsls	r3, r3, #19
 8009b0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	0151      	lsls	r1, r2, #5
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	440a      	add	r2, r1
 8009b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b32:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b70:	691a      	ldr	r2, [r3, #16]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	0148      	lsls	r0, r1, #5
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	4401      	add	r1, r0
 8009b82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b86:	4313      	orrs	r3, r2
 8009b88:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b089      	sub	sp, #36	; 0x24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	71fb      	strb	r3, [r7, #7]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009bd6:	88bb      	ldrh	r3, [r7, #4]
 8009bd8:	3303      	adds	r3, #3
 8009bda:	089b      	lsrs	r3, r3, #2
 8009bdc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009bde:	2300      	movs	r3, #0
 8009be0:	61bb      	str	r3, [r7, #24]
 8009be2:	e00f      	b.n	8009c04 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	031a      	lsls	r2, r3, #12
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	3301      	adds	r3, #1
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d3eb      	bcc.n	8009be4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3724      	adds	r7, #36	; 0x24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b089      	sub	sp, #36	; 0x24
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	4613      	mov	r3, r2
 8009c26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009c30:	88fb      	ldrh	r3, [r7, #6]
 8009c32:	3303      	adds	r3, #3
 8009c34:	089b      	lsrs	r3, r3, #2
 8009c36:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61bb      	str	r3, [r7, #24]
 8009c3c:	e00b      	b.n	8009c56 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	3301      	adds	r3, #1
 8009c54:	61bb      	str	r3, [r7, #24]
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d3ef      	bcc.n	8009c3e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009c5e:	69fb      	ldr	r3, [r7, #28]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3724      	adds	r7, #36	; 0x24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d12c      	bne.n	8009ce2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	db12      	blt.n	8009cc0 <USB_EPSetStall+0x54>
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00f      	beq.n	8009cc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	0151      	lsls	r1, r2, #5
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009cbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	0151      	lsls	r1, r2, #5
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	440a      	add	r2, r1
 8009cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	e02b      	b.n	8009d3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	db12      	blt.n	8009d1a <USB_EPSetStall+0xae>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00f      	beq.n	8009d1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	0151      	lsls	r1, r2, #5
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	440a      	add	r2, r1
 8009d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	0151      	lsls	r1, r2, #5
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	440a      	add	r2, r1
 8009d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d128      	bne.n	8009db6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	78db      	ldrb	r3, [r3, #3]
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d003      	beq.n	8009d94 <USB_EPClearStall+0x4c>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	78db      	ldrb	r3, [r3, #3]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d138      	bne.n	8009e06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	0151      	lsls	r1, r2, #5
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	440a      	add	r2, r1
 8009daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	e027      	b.n	8009e06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	015a      	lsls	r2, r3, #5
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	0151      	lsls	r1, r2, #5
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	440a      	add	r2, r1
 8009dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	78db      	ldrb	r3, [r3, #3]
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d003      	beq.n	8009de6 <USB_EPClearStall+0x9e>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	78db      	ldrb	r3, [r3, #3]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d10f      	bne.n	8009e06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	0151      	lsls	r1, r2, #5
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	440a      	add	r2, r1
 8009dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	011b      	lsls	r3, r3, #4
 8009e44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e48:	68f9      	ldr	r1, [r7, #12]
 8009e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e7a:	f023 0302 	bic.w	r3, r3, #2
 8009e7e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009e80:	2003      	movs	r0, #3
 8009e82:	f7f6 fbfd 	bl	8000680 <HAL_Delay>

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eaa:	f043 0302 	orr.w	r3, r3, #2
 8009eae:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009eb0:	2003      	movs	r0, #3
 8009eb2:	f7f6 fbe5 	bl	8000680 <HAL_Delay>

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b085      	sub	sp, #20
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	4013      	ands	r3, r2
 8009f08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	0c1b      	lsrs	r3, r3, #16
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	b29b      	uxth	r3, r3
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b085      	sub	sp, #20
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	460b      	mov	r3, r1
 8009f58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	4013      	ands	r3, r2
 8009f7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b087      	sub	sp, #28
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fba:	01db      	lsls	r3, r3, #7
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009fc4:	78fb      	ldrb	r3, [r7, #3]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	371c      	adds	r7, #28
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a01c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a020:	f023 0307 	bic.w	r3, r3, #7
 800a024:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f003 0306 	and.w	r3, r3, #6
 800a032:	2b04      	cmp	r3, #4
 800a034:	d109      	bne.n	800a04a <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a044:	f043 0303 	orr.w	r3, r3, #3
 800a048:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a05c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	333c      	adds	r3, #60	; 0x3c
 800a07e:	3304      	adds	r3, #4
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	4a1c      	ldr	r2, [pc, #112]	; (800a0f8 <USB_EP0_OutStart+0x8c>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d90a      	bls.n	800a0a2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a09c:	d101      	bne.n	800a0a2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e024      	b.n	800a0ec <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d0:	f043 0318 	orr.w	r3, r3, #24
 800a0d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a0e8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	4f54300a 	.word	0x4f54300a

0800a0fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3301      	adds	r3, #1
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4a13      	ldr	r2, [pc, #76]	; (800a160 <USB_CoreReset+0x64>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d901      	bls.n	800a11a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e01b      	b.n	800a152 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	daf2      	bge.n	800a108 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	f043 0201 	orr.w	r2, r3, #1
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3301      	adds	r3, #1
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4a09      	ldr	r2, [pc, #36]	; (800a160 <USB_CoreReset+0x64>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d901      	bls.n	800a144 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e006      	b.n	800a152 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d0f0      	beq.n	800a132 <USB_CoreReset+0x36>

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	00030d40 	.word	0x00030d40

0800a164 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	7c1b      	ldrb	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d115      	bne.n	800a1a8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a17c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a180:	2202      	movs	r2, #2
 800a182:	2181      	movs	r1, #129	; 0x81
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f003 fd9f 	bl	800dcc8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a190:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a194:	2202      	movs	r2, #2
 800a196:	2101      	movs	r1, #1
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f003 fd95 	bl	800dcc8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800a1a6:	e012      	b.n	800a1ce <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1a8:	2340      	movs	r3, #64	; 0x40
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	2181      	movs	r1, #129	; 0x81
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f003 fd8a 	bl	800dcc8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1ba:	2340      	movs	r3, #64	; 0x40
 800a1bc:	2202      	movs	r2, #2
 800a1be:	2101      	movs	r1, #1
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f003 fd81 	bl	800dcc8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1ce:	2308      	movs	r3, #8
 800a1d0:	2203      	movs	r2, #3
 800a1d2:	2182      	movs	r1, #130	; 0x82
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f003 fd77 	bl	800dcc8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800a1e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a1e4:	f003 ff88 	bl	800e0f8 <USBD_static_malloc>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	73fb      	strb	r3, [r7, #15]
 800a1fe:	e026      	b.n	800a24e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a206:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2200      	movs	r2, #0
 800a216:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	7c1b      	ldrb	r3, [r3, #16]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d109      	bne.n	800a23e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a230:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a234:	2101      	movs	r1, #1
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f003 fec2 	bl	800dfc0 <USBD_LL_PrepareReceive>
 800a23c:	e007      	b.n	800a24e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	2101      	movs	r1, #1
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f003 feb9 	bl	800dfc0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a268:	2181      	movs	r1, #129	; 0x81
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f003 fd6a 	bl	800dd44 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a276:	2101      	movs	r1, #1
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f003 fd63 	bl	800dd44 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a286:	2182      	movs	r1, #130	; 0x82
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f003 fd5b 	bl	800dd44 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00e      	beq.n	800a2bc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f003 ff30 	bl	800e114 <USBD_static_free>
    pdev->pClassData = NULL;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b086      	sub	sp, #24
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a2d6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d039      	beq.n	800a364 <USBD_CDC_Setup+0x9e>
 800a2f0:	2b20      	cmp	r3, #32
 800a2f2:	d17c      	bne.n	800a3ee <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	88db      	ldrh	r3, [r3, #6]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d029      	beq.n	800a350 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	b25b      	sxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	da11      	bge.n	800a32a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800a312:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	88d2      	ldrh	r2, [r2, #6]
 800a318:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a31a:	6939      	ldr	r1, [r7, #16]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	88db      	ldrh	r3, [r3, #6]
 800a320:	461a      	mov	r2, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 f9b8 	bl	800b698 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800a328:	e068      	b.n	800a3fc <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	785a      	ldrb	r2, [r3, #1]
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	88db      	ldrh	r3, [r3, #6]
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a340:	6939      	ldr	r1, [r7, #16]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	88db      	ldrh	r3, [r3, #6]
 800a346:	461a      	mov	r2, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 f9d3 	bl	800b6f4 <USBD_CtlPrepareRx>
    break;
 800a34e:	e055      	b.n	800a3fc <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	7850      	ldrb	r0, [r2, #1]
 800a35c:	2200      	movs	r2, #0
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	4798      	blx	r3
    break;
 800a362:	e04b      	b.n	800a3fc <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b0a      	cmp	r3, #10
 800a36a:	d017      	beq.n	800a39c <USBD_CDC_Setup+0xd6>
 800a36c:	2b0b      	cmp	r3, #11
 800a36e:	d029      	beq.n	800a3c4 <USBD_CDC_Setup+0xfe>
 800a370:	2b00      	cmp	r3, #0
 800a372:	d133      	bne.n	800a3dc <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d107      	bne.n	800a38e <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800a37e:	f107 030c 	add.w	r3, r7, #12
 800a382:	2202      	movs	r2, #2
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 f986 	bl	800b698 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a38c:	e02e      	b.n	800a3ec <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 f916 	bl	800b5c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800a396:	2302      	movs	r3, #2
 800a398:	75fb      	strb	r3, [r7, #23]
      break;
 800a39a:	e027      	b.n	800a3ec <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d107      	bne.n	800a3b6 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800a3a6:	f107 030f 	add.w	r3, r7, #15
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f001 f972 	bl	800b698 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a3b4:	e01a      	b.n	800a3ec <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f001 f902 	bl	800b5c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800a3be:	2302      	movs	r3, #2
 800a3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c2:	e013      	b.n	800a3ec <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d00d      	beq.n	800a3ea <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f001 f8f6 	bl	800b5c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a3da:	e006      	b.n	800a3ea <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f001 f8ef 	bl	800b5c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3e8:	e000      	b.n	800a3ec <USBD_CDC_Setup+0x126>
      break;
 800a3ea:	bf00      	nop
    }
    break;
 800a3ec:	e006      	b.n	800a3fc <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 f8e6 	bl	800b5c2 <USBD_CtlError>
    ret = USBD_FAIL;
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	75fb      	strb	r3, [r7, #23]
    break;
 800a3fa:	bf00      	nop
  }

  return ret;
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a418:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a420:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d03a      	beq.n	800a4a2 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a42c:	78fa      	ldrb	r2, [r7, #3]
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4613      	mov	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	440b      	add	r3, r1
 800a43a:	331c      	adds	r3, #28
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d029      	beq.n	800a496 <USBD_CDC_DataIn+0x90>
 800a442:	78fa      	ldrb	r2, [r7, #3]
 800a444:	6879      	ldr	r1, [r7, #4]
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	440b      	add	r3, r1
 800a450:	331c      	adds	r3, #28
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	78f9      	ldrb	r1, [r7, #3]
 800a456:	68b8      	ldr	r0, [r7, #8]
 800a458:	460b      	mov	r3, r1
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	1a5b      	subs	r3, r3, r1
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4403      	add	r3, r0
 800a462:	3344      	adds	r3, #68	; 0x44
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	fbb2 f1f3 	udiv	r1, r2, r3
 800a46a:	fb03 f301 	mul.w	r3, r3, r1
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	2b00      	cmp	r3, #0
 800a472:	d110      	bne.n	800a496 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a474:	78fa      	ldrb	r2, [r7, #3]
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	4613      	mov	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	440b      	add	r3, r1
 800a482:	331c      	adds	r3, #28
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800a488:	78f9      	ldrb	r1, [r7, #3]
 800a48a:	2300      	movs	r3, #0
 800a48c:	2200      	movs	r2, #0
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f003 fd5c 	bl	800df4c <USBD_LL_Transmit>
 800a494:	e003      	b.n	800a49e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e000      	b.n	800a4a4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a4a2:	2302      	movs	r3, #2
  }
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f003 fdb5 	bl	800e034 <USBD_LL_GetRxDataSize>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00d      	beq.n	800a4f8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4798      	blx	r3

    return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e000      	b.n	800a4fa <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a4f8:	2302      	movs	r3, #2
  }
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a510:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d015      	beq.n	800a548 <USBD_CDC_EP0_RxReady+0x46>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a522:	2bff      	cmp	r3, #255	; 0xff
 800a524:	d010      	beq.n	800a548 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a534:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a53c:	b292      	uxth	r2, r2
 800a53e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	22ff      	movs	r2, #255	; 0xff
 800a544:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2243      	movs	r2, #67	; 0x43
 800a560:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a562:	4b03      	ldr	r3, [pc, #12]	; (800a570 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	20000090 	.word	0x20000090

0800a574 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2243      	movs	r2, #67	; 0x43
 800a580:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a582:	4b03      	ldr	r3, [pc, #12]	; (800a590 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	2000004c 	.word	0x2000004c

0800a594 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2243      	movs	r2, #67	; 0x43
 800a5a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a5a2:	4b03      	ldr	r3, [pc, #12]	; (800a5b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	200000d4 	.word	0x200000d4

0800a5b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	220a      	movs	r2, #10
 800a5c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a5c2:	4b03      	ldr	r3, [pc, #12]	; (800a5d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	20000008 	.word	0x20000008

0800a5d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d005      	beq.n	800a5f4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a602:	b480      	push	{r7}
 800a604:	b087      	sub	sp, #28
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	4613      	mov	r3, r2
 800a60e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a616:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a620:	88fa      	ldrh	r2, [r7, #6]
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a636:	b480      	push	{r7}
 800a638:	b085      	sub	sp, #20
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a646:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a66c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a674:	2b00      	cmp	r3, #0
 800a676:	d017      	beq.n	800a6a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	7c1b      	ldrb	r3, [r3, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d109      	bne.n	800a694 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a68a:	2101      	movs	r1, #1
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f003 fc97 	bl	800dfc0 <USBD_LL_PrepareReceive>
 800a692:	e007      	b.n	800a6a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	2101      	movs	r1, #1
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f003 fc8e 	bl	800dfc0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e000      	b.n	800a6aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a6a8:	2302      	movs	r3, #2
  }
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	e01a      	b.n	800a700 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d003      	beq.n	800a6dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	79fa      	ldrb	r2, [r7, #7]
 800a6f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f003 fa67 	bl	800dbcc <USBD_LL_Init>

  return USBD_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73fb      	strb	r3, [r7, #15]
 800a728:	e001      	b.n	800a72e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a72a:	2302      	movs	r3, #2
 800a72c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f003 fa8d 	bl	800dc64 <USBD_LL_Start>

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a776:	2302      	movs	r3, #2
 800a778:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00c      	beq.n	800a79e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	78fa      	ldrb	r2, [r7, #3]
 800a78e:	4611      	mov	r1, r2
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	4798      	blx	r3
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	4611      	mov	r1, r2
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	4798      	blx	r3
  return USBD_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 feb1 	bl	800b548 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a802:	f003 031f 	and.w	r3, r3, #31
 800a806:	2b01      	cmp	r3, #1
 800a808:	d00c      	beq.n	800a824 <USBD_LL_SetupStage+0x56>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d302      	bcc.n	800a814 <USBD_LL_SetupStage+0x46>
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d010      	beq.n	800a834 <USBD_LL_SetupStage+0x66>
 800a812:	e017      	b.n	800a844 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fa05 	bl	800ac2c <USBD_StdDevReq>
    break;
 800a822:	e01a      	b.n	800a85a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fa67 	bl	800ad00 <USBD_StdItfReq>
    break;
 800a832:	e012      	b.n	800a85a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 faa5 	bl	800ad8c <USBD_StdEPReq>
    break;
 800a842:	e00a      	b.n	800a85a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a84a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f003 faac 	bl	800ddb0 <USBD_LL_StallEP>
    break;
 800a858:	bf00      	nop
  }

  return USBD_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	460b      	mov	r3, r1
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d14b      	bne.n	800a910 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a87e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a886:	2b03      	cmp	r3, #3
 800a888:	d134      	bne.n	800a8f4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	68da      	ldr	r2, [r3, #12]
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	429a      	cmp	r2, r3
 800a894:	d919      	bls.n	800a8ca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	68da      	ldr	r2, [r3, #12]
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	68da      	ldr	r2, [r3, #12]
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d203      	bcs.n	800a8b8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	e002      	b.n	800a8be <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6879      	ldr	r1, [r7, #4]
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 ff34 	bl	800b730 <USBD_CtlContinueRx>
 800a8c8:	e038      	b.n	800a93c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d105      	bne.n	800a8ec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 ff31 	bl	800b754 <USBD_CtlSendStatus>
 800a8f2:	e023      	b.n	800a93c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a8fa:	2b05      	cmp	r3, #5
 800a8fc:	d11e      	bne.n	800a93c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800a906:	2100      	movs	r1, #0
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f003 fa51 	bl	800ddb0 <USBD_LL_StallEP>
 800a90e:	e015      	b.n	800a93c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00d      	beq.n	800a938 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a922:	2b03      	cmp	r3, #3
 800a924:	d108      	bne.n	800a938 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	7afa      	ldrb	r2, [r7, #11]
 800a930:	4611      	mov	r1, r2
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	4798      	blx	r3
 800a936:	e001      	b.n	800a93c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a938:	2302      	movs	r3, #2
 800a93a:	e000      	b.n	800a93e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b086      	sub	sp, #24
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	460b      	mov	r3, r1
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a954:	7afb      	ldrb	r3, [r7, #11]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d17f      	bne.n	800aa5a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3314      	adds	r3, #20
 800a95e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a966:	2b02      	cmp	r3, #2
 800a968:	d15c      	bne.n	800aa24 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	68da      	ldr	r2, [r3, #12]
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	429a      	cmp	r2, r3
 800a974:	d915      	bls.n	800a9a2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	1ad2      	subs	r2, r2, r3
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	461a      	mov	r2, r3
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f000 fe9e 	bl	800b6d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a994:	2300      	movs	r3, #0
 800a996:	2200      	movs	r2, #0
 800a998:	2100      	movs	r1, #0
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f003 fb10 	bl	800dfc0 <USBD_LL_PrepareReceive>
 800a9a0:	e04e      	b.n	800aa40 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	6912      	ldr	r2, [r2, #16]
 800a9aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9ae:	fb02 f201 	mul.w	r2, r2, r1
 800a9b2:	1a9b      	subs	r3, r3, r2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d11c      	bne.n	800a9f2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d316      	bcc.n	800a9f2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d20f      	bcs.n	800a9f2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 fe7a 	bl	800b6d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f003 fae8 	bl	800dfc0 <USBD_LL_PrepareReceive>
 800a9f0:	e026      	b.n	800aa40 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d105      	bne.n	800aa14 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800aa14:	2180      	movs	r1, #128	; 0x80
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f003 f9ca 	bl	800ddb0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 feac 	bl	800b77a <USBD_CtlReceiveStatus>
 800aa22:	e00d      	b.n	800aa40 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	d004      	beq.n	800aa38 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aa38:	2180      	movs	r1, #128	; 0x80
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f003 f9b8 	bl	800ddb0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d11d      	bne.n	800aa86 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fe82 	bl	800a754 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800aa58:	e015      	b.n	800aa86 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00d      	beq.n	800aa82 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d108      	bne.n	800aa82 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	7afa      	ldrb	r2, [r7, #11]
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	4798      	blx	r3
 800aa80:	e001      	b.n	800aa86 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa82:	2302      	movs	r3, #2
 800aa84:	e000      	b.n	800aa88 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa98:	2340      	movs	r3, #64	; 0x40
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f003 f912 	bl	800dcc8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2240      	movs	r2, #64	; 0x40
 800aab0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aab4:	2340      	movs	r3, #64	; 0x40
 800aab6:	2200      	movs	r2, #0
 800aab8:	2180      	movs	r1, #128	; 0x80
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f003 f904 	bl	800dcc8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2240      	movs	r2, #64	; 0x40
 800aaca:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d009      	beq.n	800ab08 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6852      	ldr	r2, [r2, #4]
 800ab00:	b2d2      	uxtb	r2, r2
 800ab02:	4611      	mov	r1, r2
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
  }

  return USBD_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	78fa      	ldrb	r2, [r7, #3]
 800ab22:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2204      	movs	r2, #4
 800ab4a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d10b      	bne.n	800aba8 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3708      	adds	r7, #8
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	6852      	ldr	r2, [r2, #4]
 800ac18:	b2d2      	uxtb	r2, r2
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	4798      	blx	r3

  return USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	d004      	beq.n	800ac50 <USBD_StdDevReq+0x24>
 800ac46:	2b40      	cmp	r3, #64	; 0x40
 800ac48:	d002      	beq.n	800ac50 <USBD_StdDevReq+0x24>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d008      	beq.n	800ac60 <USBD_StdDevReq+0x34>
 800ac4e:	e04c      	b.n	800acea <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
    break;
 800ac5e:	e049      	b.n	800acf4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	785b      	ldrb	r3, [r3, #1]
 800ac64:	2b09      	cmp	r3, #9
 800ac66:	d83a      	bhi.n	800acde <USBD_StdDevReq+0xb2>
 800ac68:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <USBD_StdDevReq+0x44>)
 800ac6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6e:	bf00      	nop
 800ac70:	0800acc1 	.word	0x0800acc1
 800ac74:	0800acd5 	.word	0x0800acd5
 800ac78:	0800acdf 	.word	0x0800acdf
 800ac7c:	0800accb 	.word	0x0800accb
 800ac80:	0800acdf 	.word	0x0800acdf
 800ac84:	0800aca3 	.word	0x0800aca3
 800ac88:	0800ac99 	.word	0x0800ac99
 800ac8c:	0800acdf 	.word	0x0800acdf
 800ac90:	0800acb7 	.word	0x0800acb7
 800ac94:	0800acad 	.word	0x0800acad
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f9d2 	bl	800b044 <USBD_GetDescriptor>
      break;
 800aca0:	e022      	b.n	800ace8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fae3 	bl	800b270 <USBD_SetAddress>
      break;
 800acaa:	e01d      	b.n	800ace8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fb20 	bl	800b2f4 <USBD_SetConfig>
      break;
 800acb4:	e018      	b.n	800ace8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fba9 	bl	800b410 <USBD_GetConfig>
      break;
 800acbe:	e013      	b.n	800ace8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fbd8 	bl	800b478 <USBD_GetStatus>
      break;
 800acc8:	e00e      	b.n	800ace8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fc06 	bl	800b4de <USBD_SetFeature>
      break;
 800acd2:	e009      	b.n	800ace8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fc15 	bl	800b506 <USBD_ClrFeature>
      break;
 800acdc:	e004      	b.n	800ace8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fc6e 	bl	800b5c2 <USBD_CtlError>
      break;
 800ace6:	bf00      	nop
    }
    break;
 800ace8:	e004      	b.n	800acf4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fc68 	bl	800b5c2 <USBD_CtlError>
    break;
 800acf2:	bf00      	nop
  }

  return ret;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop

0800ad00 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad16:	2b20      	cmp	r3, #32
 800ad18:	d003      	beq.n	800ad22 <USBD_StdItfReq+0x22>
 800ad1a:	2b40      	cmp	r3, #64	; 0x40
 800ad1c:	d001      	beq.n	800ad22 <USBD_StdItfReq+0x22>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d12a      	bne.n	800ad78 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d81d      	bhi.n	800ad6a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	889b      	ldrh	r3, [r3, #4]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d813      	bhi.n	800ad60 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	4798      	blx	r3
 800ad46:	4603      	mov	r3, r0
 800ad48:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	88db      	ldrh	r3, [r3, #6]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d110      	bne.n	800ad74 <USBD_StdItfReq+0x74>
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10d      	bne.n	800ad74 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fcfb 	bl	800b754 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ad5e:	e009      	b.n	800ad74 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fc2d 	bl	800b5c2 <USBD_CtlError>
      break;
 800ad68:	e004      	b.n	800ad74 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fc28 	bl	800b5c2 <USBD_CtlError>
      break;
 800ad72:	e000      	b.n	800ad76 <USBD_StdItfReq+0x76>
      break;
 800ad74:	bf00      	nop
    }
    break;
 800ad76:	e004      	b.n	800ad82 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fc21 	bl	800b5c2 <USBD_CtlError>
    break;
 800ad80:	bf00      	nop
  }

  return USBD_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	889b      	ldrh	r3, [r3, #4]
 800ad9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ada8:	2b20      	cmp	r3, #32
 800adaa:	d004      	beq.n	800adb6 <USBD_StdEPReq+0x2a>
 800adac:	2b40      	cmp	r3, #64	; 0x40
 800adae:	d002      	beq.n	800adb6 <USBD_StdEPReq+0x2a>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d008      	beq.n	800adc6 <USBD_StdEPReq+0x3a>
 800adb4:	e13b      	b.n	800b02e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	4798      	blx	r3
    break;
 800adc4:	e138      	b.n	800b038 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adce:	2b20      	cmp	r3, #32
 800add0:	d10a      	bne.n	800ade8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	4798      	blx	r3
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]

      return ret;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	e128      	b.n	800b03a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	785b      	ldrb	r3, [r3, #1]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d03e      	beq.n	800ae6e <USBD_StdEPReq+0xe2>
 800adf0:	2b03      	cmp	r3, #3
 800adf2:	d002      	beq.n	800adfa <USBD_StdEPReq+0x6e>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d070      	beq.n	800aeda <USBD_StdEPReq+0x14e>
 800adf8:	e113      	b.n	800b022 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d002      	beq.n	800ae0a <USBD_StdEPReq+0x7e>
 800ae04:	2b03      	cmp	r3, #3
 800ae06:	d015      	beq.n	800ae34 <USBD_StdEPReq+0xa8>
 800ae08:	e02b      	b.n	800ae62 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae0a:	7bbb      	ldrb	r3, [r7, #14]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00c      	beq.n	800ae2a <USBD_StdEPReq+0x9e>
 800ae10:	7bbb      	ldrb	r3, [r7, #14]
 800ae12:	2b80      	cmp	r3, #128	; 0x80
 800ae14:	d009      	beq.n	800ae2a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f002 ffc8 	bl	800ddb0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ae20:	2180      	movs	r1, #128	; 0x80
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f002 ffc4 	bl	800ddb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ae28:	e020      	b.n	800ae6c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fbc8 	bl	800b5c2 <USBD_CtlError>
        break;
 800ae32:	e01b      	b.n	800ae6c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	885b      	ldrh	r3, [r3, #2]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10e      	bne.n	800ae5a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00b      	beq.n	800ae5a <USBD_StdEPReq+0xce>
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	2b80      	cmp	r3, #128	; 0x80
 800ae46:	d008      	beq.n	800ae5a <USBD_StdEPReq+0xce>
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	88db      	ldrh	r3, [r3, #6]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f002 ffab 	bl	800ddb0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fc7a 	bl	800b754 <USBD_CtlSendStatus>

        break;
 800ae60:	e004      	b.n	800ae6c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fbac 	bl	800b5c2 <USBD_CtlError>
        break;
 800ae6a:	bf00      	nop
      }
      break;
 800ae6c:	e0de      	b.n	800b02c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d002      	beq.n	800ae7e <USBD_StdEPReq+0xf2>
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d015      	beq.n	800aea8 <USBD_StdEPReq+0x11c>
 800ae7c:	e026      	b.n	800aecc <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00c      	beq.n	800ae9e <USBD_StdEPReq+0x112>
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	2b80      	cmp	r3, #128	; 0x80
 800ae88:	d009      	beq.n	800ae9e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f002 ff8e 	bl	800ddb0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ae94:	2180      	movs	r1, #128	; 0x80
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f002 ff8a 	bl	800ddb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ae9c:	e01c      	b.n	800aed8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fb8e 	bl	800b5c2 <USBD_CtlError>
        break;
 800aea6:	e017      	b.n	800aed8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	885b      	ldrh	r3, [r3, #2]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d112      	bne.n	800aed6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d004      	beq.n	800aec4 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f002 ffac 	bl	800de1c <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fc45 	bl	800b754 <USBD_CtlSendStatus>
        }
        break;
 800aeca:	e004      	b.n	800aed6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fb77 	bl	800b5c2 <USBD_CtlError>
        break;
 800aed4:	e000      	b.n	800aed8 <USBD_StdEPReq+0x14c>
        break;
 800aed6:	bf00      	nop
      }
      break;
 800aed8:	e0a8      	b.n	800b02c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d002      	beq.n	800aeea <USBD_StdEPReq+0x15e>
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d031      	beq.n	800af4c <USBD_StdEPReq+0x1c0>
 800aee8:	e095      	b.n	800b016 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d007      	beq.n	800af00 <USBD_StdEPReq+0x174>
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b80      	cmp	r3, #128	; 0x80
 800aef4:	d004      	beq.n	800af00 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fb62 	bl	800b5c2 <USBD_CtlError>
          break;
 800aefe:	e08f      	b.n	800b020 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800af00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af04:	2b00      	cmp	r3, #0
 800af06:	da0b      	bge.n	800af20 <USBD_StdEPReq+0x194>
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	3310      	adds	r3, #16
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	4413      	add	r3, r2
 800af1c:	3304      	adds	r3, #4
 800af1e:	e00a      	b.n	800af36 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800af26:	4613      	mov	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	4413      	add	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	4413      	add	r3, r2
 800af36:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2200      	movs	r2, #0
 800af3c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	2202      	movs	r2, #2
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fba7 	bl	800b698 <USBD_CtlSendData>
          break;
 800af4a:	e069      	b.n	800b020 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800af4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af50:	2b00      	cmp	r3, #0
 800af52:	da11      	bge.n	800af78 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	f003 020f 	and.w	r2, r3, #15
 800af5a:	6879      	ldr	r1, [r7, #4]
 800af5c:	4613      	mov	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	440b      	add	r3, r1
 800af66:	3318      	adds	r3, #24
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d117      	bne.n	800af9e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fb26 	bl	800b5c2 <USBD_CtlError>
            break;
 800af76:	e053      	b.n	800b020 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	f003 020f 	and.w	r2, r3, #15
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	4613      	mov	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	440b      	add	r3, r1
 800af8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d104      	bne.n	800af9e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fb13 	bl	800b5c2 <USBD_CtlError>
            break;
 800af9c:	e040      	b.n	800b020 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800af9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	da0b      	bge.n	800afbe <USBD_StdEPReq+0x232>
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afac:	4613      	mov	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	3310      	adds	r3, #16
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	4413      	add	r3, r2
 800afba:	3304      	adds	r3, #4
 800afbc:	e00a      	b.n	800afd4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800afbe:	7bbb      	ldrb	r3, [r7, #14]
 800afc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800afc4:	4613      	mov	r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4413      	add	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	4413      	add	r3, r2
 800afd4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800afd6:	7bbb      	ldrb	r3, [r7, #14]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <USBD_StdEPReq+0x256>
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	2b80      	cmp	r3, #128	; 0x80
 800afe0:	d103      	bne.n	800afea <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2200      	movs	r2, #0
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	e00e      	b.n	800b008 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	4619      	mov	r1, r3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f002 ff4a 	bl	800de88 <USBD_LL_IsStallEP>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2201      	movs	r2, #1
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	e002      	b.n	800b008 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2202      	movs	r2, #2
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fb42 	bl	800b698 <USBD_CtlSendData>
          break;
 800b014:	e004      	b.n	800b020 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fad2 	bl	800b5c2 <USBD_CtlError>
        break;
 800b01e:	bf00      	nop
      }
      break;
 800b020:	e004      	b.n	800b02c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 facc 	bl	800b5c2 <USBD_CtlError>
      break;
 800b02a:	bf00      	nop
    }
    break;
 800b02c:	e004      	b.n	800b038 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fac6 	bl	800b5c2 <USBD_CtlError>
    break;
 800b036:	bf00      	nop
  }

  return ret;
 800b038:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
	...

0800b044 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	885b      	ldrh	r3, [r3, #2]
 800b052:	0a1b      	lsrs	r3, r3, #8
 800b054:	b29b      	uxth	r3, r3
 800b056:	3b01      	subs	r3, #1
 800b058:	2b0e      	cmp	r3, #14
 800b05a:	f200 80e5 	bhi.w	800b228 <USBD_GetDescriptor+0x1e4>
 800b05e:	a201      	add	r2, pc, #4	; (adr r2, 800b064 <USBD_GetDescriptor+0x20>)
 800b060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b064:	0800b0b9 	.word	0x0800b0b9
 800b068:	0800b0d1 	.word	0x0800b0d1
 800b06c:	0800b111 	.word	0x0800b111
 800b070:	0800b229 	.word	0x0800b229
 800b074:	0800b229 	.word	0x0800b229
 800b078:	0800b1d5 	.word	0x0800b1d5
 800b07c:	0800b1fb 	.word	0x0800b1fb
 800b080:	0800b229 	.word	0x0800b229
 800b084:	0800b229 	.word	0x0800b229
 800b088:	0800b229 	.word	0x0800b229
 800b08c:	0800b229 	.word	0x0800b229
 800b090:	0800b229 	.word	0x0800b229
 800b094:	0800b229 	.word	0x0800b229
 800b098:	0800b229 	.word	0x0800b229
 800b09c:	0800b0a1 	.word	0x0800b0a1
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	7c12      	ldrb	r2, [r2, #16]
 800b0ac:	f107 010a 	add.w	r1, r7, #10
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	4798      	blx	r3
 800b0b4:	60f8      	str	r0, [r7, #12]
    break;
 800b0b6:	e0bc      	b.n	800b232 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	7c12      	ldrb	r2, [r2, #16]
 800b0c4:	f107 010a 	add.w	r1, r7, #10
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	4798      	blx	r3
 800b0cc:	60f8      	str	r0, [r7, #12]
    break;
 800b0ce:	e0b0      	b.n	800b232 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	7c1b      	ldrb	r3, [r3, #16]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10d      	bne.n	800b0f4 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e0:	f107 020a 	add.w	r2, r7, #10
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4798      	blx	r3
 800b0e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b0f2:	e09e      	b.n	800b232 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fc:	f107 020a 	add.w	r2, r7, #10
 800b100:	4610      	mov	r0, r2
 800b102:	4798      	blx	r3
 800b104:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3301      	adds	r3, #1
 800b10a:	2202      	movs	r2, #2
 800b10c:	701a      	strb	r2, [r3, #0]
    break;
 800b10e:	e090      	b.n	800b232 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	885b      	ldrh	r3, [r3, #2]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b05      	cmp	r3, #5
 800b118:	d856      	bhi.n	800b1c8 <USBD_GetDescriptor+0x184>
 800b11a:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <USBD_GetDescriptor+0xdc>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b139 	.word	0x0800b139
 800b124:	0800b151 	.word	0x0800b151
 800b128:	0800b169 	.word	0x0800b169
 800b12c:	0800b181 	.word	0x0800b181
 800b130:	0800b199 	.word	0x0800b199
 800b134:	0800b1b1 	.word	0x0800b1b1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	7c12      	ldrb	r2, [r2, #16]
 800b144:	f107 010a 	add.w	r1, r7, #10
 800b148:	4610      	mov	r0, r2
 800b14a:	4798      	blx	r3
 800b14c:	60f8      	str	r0, [r7, #12]
      break;
 800b14e:	e040      	b.n	800b1d2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	7c12      	ldrb	r2, [r2, #16]
 800b15c:	f107 010a 	add.w	r1, r7, #10
 800b160:	4610      	mov	r0, r2
 800b162:	4798      	blx	r3
 800b164:	60f8      	str	r0, [r7, #12]
      break;
 800b166:	e034      	b.n	800b1d2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	7c12      	ldrb	r2, [r2, #16]
 800b174:	f107 010a 	add.w	r1, r7, #10
 800b178:	4610      	mov	r0, r2
 800b17a:	4798      	blx	r3
 800b17c:	60f8      	str	r0, [r7, #12]
      break;
 800b17e:	e028      	b.n	800b1d2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	7c12      	ldrb	r2, [r2, #16]
 800b18c:	f107 010a 	add.w	r1, r7, #10
 800b190:	4610      	mov	r0, r2
 800b192:	4798      	blx	r3
 800b194:	60f8      	str	r0, [r7, #12]
      break;
 800b196:	e01c      	b.n	800b1d2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b19e:	695b      	ldr	r3, [r3, #20]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	7c12      	ldrb	r2, [r2, #16]
 800b1a4:	f107 010a 	add.w	r1, r7, #10
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	4798      	blx	r3
 800b1ac:	60f8      	str	r0, [r7, #12]
      break;
 800b1ae:	e010      	b.n	800b1d2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	7c12      	ldrb	r2, [r2, #16]
 800b1bc:	f107 010a 	add.w	r1, r7, #10
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	4798      	blx	r3
 800b1c4:	60f8      	str	r0, [r7, #12]
      break;
 800b1c6:	e004      	b.n	800b1d2 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f9f9 	bl	800b5c2 <USBD_CtlError>
      return;
 800b1d0:	e04b      	b.n	800b26a <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800b1d2:	e02e      	b.n	800b232 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	7c1b      	ldrb	r3, [r3, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d109      	bne.n	800b1f0 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e4:	f107 020a 	add.w	r2, r7, #10
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4798      	blx	r3
 800b1ec:	60f8      	str	r0, [r7, #12]
      break;
 800b1ee:	e020      	b.n	800b232 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f9e5 	bl	800b5c2 <USBD_CtlError>
      return;
 800b1f8:	e037      	b.n	800b26a <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	7c1b      	ldrb	r3, [r3, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10d      	bne.n	800b21e <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20a:	f107 020a 	add.w	r2, r7, #10
 800b20e:	4610      	mov	r0, r2
 800b210:	4798      	blx	r3
 800b212:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3301      	adds	r3, #1
 800b218:	2207      	movs	r2, #7
 800b21a:	701a      	strb	r2, [r3, #0]
      break;
 800b21c:	e009      	b.n	800b232 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f9ce 	bl	800b5c2 <USBD_CtlError>
      return;
 800b226:	e020      	b.n	800b26a <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f9c9 	bl	800b5c2 <USBD_CtlError>
    return;
 800b230:	e01b      	b.n	800b26a <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800b232:	897b      	ldrh	r3, [r7, #10]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d011      	beq.n	800b25c <USBD_GetDescriptor+0x218>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	88db      	ldrh	r3, [r3, #6]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00d      	beq.n	800b25c <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	88da      	ldrh	r2, [r3, #6]
 800b244:	897b      	ldrh	r3, [r7, #10]
 800b246:	4293      	cmp	r3, r2
 800b248:	bf28      	it	cs
 800b24a:	4613      	movcs	r3, r2
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800b250:	897b      	ldrh	r3, [r7, #10]
 800b252:	461a      	mov	r2, r3
 800b254:	68f9      	ldr	r1, [r7, #12]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fa1e 	bl	800b698 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	88db      	ldrh	r3, [r3, #6]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d102      	bne.n	800b26a <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fa75 	bl	800b754 <USBD_CtlSendStatus>
  }
}
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	889b      	ldrh	r3, [r3, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d130      	bne.n	800b2e4 <USBD_SetAddress+0x74>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	88db      	ldrh	r3, [r3, #6]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d12c      	bne.n	800b2e4 <USBD_SetAddress+0x74>
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	885b      	ldrh	r3, [r3, #2]
 800b28e:	2b7f      	cmp	r3, #127	; 0x7f
 800b290:	d828      	bhi.n	800b2e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	885b      	ldrh	r3, [r3, #2]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b29c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d104      	bne.n	800b2b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f989 	bl	800b5c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b0:	e01c      	b.n	800b2ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	7bfa      	ldrb	r2, [r7, #15]
 800b2b6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f002 fe0e 	bl	800dee0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa45 	bl	800b754 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b2ca:	7bfb      	ldrb	r3, [r7, #15]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d004      	beq.n	800b2da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d8:	e008      	b.n	800b2ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2e2:	e003      	b.n	800b2ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f96b 	bl	800b5c2 <USBD_CtlError>
  }
}
 800b2ec:	bf00      	nop
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	885b      	ldrh	r3, [r3, #2]
 800b302:	b2da      	uxtb	r2, r3
 800b304:	4b41      	ldr	r3, [pc, #260]	; (800b40c <USBD_SetConfig+0x118>)
 800b306:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b308:	4b40      	ldr	r3, [pc, #256]	; (800b40c <USBD_SetConfig+0x118>)
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d904      	bls.n	800b31a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f955 	bl	800b5c2 <USBD_CtlError>
 800b318:	e075      	b.n	800b406 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b320:	2b02      	cmp	r3, #2
 800b322:	d002      	beq.n	800b32a <USBD_SetConfig+0x36>
 800b324:	2b03      	cmp	r3, #3
 800b326:	d023      	beq.n	800b370 <USBD_SetConfig+0x7c>
 800b328:	e062      	b.n	800b3f0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800b32a:	4b38      	ldr	r3, [pc, #224]	; (800b40c <USBD_SetConfig+0x118>)
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d01a      	beq.n	800b368 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800b332:	4b36      	ldr	r3, [pc, #216]	; (800b40c <USBD_SetConfig+0x118>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2203      	movs	r2, #3
 800b340:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b344:	4b31      	ldr	r3, [pc, #196]	; (800b40c <USBD_SetConfig+0x118>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff fa0d 	bl	800a76a <USBD_SetClassConfig>
 800b350:	4603      	mov	r3, r0
 800b352:	2b02      	cmp	r3, #2
 800b354:	d104      	bne.n	800b360 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f932 	bl	800b5c2 <USBD_CtlError>
          return;
 800b35e:	e052      	b.n	800b406 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f9f7 	bl	800b754 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b366:	e04e      	b.n	800b406 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f9f3 	bl	800b754 <USBD_CtlSendStatus>
      break;
 800b36e:	e04a      	b.n	800b406 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b370:	4b26      	ldr	r3, [pc, #152]	; (800b40c <USBD_SetConfig+0x118>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d112      	bne.n	800b39e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2202      	movs	r2, #2
 800b37c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800b380:	4b22      	ldr	r3, [pc, #136]	; (800b40c <USBD_SetConfig+0x118>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	461a      	mov	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800b38a:	4b20      	ldr	r3, [pc, #128]	; (800b40c <USBD_SetConfig+0x118>)
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7ff fa09 	bl	800a7a8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f9dc 	bl	800b754 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b39c:	e033      	b.n	800b406 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800b39e:	4b1b      	ldr	r3, [pc, #108]	; (800b40c <USBD_SetConfig+0x118>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d01d      	beq.n	800b3e8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7ff f9f7 	bl	800a7a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b3ba:	4b14      	ldr	r3, [pc, #80]	; (800b40c <USBD_SetConfig+0x118>)
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b3c4:	4b11      	ldr	r3, [pc, #68]	; (800b40c <USBD_SetConfig+0x118>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7ff f9cd 	bl	800a76a <USBD_SetClassConfig>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d104      	bne.n	800b3e0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f8f2 	bl	800b5c2 <USBD_CtlError>
          return;
 800b3de:	e012      	b.n	800b406 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f9b7 	bl	800b754 <USBD_CtlSendStatus>
      break;
 800b3e6:	e00e      	b.n	800b406 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f9b3 	bl	800b754 <USBD_CtlSendStatus>
      break;
 800b3ee:	e00a      	b.n	800b406 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f8e5 	bl	800b5c2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800b3f8:	4b04      	ldr	r3, [pc, #16]	; (800b40c <USBD_SetConfig+0x118>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff f9d2 	bl	800a7a8 <USBD_ClrClassConfig>
      break;
 800b404:	bf00      	nop
    }
  }
}
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	20000230 	.word	0x20000230

0800b410 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	88db      	ldrh	r3, [r3, #6]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d004      	beq.n	800b42c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f8cc 	bl	800b5c2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800b42a:	e021      	b.n	800b470 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b432:	2b01      	cmp	r3, #1
 800b434:	db17      	blt.n	800b466 <USBD_GetConfig+0x56>
 800b436:	2b02      	cmp	r3, #2
 800b438:	dd02      	ble.n	800b440 <USBD_GetConfig+0x30>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d00b      	beq.n	800b456 <USBD_GetConfig+0x46>
 800b43e:	e012      	b.n	800b466 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3308      	adds	r3, #8
 800b44a:	2201      	movs	r2, #1
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f922 	bl	800b698 <USBD_CtlSendData>
      break;
 800b454:	e00c      	b.n	800b470 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	3304      	adds	r3, #4
 800b45a:	2201      	movs	r2, #1
 800b45c:	4619      	mov	r1, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f91a 	bl	800b698 <USBD_CtlSendData>
      break;
 800b464:	e004      	b.n	800b470 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f8aa 	bl	800b5c2 <USBD_CtlError>
      break;
 800b46e:	bf00      	nop
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b488:	3b01      	subs	r3, #1
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d81e      	bhi.n	800b4cc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	88db      	ldrh	r3, [r3, #6]
 800b492:	2b02      	cmp	r3, #2
 800b494:	d004      	beq.n	800b4a0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f892 	bl	800b5c2 <USBD_CtlError>
      break;
 800b49e:	e01a      	b.n	800b4d6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d005      	beq.n	800b4bc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	f043 0202 	orr.w	r2, r3, #2
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	330c      	adds	r3, #12
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f8e7 	bl	800b698 <USBD_CtlSendData>
    break;
 800b4ca:	e004      	b.n	800b4d6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f877 	bl	800b5c2 <USBD_CtlError>
    break;
 800b4d4:	bf00      	nop
  }
}
 800b4d6:	bf00      	nop
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	885b      	ldrh	r3, [r3, #2]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d106      	bne.n	800b4fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f92b 	bl	800b754 <USBD_CtlSendStatus>
  }

}
 800b4fe:	bf00      	nop
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b082      	sub	sp, #8
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b516:	3b01      	subs	r3, #1
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d80b      	bhi.n	800b534 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	885b      	ldrh	r3, [r3, #2]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d10c      	bne.n	800b53e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f911 	bl	800b754 <USBD_CtlSendStatus>
    }
    break;
 800b532:	e004      	b.n	800b53e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f843 	bl	800b5c2 <USBD_CtlError>
    break;
 800b53c:	e000      	b.n	800b540 <USBD_ClrFeature+0x3a>
    break;
 800b53e:	bf00      	nop
  }
}
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	781a      	ldrb	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	785a      	ldrb	r2, [r3, #1]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	3302      	adds	r3, #2
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b29a      	uxth	r2, r3
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	3303      	adds	r3, #3
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	b29b      	uxth	r3, r3
 800b572:	021b      	lsls	r3, r3, #8
 800b574:	b29b      	uxth	r3, r3
 800b576:	4413      	add	r3, r2
 800b578:	b29a      	uxth	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	3304      	adds	r3, #4
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	b29a      	uxth	r2, r3
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	3305      	adds	r3, #5
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	021b      	lsls	r3, r3, #8
 800b590:	b29b      	uxth	r3, r3
 800b592:	4413      	add	r3, r2
 800b594:	b29a      	uxth	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	3306      	adds	r3, #6
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	3307      	adds	r3, #7
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	021b      	lsls	r3, r3, #8
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4413      	add	r3, r2
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	80da      	strh	r2, [r3, #6]

}
 800b5b6:	bf00      	nop
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800b5cc:	2180      	movs	r1, #128	; 0x80
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f002 fbee 	bl	800ddb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f002 fbea 	bl	800ddb0 <USBD_LL_StallEP>
}
 800b5dc:	bf00      	nop
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d032      	beq.n	800b660 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 f834 	bl	800b668 <USBD_GetLen>
 800b600:	4603      	mov	r3, r0
 800b602:	3301      	adds	r3, #1
 800b604:	b29b      	uxth	r3, r3
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	b29a      	uxth	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	75fa      	strb	r2, [r7, #23]
 800b614:	461a      	mov	r2, r3
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	4413      	add	r3, r2
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	7812      	ldrb	r2, [r2, #0]
 800b61e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	75fa      	strb	r2, [r7, #23]
 800b626:	461a      	mov	r2, r3
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	4413      	add	r3, r2
 800b62c:	2203      	movs	r2, #3
 800b62e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b630:	e012      	b.n	800b658 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	60fa      	str	r2, [r7, #12]
 800b638:	7dfa      	ldrb	r2, [r7, #23]
 800b63a:	1c51      	adds	r1, r2, #1
 800b63c:	75f9      	strb	r1, [r7, #23]
 800b63e:	4611      	mov	r1, r2
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	440a      	add	r2, r1
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b648:	7dfb      	ldrb	r3, [r7, #23]
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	75fa      	strb	r2, [r7, #23]
 800b64e:	461a      	mov	r2, r3
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4413      	add	r3, r2
 800b654:	2200      	movs	r2, #0
 800b656:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e8      	bne.n	800b632 <USBD_GetString+0x4e>
    }
  }
}
 800b660:	bf00      	nop
 800b662:	3718      	adds	r7, #24
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b674:	e005      	b.n	800b682 <USBD_GetLen+0x1a>
    {
        len++;
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	3301      	adds	r3, #1
 800b67a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	3301      	adds	r3, #1
 800b680:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1f5      	bne.n	800b676 <USBD_GetLen+0xe>
    }

    return len;
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2202      	movs	r2, #2
 800b6aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b6ae:	88fa      	ldrh	r2, [r7, #6]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b6b4:	88fa      	ldrh	r2, [r7, #6]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	2100      	movs	r1, #0
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f002 fc43 	bl	800df4c <USBD_LL_Transmit>

  return USBD_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b6de:	88fb      	ldrh	r3, [r7, #6]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f002 fc31 	bl	800df4c <USBD_LL_Transmit>

  return USBD_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2203      	movs	r2, #3
 800b706:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b70a:	88fa      	ldrh	r2, [r7, #6]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b712:	88fa      	ldrh	r2, [r7, #6]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b71a:	88fb      	ldrh	r3, [r7, #6]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	2100      	movs	r1, #0
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f002 fc4d 	bl	800dfc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	4613      	mov	r3, r2
 800b73c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b73e:	88fb      	ldrh	r3, [r7, #6]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	2100      	movs	r1, #0
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f002 fc3b 	bl	800dfc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2204      	movs	r2, #4
 800b760:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b764:	2300      	movs	r3, #0
 800b766:	2200      	movs	r2, #0
 800b768:	2100      	movs	r1, #0
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f002 fbee 	bl	800df4c <USBD_LL_Transmit>

  return USBD_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2205      	movs	r2, #5
 800b786:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b78a:	2300      	movs	r3, #0
 800b78c:	2200      	movs	r2, #0
 800b78e:	2100      	movs	r1, #0
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f002 fc15 	bl	800dfc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <HAL_DFSDM_FilterRegConvCpltCallback>:
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7f6 fad5 	bl	8001d58 <HAL_DFSDM_FilterRegularStop_DMA>
	if (dma_audio_data_remaining)
 800b7ae:	4b1f      	ldr	r3, [pc, #124]	; (800b82c <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d02d      	beq.n	800b812 <HAL_DFSDM_FilterRegConvCpltCallback+0x72>
	{
		if (dma_audio_data_remaining > 0xFFFF)
 800b7b6:	4b1d      	ldr	r3, [pc, #116]	; (800b82c <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7be:	d319      	bcc.n	800b7f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x54>
		{
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t*)(audiobuf + dma_audio_data_offset), 0xFFFF);
 800b7c0:	4b1b      	ldr	r3, [pc, #108]	; (800b830 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	4a1b      	ldr	r2, [pc, #108]	; (800b834 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 800b7c8:	4413      	add	r3, r2
 800b7ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	4819      	ldr	r0, [pc, #100]	; (800b838 <HAL_DFSDM_FilterRegConvCpltCallback+0x98>)
 800b7d2:	f7f6 fa3f 	bl	8001c54 <HAL_DFSDM_FilterRegularStart_DMA>
			dma_audio_data_remaining 	-= 0xFFFF;
 800b7d6:	4b15      	ldr	r3, [pc, #84]	; (800b82c <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800b7de:	3bff      	subs	r3, #255	; 0xff
 800b7e0:	4a12      	ldr	r2, [pc, #72]	; (800b82c <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800b7e2:	6013      	str	r3, [r2, #0]
			dma_audio_data_offset		+= 0xFFFF;
 800b7e4:	4b12      	ldr	r3, [pc, #72]	; (800b830 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b7ec:	33ff      	adds	r3, #255	; 0xff
 800b7ee:	4a10      	ldr	r2, [pc, #64]	; (800b830 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 800b7f0:	6013      	str	r3, [r2, #0]
		//	/* Convert 2^(n-1) sample to 2^(n-1)-1 to avoid wrap-around */
		//	audiobuf[i] /= 256;
		//}
		audio_measurement_complete = 1;
	}
}
 800b7f2:	e016      	b.n	800b822 <HAL_DFSDM_FilterRegConvCpltCallback+0x82>
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t*)(audiobuf + dma_audio_data_offset), dma_audio_data_remaining);
 800b7f4:	4b0e      	ldr	r3, [pc, #56]	; (800b830 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	005b      	lsls	r3, r3, #1
 800b7fa:	4a0e      	ldr	r2, [pc, #56]	; (800b834 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 800b7fc:	1899      	adds	r1, r3, r2
 800b7fe:	4b0b      	ldr	r3, [pc, #44]	; (800b82c <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	480c      	ldr	r0, [pc, #48]	; (800b838 <HAL_DFSDM_FilterRegConvCpltCallback+0x98>)
 800b806:	f7f6 fa25 	bl	8001c54 <HAL_DFSDM_FilterRegularStart_DMA>
			dma_audio_data_remaining 	= 0;
 800b80a:	4b08      	ldr	r3, [pc, #32]	; (800b82c <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800b80c:	2200      	movs	r2, #0
 800b80e:	601a      	str	r2, [r3, #0]
}
 800b810:	e007      	b.n	800b822 <HAL_DFSDM_FilterRegConvCpltCallback+0x82>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800b812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b816:	4809      	ldr	r0, [pc, #36]	; (800b83c <HAL_DFSDM_FilterRegConvCpltCallback+0x9c>)
 800b818:	f7f7 f996 	bl	8002b48 <HAL_GPIO_TogglePin>
		audio_measurement_complete = 1;
 800b81c:	4b08      	ldr	r3, [pc, #32]	; (800b840 <HAL_DFSDM_FilterRegConvCpltCallback+0xa0>)
 800b81e:	2201      	movs	r2, #1
 800b820:	601a      	str	r2, [r3, #0]
}
 800b822:	bf00      	nop
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20000480 	.word	0x20000480
 800b830:	2002f838 	.word	0x2002f838
 800b834:	200006f8 	.word	0x200006f8
 800b838:	200005e8 	.word	0x200005e8
 800b83c:	48000400 	.word	0x48000400
 800b840:	20000238 	.word	0x20000238

0800b844 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
	uart_rx_complete = 1;
 800b860:	4b04      	ldr	r3, [pc, #16]	; (800b874 <HAL_UART_RxCpltCallback+0x1c>)
 800b862:	2201      	movs	r2, #1
 800b864:	601a      	str	r2, [r3, #0]
}
 800b866:	bf00      	nop
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	20000234 	.word	0x20000234

0800b878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b878:	b5b0      	push	{r4, r5, r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b87e:	f7f4 fe8f 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b882:	f000 f8e3 	bl	800ba4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b886:	f000 fecb 	bl	800c620 <MX_GPIO_Init>
  MX_DMA_Init();
 800b88a:	f000 fdf9 	bl	800c480 <MX_DMA_Init>
  MX_ADC1_Init();
 800b88e:	f000 f98f 	bl	800bbb0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800b892:	f000 fa05 	bl	800bca0 <MX_ADC2_Init>
  MX_ADC3_Init();
 800b896:	f000 fa67 	bl	800bd68 <MX_ADC3_Init>
  MX_DCMI_Init();
 800b89a:	f000 fac9 	bl	800be30 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800b89e:	f000 fafb 	bl	800be98 <MX_DFSDM1_Init>
  MX_FMC_Init();
 800b8a2:	f000 fe0b 	bl	800c4bc <MX_FMC_Init>
  MX_I2C1_Init();
 800b8a6:	f000 fb5d 	bl	800bf64 <MX_I2C1_Init>
  MX_I2C2_Init();
 800b8aa:	f000 fb9b 	bl	800bfe4 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800b8ae:	f000 fbd9 	bl	800c064 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800b8b2:	f000 fc05 	bl	800c0c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b8b6:	f000 fc33 	bl	800c120 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800b8ba:	f000 fc61 	bl	800c180 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800b8be:	f000 fc8b 	bl	800c1d8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800b8c2:	f000 fd31 	bl	800c328 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800b8c6:	f000 fd5f 	bl	800c388 <MX_SPI1_Init>
  MX_SPI2_Init();
 800b8ca:	f000 fd9b 	bl	800c404 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800b8ce:	f001 ff57 	bl	800d780 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Enable microphone VDD */
  HAL_GPIO_WritePin(MIC_VDD_GPIO_Port, MIC_VDD_Pin, GPIO_PIN_SET);
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	2102      	movs	r1, #2
 800b8d6:	484e      	ldr	r0, [pc, #312]	; (800ba10 <main+0x198>)
 800b8d8:	f7f7 f91e 	bl	8002b18 <HAL_GPIO_WritePin>

  sprintf(uart_txbuf, "Hello DFSDM on DMA!\n");
 800b8dc:	4a4d      	ldr	r2, [pc, #308]	; (800ba14 <main+0x19c>)
 800b8de:	4b4e      	ldr	r3, [pc, #312]	; (800ba18 <main+0x1a0>)
 800b8e0:	4615      	mov	r5, r2
 800b8e2:	461c      	mov	r4, r3
 800b8e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8e6:	6028      	str	r0, [r5, #0]
 800b8e8:	6069      	str	r1, [r5, #4]
 800b8ea:	60aa      	str	r2, [r5, #8]
 800b8ec:	60eb      	str	r3, [r5, #12]
 800b8ee:	6820      	ldr	r0, [r4, #0]
 800b8f0:	6128      	str	r0, [r5, #16]
 800b8f2:	7923      	ldrb	r3, [r4, #4]
 800b8f4:	752b      	strb	r3, [r5, #20]
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800b8f6:	4847      	ldr	r0, [pc, #284]	; (800ba14 <main+0x19c>)
 800b8f8:	f7f4 fc7a 	bl	80001f0 <strlen>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b904:	4943      	ldr	r1, [pc, #268]	; (800ba14 <main+0x19c>)
 800b906:	4845      	ldr	r0, [pc, #276]	; (800ba1c <main+0x1a4>)
 800b908:	f7fb fcd4 	bl	80072b4 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rxbuf, 2);
 800b90c:	2202      	movs	r2, #2
 800b90e:	4944      	ldr	r1, [pc, #272]	; (800ba20 <main+0x1a8>)
 800b910:	4842      	ldr	r0, [pc, #264]	; (800ba1c <main+0x1a4>)
 800b912:	f7fb fd63 	bl	80073dc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uart_rx_complete)
 800b916:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <main+0x1ac>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d05f      	beq.n	800b9de <main+0x166>
	  {
		  /* Request measurment */
		  if (uart_rxbuf[0] == 'r')
 800b91e:	4b40      	ldr	r3, [pc, #256]	; (800ba20 <main+0x1a8>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b72      	cmp	r3, #114	; 0x72
 800b926:	d116      	bne.n	800b956 <main+0xde>
		  {
			  /* restart measurement to prevent it from sending half done */
			  audio_measurement_complete = 0;
 800b928:	4b3f      	ldr	r3, [pc, #252]	; (800ba28 <main+0x1b0>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	601a      	str	r2, [r3, #0]
			  dma_audio_data_remaining = AUDIOBUF_LENGTH;
 800b92e:	4b3f      	ldr	r3, [pc, #252]	; (800ba2c <main+0x1b4>)
 800b930:	4a3f      	ldr	r2, [pc, #252]	; (800ba30 <main+0x1b8>)
 800b932:	601a      	str	r2, [r3, #0]
			  dma_audio_data_offset    = 0;
 800b934:	4b3f      	ldr	r3, [pc, #252]	; (800ba34 <main+0x1bc>)
 800b936:	2200      	movs	r2, #0
 800b938:	601a      	str	r2, [r3, #0]
			  /* Set first part of audio data to be obtained */
			  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t*)audiobuf, 0xFFFF) == HAL_OK)
 800b93a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b93e:	493e      	ldr	r1, [pc, #248]	; (800ba38 <main+0x1c0>)
 800b940:	483e      	ldr	r0, [pc, #248]	; (800ba3c <main+0x1c4>)
 800b942:	f7f6 f987 	bl	8001c54 <HAL_DFSDM_FilterRegularStart_DMA>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d104      	bne.n	800b956 <main+0xde>
			  //if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t*)audiobuf, dma_audio_data_remaining) == HAL_OK)
			  {
				  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800b94c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b950:	483b      	ldr	r0, [pc, #236]	; (800ba40 <main+0x1c8>)
 800b952:	f7f7 f8f9 	bl	8002b48 <HAL_GPIO_TogglePin>
			  }
		  }
		  /* Send measurement */
		  if (uart_rxbuf[0] == 's')
 800b956:	4b32      	ldr	r3, [pc, #200]	; (800ba20 <main+0x1a8>)
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b73      	cmp	r3, #115	; 0x73
 800b95e:	d136      	bne.n	800b9ce <main+0x156>
		  {
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800b960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b964:	4836      	ldr	r0, [pc, #216]	; (800ba40 <main+0x1c8>)
 800b966:	f7f7 f8ef 	bl	8002b48 <HAL_GPIO_TogglePin>
			  uint32_t datalength 	= AUDIOBUF_LENGTH*2;
 800b96a:	4b36      	ldr	r3, [pc, #216]	; (800ba44 <main+0x1cc>)
 800b96c:	607b      	str	r3, [r7, #4]
			  uint32_t offset		= 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	603b      	str	r3, [r7, #0]
			  while (datalength)
 800b972:	e024      	b.n	800b9be <main+0x146>
			  {
				  /* Data packeting to support uint16 size */
				  if (datalength > 0xFFFF)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b97a:	d314      	bcc.n	800b9a6 <main+0x12e>
				  {
					  HAL_UART_Transmit(&huart2, (uint8_t*)(audiobuf) + offset, 0xFFFF, 10000);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	4a2e      	ldr	r2, [pc, #184]	; (800ba38 <main+0x1c0>)
 800b980:	1899      	adds	r1, r3, r2
 800b982:	f242 7310 	movw	r3, #10000	; 0x2710
 800b986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b98a:	4824      	ldr	r0, [pc, #144]	; (800ba1c <main+0x1a4>)
 800b98c:	f7fb fc92 	bl	80072b4 <HAL_UART_Transmit>
					  datalength 	-= 0xFFFF;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800b996:	3bff      	subs	r3, #255	; 0xff
 800b998:	607b      	str	r3, [r7, #4]
					  offset 		+= 0xFFFF;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b9a0:	33ff      	adds	r3, #255	; 0xff
 800b9a2:	603b      	str	r3, [r7, #0]
 800b9a4:	e00b      	b.n	800b9be <main+0x146>
				  }
				  else
				  {
					  HAL_UART_Transmit(&huart2, (uint8_t*)(audiobuf) + offset, datalength, 10000);
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	4a23      	ldr	r2, [pc, #140]	; (800ba38 <main+0x1c0>)
 800b9aa:	1899      	adds	r1, r3, r2
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	f242 7310 	movw	r3, #10000	; 0x2710
 800b9b4:	4819      	ldr	r0, [pc, #100]	; (800ba1c <main+0x1a4>)
 800b9b6:	f7fb fc7d 	bl	80072b4 <HAL_UART_Transmit>
					  datalength = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	607b      	str	r3, [r7, #4]
			  while (datalength)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1d7      	bne.n	800b974 <main+0xfc>
				  }
			  }
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800b9c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b9c8:	481d      	ldr	r0, [pc, #116]	; (800ba40 <main+0x1c8>)
 800b9ca:	f7f7 f8bd 	bl	8002b48 <HAL_GPIO_TogglePin>
		  }
		  /* Set receive event as completed */
		  uart_rx_complete = 0;
 800b9ce:	4b15      	ldr	r3, [pc, #84]	; (800ba24 <main+0x1ac>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rxbuf, 2);
 800b9d4:	2202      	movs	r2, #2
 800b9d6:	4912      	ldr	r1, [pc, #72]	; (800ba20 <main+0x1a8>)
 800b9d8:	4810      	ldr	r0, [pc, #64]	; (800ba1c <main+0x1a4>)
 800b9da:	f7fb fcff 	bl	80073dc <HAL_UART_Receive_IT>
	  }

	  if (audio_measurement_complete)
 800b9de:	4b12      	ldr	r3, [pc, #72]	; (800ba28 <main+0x1b0>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d097      	beq.n	800b916 <main+0x9e>
	  {
		  sprintf(uart_txbuf, "Measurement completed (%d samples)!\n", AUDIOBUF_LENGTH);
 800b9e6:	4a12      	ldr	r2, [pc, #72]	; (800ba30 <main+0x1b8>)
 800b9e8:	4917      	ldr	r1, [pc, #92]	; (800ba48 <main+0x1d0>)
 800b9ea:	480a      	ldr	r0, [pc, #40]	; (800ba14 <main+0x19c>)
 800b9ec:	f002 fd1e 	bl	800e42c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_txbuf, strlen(uart_txbuf), 1000);
 800b9f0:	4808      	ldr	r0, [pc, #32]	; (800ba14 <main+0x19c>)
 800b9f2:	f7f4 fbfd 	bl	80001f0 <strlen>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9fe:	4905      	ldr	r1, [pc, #20]	; (800ba14 <main+0x19c>)
 800ba00:	4806      	ldr	r0, [pc, #24]	; (800ba1c <main+0x1a4>)
 800ba02:	f7fb fc57 	bl	80072b4 <HAL_UART_Transmit>
		  audio_measurement_complete = 0;
 800ba06:	4b08      	ldr	r3, [pc, #32]	; (800ba28 <main+0x1b0>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
	  if (uart_rx_complete)
 800ba0c:	e783      	b.n	800b916 <main+0x9e>
 800ba0e:	bf00      	nop
 800ba10:	48001c00 	.word	0x48001c00
 800ba14:	2002f9fc 	.word	0x2002f9fc
 800ba18:	0800ec50 	.word	0x0800ec50
 800ba1c:	2002f970 	.word	0x2002f970
 800ba20:	2002f9f0 	.word	0x2002f9f0
 800ba24:	20000234 	.word	0x20000234
 800ba28:	20000238 	.word	0x20000238
 800ba2c:	20000480 	.word	0x20000480
 800ba30:	00017700 	.word	0x00017700
 800ba34:	2002f838 	.word	0x2002f838
 800ba38:	200006f8 	.word	0x200006f8
 800ba3c:	200005e8 	.word	0x200005e8
 800ba40:	48000400 	.word	0x48000400
 800ba44:	0002ee00 	.word	0x0002ee00
 800ba48:	0800ec68 	.word	0x0800ec68

0800ba4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b0ba      	sub	sp, #232	; 0xe8
 800ba50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ba56:	2244      	movs	r2, #68	; 0x44
 800ba58:	2100      	movs	r1, #0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f002 fcde 	bl	800e41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ba60:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ba64:	2200      	movs	r2, #0
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	605a      	str	r2, [r3, #4]
 800ba6a:	609a      	str	r2, [r3, #8]
 800ba6c:	60da      	str	r2, [r3, #12]
 800ba6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba70:	1d3b      	adds	r3, r7, #4
 800ba72:	228c      	movs	r2, #140	; 0x8c
 800ba74:	2100      	movs	r1, #0
 800ba76:	4618      	mov	r0, r3
 800ba78:	f002 fcd0 	bl	800e41c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800ba7c:	f7f8 fa20 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800ba80:	4b48      	ldr	r3, [pc, #288]	; (800bba4 <SystemClock_Config+0x158>)
 800ba82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba86:	4a47      	ldr	r2, [pc, #284]	; (800bba4 <SystemClock_Config+0x158>)
 800ba88:	f023 0318 	bic.w	r3, r3, #24
 800ba8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800ba90:	2314      	movs	r3, #20
 800ba92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ba96:	2301      	movs	r3, #1
 800ba98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800baa8:	23a0      	movs	r3, #160	; 0xa0
 800baaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800baae:	2302      	movs	r3, #2
 800bab0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 800baba:	2305      	movs	r3, #5
 800babc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 48;
 800bac0:	2330      	movs	r3, #48	; 0x30
 800bac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bac6:	2302      	movs	r3, #2
 800bac8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800bacc:	2302      	movs	r3, #2
 800bace:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800bad2:	2304      	movs	r3, #4
 800bad4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800badc:	4618      	mov	r0, r3
 800bade:	f7f8 fb51 	bl	8004184 <HAL_RCC_OscConfig>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800bae8:	f000 ff10 	bl	800c90c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800baec:	230f      	movs	r3, #15
 800baee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800baf2:	2303      	movs	r3, #3
 800baf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800baf8:	2300      	movs	r3, #0
 800bafa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bafe:	2300      	movs	r3, #0
 800bb00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bb04:	2300      	movs	r3, #0
 800bb06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800bb0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bb0e:	2104      	movs	r1, #4
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7f8 ff25 	bl	8004960 <HAL_RCC_ClockConfig>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800bb1c:	f000 fef6 	bl	800c90c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800bb20:	4b21      	ldr	r3, [pc, #132]	; (800bba8 <SystemClock_Config+0x15c>)
 800bb22:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800bb24:	2300      	movs	r3, #0
 800bb26:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800bb30:	2300      	movs	r3, #0
 800bb32:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800bb34:	2300      	movs	r3, #0
 800bb36:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800bb3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 800bb44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800bb4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bb50:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800bb52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bb56:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800bb5c:	2305      	movs	r3, #5
 800bb5e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 30;
 800bb60:	231e      	movs	r3, #30
 800bb62:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV4;
 800bb64:	2304      	movs	r3, #4
 800bb66:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800bb68:	2304      	movs	r3, #4
 800bb6a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800bb6c:	2304      	movs	r3, #4
 800bb6e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800bb70:	4b0e      	ldr	r3, [pc, #56]	; (800bbac <SystemClock_Config+0x160>)
 800bb72:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb74:	1d3b      	adds	r3, r7, #4
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f9 f8f6 	bl	8004d68 <HAL_RCCEx_PeriphCLKConfig>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800bb82:	f000 fec3 	bl	800c90c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800bb86:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb8a:	f7f8 f9b7 	bl	8003efc <HAL_PWREx_ControlVoltageScaling>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 800bb94:	f000 feba 	bl	800c90c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800bb98:	f7fa f894 	bl	8005cc4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800bb9c:	bf00      	nop
 800bb9e:	37e8      	adds	r7, #232	; 0xe8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	40021000 	.word	0x40021000
 800bba8:	000968e3 	.word	0x000968e3
 800bbac:	01110000 	.word	0x01110000

0800bbb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b08a      	sub	sp, #40	; 0x28
 800bbb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800bbb6:	f107 031c 	add.w	r3, r7, #28
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	605a      	str	r2, [r3, #4]
 800bbc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800bbc2:	1d3b      	adds	r3, r7, #4
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	601a      	str	r2, [r3, #0]
 800bbc8:	605a      	str	r2, [r3, #4]
 800bbca:	609a      	str	r2, [r3, #8]
 800bbcc:	60da      	str	r2, [r3, #12]
 800bbce:	611a      	str	r2, [r3, #16]
 800bbd0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800bbd2:	4b30      	ldr	r3, [pc, #192]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bbd4:	4a30      	ldr	r2, [pc, #192]	; (800bc98 <MX_ADC1_Init+0xe8>)
 800bbd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800bbd8:	4b2e      	ldr	r3, [pc, #184]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bbda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bbde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800bbe0:	4b2c      	ldr	r3, [pc, #176]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bbe6:	4b2b      	ldr	r3, [pc, #172]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bbec:	4b29      	ldr	r3, [pc, #164]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bbf2:	4b28      	ldr	r3, [pc, #160]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bbf4:	2204      	movs	r2, #4
 800bbf6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800bbf8:	4b26      	ldr	r3, [pc, #152]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800bbfe:	4b25      	ldr	r3, [pc, #148]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800bc04:	4b23      	ldr	r3, [pc, #140]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc06:	2201      	movs	r2, #1
 800bc08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bc0a:	4b22      	ldr	r3, [pc, #136]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bc12:	4b20      	ldr	r3, [pc, #128]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bc18:	4b1e      	ldr	r3, [pc, #120]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800bc1e:	4b1d      	ldr	r3, [pc, #116]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800bc26:	4b1b      	ldr	r3, [pc, #108]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800bc2c:	4b19      	ldr	r3, [pc, #100]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800bc34:	4817      	ldr	r0, [pc, #92]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc36:	f7f4 fed7 	bl	80009e8 <HAL_ADC_Init>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800bc40:	f000 fe64 	bl	800c90c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800bc44:	2300      	movs	r3, #0
 800bc46:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800bc48:	f107 031c 	add.w	r3, r7, #28
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4811      	ldr	r0, [pc, #68]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc50:	f7f5 fbc8 	bl	80013e4 <HAL_ADCEx_MultiModeConfigChannel>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800bc5a:	f000 fe57 	bl	800c90c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <MX_ADC1_Init+0xec>)
 800bc60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800bc62:	2306      	movs	r3, #6
 800bc64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800bc66:	2300      	movs	r3, #0
 800bc68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bc6a:	237f      	movs	r3, #127	; 0x7f
 800bc6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800bc6e:	2304      	movs	r3, #4
 800bc70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bc76:	1d3b      	adds	r3, r7, #4
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4806      	ldr	r0, [pc, #24]	; (800bc94 <MX_ADC1_Init+0xe4>)
 800bc7c:	f7f5 f80c 	bl	8000c98 <HAL_ADC_ConfigChannel>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800bc86:	f000 fe41 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800bc8a:	bf00      	nop
 800bc8c:	3728      	adds	r7, #40	; 0x28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	2002f648 	.word	0x2002f648
 800bc98:	50040000 	.word	0x50040000
 800bc9c:	10c00010 	.word	0x10c00010

0800bca0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800bca6:	463b      	mov	r3, r7
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	605a      	str	r2, [r3, #4]
 800bcae:	609a      	str	r2, [r3, #8]
 800bcb0:	60da      	str	r2, [r3, #12]
 800bcb2:	611a      	str	r2, [r3, #16]
 800bcb4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800bcb6:	4b29      	ldr	r3, [pc, #164]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcb8:	4a29      	ldr	r2, [pc, #164]	; (800bd60 <MX_ADC2_Init+0xc0>)
 800bcba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800bcbc:	4b27      	ldr	r3, [pc, #156]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bcc2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800bcc4:	4b25      	ldr	r3, [pc, #148]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bcca:	4b24      	ldr	r3, [pc, #144]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bcd0:	4b22      	ldr	r3, [pc, #136]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bcd6:	4b21      	ldr	r3, [pc, #132]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcd8:	2204      	movs	r2, #4
 800bcda:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800bcdc:	4b1f      	ldr	r3, [pc, #124]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800bce2:	4b1e      	ldr	r3, [pc, #120]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800bce8:	4b1c      	ldr	r3, [pc, #112]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcea:	2201      	movs	r2, #1
 800bcec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800bcee:	4b1b      	ldr	r3, [pc, #108]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bcf6:	4b19      	ldr	r3, [pc, #100]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bcfc:	4b17      	ldr	r3, [pc, #92]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bcfe:	2200      	movs	r2, #0
 800bd00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800bd02:	4b16      	ldr	r3, [pc, #88]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800bd0a:	4b14      	ldr	r3, [pc, #80]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800bd10:	4b12      	ldr	r3, [pc, #72]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800bd18:	4810      	ldr	r0, [pc, #64]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bd1a:	f7f4 fe65 	bl	80009e8 <HAL_ADC_Init>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800bd24:	f000 fdf2 	bl	800c90c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800bd28:	4b0e      	ldr	r3, [pc, #56]	; (800bd64 <MX_ADC2_Init+0xc4>)
 800bd2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800bd2c:	2306      	movs	r3, #6
 800bd2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800bd30:	2300      	movs	r3, #0
 800bd32:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bd34:	237f      	movs	r3, #127	; 0x7f
 800bd36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800bd38:	2304      	movs	r3, #4
 800bd3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bd40:	463b      	mov	r3, r7
 800bd42:	4619      	mov	r1, r3
 800bd44:	4805      	ldr	r0, [pc, #20]	; (800bd5c <MX_ADC2_Init+0xbc>)
 800bd46:	f7f4 ffa7 	bl	8000c98 <HAL_ADC_ConfigChannel>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 800bd50:	f000 fddc 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800bd54:	bf00      	nop
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	200004e8 	.word	0x200004e8
 800bd60:	50040100 	.word	0x50040100
 800bd64:	25b00200 	.word	0x25b00200

0800bd68 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800bd6e:	463b      	mov	r3, r7
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	605a      	str	r2, [r3, #4]
 800bd76:	609a      	str	r2, [r3, #8]
 800bd78:	60da      	str	r2, [r3, #12]
 800bd7a:	611a      	str	r2, [r3, #16]
 800bd7c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800bd7e:	4b29      	ldr	r3, [pc, #164]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bd80:	4a29      	ldr	r2, [pc, #164]	; (800be28 <MX_ADC3_Init+0xc0>)
 800bd82:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800bd84:	4b27      	ldr	r3, [pc, #156]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bd86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bd8a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800bd8c:	4b25      	ldr	r3, [pc, #148]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bd92:	4b24      	ldr	r3, [pc, #144]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bd98:	4b22      	ldr	r3, [pc, #136]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bd9e:	4b21      	ldr	r3, [pc, #132]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bda0:	2204      	movs	r2, #4
 800bda2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800bda4:	4b1f      	ldr	r3, [pc, #124]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800bdaa:	4b1e      	ldr	r3, [pc, #120]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800bdb0:	4b1c      	ldr	r3, [pc, #112]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800bdb6:	4b1b      	ldr	r3, [pc, #108]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bdbe:	4b19      	ldr	r3, [pc, #100]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bdc4:	4b17      	ldr	r3, [pc, #92]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800bdca:	4b16      	ldr	r3, [pc, #88]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800bdd2:	4b14      	ldr	r3, [pc, #80]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800bdd8:	4b12      	ldr	r3, [pc, #72]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800bde0:	4810      	ldr	r0, [pc, #64]	; (800be24 <MX_ADC3_Init+0xbc>)
 800bde2:	f7f4 fe01 	bl	80009e8 <HAL_ADC_Init>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 800bdec:	f000 fd8e 	bl	800c90c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800bdf0:	4b0e      	ldr	r3, [pc, #56]	; (800be2c <MX_ADC3_Init+0xc4>)
 800bdf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800bdf4:	2306      	movs	r3, #6
 800bdf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bdfc:	237f      	movs	r3, #127	; 0x7f
 800bdfe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800be00:	2304      	movs	r3, #4
 800be02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800be08:	463b      	mov	r3, r7
 800be0a:	4619      	mov	r1, r3
 800be0c:	4805      	ldr	r0, [pc, #20]	; (800be24 <MX_ADC3_Init+0xbc>)
 800be0e:	f7f4 ff43 	bl	8000c98 <HAL_ADC_ConfigChannel>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d001      	beq.n	800be1c <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800be18:	f000 fd78 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800be1c:	bf00      	nop
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	2002f6b0 	.word	0x2002f6b0
 800be28:	50040200 	.word	0x50040200
 800be2c:	36902000 	.word	0x36902000

0800be30 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800be34:	4b16      	ldr	r3, [pc, #88]	; (800be90 <MX_DCMI_Init+0x60>)
 800be36:	4a17      	ldr	r2, [pc, #92]	; (800be94 <MX_DCMI_Init+0x64>)
 800be38:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800be3a:	4b15      	ldr	r3, [pc, #84]	; (800be90 <MX_DCMI_Init+0x60>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800be40:	4b13      	ldr	r3, [pc, #76]	; (800be90 <MX_DCMI_Init+0x60>)
 800be42:	2200      	movs	r2, #0
 800be44:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800be46:	4b12      	ldr	r3, [pc, #72]	; (800be90 <MX_DCMI_Init+0x60>)
 800be48:	2200      	movs	r2, #0
 800be4a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <MX_DCMI_Init+0x60>)
 800be4e:	2200      	movs	r2, #0
 800be50:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800be52:	4b0f      	ldr	r3, [pc, #60]	; (800be90 <MX_DCMI_Init+0x60>)
 800be54:	2200      	movs	r2, #0
 800be56:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800be58:	4b0d      	ldr	r3, [pc, #52]	; (800be90 <MX_DCMI_Init+0x60>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800be5e:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <MX_DCMI_Init+0x60>)
 800be60:	2200      	movs	r2, #0
 800be62:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800be64:	4b0a      	ldr	r3, [pc, #40]	; (800be90 <MX_DCMI_Init+0x60>)
 800be66:	2200      	movs	r2, #0
 800be68:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800be6a:	4b09      	ldr	r3, [pc, #36]	; (800be90 <MX_DCMI_Init+0x60>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <MX_DCMI_Init+0x60>)
 800be72:	2200      	movs	r2, #0
 800be74:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800be76:	4b06      	ldr	r3, [pc, #24]	; (800be90 <MX_DCMI_Init+0x60>)
 800be78:	2200      	movs	r2, #0
 800be7a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800be7c:	4804      	ldr	r0, [pc, #16]	; (800be90 <MX_DCMI_Init+0x60>)
 800be7e:	f7f5 fc6f 	bl	8001760 <HAL_DCMI_Init>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d001      	beq.n	800be8c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800be88:	f000 fd40 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800be8c:	bf00      	nop
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	2002f718 	.word	0x2002f718
 800be94:	50050000 	.word	0x50050000

0800be98 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800be9c:	4b2c      	ldr	r3, [pc, #176]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800be9e:	4a2d      	ldr	r2, [pc, #180]	; (800bf54 <MX_DFSDM1_Init+0xbc>)
 800bea0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800bea2:	4b2b      	ldr	r3, [pc, #172]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800bea8:	4b29      	ldr	r3, [pc, #164]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800beaa:	2201      	movs	r2, #1
 800beac:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800beae:	4b28      	ldr	r3, [pc, #160]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800beb0:	2201      	movs	r2, #1
 800beb2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 800beb4:	4b26      	ldr	r3, [pc, #152]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800beb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800beba:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 800bebc:	4b24      	ldr	r3, [pc, #144]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800bebe:	2240      	movs	r2, #64	; 0x40
 800bec0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800bec2:	4b23      	ldr	r3, [pc, #140]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800bec4:	2201      	movs	r2, #1
 800bec6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800bec8:	4821      	ldr	r0, [pc, #132]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800beca:	f7f5 fda3 	bl	8001a14 <HAL_DFSDM_FilterInit>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800bed4:	f000 fd1a 	bl	800c90c <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800bed8:	4b1f      	ldr	r3, [pc, #124]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800beda:	4a20      	ldr	r2, [pc, #128]	; (800bf5c <MX_DFSDM1_Init+0xc4>)
 800bedc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 800bede:	4b1e      	ldr	r3, [pc, #120]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bee0:	2201      	movs	r2, #1
 800bee2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800bee4:	4b1c      	ldr	r3, [pc, #112]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 25;
 800beea:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800beec:	2219      	movs	r2, #25
 800beee:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800bef0:	4b19      	ldr	r3, [pc, #100]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800bef6:	4b18      	ldr	r3, [pc, #96]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bef8:	2200      	movs	r2, #0
 800befa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800befc:	4b16      	ldr	r3, [pc, #88]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800befe:	2200      	movs	r2, #0
 800bf00:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800bf02:	4b15      	ldr	r3, [pc, #84]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800bf08:	4b13      	ldr	r3, [pc, #76]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bf0a:	2204      	movs	r2, #4
 800bf0c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800bf0e:	4b12      	ldr	r3, [pc, #72]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bf10:	2200      	movs	r2, #0
 800bf12:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 800bf14:	4b10      	ldr	r3, [pc, #64]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bf16:	2201      	movs	r2, #1
 800bf18:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 800bf1a:	4b0f      	ldr	r3, [pc, #60]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x02;
 800bf20:	4b0d      	ldr	r3, [pc, #52]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bf22:	2202      	movs	r2, #2
 800bf24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800bf26:	480c      	ldr	r0, [pc, #48]	; (800bf58 <MX_DFSDM1_Init+0xc0>)
 800bf28:	f7f5 fca0 	bl	800186c <HAL_DFSDM_ChannelInit>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d001      	beq.n	800bf36 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800bf32:	f000 fceb 	bl	800c90c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800bf36:	2201      	movs	r2, #1
 800bf38:	4909      	ldr	r1, [pc, #36]	; (800bf60 <MX_DFSDM1_Init+0xc8>)
 800bf3a:	4805      	ldr	r0, [pc, #20]	; (800bf50 <MX_DFSDM1_Init+0xb8>)
 800bf3c:	f7f5 fe44 	bl	8001bc8 <HAL_DFSDM_FilterConfigRegChannel>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800bf46:	f000 fce1 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800bf4a:	bf00      	nop
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	200005e8 	.word	0x200005e8
 800bf54:	40016100 	.word	0x40016100
 800bf58:	200006c0 	.word	0x200006c0
 800bf5c:	40016060 	.word	0x40016060
 800bf60:	00030008 	.word	0x00030008

0800bf64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bf68:	4b1b      	ldr	r3, [pc, #108]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf6a:	4a1c      	ldr	r2, [pc, #112]	; (800bfdc <MX_I2C1_Init+0x78>)
 800bf6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109096E2;
 800bf6e:	4b1a      	ldr	r3, [pc, #104]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf70:	4a1b      	ldr	r2, [pc, #108]	; (800bfe0 <MX_I2C1_Init+0x7c>)
 800bf72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bf74:	4b18      	ldr	r3, [pc, #96]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bf7a:	4b17      	ldr	r3, [pc, #92]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bf80:	4b15      	ldr	r3, [pc, #84]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bf86:	4b14      	ldr	r3, [pc, #80]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bf8c:	4b12      	ldr	r3, [pc, #72]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bf92:	4b11      	ldr	r3, [pc, #68]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bf98:	4b0f      	ldr	r3, [pc, #60]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bf9e:	480e      	ldr	r0, [pc, #56]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bfa0:	f7f6 fdeb 	bl	8002b7a <HAL_I2C_Init>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d001      	beq.n	800bfae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800bfaa:	f000 fcaf 	bl	800c90c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bfae:	2100      	movs	r1, #0
 800bfb0:	4809      	ldr	r0, [pc, #36]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bfb2:	f7f6 fe71 	bl	8002c98 <HAL_I2CEx_ConfigAnalogFilter>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800bfbc:	f000 fca6 	bl	800c90c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4805      	ldr	r0, [pc, #20]	; (800bfd8 <MX_I2C1_Init+0x74>)
 800bfc4:	f7f6 feb3 	bl	8002d2e <HAL_I2CEx_ConfigDigitalFilter>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800bfce:	f000 fc9d 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bfd2:	bf00      	nop
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20000550 	.word	0x20000550
 800bfdc:	40005400 	.word	0x40005400
 800bfe0:	109096e2 	.word	0x109096e2

0800bfe4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bfe8:	4b1b      	ldr	r3, [pc, #108]	; (800c058 <MX_I2C2_Init+0x74>)
 800bfea:	4a1c      	ldr	r2, [pc, #112]	; (800c05c <MX_I2C2_Init+0x78>)
 800bfec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x109096E2;
 800bfee:	4b1a      	ldr	r3, [pc, #104]	; (800c058 <MX_I2C2_Init+0x74>)
 800bff0:	4a1b      	ldr	r2, [pc, #108]	; (800c060 <MX_I2C2_Init+0x7c>)
 800bff2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800bff4:	4b18      	ldr	r3, [pc, #96]	; (800c058 <MX_I2C2_Init+0x74>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bffa:	4b17      	ldr	r3, [pc, #92]	; (800c058 <MX_I2C2_Init+0x74>)
 800bffc:	2201      	movs	r2, #1
 800bffe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c000:	4b15      	ldr	r3, [pc, #84]	; (800c058 <MX_I2C2_Init+0x74>)
 800c002:	2200      	movs	r2, #0
 800c004:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c006:	4b14      	ldr	r3, [pc, #80]	; (800c058 <MX_I2C2_Init+0x74>)
 800c008:	2200      	movs	r2, #0
 800c00a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c00c:	4b12      	ldr	r3, [pc, #72]	; (800c058 <MX_I2C2_Init+0x74>)
 800c00e:	2200      	movs	r2, #0
 800c010:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c012:	4b11      	ldr	r3, [pc, #68]	; (800c058 <MX_I2C2_Init+0x74>)
 800c014:	2200      	movs	r2, #0
 800c016:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c018:	4b0f      	ldr	r3, [pc, #60]	; (800c058 <MX_I2C2_Init+0x74>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c01e:	480e      	ldr	r0, [pc, #56]	; (800c058 <MX_I2C2_Init+0x74>)
 800c020:	f7f6 fdab 	bl	8002b7a <HAL_I2C_Init>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c02a:	f000 fc6f 	bl	800c90c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c02e:	2100      	movs	r1, #0
 800c030:	4809      	ldr	r0, [pc, #36]	; (800c058 <MX_I2C2_Init+0x74>)
 800c032:	f7f6 fe31 	bl	8002c98 <HAL_I2CEx_ConfigAnalogFilter>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c03c:	f000 fc66 	bl	800c90c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c040:	2100      	movs	r1, #0
 800c042:	4805      	ldr	r0, [pc, #20]	; (800c058 <MX_I2C2_Init+0x74>)
 800c044:	f7f6 fe73 	bl	8002d2e <HAL_I2CEx_ConfigDigitalFilter>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c04e:	f000 fc5d 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c052:	bf00      	nop
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	2000059c 	.word	0x2000059c
 800c05c:	40005800 	.word	0x40005800
 800c060:	109096e2 	.word	0x109096e2

0800c064 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800c068:	4b12      	ldr	r3, [pc, #72]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c06a:	4a13      	ldr	r2, [pc, #76]	; (800c0b8 <MX_LPUART1_UART_Init+0x54>)
 800c06c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800c06e:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c070:	4a12      	ldr	r2, [pc, #72]	; (800c0bc <MX_LPUART1_UART_Init+0x58>)
 800c072:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800c074:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c07a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800c07c:	4b0d      	ldr	r3, [pc, #52]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c07e:	2200      	movs	r2, #0
 800c080:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800c082:	4b0c      	ldr	r3, [pc, #48]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c084:	2200      	movs	r2, #0
 800c086:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c08a:	220c      	movs	r2, #12
 800c08c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c08e:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c090:	2200      	movs	r2, #0
 800c092:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c094:	4b07      	ldr	r3, [pc, #28]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c096:	2200      	movs	r2, #0
 800c098:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c09a:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800c0a0:	4804      	ldr	r0, [pc, #16]	; (800c0b4 <MX_LPUART1_UART_Init+0x50>)
 800c0a2:	f7fb f8b9 	bl	8007218 <HAL_UART_Init>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800c0ac:	f000 fc2e 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800c0b0:	bf00      	nop
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	2002f544 	.word	0x2002f544
 800c0b8:	40008000 	.word	0x40008000
 800c0bc:	00033324 	.word	0x00033324

0800c0c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c0c4:	4b14      	ldr	r3, [pc, #80]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0c6:	4a15      	ldr	r2, [pc, #84]	; (800c11c <MX_USART1_UART_Init+0x5c>)
 800c0c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c0ca:	4b13      	ldr	r3, [pc, #76]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c0d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c0d2:	4b11      	ldr	r3, [pc, #68]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c0d8:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c0de:	4b0e      	ldr	r3, [pc, #56]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c0e4:	4b0c      	ldr	r3, [pc, #48]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0e6:	220c      	movs	r2, #12
 800c0e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800c0ea:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c0f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c0f2:	4b09      	ldr	r3, [pc, #36]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c0f8:	4b07      	ldr	r3, [pc, #28]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c0fe:	4b06      	ldr	r3, [pc, #24]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c100:	2200      	movs	r2, #0
 800c102:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c104:	4804      	ldr	r0, [pc, #16]	; (800c118 <MX_USART1_UART_Init+0x58>)
 800c106:	f7fb f887 	bl	8007218 <HAL_UART_Init>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800c110:	f000 fbfc 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c114:	bf00      	nop
 800c116:	bd80      	pop	{r7, pc}
 800c118:	2002f770 	.word	0x2002f770
 800c11c:	40013800 	.word	0x40013800

0800c120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c124:	4b14      	ldr	r3, [pc, #80]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c126:	4a15      	ldr	r2, [pc, #84]	; (800c17c <MX_USART2_UART_Init+0x5c>)
 800c128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c12a:	4b13      	ldr	r3, [pc, #76]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c12c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c132:	4b11      	ldr	r3, [pc, #68]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c134:	2200      	movs	r2, #0
 800c136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c138:	4b0f      	ldr	r3, [pc, #60]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c13e:	4b0e      	ldr	r3, [pc, #56]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c140:	2200      	movs	r2, #0
 800c142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c144:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c146:	220c      	movs	r2, #12
 800c148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c150:	4b09      	ldr	r3, [pc, #36]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c152:	2200      	movs	r2, #0
 800c154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c156:	4b08      	ldr	r3, [pc, #32]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c158:	2200      	movs	r2, #0
 800c15a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c15c:	4b06      	ldr	r3, [pc, #24]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c15e:	2200      	movs	r2, #0
 800c160:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c162:	4805      	ldr	r0, [pc, #20]	; (800c178 <MX_USART2_UART_Init+0x58>)
 800c164:	f7fb f858 	bl	8007218 <HAL_UART_Init>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c16e:	f000 fbcd 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c172:	bf00      	nop
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	2002f970 	.word	0x2002f970
 800c17c:	40004400 	.word	0x40004400

0800c180 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800c184:	4b12      	ldr	r3, [pc, #72]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c186:	4a13      	ldr	r2, [pc, #76]	; (800c1d4 <MX_QUADSPI_Init+0x54>)
 800c188:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800c18a:	4b11      	ldr	r3, [pc, #68]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c18c:	22ff      	movs	r2, #255	; 0xff
 800c18e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800c190:	4b0f      	ldr	r3, [pc, #60]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c192:	2201      	movs	r2, #1
 800c194:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800c196:	4b0e      	ldr	r3, [pc, #56]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c198:	2200      	movs	r2, #0
 800c19a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800c19c:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c19e:	2201      	movs	r2, #1
 800c1a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800c1a2:	4b0b      	ldr	r3, [pc, #44]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800c1a8:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800c1ae:	4b08      	ldr	r3, [pc, #32]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800c1b4:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800c1ba:	4805      	ldr	r0, [pc, #20]	; (800c1d0 <MX_QUADSPI_Init+0x50>)
 800c1bc:	f7f7 ff14 	bl	8003fe8 <HAL_QSPI_Init>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800c1c6:	f000 fba1 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800c1ca:	bf00      	nop
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	2002fa30 	.word	0x2002fa30
 800c1d4:	a0001000 	.word	0xa0001000

0800c1d8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800c1dc:	4b4d      	ldr	r3, [pc, #308]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c1de:	4a4e      	ldr	r2, [pc, #312]	; (800c318 <MX_SAI1_Init+0x140>)
 800c1e0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800c1e2:	4b4c      	ldr	r3, [pc, #304]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800c1e8:	4b4a      	ldr	r3, [pc, #296]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800c1ee:	4b49      	ldr	r3, [pc, #292]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c1f0:	2240      	movs	r2, #64	; 0x40
 800c1f2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800c1f4:	4b47      	ldr	r3, [pc, #284]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c1fa:	4b46      	ldr	r3, [pc, #280]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800c200:	4b44      	ldr	r3, [pc, #272]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c202:	2200      	movs	r2, #0
 800c204:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c206:	4b43      	ldr	r3, [pc, #268]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c208:	2200      	movs	r2, #0
 800c20a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800c20c:	4b41      	ldr	r3, [pc, #260]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c20e:	2200      	movs	r2, #0
 800c210:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800c212:	4b40      	ldr	r3, [pc, #256]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c214:	2200      	movs	r2, #0
 800c216:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800c218:	4b3e      	ldr	r3, [pc, #248]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c21a:	4a40      	ldr	r2, [pc, #256]	; (800c31c <MX_SAI1_Init+0x144>)
 800c21c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c21e:	4b3d      	ldr	r3, [pc, #244]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c220:	2200      	movs	r2, #0
 800c222:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800c224:	4b3b      	ldr	r3, [pc, #236]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c226:	2200      	movs	r2, #0
 800c228:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c22a:	4b3a      	ldr	r3, [pc, #232]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c230:	4b38      	ldr	r3, [pc, #224]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c232:	2200      	movs	r2, #0
 800c234:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800c236:	4b37      	ldr	r3, [pc, #220]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c238:	2208      	movs	r2, #8
 800c23a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800c23c:	4b35      	ldr	r3, [pc, #212]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c23e:	2201      	movs	r2, #1
 800c240:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800c242:	4b34      	ldr	r3, [pc, #208]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c244:	2200      	movs	r2, #0
 800c246:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c248:	4b32      	ldr	r3, [pc, #200]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800c24e:	4b31      	ldr	r3, [pc, #196]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c250:	2200      	movs	r2, #0
 800c252:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800c254:	4b2f      	ldr	r3, [pc, #188]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c256:	2200      	movs	r2, #0
 800c258:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800c25a:	4b2e      	ldr	r3, [pc, #184]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800c260:	4b2c      	ldr	r3, [pc, #176]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c262:	2201      	movs	r2, #1
 800c264:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800c266:	4b2b      	ldr	r3, [pc, #172]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c268:	2200      	movs	r2, #0
 800c26a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800c26c:	4829      	ldr	r0, [pc, #164]	; (800c314 <MX_SAI1_Init+0x13c>)
 800c26e:	f7f9 ffed 	bl	800624c <HAL_SAI_Init>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800c278:	f000 fb48 	bl	800c90c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800c27c:	4b28      	ldr	r3, [pc, #160]	; (800c320 <MX_SAI1_Init+0x148>)
 800c27e:	4a29      	ldr	r2, [pc, #164]	; (800c324 <MX_SAI1_Init+0x14c>)
 800c280:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800c282:	4b27      	ldr	r3, [pc, #156]	; (800c320 <MX_SAI1_Init+0x148>)
 800c284:	2200      	movs	r2, #0
 800c286:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800c288:	4b25      	ldr	r3, [pc, #148]	; (800c320 <MX_SAI1_Init+0x148>)
 800c28a:	2203      	movs	r2, #3
 800c28c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800c28e:	4b24      	ldr	r3, [pc, #144]	; (800c320 <MX_SAI1_Init+0x148>)
 800c290:	2240      	movs	r2, #64	; 0x40
 800c292:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800c294:	4b22      	ldr	r3, [pc, #136]	; (800c320 <MX_SAI1_Init+0x148>)
 800c296:	2200      	movs	r2, #0
 800c298:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c29a:	4b21      	ldr	r3, [pc, #132]	; (800c320 <MX_SAI1_Init+0x148>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800c2a0:	4b1f      	ldr	r3, [pc, #124]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c2a6:	4b1e      	ldr	r3, [pc, #120]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800c2ac:	4b1c      	ldr	r3, [pc, #112]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c2b2:	4b1b      	ldr	r3, [pc, #108]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800c2b8:	4b19      	ldr	r3, [pc, #100]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c2be:	4b18      	ldr	r3, [pc, #96]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c2c4:	4b16      	ldr	r3, [pc, #88]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 800c2ca:	4b15      	ldr	r3, [pc, #84]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2cc:	2218      	movs	r2, #24
 800c2ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800c2d0:	4b13      	ldr	r3, [pc, #76]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800c2d6:	4b12      	ldr	r3, [pc, #72]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c2dc:	4b10      	ldr	r3, [pc, #64]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2de:	2200      	movs	r2, #0
 800c2e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800c2e2:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800c2e8:	4b0d      	ldr	r3, [pc, #52]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800c2ee:	4b0c      	ldr	r3, [pc, #48]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800c2f4:	4b0a      	ldr	r3, [pc, #40]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800c2fa:	4b09      	ldr	r3, [pc, #36]	; (800c320 <MX_SAI1_Init+0x148>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800c300:	4807      	ldr	r0, [pc, #28]	; (800c320 <MX_SAI1_Init+0x148>)
 800c302:	f7f9 ffa3 	bl	800624c <HAL_SAI_Init>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800c30c:	f000 fafe 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800c310:	bf00      	nop
 800c312:	bd80      	pop	{r7, pc}
 800c314:	2002f8ec 	.word	0x2002f8ec
 800c318:	40015404 	.word	0x40015404
 800c31c:	0002ee00 	.word	0x0002ee00
 800c320:	2002f5c4 	.word	0x2002f5c4
 800c324:	40015424 	.word	0x40015424

0800c328 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800c32c:	4b14      	ldr	r3, [pc, #80]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c32e:	4a15      	ldr	r2, [pc, #84]	; (800c384 <MX_SDMMC1_SD_Init+0x5c>)
 800c330:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800c332:	4b13      	ldr	r3, [pc, #76]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c334:	2200      	movs	r2, #0
 800c336:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800c338:	4b11      	ldr	r3, [pc, #68]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c33e:	4b10      	ldr	r3, [pc, #64]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c340:	2200      	movs	r2, #0
 800c342:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800c344:	4b0e      	ldr	r3, [pc, #56]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c346:	2200      	movs	r2, #0
 800c348:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c34a:	4b0d      	ldr	r3, [pc, #52]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800c350:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c352:	2200      	movs	r2, #0
 800c354:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800c356:	480a      	ldr	r0, [pc, #40]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c358:	f7fa f912 	bl	8006580 <HAL_SD_Init>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800c362:	f000 fad3 	bl	800c90c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c36a:	4805      	ldr	r0, [pc, #20]	; (800c380 <MX_SDMMC1_SD_Init+0x58>)
 800c36c:	f7fa fb4e 	bl	8006a0c <HAL_SD_ConfigWideBusOperation>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800c376:	f000 fac9 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800c37a:	bf00      	nop
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	2000063c 	.word	0x2000063c
 800c384:	40012800 	.word	0x40012800

0800c388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c38c:	4b1b      	ldr	r3, [pc, #108]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c38e:	4a1c      	ldr	r2, [pc, #112]	; (800c400 <MX_SPI1_Init+0x78>)
 800c390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c392:	4b1a      	ldr	r3, [pc, #104]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c394:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c39a:	4b18      	ldr	r3, [pc, #96]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800c3a0:	4b16      	ldr	r3, [pc, #88]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c3a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c3a8:	4b14      	ldr	r3, [pc, #80]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c3ae:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800c3b4:	4b11      	ldr	r3, [pc, #68]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c3ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c3bc:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c3c2:	4b0e      	ldr	r3, [pc, #56]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c3c8:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3ce:	4b0b      	ldr	r3, [pc, #44]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800c3d4:	4b09      	ldr	r3, [pc, #36]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3d6:	2207      	movs	r2, #7
 800c3d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c3da:	4b08      	ldr	r3, [pc, #32]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c3e0:	4b06      	ldr	r3, [pc, #24]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3e2:	2208      	movs	r2, #8
 800c3e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c3e6:	4805      	ldr	r0, [pc, #20]	; (800c3fc <MX_SPI1_Init+0x74>)
 800c3e8:	f7fa fe48 	bl	800707c <HAL_SPI_Init>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800c3f2:	f000 fa8b 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c3f6:	bf00      	nop
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	2002f888 	.word	0x2002f888
 800c400:	40013000 	.word	0x40013000

0800c404 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800c408:	4b1b      	ldr	r3, [pc, #108]	; (800c478 <MX_SPI2_Init+0x74>)
 800c40a:	4a1c      	ldr	r2, [pc, #112]	; (800c47c <MX_SPI2_Init+0x78>)
 800c40c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c40e:	4b1a      	ldr	r3, [pc, #104]	; (800c478 <MX_SPI2_Init+0x74>)
 800c410:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c414:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c416:	4b18      	ldr	r3, [pc, #96]	; (800c478 <MX_SPI2_Init+0x74>)
 800c418:	2200      	movs	r2, #0
 800c41a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800c41c:	4b16      	ldr	r3, [pc, #88]	; (800c478 <MX_SPI2_Init+0x74>)
 800c41e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c422:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c424:	4b14      	ldr	r3, [pc, #80]	; (800c478 <MX_SPI2_Init+0x74>)
 800c426:	2200      	movs	r2, #0
 800c428:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c42a:	4b13      	ldr	r3, [pc, #76]	; (800c478 <MX_SPI2_Init+0x74>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800c430:	4b11      	ldr	r3, [pc, #68]	; (800c478 <MX_SPI2_Init+0x74>)
 800c432:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c436:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c438:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <MX_SPI2_Init+0x74>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c43e:	4b0e      	ldr	r3, [pc, #56]	; (800c478 <MX_SPI2_Init+0x74>)
 800c440:	2200      	movs	r2, #0
 800c442:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c444:	4b0c      	ldr	r3, [pc, #48]	; (800c478 <MX_SPI2_Init+0x74>)
 800c446:	2200      	movs	r2, #0
 800c448:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c44a:	4b0b      	ldr	r3, [pc, #44]	; (800c478 <MX_SPI2_Init+0x74>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800c450:	4b09      	ldr	r3, [pc, #36]	; (800c478 <MX_SPI2_Init+0x74>)
 800c452:	2207      	movs	r2, #7
 800c454:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c456:	4b08      	ldr	r3, [pc, #32]	; (800c478 <MX_SPI2_Init+0x74>)
 800c458:	2200      	movs	r2, #0
 800c45a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c45c:	4b06      	ldr	r3, [pc, #24]	; (800c478 <MX_SPI2_Init+0x74>)
 800c45e:	2208      	movs	r2, #8
 800c460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c462:	4805      	ldr	r0, [pc, #20]	; (800c478 <MX_SPI2_Init+0x74>)
 800c464:	f7fa fe0a 	bl	800707c <HAL_SPI_Init>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800c46e:	f000 fa4d 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800c472:	bf00      	nop
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20000484 	.word	0x20000484
 800c47c:	40003800 	.word	0x40003800

0800c480 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c486:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <MX_DMA_Init+0x38>)
 800c488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c48a:	4a0b      	ldr	r2, [pc, #44]	; (800c4b8 <MX_DMA_Init+0x38>)
 800c48c:	f043 0301 	orr.w	r3, r3, #1
 800c490:	6493      	str	r3, [r2, #72]	; 0x48
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <MX_DMA_Init+0x38>)
 800c494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	607b      	str	r3, [r7, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	200e      	movs	r0, #14
 800c4a4:	f7f5 f925 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800c4a8:	200e      	movs	r0, #14
 800c4aa:	f7f5 f93e 	bl	800172a <HAL_NVIC_EnableIRQ>

}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	40021000 	.word	0x40021000

0800c4bc <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b088      	sub	sp, #32
 800c4c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800c4c2:	1d3b      	adds	r3, r7, #4
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	605a      	str	r2, [r3, #4]
 800c4ca:	609a      	str	r2, [r3, #8]
 800c4cc:	60da      	str	r2, [r3, #12]
 800c4ce:	611a      	str	r2, [r3, #16]
 800c4d0:	615a      	str	r2, [r3, #20]
 800c4d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800c4d4:	4b4f      	ldr	r3, [pc, #316]	; (800c614 <MX_FMC_Init+0x158>)
 800c4d6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c4da:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800c4dc:	4b4d      	ldr	r3, [pc, #308]	; (800c614 <MX_FMC_Init+0x158>)
 800c4de:	4a4e      	ldr	r2, [pc, #312]	; (800c618 <MX_FMC_Init+0x15c>)
 800c4e0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800c4e2:	4b4c      	ldr	r3, [pc, #304]	; (800c614 <MX_FMC_Init+0x158>)
 800c4e4:	2202      	movs	r2, #2
 800c4e6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800c4e8:	4b4a      	ldr	r3, [pc, #296]	; (800c614 <MX_FMC_Init+0x158>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800c4ee:	4b49      	ldr	r3, [pc, #292]	; (800c614 <MX_FMC_Init+0x158>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800c4f4:	4b47      	ldr	r3, [pc, #284]	; (800c614 <MX_FMC_Init+0x158>)
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800c4fa:	4b46      	ldr	r3, [pc, #280]	; (800c614 <MX_FMC_Init+0x158>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800c500:	4b44      	ldr	r3, [pc, #272]	; (800c614 <MX_FMC_Init+0x158>)
 800c502:	2200      	movs	r2, #0
 800c504:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800c506:	4b43      	ldr	r3, [pc, #268]	; (800c614 <MX_FMC_Init+0x158>)
 800c508:	2200      	movs	r2, #0
 800c50a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800c50c:	4b41      	ldr	r3, [pc, #260]	; (800c614 <MX_FMC_Init+0x158>)
 800c50e:	2200      	movs	r2, #0
 800c510:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800c512:	4b40      	ldr	r3, [pc, #256]	; (800c614 <MX_FMC_Init+0x158>)
 800c514:	2200      	movs	r2, #0
 800c516:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800c518:	4b3e      	ldr	r3, [pc, #248]	; (800c614 <MX_FMC_Init+0x158>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800c51e:	4b3d      	ldr	r3, [pc, #244]	; (800c614 <MX_FMC_Init+0x158>)
 800c520:	2200      	movs	r2, #0
 800c522:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800c524:	4b3b      	ldr	r3, [pc, #236]	; (800c614 <MX_FMC_Init+0x158>)
 800c526:	2200      	movs	r2, #0
 800c528:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800c52a:	4b3a      	ldr	r3, [pc, #232]	; (800c614 <MX_FMC_Init+0x158>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800c530:	4b38      	ldr	r3, [pc, #224]	; (800c614 <MX_FMC_Init+0x158>)
 800c532:	2200      	movs	r2, #0
 800c534:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800c536:	4b37      	ldr	r3, [pc, #220]	; (800c614 <MX_FMC_Init+0x158>)
 800c538:	2200      	movs	r2, #0
 800c53a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800c53c:	230f      	movs	r3, #15
 800c53e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800c540:	230f      	movs	r3, #15
 800c542:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800c544:	23ff      	movs	r3, #255	; 0xff
 800c546:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800c548:	230f      	movs	r3, #15
 800c54a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800c54c:	2310      	movs	r3, #16
 800c54e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800c550:	2311      	movs	r3, #17
 800c552:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800c554:	2300      	movs	r3, #0
 800c556:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800c558:	1d3b      	adds	r3, r7, #4
 800c55a:	2200      	movs	r2, #0
 800c55c:	4619      	mov	r1, r3
 800c55e:	482d      	ldr	r0, [pc, #180]	; (800c614 <MX_FMC_Init+0x158>)
 800c560:	f7fa fe16 	bl	8007190 <HAL_SRAM_Init>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d001      	beq.n	800c56e <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 800c56a:	f000 f9cf 	bl	800c90c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 800c56e:	4b2b      	ldr	r3, [pc, #172]	; (800c61c <MX_FMC_Init+0x160>)
 800c570:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c574:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800c576:	4b29      	ldr	r3, [pc, #164]	; (800c61c <MX_FMC_Init+0x160>)
 800c578:	4a27      	ldr	r2, [pc, #156]	; (800c618 <MX_FMC_Init+0x15c>)
 800c57a:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 800c57c:	4b27      	ldr	r3, [pc, #156]	; (800c61c <MX_FMC_Init+0x160>)
 800c57e:	2200      	movs	r2, #0
 800c580:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800c582:	4b26      	ldr	r3, [pc, #152]	; (800c61c <MX_FMC_Init+0x160>)
 800c584:	2200      	movs	r2, #0
 800c586:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800c588:	4b24      	ldr	r3, [pc, #144]	; (800c61c <MX_FMC_Init+0x160>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800c58e:	4b23      	ldr	r3, [pc, #140]	; (800c61c <MX_FMC_Init+0x160>)
 800c590:	2210      	movs	r2, #16
 800c592:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800c594:	4b21      	ldr	r3, [pc, #132]	; (800c61c <MX_FMC_Init+0x160>)
 800c596:	2200      	movs	r2, #0
 800c598:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800c59a:	4b20      	ldr	r3, [pc, #128]	; (800c61c <MX_FMC_Init+0x160>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800c5a0:	4b1e      	ldr	r3, [pc, #120]	; (800c61c <MX_FMC_Init+0x160>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800c5a6:	4b1d      	ldr	r3, [pc, #116]	; (800c61c <MX_FMC_Init+0x160>)
 800c5a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c5ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800c5ae:	4b1b      	ldr	r3, [pc, #108]	; (800c61c <MX_FMC_Init+0x160>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800c5b4:	4b19      	ldr	r3, [pc, #100]	; (800c61c <MX_FMC_Init+0x160>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800c5ba:	4b18      	ldr	r3, [pc, #96]	; (800c61c <MX_FMC_Init+0x160>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800c5c0:	4b16      	ldr	r3, [pc, #88]	; (800c61c <MX_FMC_Init+0x160>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800c5c6:	4b15      	ldr	r3, [pc, #84]	; (800c61c <MX_FMC_Init+0x160>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800c5cc:	4b13      	ldr	r3, [pc, #76]	; (800c61c <MX_FMC_Init+0x160>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800c5d2:	4b12      	ldr	r3, [pc, #72]	; (800c61c <MX_FMC_Init+0x160>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800c5d8:	230f      	movs	r3, #15
 800c5da:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800c5dc:	230f      	movs	r3, #15
 800c5de:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800c5e0:	23ff      	movs	r3, #255	; 0xff
 800c5e2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800c5e4:	230f      	movs	r3, #15
 800c5e6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800c5e8:	2310      	movs	r3, #16
 800c5ea:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800c5ec:	2311      	movs	r3, #17
 800c5ee:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800c5f4:	1d3b      	adds	r3, r7, #4
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4808      	ldr	r0, [pc, #32]	; (800c61c <MX_FMC_Init+0x160>)
 800c5fc:	f7fa fdc8 	bl	8007190 <HAL_SRAM_Init>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <MX_FMC_Init+0x14e>
  {
    Error_Handler( );
 800c606:	f000 f981 	bl	800c90c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800c60a:	bf00      	nop
 800c60c:	3720      	adds	r7, #32
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	2002f4f8 	.word	0x2002f4f8
 800c618:	a0000104 	.word	0xa0000104
 800c61c:	2002f83c 	.word	0x2002f83c

0800c620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08e      	sub	sp, #56	; 0x38
 800c624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]
 800c62e:	605a      	str	r2, [r3, #4]
 800c630:	609a      	str	r2, [r3, #8]
 800c632:	60da      	str	r2, [r3, #12]
 800c634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c636:	4bad      	ldr	r3, [pc, #692]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c63a:	4aac      	ldr	r2, [pc, #688]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c640:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c642:	4baa      	ldr	r3, [pc, #680]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c64a:	623b      	str	r3, [r7, #32]
 800c64c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c64e:	4ba7      	ldr	r3, [pc, #668]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c652:	4aa6      	ldr	r2, [pc, #664]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c65a:	4ba4      	ldr	r3, [pc, #656]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c662:	61fb      	str	r3, [r7, #28]
 800c664:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c666:	4ba1      	ldr	r3, [pc, #644]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c66a:	4aa0      	ldr	r2, [pc, #640]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c66c:	f043 0310 	orr.w	r3, r3, #16
 800c670:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c672:	4b9e      	ldr	r3, [pc, #632]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c676:	f003 0310 	and.w	r3, r3, #16
 800c67a:	61bb      	str	r3, [r7, #24]
 800c67c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c67e:	4b9b      	ldr	r3, [pc, #620]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c682:	4a9a      	ldr	r2, [pc, #616]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c684:	f043 0302 	orr.w	r3, r3, #2
 800c688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c68a:	4b98      	ldr	r3, [pc, #608]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c68e:	f003 0302 	and.w	r3, r3, #2
 800c692:	617b      	str	r3, [r7, #20]
 800c694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c696:	4b95      	ldr	r3, [pc, #596]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c69a:	4a94      	ldr	r2, [pc, #592]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c69c:	f043 0301 	orr.w	r3, r3, #1
 800c6a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c6a2:	4b92      	ldr	r3, [pc, #584]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a6:	f003 0301 	and.w	r3, r3, #1
 800c6aa:	613b      	str	r3, [r7, #16]
 800c6ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c6ae:	4b8f      	ldr	r3, [pc, #572]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6b2:	4a8e      	ldr	r2, [pc, #568]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c6ba:	4b8c      	ldr	r3, [pc, #560]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800c6c6:	f7f7 fc7f 	bl	8003fc8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c6ca:	4b88      	ldr	r3, [pc, #544]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ce:	4a87      	ldr	r2, [pc, #540]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6d0:	f043 0308 	orr.w	r3, r3, #8
 800c6d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c6d6:	4b85      	ldr	r3, [pc, #532]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6da:	f003 0308 	and.w	r3, r3, #8
 800c6de:	60bb      	str	r3, [r7, #8]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c6e2:	4b82      	ldr	r3, [pc, #520]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6e6:	4a81      	ldr	r2, [pc, #516]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6e8:	f043 0304 	orr.w	r3, r3, #4
 800c6ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c6ee:	4b7f      	ldr	r3, [pc, #508]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6f2:	f003 0304 	and.w	r3, r3, #4
 800c6f6:	607b      	str	r3, [r7, #4]
 800c6f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c6fa:	4b7c      	ldr	r3, [pc, #496]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6fe:	4a7b      	ldr	r2, [pc, #492]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c700:	f043 0320 	orr.w	r3, r3, #32
 800c704:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c706:	4b79      	ldr	r3, [pc, #484]	; (800c8ec <MX_GPIO_Init+0x2cc>)
 800c708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c70a:	f003 0320 	and.w	r3, r3, #32
 800c70e:	603b      	str	r3, [r7, #0]
 800c710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800c712:	2200      	movs	r2, #0
 800c714:	2101      	movs	r1, #1
 800c716:	4876      	ldr	r0, [pc, #472]	; (800c8f0 <MX_GPIO_Init+0x2d0>)
 800c718:	f7f6 f9fe 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800c71c:	2200      	movs	r2, #0
 800c71e:	2143      	movs	r1, #67	; 0x43
 800c720:	4874      	ldr	r0, [pc, #464]	; (800c8f4 <MX_GPIO_Init+0x2d4>)
 800c722:	f7f6 f9f9 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800c726:	2200      	movs	r2, #0
 800c728:	2140      	movs	r1, #64	; 0x40
 800c72a:	4873      	ldr	r0, [pc, #460]	; (800c8f8 <MX_GPIO_Init+0x2d8>)
 800c72c:	f7f6 f9f4 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800c730:	2200      	movs	r2, #0
 800c732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c736:	4871      	ldr	r0, [pc, #452]	; (800c8fc <MX_GPIO_Init+0x2dc>)
 800c738:	f7f6 f9ee 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 800c73c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800c740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c742:	2300      	movs	r3, #0
 800c744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c746:	2302      	movs	r3, #2
 800c748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c74e:	4619      	mov	r1, r3
 800c750:	4867      	ldr	r0, [pc, #412]	; (800c8f0 <MX_GPIO_Init+0x2d0>)
 800c752:	f7f6 f84f 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800c756:	2304      	movs	r3, #4
 800c758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c75a:	4b69      	ldr	r3, [pc, #420]	; (800c900 <MX_GPIO_Init+0x2e0>)
 800c75c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800c762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c766:	4619      	mov	r1, r3
 800c768:	4862      	ldr	r0, [pc, #392]	; (800c8f4 <MX_GPIO_Init+0x2d4>)
 800c76a:	f7f6 f843 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800c76e:	2301      	movs	r3, #1
 800c770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c772:	2301      	movs	r3, #1
 800c774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c776:	2300      	movs	r3, #0
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c77a:	2300      	movs	r3, #0
 800c77c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800c77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c782:	4619      	mov	r1, r3
 800c784:	485a      	ldr	r0, [pc, #360]	; (800c8f0 <MX_GPIO_Init+0x2d0>)
 800c786:	f7f6 f835 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800c78a:	2340      	movs	r3, #64	; 0x40
 800c78c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c78e:	2302      	movs	r3, #2
 800c790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c792:	2300      	movs	r3, #0
 800c794:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c796:	2300      	movs	r3, #0
 800c798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c79a:	2303      	movs	r3, #3
 800c79c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800c79e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4852      	ldr	r0, [pc, #328]	; (800c8f0 <MX_GPIO_Init+0x2d0>)
 800c7a6:	f7f6 f825 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 800c7aa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800c7ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c7c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	484b      	ldr	r0, [pc, #300]	; (800c8f4 <MX_GPIO_Init+0x2d4>)
 800c7c8:	f7f6 f814 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800c7cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c7de:	2302      	movs	r3, #2
 800c7e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800c7e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4844      	ldr	r0, [pc, #272]	; (800c8fc <MX_GPIO_Init+0x2dc>)
 800c7ea:	f7f6 f803 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800c7ee:	2380      	movs	r3, #128	; 0x80
 800c7f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800c7fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7fe:	4619      	mov	r1, r3
 800c800:	483c      	ldr	r0, [pc, #240]	; (800c8f4 <MX_GPIO_Init+0x2d4>)
 800c802:	f7f5 fff7 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 800c806:	2343      	movs	r3, #67	; 0x43
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c80a:	2301      	movs	r3, #1
 800c80c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c812:	2300      	movs	r3, #0
 800c814:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c81a:	4619      	mov	r1, r3
 800c81c:	4835      	ldr	r0, [pc, #212]	; (800c8f4 <MX_GPIO_Init+0x2d4>)
 800c81e:	f7f5 ffe9 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800c822:	2340      	movs	r3, #64	; 0x40
 800c824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c826:	2301      	movs	r3, #1
 800c828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c82e:	2300      	movs	r3, #0
 800c830:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800c832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c836:	4619      	mov	r1, r3
 800c838:	482f      	ldr	r0, [pc, #188]	; (800c8f8 <MX_GPIO_Init+0x2d8>)
 800c83a:	f7f5 ffdb 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800c83e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c844:	4b2e      	ldr	r3, [pc, #184]	; (800c900 <MX_GPIO_Init+0x2e0>)
 800c846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c848:	2300      	movs	r3, #0
 800c84a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800c84c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c850:	4619      	mov	r1, r3
 800c852:	482c      	ldr	r0, [pc, #176]	; (800c904 <MX_GPIO_Init+0x2e4>)
 800c854:	f7f5 ffce 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800c858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c85c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c85e:	2302      	movs	r3, #2
 800c860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c862:	2300      	movs	r3, #0
 800c864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c866:	2300      	movs	r3, #0
 800c868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 800c86a:	230e      	movs	r3, #14
 800c86c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 800c86e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c872:	4619      	mov	r1, r3
 800c874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c878:	f7f5 ffbc 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 800c87c:	2320      	movs	r3, #32
 800c87e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c880:	4b1f      	ldr	r3, [pc, #124]	; (800c900 <MX_GPIO_Init+0x2e0>)
 800c882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c884:	2300      	movs	r3, #0
 800c886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800c888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c88c:	4619      	mov	r1, r3
 800c88e:	481a      	ldr	r0, [pc, #104]	; (800c8f8 <MX_GPIO_Init+0x2d8>)
 800c890:	f7f5 ffb0 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800c894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c89a:	2300      	movs	r3, #0
 800c89c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c89e:	2302      	movs	r3, #2
 800c8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800c8a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4817      	ldr	r0, [pc, #92]	; (800c908 <MX_GPIO_Init+0x2e8>)
 800c8aa:	f7f5 ffa3 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 800c8ae:	2304      	movs	r3, #4
 800c8b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 800c8ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8be:	4619      	mov	r1, r3
 800c8c0:	480e      	ldr	r0, [pc, #56]	; (800c8fc <MX_GPIO_Init+0x2dc>)
 800c8c2:	f7f5 ff97 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800c8c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c8ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800c8cc:	2311      	movs	r3, #17
 800c8ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800c8d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4807      	ldr	r0, [pc, #28]	; (800c8fc <MX_GPIO_Init+0x2dc>)
 800c8e0:	f7f5 ff88 	bl	80027f4 <HAL_GPIO_Init>

}
 800c8e4:	bf00      	nop
 800c8e6:	3738      	adds	r7, #56	; 0x38
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	40021000 	.word	0x40021000
 800c8f0:	48002000 	.word	0x48002000
 800c8f4:	48001c00 	.word	0x48001c00
 800c8f8:	48000800 	.word	0x48000800
 800c8fc:	48000400 	.word	0x48000400
 800c900:	10110000 	.word	0x10110000
 800c904:	48001800 	.word	0x48001800
 800c908:	48001400 	.word	0x48001400

0800c90c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c90c:	b480      	push	{r7}
 800c90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c910:	bf00      	nop
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
	...

0800c91c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c922:	4b0f      	ldr	r3, [pc, #60]	; (800c960 <HAL_MspInit+0x44>)
 800c924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c926:	4a0e      	ldr	r2, [pc, #56]	; (800c960 <HAL_MspInit+0x44>)
 800c928:	f043 0301 	orr.w	r3, r3, #1
 800c92c:	6613      	str	r3, [r2, #96]	; 0x60
 800c92e:	4b0c      	ldr	r3, [pc, #48]	; (800c960 <HAL_MspInit+0x44>)
 800c930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	607b      	str	r3, [r7, #4]
 800c938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c93a:	4b09      	ldr	r3, [pc, #36]	; (800c960 <HAL_MspInit+0x44>)
 800c93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c93e:	4a08      	ldr	r2, [pc, #32]	; (800c960 <HAL_MspInit+0x44>)
 800c940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c944:	6593      	str	r3, [r2, #88]	; 0x58
 800c946:	4b06      	ldr	r3, [pc, #24]	; (800c960 <HAL_MspInit+0x44>)
 800c948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c94a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c94e:	603b      	str	r3, [r7, #0]
 800c950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c952:	bf00      	nop
 800c954:	370c      	adds	r7, #12
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	40021000 	.word	0x40021000

0800c964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08e      	sub	sp, #56	; 0x38
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c96c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c970:	2200      	movs	r2, #0
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	605a      	str	r2, [r3, #4]
 800c976:	609a      	str	r2, [r3, #8]
 800c978:	60da      	str	r2, [r3, #12]
 800c97a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a59      	ldr	r2, [pc, #356]	; (800cae8 <HAL_ADC_MspInit+0x184>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d12d      	bne.n	800c9e2 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800c986:	4b59      	ldr	r3, [pc, #356]	; (800caec <HAL_ADC_MspInit+0x188>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3301      	adds	r3, #1
 800c98c:	4a57      	ldr	r2, [pc, #348]	; (800caec <HAL_ADC_MspInit+0x188>)
 800c98e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800c990:	4b56      	ldr	r3, [pc, #344]	; (800caec <HAL_ADC_MspInit+0x188>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d10b      	bne.n	800c9b0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800c998:	4b55      	ldr	r3, [pc, #340]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800c99a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c99c:	4a54      	ldr	r2, [pc, #336]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800c99e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c9a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c9a4:	4b52      	ldr	r3, [pc, #328]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800c9a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9ac:	623b      	str	r3, [r7, #32]
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c9b0:	4b4f      	ldr	r3, [pc, #316]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800c9b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9b4:	4a4e      	ldr	r2, [pc, #312]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800c9b6:	f043 0304 	orr.w	r3, r3, #4
 800c9ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c9bc:	4b4c      	ldr	r3, [pc, #304]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800c9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9c0:	f003 0304 	and.w	r3, r3, #4
 800c9c4:	61fb      	str	r3, [r7, #28]
 800c9c6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 800c9c8:	2318      	movs	r3, #24
 800c9ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800c9cc:	230b      	movs	r3, #11
 800c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c9d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4846      	ldr	r0, [pc, #280]	; (800caf4 <HAL_ADC_MspInit+0x190>)
 800c9dc:	f7f5 ff0a 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c9e0:	e07e      	b.n	800cae0 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a44      	ldr	r2, [pc, #272]	; (800caf8 <HAL_ADC_MspInit+0x194>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d146      	bne.n	800ca7a <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 800c9ec:	4b3f      	ldr	r3, [pc, #252]	; (800caec <HAL_ADC_MspInit+0x188>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	4a3e      	ldr	r2, [pc, #248]	; (800caec <HAL_ADC_MspInit+0x188>)
 800c9f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800c9f6:	4b3d      	ldr	r3, [pc, #244]	; (800caec <HAL_ADC_MspInit+0x188>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d10b      	bne.n	800ca16 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800c9fe:	4b3c      	ldr	r3, [pc, #240]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca02:	4a3b      	ldr	r2, [pc, #236]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ca08:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca0a:	4b39      	ldr	r3, [pc, #228]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca12:	61bb      	str	r3, [r7, #24]
 800ca14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca16:	4b36      	ldr	r3, [pc, #216]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca1a:	4a35      	ldr	r2, [pc, #212]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca1c:	f043 0304 	orr.w	r3, r3, #4
 800ca20:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca22:	4b33      	ldr	r3, [pc, #204]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca26:	f003 0304 	and.w	r3, r3, #4
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca2e:	4b30      	ldr	r3, [pc, #192]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca32:	4a2f      	ldr	r2, [pc, #188]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca34:	f043 0301 	orr.w	r3, r3, #1
 800ca38:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca3a:	4b2d      	ldr	r3, [pc, #180]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	613b      	str	r3, [r7, #16]
 800ca44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800ca46:	2303      	movs	r3, #3
 800ca48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800ca4a:	230b      	movs	r3, #11
 800ca4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ca52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca56:	4619      	mov	r1, r3
 800ca58:	4826      	ldr	r0, [pc, #152]	; (800caf4 <HAL_ADC_MspInit+0x190>)
 800ca5a:	f7f5 fecb 	bl	80027f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800ca5e:	2312      	movs	r3, #18
 800ca60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800ca62:	230b      	movs	r3, #11
 800ca64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca66:	2300      	movs	r3, #0
 800ca68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca6e:	4619      	mov	r1, r3
 800ca70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ca74:	f7f5 febe 	bl	80027f4 <HAL_GPIO_Init>
}
 800ca78:	e032      	b.n	800cae0 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a1f      	ldr	r2, [pc, #124]	; (800cafc <HAL_ADC_MspInit+0x198>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d12d      	bne.n	800cae0 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800ca84:	4b19      	ldr	r3, [pc, #100]	; (800caec <HAL_ADC_MspInit+0x188>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	4a18      	ldr	r2, [pc, #96]	; (800caec <HAL_ADC_MspInit+0x188>)
 800ca8c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800ca8e:	4b17      	ldr	r3, [pc, #92]	; (800caec <HAL_ADC_MspInit+0x188>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d10b      	bne.n	800caae <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800ca96:	4b16      	ldr	r3, [pc, #88]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca9a:	4a15      	ldr	r2, [pc, #84]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800ca9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800caa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800caa2:	4b13      	ldr	r3, [pc, #76]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800caa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800caae:	4b10      	ldr	r3, [pc, #64]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800cab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cab2:	4a0f      	ldr	r2, [pc, #60]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800cab4:	f043 0320 	orr.w	r3, r3, #32
 800cab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800caba:	4b0d      	ldr	r3, [pc, #52]	; (800caf0 <HAL_ADC_MspInit+0x18c>)
 800cabc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cabe:	f003 0320 	and.w	r3, r3, #32
 800cac2:	60bb      	str	r3, [r7, #8]
 800cac4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 800cac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800cacc:	230b      	movs	r3, #11
 800cace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 800cad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cad8:	4619      	mov	r1, r3
 800cada:	4809      	ldr	r0, [pc, #36]	; (800cb00 <HAL_ADC_MspInit+0x19c>)
 800cadc:	f7f5 fe8a 	bl	80027f4 <HAL_GPIO_Init>
}
 800cae0:	bf00      	nop
 800cae2:	3738      	adds	r7, #56	; 0x38
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	50040000 	.word	0x50040000
 800caec:	2000023c 	.word	0x2000023c
 800caf0:	40021000 	.word	0x40021000
 800caf4:	48000800 	.word	0x48000800
 800caf8:	50040100 	.word	0x50040100
 800cafc:	50040200 	.word	0x50040200
 800cb00:	48001400 	.word	0x48001400

0800cb04 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08c      	sub	sp, #48	; 0x30
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb0c:	f107 031c 	add.w	r3, r7, #28
 800cb10:	2200      	movs	r2, #0
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	605a      	str	r2, [r3, #4]
 800cb16:	609a      	str	r2, [r3, #8]
 800cb18:	60da      	str	r2, [r3, #12]
 800cb1a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a33      	ldr	r2, [pc, #204]	; (800cbf0 <HAL_DCMI_MspInit+0xec>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d160      	bne.n	800cbe8 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800cb26:	4b33      	ldr	r3, [pc, #204]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb2a:	4a32      	ldr	r2, [pc, #200]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb30:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb32:	4b30      	ldr	r3, [pc, #192]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb3a:	61bb      	str	r3, [r7, #24]
 800cb3c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800cb3e:	4b2d      	ldr	r3, [pc, #180]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb42:	4a2c      	ldr	r2, [pc, #176]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb48:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb4a:	4b2a      	ldr	r3, [pc, #168]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb52:	617b      	str	r3, [r7, #20]
 800cb54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800cb56:	4b27      	ldr	r3, [pc, #156]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb5a:	4a26      	ldr	r2, [pc, #152]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb60:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb62:	4b24      	ldr	r3, [pc, #144]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb6a:	613b      	str	r3, [r7, #16]
 800cb6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cb6e:	4b21      	ldr	r3, [pc, #132]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb72:	4a20      	ldr	r2, [pc, #128]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb74:	f043 0310 	orr.w	r3, r3, #16
 800cb78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb7a:	4b1e      	ldr	r3, [pc, #120]	; (800cbf4 <HAL_DCMI_MspInit+0xf0>)
 800cb7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb7e:	f003 0310 	and.w	r3, r3, #16
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 800cb86:	f645 7320 	movw	r3, #24352	; 0x5f20
 800cb8a:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb90:	2300      	movs	r3, #0
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb94:	2300      	movs	r3, #0
 800cb96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800cb98:	230a      	movs	r3, #10
 800cb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cb9c:	f107 031c 	add.w	r3, r7, #28
 800cba0:	4619      	mov	r1, r3
 800cba2:	4815      	ldr	r0, [pc, #84]	; (800cbf8 <HAL_DCMI_MspInit+0xf4>)
 800cba4:	f7f5 fe26 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800cba8:	23b0      	movs	r3, #176	; 0xb0
 800cbaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbac:	2302      	movs	r3, #2
 800cbae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800cbb8:	230a      	movs	r3, #10
 800cbba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cbbc:	f107 031c 	add.w	r3, r7, #28
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	480e      	ldr	r0, [pc, #56]	; (800cbfc <HAL_DCMI_MspInit+0xf8>)
 800cbc4:	f7f5 fe16 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 800cbc8:	2320      	movs	r3, #32
 800cbca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbcc:	2302      	movs	r3, #2
 800cbce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800cbd8:	230a      	movs	r3, #10
 800cbda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 800cbdc:	f107 031c 	add.w	r3, r7, #28
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4807      	ldr	r0, [pc, #28]	; (800cc00 <HAL_DCMI_MspInit+0xfc>)
 800cbe4:	f7f5 fe06 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800cbe8:	bf00      	nop
 800cbea:	3730      	adds	r7, #48	; 0x30
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	50050000 	.word	0x50050000
 800cbf4:	40021000 	.word	0x40021000
 800cbf8:	48001c00 	.word	0x48001c00
 800cbfc:	48002000 	.word	0x48002000
 800cc00:	48001000 	.word	0x48001000

0800cc04 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b08a      	sub	sp, #40	; 0x28
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc0c:	f107 0314 	add.w	r3, r7, #20
 800cc10:	2200      	movs	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	605a      	str	r2, [r3, #4]
 800cc16:	609a      	str	r2, [r3, #8]
 800cc18:	60da      	str	r2, [r3, #12]
 800cc1a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800cc1c:	4b4a      	ldr	r3, [pc, #296]	; (800cd48 <HAL_DFSDM_FilterMspInit+0x144>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d155      	bne.n	800ccd0 <HAL_DFSDM_FilterMspInit+0xcc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800cc24:	4b49      	ldr	r3, [pc, #292]	; (800cd4c <HAL_DFSDM_FilterMspInit+0x148>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	4a48      	ldr	r2, [pc, #288]	; (800cd4c <HAL_DFSDM_FilterMspInit+0x148>)
 800cc2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800cc2e:	4b47      	ldr	r3, [pc, #284]	; (800cd4c <HAL_DFSDM_FilterMspInit+0x148>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d10b      	bne.n	800cc4e <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800cc36:	4b46      	ldr	r3, [pc, #280]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc3a:	4a45      	ldr	r2, [pc, #276]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc40:	6613      	str	r3, [r2, #96]	; 0x60
 800cc42:	4b43      	ldr	r3, [pc, #268]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc4a:	613b      	str	r3, [r7, #16]
 800cc4c:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc4e:	4b40      	ldr	r3, [pc, #256]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc52:	4a3f      	ldr	r2, [pc, #252]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc54:	f043 0304 	orr.w	r3, r3, #4
 800cc58:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc5a:	4b3d      	ldr	r3, [pc, #244]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc5e:	f003 0304 	and.w	r3, r3, #4
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc66:	4b3a      	ldr	r3, [pc, #232]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc6a:	4a39      	ldr	r2, [pc, #228]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc6c:	f043 0302 	orr.w	r3, r3, #2
 800cc70:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc72:	4b37      	ldr	r3, [pc, #220]	; (800cd50 <HAL_DFSDM_FilterMspInit+0x14c>)
 800cc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc76:	f003 0302 	and.w	r3, r3, #2
 800cc7a:	60bb      	str	r3, [r7, #8]
 800cc7c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800cc7e:	2384      	movs	r3, #132	; 0x84
 800cc80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc82:	2302      	movs	r3, #2
 800cc84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800cc8e:	2306      	movs	r3, #6
 800cc90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc92:	f107 0314 	add.w	r3, r7, #20
 800cc96:	4619      	mov	r1, r3
 800cc98:	482e      	ldr	r0, [pc, #184]	; (800cd54 <HAL_DFSDM_FilterMspInit+0x150>)
 800cc9a:	f7f5 fdab 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800cc9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cca4:	2302      	movs	r3, #2
 800cca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccac:	2303      	movs	r3, #3
 800ccae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800ccb0:	2306      	movs	r3, #6
 800ccb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800ccb4:	f107 0314 	add.w	r3, r7, #20
 800ccb8:	4619      	mov	r1, r3
 800ccba:	4827      	ldr	r0, [pc, #156]	; (800cd58 <HAL_DFSDM_FilterMspInit+0x154>)
 800ccbc:	f7f5 fd9a 	bl	80027f4 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	203d      	movs	r0, #61	; 0x3d
 800ccc6:	f7f4 fd14 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800ccca:	203d      	movs	r0, #61	; 0x3d
 800cccc:	f7f4 fd2d 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a21      	ldr	r2, [pc, #132]	; (800cd5c <HAL_DFSDM_FilterMspInit+0x158>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d131      	bne.n	800cd3e <HAL_DFSDM_FilterMspInit+0x13a>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800ccda:	4b21      	ldr	r3, [pc, #132]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800ccdc:	4a21      	ldr	r2, [pc, #132]	; (800cd64 <HAL_DFSDM_FilterMspInit+0x160>)
 800ccde:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800cce0:	4b1f      	ldr	r3, [pc, #124]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cce6:	4b1e      	ldr	r3, [pc, #120]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800ccec:	4b1c      	ldr	r3, [pc, #112]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800ccf2:	4b1b      	ldr	r3, [pc, #108]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800ccf4:	2280      	movs	r2, #128	; 0x80
 800ccf6:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ccf8:	4b19      	ldr	r3, [pc, #100]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800ccfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccfe:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cd00:	4b17      	ldr	r3, [pc, #92]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cd02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd06:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800cd08:	4b15      	ldr	r3, [pc, #84]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cd0a:	2220      	movs	r2, #32
 800cd0c:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800cd0e:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cd10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cd14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800cd16:	4812      	ldr	r0, [pc, #72]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cd18:	f7f5 faf6 	bl	8002308 <HAL_DMA_Init>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <HAL_DFSDM_FilterMspInit+0x122>
    {
      Error_Handler();
 800cd22:	f7ff fdf3 	bl	800c90c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a0d      	ldr	r2, [pc, #52]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cd2a:	62da      	str	r2, [r3, #44]	; 0x2c
 800cd2c:	4a0c      	ldr	r2, [pc, #48]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a0a      	ldr	r2, [pc, #40]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cd36:	629a      	str	r2, [r3, #40]	; 0x28
 800cd38:	4a09      	ldr	r2, [pc, #36]	; (800cd60 <HAL_DFSDM_FilterMspInit+0x15c>)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800cd3e:	bf00      	nop
 800cd40:	3728      	adds	r7, #40	; 0x28
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20000244 	.word	0x20000244
 800cd4c:	20000240 	.word	0x20000240
 800cd50:	40021000 	.word	0x40021000
 800cd54:	48000800 	.word	0x48000800
 800cd58:	48000400 	.word	0x48000400
 800cd5c:	40016100 	.word	0x40016100
 800cd60:	2002f7f0 	.word	0x2002f7f0
 800cd64:	40020044 	.word	0x40020044

0800cd68 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08a      	sub	sp, #40	; 0x28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd70:	f107 0314 	add.w	r3, r7, #20
 800cd74:	2200      	movs	r2, #0
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	605a      	str	r2, [r3, #4]
 800cd7a:	609a      	str	r2, [r3, #8]
 800cd7c:	60da      	str	r2, [r3, #12]
 800cd7e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800cd80:	4b2a      	ldr	r3, [pc, #168]	; (800ce2c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d14d      	bne.n	800ce24 <HAL_DFSDM_ChannelMspInit+0xbc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800cd88:	4b29      	ldr	r3, [pc, #164]	; (800ce30 <HAL_DFSDM_ChannelMspInit+0xc8>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	4a28      	ldr	r2, [pc, #160]	; (800ce30 <HAL_DFSDM_ChannelMspInit+0xc8>)
 800cd90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800cd92:	4b27      	ldr	r3, [pc, #156]	; (800ce30 <HAL_DFSDM_ChannelMspInit+0xc8>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d10b      	bne.n	800cdb2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800cd9a:	4b26      	ldr	r3, [pc, #152]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cd9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd9e:	4a25      	ldr	r2, [pc, #148]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cda0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cda4:	6613      	str	r3, [r2, #96]	; 0x60
 800cda6:	4b23      	ldr	r3, [pc, #140]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cda8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdae:	613b      	str	r3, [r7, #16]
 800cdb0:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cdb2:	4b20      	ldr	r3, [pc, #128]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cdb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdb6:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cdb8:	f043 0304 	orr.w	r3, r3, #4
 800cdbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cdbe:	4b1d      	ldr	r3, [pc, #116]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cdc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdc2:	f003 0304 	and.w	r3, r3, #4
 800cdc6:	60fb      	str	r3, [r7, #12]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cdca:	4b1a      	ldr	r3, [pc, #104]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cdcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdce:	4a19      	ldr	r2, [pc, #100]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cdd0:	f043 0302 	orr.w	r3, r3, #2
 800cdd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cdd6:	4b17      	ldr	r3, [pc, #92]	; (800ce34 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800cdd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdda:	f003 0302 	and.w	r3, r3, #2
 800cdde:	60bb      	str	r3, [r7, #8]
 800cde0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 800cde2:	2384      	movs	r3, #132	; 0x84
 800cde4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cde6:	2302      	movs	r3, #2
 800cde8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdea:	2300      	movs	r3, #0
 800cdec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800cdf2:	2306      	movs	r3, #6
 800cdf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cdf6:	f107 0314 	add.w	r3, r7, #20
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	480e      	ldr	r0, [pc, #56]	; (800ce38 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800cdfe:	f7f5 fcf9 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800ce02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce08:	2302      	movs	r3, #2
 800ce0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce10:	2303      	movs	r3, #3
 800ce12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800ce14:	2306      	movs	r3, #6
 800ce16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800ce18:	f107 0314 	add.w	r3, r7, #20
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4807      	ldr	r0, [pc, #28]	; (800ce3c <HAL_DFSDM_ChannelMspInit+0xd4>)
 800ce20:	f7f5 fce8 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800ce24:	bf00      	nop
 800ce26:	3728      	adds	r7, #40	; 0x28
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20000244 	.word	0x20000244
 800ce30:	20000240 	.word	0x20000240
 800ce34:	40021000 	.word	0x40021000
 800ce38:	48000800 	.word	0x48000800
 800ce3c:	48000400 	.word	0x48000400

0800ce40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08c      	sub	sp, #48	; 0x30
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce48:	f107 031c 	add.w	r3, r7, #28
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	601a      	str	r2, [r3, #0]
 800ce50:	605a      	str	r2, [r3, #4]
 800ce52:	609a      	str	r2, [r3, #8]
 800ce54:	60da      	str	r2, [r3, #12]
 800ce56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a3d      	ldr	r2, [pc, #244]	; (800cf54 <HAL_I2C_MspInit+0x114>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d129      	bne.n	800ceb6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce62:	4b3d      	ldr	r3, [pc, #244]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800ce64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce66:	4a3c      	ldr	r2, [pc, #240]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800ce68:	f043 0302 	orr.w	r3, r3, #2
 800ce6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ce6e:	4b3a      	ldr	r3, [pc, #232]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800ce70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce72:	f003 0302 	and.w	r3, r3, #2
 800ce76:	61bb      	str	r3, [r7, #24]
 800ce78:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800ce7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ce7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ce80:	2312      	movs	r3, #18
 800ce82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce84:	2301      	movs	r3, #1
 800ce86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ce8c:	2304      	movs	r3, #4
 800ce8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce90:	f107 031c 	add.w	r3, r7, #28
 800ce94:	4619      	mov	r1, r3
 800ce96:	4831      	ldr	r0, [pc, #196]	; (800cf5c <HAL_I2C_MspInit+0x11c>)
 800ce98:	f7f5 fcac 	bl	80027f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ce9c:	4b2e      	ldr	r3, [pc, #184]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800ce9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cea0:	4a2d      	ldr	r2, [pc, #180]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cea6:	6593      	str	r3, [r2, #88]	; 0x58
 800cea8:	4b2b      	ldr	r3, [pc, #172]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800ceaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ceb0:	617b      	str	r3, [r7, #20]
 800ceb2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800ceb4:	e049      	b.n	800cf4a <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a29      	ldr	r2, [pc, #164]	; (800cf60 <HAL_I2C_MspInit+0x120>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d144      	bne.n	800cf4a <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800cec0:	4b25      	ldr	r3, [pc, #148]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec4:	4a24      	ldr	r2, [pc, #144]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cecc:	4b22      	ldr	r3, [pc, #136]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ced4:	613b      	str	r3, [r7, #16]
 800ced6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ced8:	4b1f      	ldr	r3, [pc, #124]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800ceda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cedc:	4a1e      	ldr	r2, [pc, #120]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cede:	f043 0302 	orr.w	r3, r3, #2
 800cee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cee4:	4b1c      	ldr	r3, [pc, #112]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cee8:	f003 0302 	and.w	r3, r3, #2
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 800cef0:	2310      	movs	r3, #16
 800cef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cef4:	2312      	movs	r3, #18
 800cef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cef8:	2301      	movs	r3, #1
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cefc:	2303      	movs	r3, #3
 800cefe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800cf00:	2304      	movs	r3, #4
 800cf02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800cf04:	f107 031c 	add.w	r3, r7, #28
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4816      	ldr	r0, [pc, #88]	; (800cf64 <HAL_I2C_MspInit+0x124>)
 800cf0c:	f7f5 fc72 	bl	80027f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 800cf10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cf16:	2312      	movs	r3, #18
 800cf18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800cf22:	2304      	movs	r3, #4
 800cf24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800cf26:	f107 031c 	add.w	r3, r7, #28
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	480b      	ldr	r0, [pc, #44]	; (800cf5c <HAL_I2C_MspInit+0x11c>)
 800cf2e:	f7f5 fc61 	bl	80027f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cf32:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cf34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf36:	4a08      	ldr	r2, [pc, #32]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cf38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf3c:	6593      	str	r3, [r2, #88]	; 0x58
 800cf3e:	4b06      	ldr	r3, [pc, #24]	; (800cf58 <HAL_I2C_MspInit+0x118>)
 800cf40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf46:	60bb      	str	r3, [r7, #8]
 800cf48:	68bb      	ldr	r3, [r7, #8]
}
 800cf4a:	bf00      	nop
 800cf4c:	3730      	adds	r7, #48	; 0x30
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	40005400 	.word	0x40005400
 800cf58:	40021000 	.word	0x40021000
 800cf5c:	48000400 	.word	0x48000400
 800cf60:	40005800 	.word	0x40005800
 800cf64:	48001c00 	.word	0x48001c00

0800cf68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b090      	sub	sp, #64	; 0x40
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cf74:	2200      	movs	r2, #0
 800cf76:	601a      	str	r2, [r3, #0]
 800cf78:	605a      	str	r2, [r3, #4]
 800cf7a:	609a      	str	r2, [r3, #8]
 800cf7c:	60da      	str	r2, [r3, #12]
 800cf7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a68      	ldr	r2, [pc, #416]	; (800d128 <HAL_UART_MspInit+0x1c0>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d12b      	bne.n	800cfe2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800cf8a:	4b68      	ldr	r3, [pc, #416]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cf8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf8e:	4a67      	ldr	r2, [pc, #412]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cf90:	f043 0301 	orr.w	r3, r3, #1
 800cf94:	65d3      	str	r3, [r2, #92]	; 0x5c
 800cf96:	4b65      	ldr	r3, [pc, #404]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cf98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cfa2:	4b62      	ldr	r3, [pc, #392]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cfa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfa6:	4a61      	ldr	r2, [pc, #388]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cfa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfae:	4b5f      	ldr	r3, [pc, #380]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cfb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 800cfba:	f7f7 f805 	bl	8003fc8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800cfbe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800cfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cfd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4855      	ldr	r0, [pc, #340]	; (800d130 <HAL_UART_MspInit+0x1c8>)
 800cfdc:	f7f5 fc0a 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800cfe0:	e09e      	b.n	800d120 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a53      	ldr	r2, [pc, #332]	; (800d134 <HAL_UART_MspInit+0x1cc>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d147      	bne.n	800d07c <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 800cfec:	4b4f      	ldr	r3, [pc, #316]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cfee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cff0:	4a4e      	ldr	r2, [pc, #312]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cff6:	6613      	str	r3, [r2, #96]	; 0x60
 800cff8:	4b4c      	ldr	r3, [pc, #304]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800cffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d000:	623b      	str	r3, [r7, #32]
 800d002:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d004:	4b49      	ldr	r3, [pc, #292]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d008:	4a48      	ldr	r2, [pc, #288]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d00a:	f043 0302 	orr.w	r3, r3, #2
 800d00e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d010:	4b46      	ldr	r3, [pc, #280]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d014:	f003 0302 	and.w	r3, r3, #2
 800d018:	61fb      	str	r3, [r7, #28]
 800d01a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d01c:	4b43      	ldr	r3, [pc, #268]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d020:	4a42      	ldr	r2, [pc, #264]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d026:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d028:	4b40      	ldr	r3, [pc, #256]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d02a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d030:	61bb      	str	r3, [r7, #24]
 800d032:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800d034:	f7f6 ffc8 	bl	8003fc8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 800d038:	2340      	movs	r3, #64	; 0x40
 800d03a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d03c:	2302      	movs	r3, #2
 800d03e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d040:	2300      	movs	r3, #0
 800d042:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d044:	2303      	movs	r3, #3
 800d046:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d048:	2307      	movs	r3, #7
 800d04a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800d04c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d050:	4619      	mov	r1, r3
 800d052:	4839      	ldr	r0, [pc, #228]	; (800d138 <HAL_UART_MspInit+0x1d0>)
 800d054:	f7f5 fbce 	bl	80027f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 800d058:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d05c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d05e:	2302      	movs	r3, #2
 800d060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d062:	2300      	movs	r3, #0
 800d064:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d066:	2303      	movs	r3, #3
 800d068:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d06a:	2307      	movs	r3, #7
 800d06c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d06e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d072:	4619      	mov	r1, r3
 800d074:	482e      	ldr	r0, [pc, #184]	; (800d130 <HAL_UART_MspInit+0x1c8>)
 800d076:	f7f5 fbbd 	bl	80027f4 <HAL_GPIO_Init>
}
 800d07a:	e051      	b.n	800d120 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a2e      	ldr	r2, [pc, #184]	; (800d13c <HAL_UART_MspInit+0x1d4>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d14c      	bne.n	800d120 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d086:	4b29      	ldr	r3, [pc, #164]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d08a:	4a28      	ldr	r2, [pc, #160]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d08c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d090:	6593      	str	r3, [r2, #88]	; 0x58
 800d092:	4b26      	ldr	r3, [pc, #152]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d09e:	4b23      	ldr	r3, [pc, #140]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0a2:	4a22      	ldr	r2, [pc, #136]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d0a4:	f043 0308 	orr.w	r3, r3, #8
 800d0a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d0aa:	4b20      	ldr	r3, [pc, #128]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ae:	f003 0308 	and.w	r3, r3, #8
 800d0b2:	613b      	str	r3, [r7, #16]
 800d0b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0b6:	4b1d      	ldr	r3, [pc, #116]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ba:	4a1c      	ldr	r2, [pc, #112]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d0bc:	f043 0301 	orr.w	r3, r3, #1
 800d0c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d0c2:	4b1a      	ldr	r3, [pc, #104]	; (800d12c <HAL_UART_MspInit+0x1c4>)
 800d0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0c6:	f003 0301 	and.w	r3, r3, #1
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800d0ce:	2340      	movs	r3, #64	; 0x40
 800d0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0da:	2303      	movs	r3, #3
 800d0dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d0de:	2307      	movs	r3, #7
 800d0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800d0e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4815      	ldr	r0, [pc, #84]	; (800d140 <HAL_UART_MspInit+0x1d8>)
 800d0ea:	f7f5 fb83 	bl	80027f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800d0ee:	2304      	movs	r3, #4
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d0fe:	2307      	movs	r3, #7
 800d100:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800d102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d106:	4619      	mov	r1, r3
 800d108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d10c:	f7f5 fb72 	bl	80027f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d110:	2200      	movs	r2, #0
 800d112:	2100      	movs	r1, #0
 800d114:	2026      	movs	r0, #38	; 0x26
 800d116:	f7f4 faec 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d11a:	2026      	movs	r0, #38	; 0x26
 800d11c:	f7f4 fb05 	bl	800172a <HAL_NVIC_EnableIRQ>
}
 800d120:	bf00      	nop
 800d122:	3740      	adds	r7, #64	; 0x40
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	40008000 	.word	0x40008000
 800d12c:	40021000 	.word	0x40021000
 800d130:	48001800 	.word	0x48001800
 800d134:	40013800 	.word	0x40013800
 800d138:	48000400 	.word	0x48000400
 800d13c:	40004400 	.word	0x40004400
 800d140:	48000c00 	.word	0x48000c00

0800d144 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08a      	sub	sp, #40	; 0x28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d14c:	f107 0314 	add.w	r3, r7, #20
 800d150:	2200      	movs	r2, #0
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	605a      	str	r2, [r3, #4]
 800d156:	609a      	str	r2, [r3, #8]
 800d158:	60da      	str	r2, [r3, #12]
 800d15a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a26      	ldr	r2, [pc, #152]	; (800d1fc <HAL_QSPI_MspInit+0xb8>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d145      	bne.n	800d1f2 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800d166:	4b26      	ldr	r3, [pc, #152]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d16a:	4a25      	ldr	r2, [pc, #148]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d16c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d170:	6513      	str	r3, [r2, #80]	; 0x50
 800d172:	4b23      	ldr	r3, [pc, #140]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d17a:	613b      	str	r3, [r7, #16]
 800d17c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d17e:	4b20      	ldr	r3, [pc, #128]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d182:	4a1f      	ldr	r2, [pc, #124]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d184:	f043 0302 	orr.w	r3, r3, #2
 800d188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d18a:	4b1d      	ldr	r3, [pc, #116]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d18e:	f003 0302 	and.w	r3, r3, #2
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d196:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d19a:	4a19      	ldr	r2, [pc, #100]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d19c:	f043 0301 	orr.w	r3, r3, #1
 800d1a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d1a2:	4b17      	ldr	r3, [pc, #92]	; (800d200 <HAL_QSPI_MspInit+0xbc>)
 800d1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1a6:	f003 0301 	and.w	r3, r3, #1
 800d1aa:	60bb      	str	r3, [r7, #8]
 800d1ac:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800d1ae:	f640 0303 	movw	r3, #2051	; 0x803
 800d1b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1bc:	2303      	movs	r3, #3
 800d1be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800d1c0:	230a      	movs	r3, #10
 800d1c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d1c4:	f107 0314 	add.w	r3, r7, #20
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	480e      	ldr	r0, [pc, #56]	; (800d204 <HAL_QSPI_MspInit+0xc0>)
 800d1cc:	f7f5 fb12 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 800d1d0:	23c8      	movs	r3, #200	; 0xc8
 800d1d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800d1e0:	230a      	movs	r3, #10
 800d1e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1e4:	f107 0314 	add.w	r3, r7, #20
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d1ee:	f7f5 fb01 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800d1f2:	bf00      	nop
 800d1f4:	3728      	adds	r7, #40	; 0x28
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	a0001000 	.word	0xa0001000
 800d200:	40021000 	.word	0x40021000
 800d204:	48000400 	.word	0x48000400

0800d208 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08a      	sub	sp, #40	; 0x28
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d210:	f107 0314 	add.w	r3, r7, #20
 800d214:	2200      	movs	r2, #0
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	605a      	str	r2, [r3, #4]
 800d21a:	609a      	str	r2, [r3, #8]
 800d21c:	60da      	str	r2, [r3, #12]
 800d21e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a25      	ldr	r2, [pc, #148]	; (800d2bc <HAL_SD_MspInit+0xb4>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d144      	bne.n	800d2b4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d22a:	4b25      	ldr	r3, [pc, #148]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d22c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d22e:	4a24      	ldr	r2, [pc, #144]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d234:	6613      	str	r3, [r2, #96]	; 0x60
 800d236:	4b22      	ldr	r3, [pc, #136]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d23a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d23e:	613b      	str	r3, [r7, #16]
 800d240:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d242:	4b1f      	ldr	r3, [pc, #124]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d246:	4a1e      	ldr	r2, [pc, #120]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d248:	f043 0308 	orr.w	r3, r3, #8
 800d24c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d24e:	4b1c      	ldr	r3, [pc, #112]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d252:	f003 0308 	and.w	r3, r3, #8
 800d256:	60fb      	str	r3, [r7, #12]
 800d258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d25a:	4b19      	ldr	r3, [pc, #100]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d25e:	4a18      	ldr	r2, [pc, #96]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d260:	f043 0304 	orr.w	r3, r3, #4
 800d264:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d266:	4b16      	ldr	r3, [pc, #88]	; (800d2c0 <HAL_SD_MspInit+0xb8>)
 800d268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d26a:	f003 0304 	and.w	r3, r3, #4
 800d26e:	60bb      	str	r3, [r7, #8]
 800d270:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800d272:	2304      	movs	r3, #4
 800d274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d276:	2302      	movs	r3, #2
 800d278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d27a:	2300      	movs	r3, #0
 800d27c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d27e:	2303      	movs	r3, #3
 800d280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800d282:	230c      	movs	r3, #12
 800d284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800d286:	f107 0314 	add.w	r3, r7, #20
 800d28a:	4619      	mov	r1, r3
 800d28c:	480d      	ldr	r0, [pc, #52]	; (800d2c4 <HAL_SD_MspInit+0xbc>)
 800d28e:	f7f5 fab1 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 800d292:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800d296:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d298:	2302      	movs	r3, #2
 800d29a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d29c:	2300      	movs	r3, #0
 800d29e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800d2a4:	230c      	movs	r3, #12
 800d2a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d2a8:	f107 0314 	add.w	r3, r7, #20
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4806      	ldr	r0, [pc, #24]	; (800d2c8 <HAL_SD_MspInit+0xc0>)
 800d2b0:	f7f5 faa0 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800d2b4:	bf00      	nop
 800d2b6:	3728      	adds	r7, #40	; 0x28
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	40012800 	.word	0x40012800
 800d2c0:	40021000 	.word	0x40021000
 800d2c4:	48000c00 	.word	0x48000c00
 800d2c8:	48000800 	.word	0x48000800

0800d2cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08e      	sub	sp, #56	; 0x38
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2d8:	2200      	movs	r2, #0
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	605a      	str	r2, [r3, #4]
 800d2de:	609a      	str	r2, [r3, #8]
 800d2e0:	60da      	str	r2, [r3, #12]
 800d2e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a4b      	ldr	r2, [pc, #300]	; (800d418 <HAL_SPI_MspInit+0x14c>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d146      	bne.n	800d37c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d2ee:	4b4b      	ldr	r3, [pc, #300]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d2f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2f2:	4a4a      	ldr	r2, [pc, #296]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d2f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d2f8:	6613      	str	r3, [r2, #96]	; 0x60
 800d2fa:	4b48      	ldr	r3, [pc, #288]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d2fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d302:	623b      	str	r3, [r7, #32]
 800d304:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d306:	4b45      	ldr	r3, [pc, #276]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d30a:	4a44      	ldr	r2, [pc, #272]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d30c:	f043 0302 	orr.w	r3, r3, #2
 800d310:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d312:	4b42      	ldr	r3, [pc, #264]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d316:	f003 0302 	and.w	r3, r3, #2
 800d31a:	61fb      	str	r3, [r7, #28]
 800d31c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d31e:	4b3f      	ldr	r3, [pc, #252]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d322:	4a3e      	ldr	r2, [pc, #248]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d324:	f043 0301 	orr.w	r3, r3, #1
 800d328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d32a:	4b3c      	ldr	r3, [pc, #240]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d32e:	f003 0301 	and.w	r3, r3, #1
 800d332:	61bb      	str	r3, [r7, #24]
 800d334:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800d336:	2330      	movs	r3, #48	; 0x30
 800d338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d33a:	2302      	movs	r3, #2
 800d33c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d33e:	2300      	movs	r3, #0
 800d340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d342:	2303      	movs	r3, #3
 800d344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d346:	2305      	movs	r3, #5
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d34a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d34e:	4619      	mov	r1, r3
 800d350:	4833      	ldr	r0, [pc, #204]	; (800d420 <HAL_SPI_MspInit+0x154>)
 800d352:	f7f5 fa4f 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 800d356:	f248 0320 	movw	r3, #32800	; 0x8020
 800d35a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d35c:	2302      	movs	r3, #2
 800d35e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d360:	2300      	movs	r3, #0
 800d362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d364:	2303      	movs	r3, #3
 800d366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d368:	2305      	movs	r3, #5
 800d36a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d36c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d370:	4619      	mov	r1, r3
 800d372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d376:	f7f5 fa3d 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d37a:	e049      	b.n	800d410 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a28      	ldr	r2, [pc, #160]	; (800d424 <HAL_SPI_MspInit+0x158>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d144      	bne.n	800d410 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d386:	4b25      	ldr	r3, [pc, #148]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d38a:	4a24      	ldr	r2, [pc, #144]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d38c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d390:	6593      	str	r3, [r2, #88]	; 0x58
 800d392:	4b22      	ldr	r3, [pc, #136]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d39a:	617b      	str	r3, [r7, #20]
 800d39c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800d39e:	4b1f      	ldr	r3, [pc, #124]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3a2:	4a1e      	ldr	r2, [pc, #120]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d3a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d3aa:	4b1c      	ldr	r3, [pc, #112]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3b2:	613b      	str	r3, [r7, #16]
 800d3b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3b6:	4b19      	ldr	r3, [pc, #100]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3ba:	4a18      	ldr	r2, [pc, #96]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d3bc:	f043 0302 	orr.w	r3, r3, #2
 800d3c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d3c2:	4b16      	ldr	r3, [pc, #88]	; (800d41c <HAL_SPI_MspInit+0x150>)
 800d3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3c6:	f003 0302 	and.w	r3, r3, #2
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 800d3ce:	2306      	movs	r3, #6
 800d3d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d3de:	2305      	movs	r3, #5
 800d3e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	480f      	ldr	r0, [pc, #60]	; (800d428 <HAL_SPI_MspInit+0x15c>)
 800d3ea:	f7f5 fa03 	bl	80027f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800d3ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3fc:	2303      	movs	r3, #3
 800d3fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d400:	2305      	movs	r3, #5
 800d402:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800d404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d408:	4619      	mov	r1, r3
 800d40a:	4805      	ldr	r0, [pc, #20]	; (800d420 <HAL_SPI_MspInit+0x154>)
 800d40c:	f7f5 f9f2 	bl	80027f4 <HAL_GPIO_Init>
}
 800d410:	bf00      	nop
 800d412:	3738      	adds	r7, #56	; 0x38
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	40013000 	.word	0x40013000
 800d41c:	40021000 	.word	0x40021000
 800d420:	48000400 	.word	0x48000400
 800d424:	40003800 	.word	0x40003800
 800d428:	48002000 	.word	0x48002000

0800d42c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800d432:	1d3b      	adds	r3, r7, #4
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	605a      	str	r2, [r3, #4]
 800d43a:	609a      	str	r2, [r3, #8]
 800d43c:	60da      	str	r2, [r3, #12]
 800d43e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800d440:	4b2b      	ldr	r3, [pc, #172]	; (800d4f0 <HAL_FMC_MspInit+0xc4>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d14f      	bne.n	800d4e8 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 800d448:	4b29      	ldr	r3, [pc, #164]	; (800d4f0 <HAL_FMC_MspInit+0xc4>)
 800d44a:	2201      	movs	r2, #1
 800d44c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800d44e:	4b29      	ldr	r3, [pc, #164]	; (800d4f4 <HAL_FMC_MspInit+0xc8>)
 800d450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d452:	4a28      	ldr	r2, [pc, #160]	; (800d4f4 <HAL_FMC_MspInit+0xc8>)
 800d454:	f043 0301 	orr.w	r3, r3, #1
 800d458:	6513      	str	r3, [r2, #80]	; 0x50
 800d45a:	4b26      	ldr	r3, [pc, #152]	; (800d4f4 <HAL_FMC_MspInit+0xc8>)
 800d45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d45e:	f003 0301 	and.w	r3, r3, #1
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 800d466:	f64f 7383 	movw	r3, #65411	; 0xff83
 800d46a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d46c:	2302      	movs	r3, #2
 800d46e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d470:	2300      	movs	r3, #0
 800d472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d474:	2303      	movs	r3, #3
 800d476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d478:	230c      	movs	r3, #12
 800d47a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d47c:	1d3b      	adds	r3, r7, #4
 800d47e:	4619      	mov	r1, r3
 800d480:	481d      	ldr	r0, [pc, #116]	; (800d4f8 <HAL_FMC_MspInit+0xcc>)
 800d482:	f7f5 f9b7 	bl	80027f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 800d486:	f240 233f 	movw	r3, #575	; 0x23f
 800d48a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d48c:	2302      	movs	r3, #2
 800d48e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d490:	2300      	movs	r3, #0
 800d492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d494:	2303      	movs	r3, #3
 800d496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d498:	230c      	movs	r3, #12
 800d49a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d49c:	1d3b      	adds	r3, r7, #4
 800d49e:	4619      	mov	r1, r3
 800d4a0:	4816      	ldr	r0, [pc, #88]	; (800d4fc <HAL_FMC_MspInit+0xd0>)
 800d4a2:	f7f5 f9a7 	bl	80027f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 800d4a6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800d4aa:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4b4:	2303      	movs	r3, #3
 800d4b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d4b8:	230c      	movs	r3, #12
 800d4ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d4bc:	1d3b      	adds	r3, r7, #4
 800d4be:	4619      	mov	r1, r3
 800d4c0:	480f      	ldr	r0, [pc, #60]	; (800d500 <HAL_FMC_MspInit+0xd4>)
 800d4c2:	f7f5 f997 	bl	80027f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 800d4c6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800d4ca:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d4d8:	230c      	movs	r3, #12
 800d4da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d4dc:	1d3b      	adds	r3, r7, #4
 800d4de:	4619      	mov	r1, r3
 800d4e0:	4808      	ldr	r0, [pc, #32]	; (800d504 <HAL_FMC_MspInit+0xd8>)
 800d4e2:	f7f5 f987 	bl	80027f4 <HAL_GPIO_Init>
 800d4e6:	e000      	b.n	800d4ea <HAL_FMC_MspInit+0xbe>
    return;
 800d4e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800d4ea:	3718      	adds	r7, #24
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	20000248 	.word	0x20000248
 800d4f4:	40021000 	.word	0x40021000
 800d4f8:	48001000 	.word	0x48001000
 800d4fc:	48001800 	.word	0x48001800
 800d500:	48000c00 	.word	0x48000c00
 800d504:	48001400 	.word	0x48001400

0800d508 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800d510:	f7ff ff8c 	bl	800d42c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800d514:	bf00      	nop
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b08a      	sub	sp, #40	; 0x28
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a33      	ldr	r2, [pc, #204]	; (800d5f8 <HAL_SAI_MspInit+0xdc>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d135      	bne.n	800d59a <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800d52e:	4b33      	ldr	r3, [pc, #204]	; (800d5fc <HAL_SAI_MspInit+0xe0>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10b      	bne.n	800d54e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d536:	4b32      	ldr	r3, [pc, #200]	; (800d600 <HAL_SAI_MspInit+0xe4>)
 800d538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d53a:	4a31      	ldr	r2, [pc, #196]	; (800d600 <HAL_SAI_MspInit+0xe4>)
 800d53c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d540:	6613      	str	r3, [r2, #96]	; 0x60
 800d542:	4b2f      	ldr	r3, [pc, #188]	; (800d600 <HAL_SAI_MspInit+0xe4>)
 800d544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d54a:	613b      	str	r3, [r7, #16]
 800d54c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800d54e:	4b2b      	ldr	r3, [pc, #172]	; (800d5fc <HAL_SAI_MspInit+0xe0>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	3301      	adds	r3, #1
 800d554:	4a29      	ldr	r2, [pc, #164]	; (800d5fc <HAL_SAI_MspInit+0xe0>)
 800d556:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 800d558:	2354      	movs	r3, #84	; 0x54
 800d55a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d55c:	2302      	movs	r3, #2
 800d55e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d560:	2300      	movs	r3, #0
 800d562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d564:	2300      	movs	r3, #0
 800d566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800d568:	230d      	movs	r3, #13
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d56c:	f107 0314 	add.w	r3, r7, #20
 800d570:	4619      	mov	r1, r3
 800d572:	4824      	ldr	r0, [pc, #144]	; (800d604 <HAL_SAI_MspInit+0xe8>)
 800d574:	f7f5 f93e 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d57c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d57e:	2302      	movs	r3, #2
 800d580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d582:	2300      	movs	r3, #0
 800d584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d586:	2300      	movs	r3, #0
 800d588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800d58a:	230d      	movs	r3, #13
 800d58c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d58e:	f107 0314 	add.w	r3, r7, #20
 800d592:	4619      	mov	r1, r3
 800d594:	481c      	ldr	r0, [pc, #112]	; (800d608 <HAL_SAI_MspInit+0xec>)
 800d596:	f7f5 f92d 	bl	80027f4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a1b      	ldr	r2, [pc, #108]	; (800d60c <HAL_SAI_MspInit+0xf0>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d124      	bne.n	800d5ee <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800d5a4:	4b15      	ldr	r3, [pc, #84]	; (800d5fc <HAL_SAI_MspInit+0xe0>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d10b      	bne.n	800d5c4 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d5ac:	4b14      	ldr	r3, [pc, #80]	; (800d600 <HAL_SAI_MspInit+0xe4>)
 800d5ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5b0:	4a13      	ldr	r2, [pc, #76]	; (800d600 <HAL_SAI_MspInit+0xe4>)
 800d5b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5b6:	6613      	str	r3, [r2, #96]	; 0x60
 800d5b8:	4b11      	ldr	r3, [pc, #68]	; (800d600 <HAL_SAI_MspInit+0xe4>)
 800d5ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800d5c4:	4b0d      	ldr	r3, [pc, #52]	; (800d5fc <HAL_SAI_MspInit+0xe0>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	4a0c      	ldr	r2, [pc, #48]	; (800d5fc <HAL_SAI_MspInit+0xe0>)
 800d5cc:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800d5ce:	2308      	movs	r3, #8
 800d5d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800d5de:	230d      	movs	r3, #13
 800d5e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800d5e2:	f107 0314 	add.w	r3, r7, #20
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4806      	ldr	r0, [pc, #24]	; (800d604 <HAL_SAI_MspInit+0xe8>)
 800d5ea:	f7f5 f903 	bl	80027f4 <HAL_GPIO_Init>

    }
}
 800d5ee:	bf00      	nop
 800d5f0:	3728      	adds	r7, #40	; 0x28
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	40015404 	.word	0x40015404
 800d5fc:	2000024c 	.word	0x2000024c
 800d600:	40021000 	.word	0x40021000
 800d604:	48001000 	.word	0x48001000
 800d608:	48000400 	.word	0x48000400
 800d60c:	40015424 	.word	0x40015424

0800d610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d610:	b480      	push	{r7}
 800d612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d614:	bf00      	nop
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d61e:	b480      	push	{r7}
 800d620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d622:	e7fe      	b.n	800d622 <HardFault_Handler+0x4>

0800d624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d624:	b480      	push	{r7}
 800d626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d628:	e7fe      	b.n	800d628 <MemManage_Handler+0x4>

0800d62a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d62a:	b480      	push	{r7}
 800d62c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d62e:	e7fe      	b.n	800d62e <BusFault_Handler+0x4>

0800d630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d630:	b480      	push	{r7}
 800d632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d634:	e7fe      	b.n	800d634 <UsageFault_Handler+0x4>

0800d636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d636:	b480      	push	{r7}
 800d638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d63a:	bf00      	nop
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d644:	b480      	push	{r7}
 800d646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d648:	bf00      	nop
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d652:	b480      	push	{r7}
 800d654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d656:	bf00      	nop
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d664:	f7f2 ffee 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d668:	bf00      	nop
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800d670:	4802      	ldr	r0, [pc, #8]	; (800d67c <DMA1_Channel4_IRQHandler+0x10>)
 800d672:	f7f4 ffe0 	bl	8002636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800d676:	bf00      	nop
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	2002f7f0 	.word	0x2002f7f0

0800d680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d684:	4802      	ldr	r0, [pc, #8]	; (800d690 <USART2_IRQHandler+0x10>)
 800d686:	f7f9 ff4b 	bl	8007520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d68a:	bf00      	nop
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	2002f970 	.word	0x2002f970

0800d694 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 800d698:	4802      	ldr	r0, [pc, #8]	; (800d6a4 <DFSDM1_FLT0_IRQHandler+0x10>)
 800d69a:	f7f4 fb87 	bl	8001dac <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 800d69e:	bf00      	nop
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	200005e8 	.word	0x200005e8

0800d6a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800d6ac:	4802      	ldr	r0, [pc, #8]	; (800d6b8 <OTG_FS_IRQHandler+0x10>)
 800d6ae:	f7f5 fcdd 	bl	800306c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800d6b2:	bf00      	nop
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	20030d18 	.word	0x20030d18

0800d6bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d6c4:	4b11      	ldr	r3, [pc, #68]	; (800d70c <_sbrk+0x50>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <_sbrk+0x16>
		heap_end = &end;
 800d6cc:	4b0f      	ldr	r3, [pc, #60]	; (800d70c <_sbrk+0x50>)
 800d6ce:	4a10      	ldr	r2, [pc, #64]	; (800d710 <_sbrk+0x54>)
 800d6d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d6d2:	4b0e      	ldr	r3, [pc, #56]	; (800d70c <_sbrk+0x50>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d6d8:	4b0c      	ldr	r3, [pc, #48]	; (800d70c <_sbrk+0x50>)
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4413      	add	r3, r2
 800d6e0:	466a      	mov	r2, sp
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d907      	bls.n	800d6f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d6e6:	f000 fe6f 	bl	800e3c8 <__errno>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	230c      	movs	r3, #12
 800d6ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d6f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6f4:	e006      	b.n	800d704 <_sbrk+0x48>
	}

	heap_end += incr;
 800d6f6:	4b05      	ldr	r3, [pc, #20]	; (800d70c <_sbrk+0x50>)
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	4a03      	ldr	r2, [pc, #12]	; (800d70c <_sbrk+0x50>)
 800d700:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d702:	68fb      	ldr	r3, [r7, #12]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	20000250 	.word	0x20000250
 800d710:	20031328 	.word	0x20031328

0800d714 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800d714:	b480      	push	{r7}
 800d716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d718:	4b17      	ldr	r3, [pc, #92]	; (800d778 <SystemInit+0x64>)
 800d71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d71e:	4a16      	ldr	r2, [pc, #88]	; (800d778 <SystemInit+0x64>)
 800d720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800d728:	4b14      	ldr	r3, [pc, #80]	; (800d77c <SystemInit+0x68>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a13      	ldr	r2, [pc, #76]	; (800d77c <SystemInit+0x68>)
 800d72e:	f043 0301 	orr.w	r3, r3, #1
 800d732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800d734:	4b11      	ldr	r3, [pc, #68]	; (800d77c <SystemInit+0x68>)
 800d736:	2200      	movs	r2, #0
 800d738:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800d73a:	4b10      	ldr	r3, [pc, #64]	; (800d77c <SystemInit+0x68>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a0f      	ldr	r2, [pc, #60]	; (800d77c <SystemInit+0x68>)
 800d740:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800d744:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800d748:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800d74a:	4b0c      	ldr	r3, [pc, #48]	; (800d77c <SystemInit+0x68>)
 800d74c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d750:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <SystemInit+0x68>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a09      	ldr	r2, [pc, #36]	; (800d77c <SystemInit+0x68>)
 800d758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d75c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800d75e:	4b07      	ldr	r3, [pc, #28]	; (800d77c <SystemInit+0x68>)
 800d760:	2200      	movs	r2, #0
 800d762:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d764:	4b04      	ldr	r3, [pc, #16]	; (800d778 <SystemInit+0x64>)
 800d766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d76a:	609a      	str	r2, [r3, #8]
#endif
}
 800d76c:	bf00      	nop
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	e000ed00 	.word	0xe000ed00
 800d77c:	40021000 	.word	0x40021000

0800d780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d784:	2200      	movs	r2, #0
 800d786:	4912      	ldr	r1, [pc, #72]	; (800d7d0 <MX_USB_DEVICE_Init+0x50>)
 800d788:	4812      	ldr	r0, [pc, #72]	; (800d7d4 <MX_USB_DEVICE_Init+0x54>)
 800d78a:	f7fc ff92 	bl	800a6b2 <USBD_Init>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d001      	beq.n	800d798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d794:	f7ff f8ba 	bl	800c90c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d798:	490f      	ldr	r1, [pc, #60]	; (800d7d8 <MX_USB_DEVICE_Init+0x58>)
 800d79a:	480e      	ldr	r0, [pc, #56]	; (800d7d4 <MX_USB_DEVICE_Init+0x54>)
 800d79c:	f7fc ffb4 	bl	800a708 <USBD_RegisterClass>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d7a6:	f7ff f8b1 	bl	800c90c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d7aa:	490c      	ldr	r1, [pc, #48]	; (800d7dc <MX_USB_DEVICE_Init+0x5c>)
 800d7ac:	4809      	ldr	r0, [pc, #36]	; (800d7d4 <MX_USB_DEVICE_Init+0x54>)
 800d7ae:	f7fc ff11 	bl	800a5d4 <USBD_CDC_RegisterInterface>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d7b8:	f7ff f8a8 	bl	800c90c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d7bc:	4805      	ldr	r0, [pc, #20]	; (800d7d4 <MX_USB_DEVICE_Init+0x54>)
 800d7be:	f7fc ffbd 	bl	800a73c <USBD_Start>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d7c8:	f7ff f8a0 	bl	800c90c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d7cc:	bf00      	nop
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	2000012c 	.word	0x2000012c
 800d7d4:	2002fa7c 	.word	0x2002fa7c
 800d7d8:	20000014 	.word	0x20000014
 800d7dc:	2000011c 	.word	0x2000011c

0800d7e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	4905      	ldr	r1, [pc, #20]	; (800d7fc <CDC_Init_FS+0x1c>)
 800d7e8:	4805      	ldr	r0, [pc, #20]	; (800d800 <CDC_Init_FS+0x20>)
 800d7ea:	f7fc ff0a 	bl	800a602 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d7ee:	4905      	ldr	r1, [pc, #20]	; (800d804 <CDC_Init_FS+0x24>)
 800d7f0:	4803      	ldr	r0, [pc, #12]	; (800d800 <CDC_Init_FS+0x20>)
 800d7f2:	f7fc ff20 	bl	800a636 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d7f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	20030518 	.word	0x20030518
 800d800:	2002fa7c 	.word	0x2002fa7c
 800d804:	2002fd18 	.word	0x2002fd18

0800d808 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d80c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d80e:	4618      	mov	r0, r3
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	6039      	str	r1, [r7, #0]
 800d822:	71fb      	strb	r3, [r7, #7]
 800d824:	4613      	mov	r3, r2
 800d826:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d828:	79fb      	ldrb	r3, [r7, #7]
 800d82a:	2b23      	cmp	r3, #35	; 0x23
 800d82c:	d84a      	bhi.n	800d8c4 <CDC_Control_FS+0xac>
 800d82e:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <CDC_Control_FS+0x1c>)
 800d830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d834:	0800d8c5 	.word	0x0800d8c5
 800d838:	0800d8c5 	.word	0x0800d8c5
 800d83c:	0800d8c5 	.word	0x0800d8c5
 800d840:	0800d8c5 	.word	0x0800d8c5
 800d844:	0800d8c5 	.word	0x0800d8c5
 800d848:	0800d8c5 	.word	0x0800d8c5
 800d84c:	0800d8c5 	.word	0x0800d8c5
 800d850:	0800d8c5 	.word	0x0800d8c5
 800d854:	0800d8c5 	.word	0x0800d8c5
 800d858:	0800d8c5 	.word	0x0800d8c5
 800d85c:	0800d8c5 	.word	0x0800d8c5
 800d860:	0800d8c5 	.word	0x0800d8c5
 800d864:	0800d8c5 	.word	0x0800d8c5
 800d868:	0800d8c5 	.word	0x0800d8c5
 800d86c:	0800d8c5 	.word	0x0800d8c5
 800d870:	0800d8c5 	.word	0x0800d8c5
 800d874:	0800d8c5 	.word	0x0800d8c5
 800d878:	0800d8c5 	.word	0x0800d8c5
 800d87c:	0800d8c5 	.word	0x0800d8c5
 800d880:	0800d8c5 	.word	0x0800d8c5
 800d884:	0800d8c5 	.word	0x0800d8c5
 800d888:	0800d8c5 	.word	0x0800d8c5
 800d88c:	0800d8c5 	.word	0x0800d8c5
 800d890:	0800d8c5 	.word	0x0800d8c5
 800d894:	0800d8c5 	.word	0x0800d8c5
 800d898:	0800d8c5 	.word	0x0800d8c5
 800d89c:	0800d8c5 	.word	0x0800d8c5
 800d8a0:	0800d8c5 	.word	0x0800d8c5
 800d8a4:	0800d8c5 	.word	0x0800d8c5
 800d8a8:	0800d8c5 	.word	0x0800d8c5
 800d8ac:	0800d8c5 	.word	0x0800d8c5
 800d8b0:	0800d8c5 	.word	0x0800d8c5
 800d8b4:	0800d8c5 	.word	0x0800d8c5
 800d8b8:	0800d8c5 	.word	0x0800d8c5
 800d8bc:	0800d8c5 	.word	0x0800d8c5
 800d8c0:	0800d8c5 	.word	0x0800d8c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d8c4:	bf00      	nop
  }

  return (USBD_OK);
 800d8c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	4805      	ldr	r0, [pc, #20]	; (800d8f8 <CDC_Receive_FS+0x24>)
 800d8e2:	f7fc fea8 	bl	800a636 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d8e6:	4804      	ldr	r0, [pc, #16]	; (800d8f8 <CDC_Receive_FS+0x24>)
 800d8e8:	f7fc feb9 	bl	800a65e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d8ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	2002fa7c 	.word	0x2002fa7c

0800d8fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08a      	sub	sp, #40	; 0x28
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d904:	f107 0314 	add.w	r3, r7, #20
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	605a      	str	r2, [r3, #4]
 800d90e:	609a      	str	r2, [r3, #8]
 800d910:	60da      	str	r2, [r3, #12]
 800d912:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d91c:	d14e      	bne.n	800d9bc <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d91e:	4b29      	ldr	r3, [pc, #164]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d922:	4a28      	ldr	r2, [pc, #160]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d924:	f043 0301 	orr.w	r3, r3, #1
 800d928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d92a:	4b26      	ldr	r3, [pc, #152]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d92c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d92e:	f003 0301 	and.w	r3, r3, #1
 800d932:	613b      	str	r3, [r7, #16]
 800d934:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800d936:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d93a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d93c:	2302      	movs	r3, #2
 800d93e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d944:	2303      	movs	r3, #3
 800d946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d948:	230a      	movs	r3, #10
 800d94a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d94c:	f107 0314 	add.w	r3, r7, #20
 800d950:	4619      	mov	r1, r3
 800d952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d956:	f7f4 ff4d 	bl	80027f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d95a:	4b1a      	ldr	r3, [pc, #104]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d95e:	4a19      	ldr	r2, [pc, #100]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d964:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d966:	4b17      	ldr	r3, [pc, #92]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d96a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d96e:	60fb      	str	r3, [r7, #12]
 800d970:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d972:	4b14      	ldr	r3, [pc, #80]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d114      	bne.n	800d9a8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d97e:	4b11      	ldr	r3, [pc, #68]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d982:	4a10      	ldr	r2, [pc, #64]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d988:	6593      	str	r3, [r2, #88]	; 0x58
 800d98a:	4b0e      	ldr	r3, [pc, #56]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d98e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d992:	60bb      	str	r3, [r7, #8]
 800d994:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800d996:	f7f6 fb07 	bl	8003fa8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d99a:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d99e:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <HAL_PCD_MspInit+0xc8>)
 800d9a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9a4:	6593      	str	r3, [r2, #88]	; 0x58
 800d9a6:	e001      	b.n	800d9ac <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d9a8:	f7f6 fafe 	bl	8003fa8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	2043      	movs	r0, #67	; 0x43
 800d9b2:	f7f3 fe9e 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d9b6:	2043      	movs	r0, #67	; 0x43
 800d9b8:	f7f3 feb7 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d9bc:	bf00      	nop
 800d9be:	3728      	adds	r7, #40	; 0x28
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	40021000 	.word	0x40021000

0800d9c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f7fc fef5 	bl	800a7ce <USBD_LL_SetupStage>
}
 800d9e4:	bf00      	nop
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d9fe:	78fa      	ldrb	r2, [r7, #3]
 800da00:	6879      	ldr	r1, [r7, #4]
 800da02:	4613      	mov	r3, r2
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	1a9b      	subs	r3, r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	440b      	add	r3, r1
 800da0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	78fb      	ldrb	r3, [r7, #3]
 800da14:	4619      	mov	r1, r3
 800da16:	f7fc ff25 	bl	800a864 <USBD_LL_DataOutStage>
}
 800da1a:	bf00      	nop
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b082      	sub	sp, #8
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	460b      	mov	r3, r1
 800da2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800da34:	78fa      	ldrb	r2, [r7, #3]
 800da36:	6879      	ldr	r1, [r7, #4]
 800da38:	4613      	mov	r3, r2
 800da3a:	00db      	lsls	r3, r3, #3
 800da3c:	1a9b      	subs	r3, r3, r2
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	440b      	add	r3, r1
 800da42:	3348      	adds	r3, #72	; 0x48
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	78fb      	ldrb	r3, [r7, #3]
 800da48:	4619      	mov	r1, r3
 800da4a:	f7fc ff7c 	bl	800a946 <USBD_LL_DataInStage>
}
 800da4e:	bf00      	nop
 800da50:	3708      	adds	r7, #8
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800da64:	4618      	mov	r0, r3
 800da66:	f7fd f88a 	bl	800ab7e <USBD_LL_SOF>
}
 800da6a:	bf00      	nop
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800da72:	b580      	push	{r7, lr}
 800da74:	b084      	sub	sp, #16
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800da7a:	2301      	movs	r3, #1
 800da7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	2b02      	cmp	r3, #2
 800da84:	d001      	beq.n	800da8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800da86:	f7fe ff41 	bl	800c90c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800da90:	7bfa      	ldrb	r2, [r7, #15]
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f7fd f83c 	bl	800ab12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fc fff5 	bl	800aa90 <USBD_LL_Reset>
}
 800daa6:	bf00      	nop
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
	...

0800dab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	6812      	ldr	r2, [r2, #0]
 800dac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800daca:	f043 0301 	orr.w	r3, r3, #1
 800dace:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fd f82b 	bl	800ab32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6a1b      	ldr	r3, [r3, #32]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d005      	beq.n	800daf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dae4:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <HAL_PCD_SuspendCallback+0x48>)
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	4a03      	ldr	r2, [pc, #12]	; (800daf8 <HAL_PCD_SuspendCallback+0x48>)
 800daea:	f043 0306 	orr.w	r3, r3, #6
 800daee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	e000ed00 	.word	0xe000ed00

0800dafc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	6812      	ldr	r2, [r2, #0]
 800db12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db16:	f023 0301 	bic.w	r3, r3, #1
 800db1a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6a1b      	ldr	r3, [r3, #32]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d007      	beq.n	800db34 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db24:	4b08      	ldr	r3, [pc, #32]	; (800db48 <HAL_PCD_ResumeCallback+0x4c>)
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	4a07      	ldr	r2, [pc, #28]	; (800db48 <HAL_PCD_ResumeCallback+0x4c>)
 800db2a:	f023 0306 	bic.w	r3, r3, #6
 800db2e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800db30:	f000 fafa 	bl	800e128 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fd f80e 	bl	800ab5c <USBD_LL_Resume>
}
 800db40:	bf00      	nop
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	e000ed00 	.word	0xe000ed00

0800db4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db5e:	78fa      	ldrb	r2, [r7, #3]
 800db60:	4611      	mov	r1, r2
 800db62:	4618      	mov	r0, r3
 800db64:	f7fd f832 	bl	800abcc <USBD_LL_IsoOUTIncomplete>
}
 800db68:	bf00      	nop
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db82:	78fa      	ldrb	r2, [r7, #3]
 800db84:	4611      	mov	r1, r2
 800db86:	4618      	mov	r0, r3
 800db88:	f7fd f813 	bl	800abb2 <USBD_LL_IsoINIncomplete>
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fd f81f 	bl	800abe6 <USBD_LL_DevConnected>
}
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fd f81c 	bl	800abfc <USBD_LL_DevDisconnected>
}
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d13c      	bne.n	800dc56 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dbdc:	4a20      	ldr	r2, [pc, #128]	; (800dc60 <USBD_LL_Init+0x94>)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4a1e      	ldr	r2, [pc, #120]	; (800dc60 <USBD_LL_Init+0x94>)
 800dbe8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dbec:	4b1c      	ldr	r3, [pc, #112]	; (800dc60 <USBD_LL_Init+0x94>)
 800dbee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dbf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dbf4:	4b1a      	ldr	r3, [pc, #104]	; (800dc60 <USBD_LL_Init+0x94>)
 800dbf6:	2206      	movs	r2, #6
 800dbf8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dbfa:	4b19      	ldr	r3, [pc, #100]	; (800dc60 <USBD_LL_Init+0x94>)
 800dbfc:	2202      	movs	r2, #2
 800dbfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc00:	4b17      	ldr	r3, [pc, #92]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc02:	2202      	movs	r2, #2
 800dc04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc06:	4b16      	ldr	r3, [pc, #88]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dc0c:	4b14      	ldr	r3, [pc, #80]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc0e:	2200      	movs	r2, #0
 800dc10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dc12:	4b13      	ldr	r3, [pc, #76]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc14:	2200      	movs	r2, #0
 800dc16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800dc18:	4b11      	ldr	r3, [pc, #68]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc1e:	4b10      	ldr	r3, [pc, #64]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc24:	4b0e      	ldr	r3, [pc, #56]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc2a:	480d      	ldr	r0, [pc, #52]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc2c:	f7f5 f8cb 	bl	8002dc6 <HAL_PCD_Init>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dc36:	f7fe fe69 	bl	800c90c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dc3a:	2180      	movs	r1, #128	; 0x80
 800dc3c:	4808      	ldr	r0, [pc, #32]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc3e:	f7f6 f90a 	bl	8003e56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc42:	2240      	movs	r2, #64	; 0x40
 800dc44:	2100      	movs	r1, #0
 800dc46:	4806      	ldr	r0, [pc, #24]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc48:	f7f6 f8be 	bl	8003dc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc4c:	2280      	movs	r2, #128	; 0x80
 800dc4e:	2101      	movs	r1, #1
 800dc50:	4803      	ldr	r0, [pc, #12]	; (800dc60 <USBD_LL_Init+0x94>)
 800dc52:	f7f6 f8b9 	bl	8003dc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	20030d18 	.word	0x20030d18

0800dc64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc70:	2300      	movs	r3, #0
 800dc72:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7f5 f9c7 	bl	800300e <HAL_PCD_Start>
 800dc80:	4603      	mov	r3, r0
 800dc82:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800dc84:	7bbb      	ldrb	r3, [r7, #14]
 800dc86:	2b03      	cmp	r3, #3
 800dc88:	d816      	bhi.n	800dcb8 <USBD_LL_Start+0x54>
 800dc8a:	a201      	add	r2, pc, #4	; (adr r2, 800dc90 <USBD_LL_Start+0x2c>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dca1 	.word	0x0800dca1
 800dc94:	0800dca7 	.word	0x0800dca7
 800dc98:	0800dcad 	.word	0x0800dcad
 800dc9c:	0800dcb3 	.word	0x0800dcb3
    case HAL_OK :
      usb_status = USBD_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	73fb      	strb	r3, [r7, #15]
    break;
 800dca4:	e00b      	b.n	800dcbe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dca6:	2302      	movs	r3, #2
 800dca8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcaa:	e008      	b.n	800dcbe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcac:	2301      	movs	r3, #1
 800dcae:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb0:	e005      	b.n	800dcbe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb6:	e002      	b.n	800dcbe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800dcb8:	2302      	movs	r3, #2
 800dcba:	73fb      	strb	r3, [r7, #15]
    break;
 800dcbc:	bf00      	nop
  }
  return usb_status;
 800dcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	4611      	mov	r1, r2
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	70fb      	strb	r3, [r7, #3]
 800dcda:	460b      	mov	r3, r1
 800dcdc:	70bb      	strb	r3, [r7, #2]
 800dcde:	4613      	mov	r3, r2
 800dce0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dcf0:	78bb      	ldrb	r3, [r7, #2]
 800dcf2:	883a      	ldrh	r2, [r7, #0]
 800dcf4:	78f9      	ldrb	r1, [r7, #3]
 800dcf6:	f7f5 fd60 	bl	80037ba <HAL_PCD_EP_Open>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dcfe:	7bbb      	ldrb	r3, [r7, #14]
 800dd00:	2b03      	cmp	r3, #3
 800dd02:	d817      	bhi.n	800dd34 <USBD_LL_OpenEP+0x6c>
 800dd04:	a201      	add	r2, pc, #4	; (adr r2, 800dd0c <USBD_LL_OpenEP+0x44>)
 800dd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0a:	bf00      	nop
 800dd0c:	0800dd1d 	.word	0x0800dd1d
 800dd10:	0800dd23 	.word	0x0800dd23
 800dd14:	0800dd29 	.word	0x0800dd29
 800dd18:	0800dd2f 	.word	0x0800dd2f
    case HAL_OK :
      usb_status = USBD_OK;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd20:	e00b      	b.n	800dd3a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd22:	2302      	movs	r3, #2
 800dd24:	73fb      	strb	r3, [r7, #15]
    break;
 800dd26:	e008      	b.n	800dd3a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd2c:	e005      	b.n	800dd3a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd2e:	2302      	movs	r3, #2
 800dd30:	73fb      	strb	r3, [r7, #15]
    break;
 800dd32:	e002      	b.n	800dd3a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800dd34:	2302      	movs	r3, #2
 800dd36:	73fb      	strb	r3, [r7, #15]
    break;
 800dd38:	bf00      	nop
  }
  return usb_status;
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dd5e:	78fa      	ldrb	r2, [r7, #3]
 800dd60:	4611      	mov	r1, r2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f5 fd91 	bl	800388a <HAL_PCD_EP_Close>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
 800dd6e:	2b03      	cmp	r3, #3
 800dd70:	d816      	bhi.n	800dda0 <USBD_LL_CloseEP+0x5c>
 800dd72:	a201      	add	r2, pc, #4	; (adr r2, 800dd78 <USBD_LL_CloseEP+0x34>)
 800dd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd78:	0800dd89 	.word	0x0800dd89
 800dd7c:	0800dd8f 	.word	0x0800dd8f
 800dd80:	0800dd95 	.word	0x0800dd95
 800dd84:	0800dd9b 	.word	0x0800dd9b
    case HAL_OK :
      usb_status = USBD_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd8c:	e00b      	b.n	800dda6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd8e:	2302      	movs	r3, #2
 800dd90:	73fb      	strb	r3, [r7, #15]
    break;
 800dd92:	e008      	b.n	800dda6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd94:	2301      	movs	r3, #1
 800dd96:	73fb      	strb	r3, [r7, #15]
    break;
 800dd98:	e005      	b.n	800dda6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd9e:	e002      	b.n	800dda6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dda0:	2302      	movs	r3, #2
 800dda2:	73fb      	strb	r3, [r7, #15]
    break;
 800dda4:	bf00      	nop
  }
  return usb_status;  
 800dda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ddca:	78fa      	ldrb	r2, [r7, #3]
 800ddcc:	4611      	mov	r1, r2
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f5 fe38 	bl	8003a44 <HAL_PCD_EP_SetStall>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ddd8:	7bbb      	ldrb	r3, [r7, #14]
 800ddda:	2b03      	cmp	r3, #3
 800dddc:	d816      	bhi.n	800de0c <USBD_LL_StallEP+0x5c>
 800ddde:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <USBD_LL_StallEP+0x34>)
 800dde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde4:	0800ddf5 	.word	0x0800ddf5
 800dde8:	0800ddfb 	.word	0x0800ddfb
 800ddec:	0800de01 	.word	0x0800de01
 800ddf0:	0800de07 	.word	0x0800de07
    case HAL_OK :
      usb_status = USBD_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	e00b      	b.n	800de12 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ddfe:	e008      	b.n	800de12 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de00:	2301      	movs	r3, #1
 800de02:	73fb      	strb	r3, [r7, #15]
    break;
 800de04:	e005      	b.n	800de12 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de06:	2302      	movs	r3, #2
 800de08:	73fb      	strb	r3, [r7, #15]
    break;
 800de0a:	e002      	b.n	800de12 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800de0c:	2302      	movs	r3, #2
 800de0e:	73fb      	strb	r3, [r7, #15]
    break;
 800de10:	bf00      	nop
  }
  return usb_status;  
 800de12:	7bfb      	ldrb	r3, [r7, #15]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de28:	2300      	movs	r3, #0
 800de2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800de36:	78fa      	ldrb	r2, [r7, #3]
 800de38:	4611      	mov	r1, r2
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7f5 fe64 	bl	8003b08 <HAL_PCD_EP_ClrStall>
 800de40:	4603      	mov	r3, r0
 800de42:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800de44:	7bbb      	ldrb	r3, [r7, #14]
 800de46:	2b03      	cmp	r3, #3
 800de48:	d816      	bhi.n	800de78 <USBD_LL_ClearStallEP+0x5c>
 800de4a:	a201      	add	r2, pc, #4	; (adr r2, 800de50 <USBD_LL_ClearStallEP+0x34>)
 800de4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de50:	0800de61 	.word	0x0800de61
 800de54:	0800de67 	.word	0x0800de67
 800de58:	0800de6d 	.word	0x0800de6d
 800de5c:	0800de73 	.word	0x0800de73
    case HAL_OK :
      usb_status = USBD_OK;
 800de60:	2300      	movs	r3, #0
 800de62:	73fb      	strb	r3, [r7, #15]
    break;
 800de64:	e00b      	b.n	800de7e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de66:	2302      	movs	r3, #2
 800de68:	73fb      	strb	r3, [r7, #15]
    break;
 800de6a:	e008      	b.n	800de7e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de6c:	2301      	movs	r3, #1
 800de6e:	73fb      	strb	r3, [r7, #15]
    break;
 800de70:	e005      	b.n	800de7e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de72:	2302      	movs	r3, #2
 800de74:	73fb      	strb	r3, [r7, #15]
    break;
 800de76:	e002      	b.n	800de7e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800de78:	2302      	movs	r3, #2
 800de7a:	73fb      	strb	r3, [r7, #15]
    break;
 800de7c:	bf00      	nop
  }
  return usb_status; 
 800de7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	460b      	mov	r3, r1
 800de92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800de9a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800de9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	da0b      	bge.n	800debc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800dea4:	78fb      	ldrb	r3, [r7, #3]
 800dea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800deaa:	68f9      	ldr	r1, [r7, #12]
 800deac:	4613      	mov	r3, r2
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	1a9b      	subs	r3, r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	440b      	add	r3, r1
 800deb6:	333e      	adds	r3, #62	; 0x3e
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	e00b      	b.n	800ded4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800debc:	78fb      	ldrb	r3, [r7, #3]
 800debe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dec2:	68f9      	ldr	r1, [r7, #12]
 800dec4:	4613      	mov	r3, r2
 800dec6:	00db      	lsls	r3, r3, #3
 800dec8:	1a9b      	subs	r3, r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	440b      	add	r3, r1
 800dece:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ded2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	460b      	mov	r3, r1
 800deea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deec:	2300      	movs	r3, #0
 800deee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800defa:	78fa      	ldrb	r2, [r7, #3]
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f7f5 fc36 	bl	8003770 <HAL_PCD_SetAddress>
 800df04:	4603      	mov	r3, r0
 800df06:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800df08:	7bbb      	ldrb	r3, [r7, #14]
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d816      	bhi.n	800df3c <USBD_LL_SetUSBAddress+0x5c>
 800df0e:	a201      	add	r2, pc, #4	; (adr r2, 800df14 <USBD_LL_SetUSBAddress+0x34>)
 800df10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df14:	0800df25 	.word	0x0800df25
 800df18:	0800df2b 	.word	0x0800df2b
 800df1c:	0800df31 	.word	0x0800df31
 800df20:	0800df37 	.word	0x0800df37
    case HAL_OK :
      usb_status = USBD_OK;
 800df24:	2300      	movs	r3, #0
 800df26:	73fb      	strb	r3, [r7, #15]
    break;
 800df28:	e00b      	b.n	800df42 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df2a:	2302      	movs	r3, #2
 800df2c:	73fb      	strb	r3, [r7, #15]
    break;
 800df2e:	e008      	b.n	800df42 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df30:	2301      	movs	r3, #1
 800df32:	73fb      	strb	r3, [r7, #15]
    break;
 800df34:	e005      	b.n	800df42 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df36:	2302      	movs	r3, #2
 800df38:	73fb      	strb	r3, [r7, #15]
    break;
 800df3a:	e002      	b.n	800df42 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800df3c:	2302      	movs	r3, #2
 800df3e:	73fb      	strb	r3, [r7, #15]
    break;
 800df40:	bf00      	nop
  }
  return usb_status;  
 800df42:	7bfb      	ldrb	r3, [r7, #15]
}
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	607a      	str	r2, [r7, #4]
 800df56:	461a      	mov	r2, r3
 800df58:	460b      	mov	r3, r1
 800df5a:	72fb      	strb	r3, [r7, #11]
 800df5c:	4613      	mov	r3, r2
 800df5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800df6e:	893b      	ldrh	r3, [r7, #8]
 800df70:	7af9      	ldrb	r1, [r7, #11]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	f7f5 fd29 	bl	80039ca <HAL_PCD_EP_Transmit>
 800df78:	4603      	mov	r3, r0
 800df7a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800df7c:	7dbb      	ldrb	r3, [r7, #22]
 800df7e:	2b03      	cmp	r3, #3
 800df80:	d816      	bhi.n	800dfb0 <USBD_LL_Transmit+0x64>
 800df82:	a201      	add	r2, pc, #4	; (adr r2, 800df88 <USBD_LL_Transmit+0x3c>)
 800df84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df88:	0800df99 	.word	0x0800df99
 800df8c:	0800df9f 	.word	0x0800df9f
 800df90:	0800dfa5 	.word	0x0800dfa5
 800df94:	0800dfab 	.word	0x0800dfab
    case HAL_OK :
      usb_status = USBD_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	75fb      	strb	r3, [r7, #23]
    break;
 800df9c:	e00b      	b.n	800dfb6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df9e:	2302      	movs	r3, #2
 800dfa0:	75fb      	strb	r3, [r7, #23]
    break;
 800dfa2:	e008      	b.n	800dfb6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	75fb      	strb	r3, [r7, #23]
    break;
 800dfa8:	e005      	b.n	800dfb6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfaa:	2302      	movs	r3, #2
 800dfac:	75fb      	strb	r3, [r7, #23]
    break;
 800dfae:	e002      	b.n	800dfb6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	75fb      	strb	r3, [r7, #23]
    break;
 800dfb4:	bf00      	nop
  }
  return usb_status;    
 800dfb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3718      	adds	r7, #24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	607a      	str	r2, [r7, #4]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	460b      	mov	r3, r1
 800dfce:	72fb      	strb	r3, [r7, #11]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dfe2:	893b      	ldrh	r3, [r7, #8]
 800dfe4:	7af9      	ldrb	r1, [r7, #11]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	f7f5 fc99 	bl	800391e <HAL_PCD_EP_Receive>
 800dfec:	4603      	mov	r3, r0
 800dfee:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800dff0:	7dbb      	ldrb	r3, [r7, #22]
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d816      	bhi.n	800e024 <USBD_LL_PrepareReceive+0x64>
 800dff6:	a201      	add	r2, pc, #4	; (adr r2, 800dffc <USBD_LL_PrepareReceive+0x3c>)
 800dff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffc:	0800e00d 	.word	0x0800e00d
 800e000:	0800e013 	.word	0x0800e013
 800e004:	0800e019 	.word	0x0800e019
 800e008:	0800e01f 	.word	0x0800e01f
    case HAL_OK :
      usb_status = USBD_OK;
 800e00c:	2300      	movs	r3, #0
 800e00e:	75fb      	strb	r3, [r7, #23]
    break;
 800e010:	e00b      	b.n	800e02a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e012:	2302      	movs	r3, #2
 800e014:	75fb      	strb	r3, [r7, #23]
    break;
 800e016:	e008      	b.n	800e02a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e018:	2301      	movs	r3, #1
 800e01a:	75fb      	strb	r3, [r7, #23]
    break;
 800e01c:	e005      	b.n	800e02a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e01e:	2302      	movs	r3, #2
 800e020:	75fb      	strb	r3, [r7, #23]
    break;
 800e022:	e002      	b.n	800e02a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800e024:	2302      	movs	r3, #2
 800e026:	75fb      	strb	r3, [r7, #23]
    break;
 800e028:	bf00      	nop
  }
  return usb_status; 
 800e02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3718      	adds	r7, #24
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e046:	78fa      	ldrb	r2, [r7, #3]
 800e048:	4611      	mov	r1, r2
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7f5 fca5 	bl	800399a <HAL_PCD_EP_GetRxCount>
 800e050:	4603      	mov	r3, r0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <HAL_PCDEx_LPM_Callback+0x18>
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d01f      	beq.n	800e0b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800e072:	e03b      	b.n	800e0ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d007      	beq.n	800e08c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e07c:	f000 f854 	bl	800e128 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e080:	4b1c      	ldr	r3, [pc, #112]	; (800e0f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	4a1b      	ldr	r2, [pc, #108]	; (800e0f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e086:	f023 0306 	bic.w	r3, r3, #6
 800e08a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	6812      	ldr	r2, [r2, #0]
 800e09a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e09e:	f023 0301 	bic.w	r3, r3, #1
 800e0a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7fc fd56 	bl	800ab5c <USBD_LL_Resume>
    break;
 800e0b0:	e01c      	b.n	800e0ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	6812      	ldr	r2, [r2, #0]
 800e0c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e0c4:	f043 0301 	orr.w	r3, r3, #1
 800e0c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fc fd2e 	bl	800ab32 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6a1b      	ldr	r3, [r3, #32]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d005      	beq.n	800e0ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0de:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e0e0:	691b      	ldr	r3, [r3, #16]
 800e0e2:	4a04      	ldr	r2, [pc, #16]	; (800e0f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e0e4:	f043 0306 	orr.w	r3, r3, #6
 800e0e8:	6113      	str	r3, [r2, #16]
    break;   
 800e0ea:	bf00      	nop
}
 800e0ec:	bf00      	nop
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	e000ed00 	.word	0xe000ed00

0800e0f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e100:	4b03      	ldr	r3, [pc, #12]	; (800e110 <USBD_static_malloc+0x18>)
}
 800e102:	4618      	mov	r0, r3
 800e104:	370c      	adds	r7, #12
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	20000254 	.word	0x20000254

0800e114 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]

}
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e12c:	f7fd fc8e 	bl	800ba4c <SystemClock_Config>
}
 800e130:	bf00      	nop
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	4603      	mov	r3, r0
 800e13c:	6039      	str	r1, [r7, #0]
 800e13e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	2212      	movs	r2, #18
 800e144:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e146:	4b03      	ldr	r3, [pc, #12]	; (800e154 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e148:	4618      	mov	r0, r3
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	2000014c 	.word	0x2000014c

0800e158 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	4603      	mov	r3, r0
 800e160:	6039      	str	r1, [r7, #0]
 800e162:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	2204      	movs	r2, #4
 800e168:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e16a:	4b03      	ldr	r3, [pc, #12]	; (800e178 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr
 800e178:	2000016c 	.word	0x2000016c

0800e17c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	4603      	mov	r3, r0
 800e184:	6039      	str	r1, [r7, #0]
 800e186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d105      	bne.n	800e19a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	4907      	ldr	r1, [pc, #28]	; (800e1b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e192:	4808      	ldr	r0, [pc, #32]	; (800e1b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e194:	f7fd fa26 	bl	800b5e4 <USBD_GetString>
 800e198:	e004      	b.n	800e1a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e19a:	683a      	ldr	r2, [r7, #0]
 800e19c:	4904      	ldr	r1, [pc, #16]	; (800e1b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e19e:	4805      	ldr	r0, [pc, #20]	; (800e1b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e1a0:	f7fd fa20 	bl	800b5e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1a4:	4b02      	ldr	r3, [pc, #8]	; (800e1b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20031120 	.word	0x20031120
 800e1b4:	0800ec90 	.word	0x0800ec90

0800e1b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	4603      	mov	r3, r0
 800e1c0:	6039      	str	r1, [r7, #0]
 800e1c2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	4904      	ldr	r1, [pc, #16]	; (800e1d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e1c8:	4804      	ldr	r0, [pc, #16]	; (800e1dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e1ca:	f7fd fa0b 	bl	800b5e4 <USBD_GetString>
  return USBD_StrDesc;
 800e1ce:	4b02      	ldr	r3, [pc, #8]	; (800e1d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3708      	adds	r7, #8
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	20031120 	.word	0x20031120
 800e1dc:	0800eca8 	.word	0x0800eca8

0800e1e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	6039      	str	r1, [r7, #0]
 800e1ea:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	221a      	movs	r2, #26
 800e1f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e1f2:	f000 f855 	bl	800e2a0 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800e1f6:	4b02      	ldr	r3, [pc, #8]	; (800e200 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	20000170 	.word	0x20000170

0800e204 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	4603      	mov	r3, r0
 800e20c:	6039      	str	r1, [r7, #0]
 800e20e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e210:	79fb      	ldrb	r3, [r7, #7]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d105      	bne.n	800e222 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e216:	683a      	ldr	r2, [r7, #0]
 800e218:	4907      	ldr	r1, [pc, #28]	; (800e238 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e21a:	4808      	ldr	r0, [pc, #32]	; (800e23c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e21c:	f7fd f9e2 	bl	800b5e4 <USBD_GetString>
 800e220:	e004      	b.n	800e22c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e222:	683a      	ldr	r2, [r7, #0]
 800e224:	4904      	ldr	r1, [pc, #16]	; (800e238 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e226:	4805      	ldr	r0, [pc, #20]	; (800e23c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e228:	f7fd f9dc 	bl	800b5e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e22c:	4b02      	ldr	r3, [pc, #8]	; (800e238 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	20031120 	.word	0x20031120
 800e23c:	0800ecbc 	.word	0x0800ecbc

0800e240 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	4603      	mov	r3, r0
 800e248:	6039      	str	r1, [r7, #0]
 800e24a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e24c:	79fb      	ldrb	r3, [r7, #7]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d105      	bne.n	800e25e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e252:	683a      	ldr	r2, [r7, #0]
 800e254:	4907      	ldr	r1, [pc, #28]	; (800e274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e256:	4808      	ldr	r0, [pc, #32]	; (800e278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e258:	f7fd f9c4 	bl	800b5e4 <USBD_GetString>
 800e25c:	e004      	b.n	800e268 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	4904      	ldr	r1, [pc, #16]	; (800e274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e262:	4805      	ldr	r0, [pc, #20]	; (800e278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e264:	f7fd f9be 	bl	800b5e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e268:	4b02      	ldr	r3, [pc, #8]	; (800e274 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3708      	adds	r7, #8
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	20031120 	.word	0x20031120
 800e278:	0800ecc8 	.word	0x0800ecc8

0800e27c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	6039      	str	r1, [r7, #0]
 800e286:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	220c      	movs	r2, #12
 800e28c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e28e:	4b03      	ldr	r3, [pc, #12]	; (800e29c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e290:	4618      	mov	r0, r3
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	20000160 	.word	0x20000160

0800e2a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e2a6:	4b0f      	ldr	r3, [pc, #60]	; (800e2e4 <Get_SerialNum+0x44>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e2ac:	4b0e      	ldr	r3, [pc, #56]	; (800e2e8 <Get_SerialNum+0x48>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e2b2:	4b0e      	ldr	r3, [pc, #56]	; (800e2ec <Get_SerialNum+0x4c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e2b8:	68fa      	ldr	r2, [r7, #12]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4413      	add	r3, r2
 800e2be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d009      	beq.n	800e2da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e2c6:	2208      	movs	r2, #8
 800e2c8:	4909      	ldr	r1, [pc, #36]	; (800e2f0 <Get_SerialNum+0x50>)
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f000 f814 	bl	800e2f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e2d0:	2204      	movs	r2, #4
 800e2d2:	4908      	ldr	r1, [pc, #32]	; (800e2f4 <Get_SerialNum+0x54>)
 800e2d4:	68b8      	ldr	r0, [r7, #8]
 800e2d6:	f000 f80f 	bl	800e2f8 <IntToUnicode>
  }
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	1fff7590 	.word	0x1fff7590
 800e2e8:	1fff7594 	.word	0x1fff7594
 800e2ec:	1fff7598 	.word	0x1fff7598
 800e2f0:	20000172 	.word	0x20000172
 800e2f4:	20000182 	.word	0x20000182

0800e2f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b087      	sub	sp, #28
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	4613      	mov	r3, r2
 800e304:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e306:	2300      	movs	r3, #0
 800e308:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e30a:	2300      	movs	r3, #0
 800e30c:	75fb      	strb	r3, [r7, #23]
 800e30e:	e027      	b.n	800e360 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	0f1b      	lsrs	r3, r3, #28
 800e314:	2b09      	cmp	r3, #9
 800e316:	d80b      	bhi.n	800e330 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	0f1b      	lsrs	r3, r3, #28
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	7dfb      	ldrb	r3, [r7, #23]
 800e320:	005b      	lsls	r3, r3, #1
 800e322:	4619      	mov	r1, r3
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	440b      	add	r3, r1
 800e328:	3230      	adds	r2, #48	; 0x30
 800e32a:	b2d2      	uxtb	r2, r2
 800e32c:	701a      	strb	r2, [r3, #0]
 800e32e:	e00a      	b.n	800e346 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	0f1b      	lsrs	r3, r3, #28
 800e334:	b2da      	uxtb	r2, r3
 800e336:	7dfb      	ldrb	r3, [r7, #23]
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	4619      	mov	r1, r3
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	440b      	add	r3, r1
 800e340:	3237      	adds	r2, #55	; 0x37
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	011b      	lsls	r3, r3, #4
 800e34a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e34c:	7dfb      	ldrb	r3, [r7, #23]
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	3301      	adds	r3, #1
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	4413      	add	r3, r2
 800e356:	2200      	movs	r2, #0
 800e358:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e35a:	7dfb      	ldrb	r3, [r7, #23]
 800e35c:	3301      	adds	r3, #1
 800e35e:	75fb      	strb	r3, [r7, #23]
 800e360:	7dfa      	ldrb	r2, [r7, #23]
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	429a      	cmp	r2, r3
 800e366:	d3d3      	bcc.n	800e310 <IntToUnicode+0x18>
  }
}
 800e368:	bf00      	nop
 800e36a:	371c      	adds	r7, #28
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e374:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e3ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800e378:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800e37a:	e003      	b.n	800e384 <LoopCopyDataInit>

0800e37c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800e37c:	4b0c      	ldr	r3, [pc, #48]	; (800e3b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800e37e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800e380:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800e382:	3104      	adds	r1, #4

0800e384 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800e384:	480b      	ldr	r0, [pc, #44]	; (800e3b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800e386:	4b0c      	ldr	r3, [pc, #48]	; (800e3b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800e388:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800e38a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800e38c:	d3f6      	bcc.n	800e37c <CopyDataInit>
	ldr	r2, =_sbss
 800e38e:	4a0b      	ldr	r2, [pc, #44]	; (800e3bc <LoopForever+0x12>)
	b	LoopFillZerobss
 800e390:	e002      	b.n	800e398 <LoopFillZerobss>

0800e392 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800e392:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800e394:	f842 3b04 	str.w	r3, [r2], #4

0800e398 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800e398:	4b09      	ldr	r3, [pc, #36]	; (800e3c0 <LoopForever+0x16>)
	cmp	r2, r3
 800e39a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800e39c:	d3f9      	bcc.n	800e392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e39e:	f7ff f9b9 	bl	800d714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e3a2:	f000 f817 	bl	800e3d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e3a6:	f7fd fa67 	bl	800b878 <main>

0800e3aa <LoopForever>:

LoopForever:
    b LoopForever
 800e3aa:	e7fe      	b.n	800e3aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e3ac:	2004ffff 	.word	0x2004ffff
	ldr	r3, =_sidata
 800e3b0:	0800ed64 	.word	0x0800ed64
	ldr	r0, =_sdata
 800e3b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800e3b8:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 800e3bc:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 800e3c0:	20031324 	.word	0x20031324

0800e3c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e3c4:	e7fe      	b.n	800e3c4 <ADC1_2_IRQHandler>
	...

0800e3c8 <__errno>:
 800e3c8:	4b01      	ldr	r3, [pc, #4]	; (800e3d0 <__errno+0x8>)
 800e3ca:	6818      	ldr	r0, [r3, #0]
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	2000018c 	.word	0x2000018c

0800e3d4 <__libc_init_array>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	4e0d      	ldr	r6, [pc, #52]	; (800e40c <__libc_init_array+0x38>)
 800e3d8:	4c0d      	ldr	r4, [pc, #52]	; (800e410 <__libc_init_array+0x3c>)
 800e3da:	1ba4      	subs	r4, r4, r6
 800e3dc:	10a4      	asrs	r4, r4, #2
 800e3de:	2500      	movs	r5, #0
 800e3e0:	42a5      	cmp	r5, r4
 800e3e2:	d109      	bne.n	800e3f8 <__libc_init_array+0x24>
 800e3e4:	4e0b      	ldr	r6, [pc, #44]	; (800e414 <__libc_init_array+0x40>)
 800e3e6:	4c0c      	ldr	r4, [pc, #48]	; (800e418 <__libc_init_array+0x44>)
 800e3e8:	f000 fc26 	bl	800ec38 <_init>
 800e3ec:	1ba4      	subs	r4, r4, r6
 800e3ee:	10a4      	asrs	r4, r4, #2
 800e3f0:	2500      	movs	r5, #0
 800e3f2:	42a5      	cmp	r5, r4
 800e3f4:	d105      	bne.n	800e402 <__libc_init_array+0x2e>
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e3fc:	4798      	blx	r3
 800e3fe:	3501      	adds	r5, #1
 800e400:	e7ee      	b.n	800e3e0 <__libc_init_array+0xc>
 800e402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e406:	4798      	blx	r3
 800e408:	3501      	adds	r5, #1
 800e40a:	e7f2      	b.n	800e3f2 <__libc_init_array+0x1e>
 800e40c:	0800ed5c 	.word	0x0800ed5c
 800e410:	0800ed5c 	.word	0x0800ed5c
 800e414:	0800ed5c 	.word	0x0800ed5c
 800e418:	0800ed60 	.word	0x0800ed60

0800e41c <memset>:
 800e41c:	4402      	add	r2, r0
 800e41e:	4603      	mov	r3, r0
 800e420:	4293      	cmp	r3, r2
 800e422:	d100      	bne.n	800e426 <memset+0xa>
 800e424:	4770      	bx	lr
 800e426:	f803 1b01 	strb.w	r1, [r3], #1
 800e42a:	e7f9      	b.n	800e420 <memset+0x4>

0800e42c <siprintf>:
 800e42c:	b40e      	push	{r1, r2, r3}
 800e42e:	b500      	push	{lr}
 800e430:	b09c      	sub	sp, #112	; 0x70
 800e432:	ab1d      	add	r3, sp, #116	; 0x74
 800e434:	9002      	str	r0, [sp, #8]
 800e436:	9006      	str	r0, [sp, #24]
 800e438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e43c:	4809      	ldr	r0, [pc, #36]	; (800e464 <siprintf+0x38>)
 800e43e:	9107      	str	r1, [sp, #28]
 800e440:	9104      	str	r1, [sp, #16]
 800e442:	4909      	ldr	r1, [pc, #36]	; (800e468 <siprintf+0x3c>)
 800e444:	f853 2b04 	ldr.w	r2, [r3], #4
 800e448:	9105      	str	r1, [sp, #20]
 800e44a:	6800      	ldr	r0, [r0, #0]
 800e44c:	9301      	str	r3, [sp, #4]
 800e44e:	a902      	add	r1, sp, #8
 800e450:	f000 f866 	bl	800e520 <_svfiprintf_r>
 800e454:	9b02      	ldr	r3, [sp, #8]
 800e456:	2200      	movs	r2, #0
 800e458:	701a      	strb	r2, [r3, #0]
 800e45a:	b01c      	add	sp, #112	; 0x70
 800e45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e460:	b003      	add	sp, #12
 800e462:	4770      	bx	lr
 800e464:	2000018c 	.word	0x2000018c
 800e468:	ffff0208 	.word	0xffff0208

0800e46c <__ssputs_r>:
 800e46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e470:	688e      	ldr	r6, [r1, #8]
 800e472:	429e      	cmp	r6, r3
 800e474:	4682      	mov	sl, r0
 800e476:	460c      	mov	r4, r1
 800e478:	4690      	mov	r8, r2
 800e47a:	4699      	mov	r9, r3
 800e47c:	d837      	bhi.n	800e4ee <__ssputs_r+0x82>
 800e47e:	898a      	ldrh	r2, [r1, #12]
 800e480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e484:	d031      	beq.n	800e4ea <__ssputs_r+0x7e>
 800e486:	6825      	ldr	r5, [r4, #0]
 800e488:	6909      	ldr	r1, [r1, #16]
 800e48a:	1a6f      	subs	r7, r5, r1
 800e48c:	6965      	ldr	r5, [r4, #20]
 800e48e:	2302      	movs	r3, #2
 800e490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e494:	fb95 f5f3 	sdiv	r5, r5, r3
 800e498:	f109 0301 	add.w	r3, r9, #1
 800e49c:	443b      	add	r3, r7
 800e49e:	429d      	cmp	r5, r3
 800e4a0:	bf38      	it	cc
 800e4a2:	461d      	movcc	r5, r3
 800e4a4:	0553      	lsls	r3, r2, #21
 800e4a6:	d530      	bpl.n	800e50a <__ssputs_r+0x9e>
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	f000 fb2b 	bl	800eb04 <_malloc_r>
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	b950      	cbnz	r0, 800e4c8 <__ssputs_r+0x5c>
 800e4b2:	230c      	movs	r3, #12
 800e4b4:	f8ca 3000 	str.w	r3, [sl]
 800e4b8:	89a3      	ldrh	r3, [r4, #12]
 800e4ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4be:	81a3      	strh	r3, [r4, #12]
 800e4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c8:	463a      	mov	r2, r7
 800e4ca:	6921      	ldr	r1, [r4, #16]
 800e4cc:	f000 faa8 	bl	800ea20 <memcpy>
 800e4d0:	89a3      	ldrh	r3, [r4, #12]
 800e4d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4da:	81a3      	strh	r3, [r4, #12]
 800e4dc:	6126      	str	r6, [r4, #16]
 800e4de:	6165      	str	r5, [r4, #20]
 800e4e0:	443e      	add	r6, r7
 800e4e2:	1bed      	subs	r5, r5, r7
 800e4e4:	6026      	str	r6, [r4, #0]
 800e4e6:	60a5      	str	r5, [r4, #8]
 800e4e8:	464e      	mov	r6, r9
 800e4ea:	454e      	cmp	r6, r9
 800e4ec:	d900      	bls.n	800e4f0 <__ssputs_r+0x84>
 800e4ee:	464e      	mov	r6, r9
 800e4f0:	4632      	mov	r2, r6
 800e4f2:	4641      	mov	r1, r8
 800e4f4:	6820      	ldr	r0, [r4, #0]
 800e4f6:	f000 fa9e 	bl	800ea36 <memmove>
 800e4fa:	68a3      	ldr	r3, [r4, #8]
 800e4fc:	1b9b      	subs	r3, r3, r6
 800e4fe:	60a3      	str	r3, [r4, #8]
 800e500:	6823      	ldr	r3, [r4, #0]
 800e502:	441e      	add	r6, r3
 800e504:	6026      	str	r6, [r4, #0]
 800e506:	2000      	movs	r0, #0
 800e508:	e7dc      	b.n	800e4c4 <__ssputs_r+0x58>
 800e50a:	462a      	mov	r2, r5
 800e50c:	f000 fb54 	bl	800ebb8 <_realloc_r>
 800e510:	4606      	mov	r6, r0
 800e512:	2800      	cmp	r0, #0
 800e514:	d1e2      	bne.n	800e4dc <__ssputs_r+0x70>
 800e516:	6921      	ldr	r1, [r4, #16]
 800e518:	4650      	mov	r0, sl
 800e51a:	f000 faa5 	bl	800ea68 <_free_r>
 800e51e:	e7c8      	b.n	800e4b2 <__ssputs_r+0x46>

0800e520 <_svfiprintf_r>:
 800e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	461d      	mov	r5, r3
 800e526:	898b      	ldrh	r3, [r1, #12]
 800e528:	061f      	lsls	r7, r3, #24
 800e52a:	b09d      	sub	sp, #116	; 0x74
 800e52c:	4680      	mov	r8, r0
 800e52e:	460c      	mov	r4, r1
 800e530:	4616      	mov	r6, r2
 800e532:	d50f      	bpl.n	800e554 <_svfiprintf_r+0x34>
 800e534:	690b      	ldr	r3, [r1, #16]
 800e536:	b96b      	cbnz	r3, 800e554 <_svfiprintf_r+0x34>
 800e538:	2140      	movs	r1, #64	; 0x40
 800e53a:	f000 fae3 	bl	800eb04 <_malloc_r>
 800e53e:	6020      	str	r0, [r4, #0]
 800e540:	6120      	str	r0, [r4, #16]
 800e542:	b928      	cbnz	r0, 800e550 <_svfiprintf_r+0x30>
 800e544:	230c      	movs	r3, #12
 800e546:	f8c8 3000 	str.w	r3, [r8]
 800e54a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e54e:	e0c8      	b.n	800e6e2 <_svfiprintf_r+0x1c2>
 800e550:	2340      	movs	r3, #64	; 0x40
 800e552:	6163      	str	r3, [r4, #20]
 800e554:	2300      	movs	r3, #0
 800e556:	9309      	str	r3, [sp, #36]	; 0x24
 800e558:	2320      	movs	r3, #32
 800e55a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e55e:	2330      	movs	r3, #48	; 0x30
 800e560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e564:	9503      	str	r5, [sp, #12]
 800e566:	f04f 0b01 	mov.w	fp, #1
 800e56a:	4637      	mov	r7, r6
 800e56c:	463d      	mov	r5, r7
 800e56e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e572:	b10b      	cbz	r3, 800e578 <_svfiprintf_r+0x58>
 800e574:	2b25      	cmp	r3, #37	; 0x25
 800e576:	d13e      	bne.n	800e5f6 <_svfiprintf_r+0xd6>
 800e578:	ebb7 0a06 	subs.w	sl, r7, r6
 800e57c:	d00b      	beq.n	800e596 <_svfiprintf_r+0x76>
 800e57e:	4653      	mov	r3, sl
 800e580:	4632      	mov	r2, r6
 800e582:	4621      	mov	r1, r4
 800e584:	4640      	mov	r0, r8
 800e586:	f7ff ff71 	bl	800e46c <__ssputs_r>
 800e58a:	3001      	adds	r0, #1
 800e58c:	f000 80a4 	beq.w	800e6d8 <_svfiprintf_r+0x1b8>
 800e590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e592:	4453      	add	r3, sl
 800e594:	9309      	str	r3, [sp, #36]	; 0x24
 800e596:	783b      	ldrb	r3, [r7, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 809d 	beq.w	800e6d8 <_svfiprintf_r+0x1b8>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5a8:	9304      	str	r3, [sp, #16]
 800e5aa:	9307      	str	r3, [sp, #28]
 800e5ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e5b2:	462f      	mov	r7, r5
 800e5b4:	2205      	movs	r2, #5
 800e5b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e5ba:	4850      	ldr	r0, [pc, #320]	; (800e6fc <_svfiprintf_r+0x1dc>)
 800e5bc:	f7f1 fe20 	bl	8000200 <memchr>
 800e5c0:	9b04      	ldr	r3, [sp, #16]
 800e5c2:	b9d0      	cbnz	r0, 800e5fa <_svfiprintf_r+0xda>
 800e5c4:	06d9      	lsls	r1, r3, #27
 800e5c6:	bf44      	itt	mi
 800e5c8:	2220      	movmi	r2, #32
 800e5ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e5ce:	071a      	lsls	r2, r3, #28
 800e5d0:	bf44      	itt	mi
 800e5d2:	222b      	movmi	r2, #43	; 0x2b
 800e5d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e5d8:	782a      	ldrb	r2, [r5, #0]
 800e5da:	2a2a      	cmp	r2, #42	; 0x2a
 800e5dc:	d015      	beq.n	800e60a <_svfiprintf_r+0xea>
 800e5de:	9a07      	ldr	r2, [sp, #28]
 800e5e0:	462f      	mov	r7, r5
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	250a      	movs	r5, #10
 800e5e6:	4639      	mov	r1, r7
 800e5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5ec:	3b30      	subs	r3, #48	; 0x30
 800e5ee:	2b09      	cmp	r3, #9
 800e5f0:	d94d      	bls.n	800e68e <_svfiprintf_r+0x16e>
 800e5f2:	b1b8      	cbz	r0, 800e624 <_svfiprintf_r+0x104>
 800e5f4:	e00f      	b.n	800e616 <_svfiprintf_r+0xf6>
 800e5f6:	462f      	mov	r7, r5
 800e5f8:	e7b8      	b.n	800e56c <_svfiprintf_r+0x4c>
 800e5fa:	4a40      	ldr	r2, [pc, #256]	; (800e6fc <_svfiprintf_r+0x1dc>)
 800e5fc:	1a80      	subs	r0, r0, r2
 800e5fe:	fa0b f000 	lsl.w	r0, fp, r0
 800e602:	4318      	orrs	r0, r3
 800e604:	9004      	str	r0, [sp, #16]
 800e606:	463d      	mov	r5, r7
 800e608:	e7d3      	b.n	800e5b2 <_svfiprintf_r+0x92>
 800e60a:	9a03      	ldr	r2, [sp, #12]
 800e60c:	1d11      	adds	r1, r2, #4
 800e60e:	6812      	ldr	r2, [r2, #0]
 800e610:	9103      	str	r1, [sp, #12]
 800e612:	2a00      	cmp	r2, #0
 800e614:	db01      	blt.n	800e61a <_svfiprintf_r+0xfa>
 800e616:	9207      	str	r2, [sp, #28]
 800e618:	e004      	b.n	800e624 <_svfiprintf_r+0x104>
 800e61a:	4252      	negs	r2, r2
 800e61c:	f043 0302 	orr.w	r3, r3, #2
 800e620:	9207      	str	r2, [sp, #28]
 800e622:	9304      	str	r3, [sp, #16]
 800e624:	783b      	ldrb	r3, [r7, #0]
 800e626:	2b2e      	cmp	r3, #46	; 0x2e
 800e628:	d10c      	bne.n	800e644 <_svfiprintf_r+0x124>
 800e62a:	787b      	ldrb	r3, [r7, #1]
 800e62c:	2b2a      	cmp	r3, #42	; 0x2a
 800e62e:	d133      	bne.n	800e698 <_svfiprintf_r+0x178>
 800e630:	9b03      	ldr	r3, [sp, #12]
 800e632:	1d1a      	adds	r2, r3, #4
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	9203      	str	r2, [sp, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	bfb8      	it	lt
 800e63c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e640:	3702      	adds	r7, #2
 800e642:	9305      	str	r3, [sp, #20]
 800e644:	4d2e      	ldr	r5, [pc, #184]	; (800e700 <_svfiprintf_r+0x1e0>)
 800e646:	7839      	ldrb	r1, [r7, #0]
 800e648:	2203      	movs	r2, #3
 800e64a:	4628      	mov	r0, r5
 800e64c:	f7f1 fdd8 	bl	8000200 <memchr>
 800e650:	b138      	cbz	r0, 800e662 <_svfiprintf_r+0x142>
 800e652:	2340      	movs	r3, #64	; 0x40
 800e654:	1b40      	subs	r0, r0, r5
 800e656:	fa03 f000 	lsl.w	r0, r3, r0
 800e65a:	9b04      	ldr	r3, [sp, #16]
 800e65c:	4303      	orrs	r3, r0
 800e65e:	3701      	adds	r7, #1
 800e660:	9304      	str	r3, [sp, #16]
 800e662:	7839      	ldrb	r1, [r7, #0]
 800e664:	4827      	ldr	r0, [pc, #156]	; (800e704 <_svfiprintf_r+0x1e4>)
 800e666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e66a:	2206      	movs	r2, #6
 800e66c:	1c7e      	adds	r6, r7, #1
 800e66e:	f7f1 fdc7 	bl	8000200 <memchr>
 800e672:	2800      	cmp	r0, #0
 800e674:	d038      	beq.n	800e6e8 <_svfiprintf_r+0x1c8>
 800e676:	4b24      	ldr	r3, [pc, #144]	; (800e708 <_svfiprintf_r+0x1e8>)
 800e678:	bb13      	cbnz	r3, 800e6c0 <_svfiprintf_r+0x1a0>
 800e67a:	9b03      	ldr	r3, [sp, #12]
 800e67c:	3307      	adds	r3, #7
 800e67e:	f023 0307 	bic.w	r3, r3, #7
 800e682:	3308      	adds	r3, #8
 800e684:	9303      	str	r3, [sp, #12]
 800e686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e688:	444b      	add	r3, r9
 800e68a:	9309      	str	r3, [sp, #36]	; 0x24
 800e68c:	e76d      	b.n	800e56a <_svfiprintf_r+0x4a>
 800e68e:	fb05 3202 	mla	r2, r5, r2, r3
 800e692:	2001      	movs	r0, #1
 800e694:	460f      	mov	r7, r1
 800e696:	e7a6      	b.n	800e5e6 <_svfiprintf_r+0xc6>
 800e698:	2300      	movs	r3, #0
 800e69a:	3701      	adds	r7, #1
 800e69c:	9305      	str	r3, [sp, #20]
 800e69e:	4619      	mov	r1, r3
 800e6a0:	250a      	movs	r5, #10
 800e6a2:	4638      	mov	r0, r7
 800e6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6a8:	3a30      	subs	r2, #48	; 0x30
 800e6aa:	2a09      	cmp	r2, #9
 800e6ac:	d903      	bls.n	800e6b6 <_svfiprintf_r+0x196>
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d0c8      	beq.n	800e644 <_svfiprintf_r+0x124>
 800e6b2:	9105      	str	r1, [sp, #20]
 800e6b4:	e7c6      	b.n	800e644 <_svfiprintf_r+0x124>
 800e6b6:	fb05 2101 	mla	r1, r5, r1, r2
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	4607      	mov	r7, r0
 800e6be:	e7f0      	b.n	800e6a2 <_svfiprintf_r+0x182>
 800e6c0:	ab03      	add	r3, sp, #12
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	4622      	mov	r2, r4
 800e6c6:	4b11      	ldr	r3, [pc, #68]	; (800e70c <_svfiprintf_r+0x1ec>)
 800e6c8:	a904      	add	r1, sp, #16
 800e6ca:	4640      	mov	r0, r8
 800e6cc:	f3af 8000 	nop.w
 800e6d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e6d4:	4681      	mov	r9, r0
 800e6d6:	d1d6      	bne.n	800e686 <_svfiprintf_r+0x166>
 800e6d8:	89a3      	ldrh	r3, [r4, #12]
 800e6da:	065b      	lsls	r3, r3, #25
 800e6dc:	f53f af35 	bmi.w	800e54a <_svfiprintf_r+0x2a>
 800e6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6e2:	b01d      	add	sp, #116	; 0x74
 800e6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e8:	ab03      	add	r3, sp, #12
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	4622      	mov	r2, r4
 800e6ee:	4b07      	ldr	r3, [pc, #28]	; (800e70c <_svfiprintf_r+0x1ec>)
 800e6f0:	a904      	add	r1, sp, #16
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	f000 f882 	bl	800e7fc <_printf_i>
 800e6f8:	e7ea      	b.n	800e6d0 <_svfiprintf_r+0x1b0>
 800e6fa:	bf00      	nop
 800e6fc:	0800ed20 	.word	0x0800ed20
 800e700:	0800ed26 	.word	0x0800ed26
 800e704:	0800ed2a 	.word	0x0800ed2a
 800e708:	00000000 	.word	0x00000000
 800e70c:	0800e46d 	.word	0x0800e46d

0800e710 <_printf_common>:
 800e710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e714:	4691      	mov	r9, r2
 800e716:	461f      	mov	r7, r3
 800e718:	688a      	ldr	r2, [r1, #8]
 800e71a:	690b      	ldr	r3, [r1, #16]
 800e71c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e720:	4293      	cmp	r3, r2
 800e722:	bfb8      	it	lt
 800e724:	4613      	movlt	r3, r2
 800e726:	f8c9 3000 	str.w	r3, [r9]
 800e72a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e72e:	4606      	mov	r6, r0
 800e730:	460c      	mov	r4, r1
 800e732:	b112      	cbz	r2, 800e73a <_printf_common+0x2a>
 800e734:	3301      	adds	r3, #1
 800e736:	f8c9 3000 	str.w	r3, [r9]
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	0699      	lsls	r1, r3, #26
 800e73e:	bf42      	ittt	mi
 800e740:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e744:	3302      	addmi	r3, #2
 800e746:	f8c9 3000 	strmi.w	r3, [r9]
 800e74a:	6825      	ldr	r5, [r4, #0]
 800e74c:	f015 0506 	ands.w	r5, r5, #6
 800e750:	d107      	bne.n	800e762 <_printf_common+0x52>
 800e752:	f104 0a19 	add.w	sl, r4, #25
 800e756:	68e3      	ldr	r3, [r4, #12]
 800e758:	f8d9 2000 	ldr.w	r2, [r9]
 800e75c:	1a9b      	subs	r3, r3, r2
 800e75e:	42ab      	cmp	r3, r5
 800e760:	dc28      	bgt.n	800e7b4 <_printf_common+0xa4>
 800e762:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e766:	6822      	ldr	r2, [r4, #0]
 800e768:	3300      	adds	r3, #0
 800e76a:	bf18      	it	ne
 800e76c:	2301      	movne	r3, #1
 800e76e:	0692      	lsls	r2, r2, #26
 800e770:	d42d      	bmi.n	800e7ce <_printf_common+0xbe>
 800e772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e776:	4639      	mov	r1, r7
 800e778:	4630      	mov	r0, r6
 800e77a:	47c0      	blx	r8
 800e77c:	3001      	adds	r0, #1
 800e77e:	d020      	beq.n	800e7c2 <_printf_common+0xb2>
 800e780:	6823      	ldr	r3, [r4, #0]
 800e782:	68e5      	ldr	r5, [r4, #12]
 800e784:	f8d9 2000 	ldr.w	r2, [r9]
 800e788:	f003 0306 	and.w	r3, r3, #6
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	bf08      	it	eq
 800e790:	1aad      	subeq	r5, r5, r2
 800e792:	68a3      	ldr	r3, [r4, #8]
 800e794:	6922      	ldr	r2, [r4, #16]
 800e796:	bf0c      	ite	eq
 800e798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e79c:	2500      	movne	r5, #0
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	bfc4      	itt	gt
 800e7a2:	1a9b      	subgt	r3, r3, r2
 800e7a4:	18ed      	addgt	r5, r5, r3
 800e7a6:	f04f 0900 	mov.w	r9, #0
 800e7aa:	341a      	adds	r4, #26
 800e7ac:	454d      	cmp	r5, r9
 800e7ae:	d11a      	bne.n	800e7e6 <_printf_common+0xd6>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	e008      	b.n	800e7c6 <_printf_common+0xb6>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	4652      	mov	r2, sl
 800e7b8:	4639      	mov	r1, r7
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	47c0      	blx	r8
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d103      	bne.n	800e7ca <_printf_common+0xba>
 800e7c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ca:	3501      	adds	r5, #1
 800e7cc:	e7c3      	b.n	800e756 <_printf_common+0x46>
 800e7ce:	18e1      	adds	r1, r4, r3
 800e7d0:	1c5a      	adds	r2, r3, #1
 800e7d2:	2030      	movs	r0, #48	; 0x30
 800e7d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7d8:	4422      	add	r2, r4
 800e7da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7e2:	3302      	adds	r3, #2
 800e7e4:	e7c5      	b.n	800e772 <_printf_common+0x62>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4622      	mov	r2, r4
 800e7ea:	4639      	mov	r1, r7
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	47c0      	blx	r8
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	d0e6      	beq.n	800e7c2 <_printf_common+0xb2>
 800e7f4:	f109 0901 	add.w	r9, r9, #1
 800e7f8:	e7d8      	b.n	800e7ac <_printf_common+0x9c>
	...

0800e7fc <_printf_i>:
 800e7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e800:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e804:	460c      	mov	r4, r1
 800e806:	7e09      	ldrb	r1, [r1, #24]
 800e808:	b085      	sub	sp, #20
 800e80a:	296e      	cmp	r1, #110	; 0x6e
 800e80c:	4617      	mov	r7, r2
 800e80e:	4606      	mov	r6, r0
 800e810:	4698      	mov	r8, r3
 800e812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e814:	f000 80b3 	beq.w	800e97e <_printf_i+0x182>
 800e818:	d822      	bhi.n	800e860 <_printf_i+0x64>
 800e81a:	2963      	cmp	r1, #99	; 0x63
 800e81c:	d036      	beq.n	800e88c <_printf_i+0x90>
 800e81e:	d80a      	bhi.n	800e836 <_printf_i+0x3a>
 800e820:	2900      	cmp	r1, #0
 800e822:	f000 80b9 	beq.w	800e998 <_printf_i+0x19c>
 800e826:	2958      	cmp	r1, #88	; 0x58
 800e828:	f000 8083 	beq.w	800e932 <_printf_i+0x136>
 800e82c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e830:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e834:	e032      	b.n	800e89c <_printf_i+0xa0>
 800e836:	2964      	cmp	r1, #100	; 0x64
 800e838:	d001      	beq.n	800e83e <_printf_i+0x42>
 800e83a:	2969      	cmp	r1, #105	; 0x69
 800e83c:	d1f6      	bne.n	800e82c <_printf_i+0x30>
 800e83e:	6820      	ldr	r0, [r4, #0]
 800e840:	6813      	ldr	r3, [r2, #0]
 800e842:	0605      	lsls	r5, r0, #24
 800e844:	f103 0104 	add.w	r1, r3, #4
 800e848:	d52a      	bpl.n	800e8a0 <_printf_i+0xa4>
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	6011      	str	r1, [r2, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	da03      	bge.n	800e85a <_printf_i+0x5e>
 800e852:	222d      	movs	r2, #45	; 0x2d
 800e854:	425b      	negs	r3, r3
 800e856:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e85a:	486f      	ldr	r0, [pc, #444]	; (800ea18 <_printf_i+0x21c>)
 800e85c:	220a      	movs	r2, #10
 800e85e:	e039      	b.n	800e8d4 <_printf_i+0xd8>
 800e860:	2973      	cmp	r1, #115	; 0x73
 800e862:	f000 809d 	beq.w	800e9a0 <_printf_i+0x1a4>
 800e866:	d808      	bhi.n	800e87a <_printf_i+0x7e>
 800e868:	296f      	cmp	r1, #111	; 0x6f
 800e86a:	d020      	beq.n	800e8ae <_printf_i+0xb2>
 800e86c:	2970      	cmp	r1, #112	; 0x70
 800e86e:	d1dd      	bne.n	800e82c <_printf_i+0x30>
 800e870:	6823      	ldr	r3, [r4, #0]
 800e872:	f043 0320 	orr.w	r3, r3, #32
 800e876:	6023      	str	r3, [r4, #0]
 800e878:	e003      	b.n	800e882 <_printf_i+0x86>
 800e87a:	2975      	cmp	r1, #117	; 0x75
 800e87c:	d017      	beq.n	800e8ae <_printf_i+0xb2>
 800e87e:	2978      	cmp	r1, #120	; 0x78
 800e880:	d1d4      	bne.n	800e82c <_printf_i+0x30>
 800e882:	2378      	movs	r3, #120	; 0x78
 800e884:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e888:	4864      	ldr	r0, [pc, #400]	; (800ea1c <_printf_i+0x220>)
 800e88a:	e055      	b.n	800e938 <_printf_i+0x13c>
 800e88c:	6813      	ldr	r3, [r2, #0]
 800e88e:	1d19      	adds	r1, r3, #4
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	6011      	str	r1, [r2, #0]
 800e894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e89c:	2301      	movs	r3, #1
 800e89e:	e08c      	b.n	800e9ba <_printf_i+0x1be>
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	6011      	str	r1, [r2, #0]
 800e8a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e8a8:	bf18      	it	ne
 800e8aa:	b21b      	sxthne	r3, r3
 800e8ac:	e7cf      	b.n	800e84e <_printf_i+0x52>
 800e8ae:	6813      	ldr	r3, [r2, #0]
 800e8b0:	6825      	ldr	r5, [r4, #0]
 800e8b2:	1d18      	adds	r0, r3, #4
 800e8b4:	6010      	str	r0, [r2, #0]
 800e8b6:	0628      	lsls	r0, r5, #24
 800e8b8:	d501      	bpl.n	800e8be <_printf_i+0xc2>
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	e002      	b.n	800e8c4 <_printf_i+0xc8>
 800e8be:	0668      	lsls	r0, r5, #25
 800e8c0:	d5fb      	bpl.n	800e8ba <_printf_i+0xbe>
 800e8c2:	881b      	ldrh	r3, [r3, #0]
 800e8c4:	4854      	ldr	r0, [pc, #336]	; (800ea18 <_printf_i+0x21c>)
 800e8c6:	296f      	cmp	r1, #111	; 0x6f
 800e8c8:	bf14      	ite	ne
 800e8ca:	220a      	movne	r2, #10
 800e8cc:	2208      	moveq	r2, #8
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8d4:	6865      	ldr	r5, [r4, #4]
 800e8d6:	60a5      	str	r5, [r4, #8]
 800e8d8:	2d00      	cmp	r5, #0
 800e8da:	f2c0 8095 	blt.w	800ea08 <_printf_i+0x20c>
 800e8de:	6821      	ldr	r1, [r4, #0]
 800e8e0:	f021 0104 	bic.w	r1, r1, #4
 800e8e4:	6021      	str	r1, [r4, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d13d      	bne.n	800e966 <_printf_i+0x16a>
 800e8ea:	2d00      	cmp	r5, #0
 800e8ec:	f040 808e 	bne.w	800ea0c <_printf_i+0x210>
 800e8f0:	4665      	mov	r5, ip
 800e8f2:	2a08      	cmp	r2, #8
 800e8f4:	d10b      	bne.n	800e90e <_printf_i+0x112>
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	07db      	lsls	r3, r3, #31
 800e8fa:	d508      	bpl.n	800e90e <_printf_i+0x112>
 800e8fc:	6923      	ldr	r3, [r4, #16]
 800e8fe:	6862      	ldr	r2, [r4, #4]
 800e900:	429a      	cmp	r2, r3
 800e902:	bfde      	ittt	le
 800e904:	2330      	movle	r3, #48	; 0x30
 800e906:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e90a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e90e:	ebac 0305 	sub.w	r3, ip, r5
 800e912:	6123      	str	r3, [r4, #16]
 800e914:	f8cd 8000 	str.w	r8, [sp]
 800e918:	463b      	mov	r3, r7
 800e91a:	aa03      	add	r2, sp, #12
 800e91c:	4621      	mov	r1, r4
 800e91e:	4630      	mov	r0, r6
 800e920:	f7ff fef6 	bl	800e710 <_printf_common>
 800e924:	3001      	adds	r0, #1
 800e926:	d14d      	bne.n	800e9c4 <_printf_i+0x1c8>
 800e928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e92c:	b005      	add	sp, #20
 800e92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e932:	4839      	ldr	r0, [pc, #228]	; (800ea18 <_printf_i+0x21c>)
 800e934:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e938:	6813      	ldr	r3, [r2, #0]
 800e93a:	6821      	ldr	r1, [r4, #0]
 800e93c:	1d1d      	adds	r5, r3, #4
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6015      	str	r5, [r2, #0]
 800e942:	060a      	lsls	r2, r1, #24
 800e944:	d50b      	bpl.n	800e95e <_printf_i+0x162>
 800e946:	07ca      	lsls	r2, r1, #31
 800e948:	bf44      	itt	mi
 800e94a:	f041 0120 	orrmi.w	r1, r1, #32
 800e94e:	6021      	strmi	r1, [r4, #0]
 800e950:	b91b      	cbnz	r3, 800e95a <_printf_i+0x15e>
 800e952:	6822      	ldr	r2, [r4, #0]
 800e954:	f022 0220 	bic.w	r2, r2, #32
 800e958:	6022      	str	r2, [r4, #0]
 800e95a:	2210      	movs	r2, #16
 800e95c:	e7b7      	b.n	800e8ce <_printf_i+0xd2>
 800e95e:	064d      	lsls	r5, r1, #25
 800e960:	bf48      	it	mi
 800e962:	b29b      	uxthmi	r3, r3
 800e964:	e7ef      	b.n	800e946 <_printf_i+0x14a>
 800e966:	4665      	mov	r5, ip
 800e968:	fbb3 f1f2 	udiv	r1, r3, r2
 800e96c:	fb02 3311 	mls	r3, r2, r1, r3
 800e970:	5cc3      	ldrb	r3, [r0, r3]
 800e972:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e976:	460b      	mov	r3, r1
 800e978:	2900      	cmp	r1, #0
 800e97a:	d1f5      	bne.n	800e968 <_printf_i+0x16c>
 800e97c:	e7b9      	b.n	800e8f2 <_printf_i+0xf6>
 800e97e:	6813      	ldr	r3, [r2, #0]
 800e980:	6825      	ldr	r5, [r4, #0]
 800e982:	6961      	ldr	r1, [r4, #20]
 800e984:	1d18      	adds	r0, r3, #4
 800e986:	6010      	str	r0, [r2, #0]
 800e988:	0628      	lsls	r0, r5, #24
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	d501      	bpl.n	800e992 <_printf_i+0x196>
 800e98e:	6019      	str	r1, [r3, #0]
 800e990:	e002      	b.n	800e998 <_printf_i+0x19c>
 800e992:	066a      	lsls	r2, r5, #25
 800e994:	d5fb      	bpl.n	800e98e <_printf_i+0x192>
 800e996:	8019      	strh	r1, [r3, #0]
 800e998:	2300      	movs	r3, #0
 800e99a:	6123      	str	r3, [r4, #16]
 800e99c:	4665      	mov	r5, ip
 800e99e:	e7b9      	b.n	800e914 <_printf_i+0x118>
 800e9a0:	6813      	ldr	r3, [r2, #0]
 800e9a2:	1d19      	adds	r1, r3, #4
 800e9a4:	6011      	str	r1, [r2, #0]
 800e9a6:	681d      	ldr	r5, [r3, #0]
 800e9a8:	6862      	ldr	r2, [r4, #4]
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	f7f1 fc27 	bl	8000200 <memchr>
 800e9b2:	b108      	cbz	r0, 800e9b8 <_printf_i+0x1bc>
 800e9b4:	1b40      	subs	r0, r0, r5
 800e9b6:	6060      	str	r0, [r4, #4]
 800e9b8:	6863      	ldr	r3, [r4, #4]
 800e9ba:	6123      	str	r3, [r4, #16]
 800e9bc:	2300      	movs	r3, #0
 800e9be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9c2:	e7a7      	b.n	800e914 <_printf_i+0x118>
 800e9c4:	6923      	ldr	r3, [r4, #16]
 800e9c6:	462a      	mov	r2, r5
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	47c0      	blx	r8
 800e9ce:	3001      	adds	r0, #1
 800e9d0:	d0aa      	beq.n	800e928 <_printf_i+0x12c>
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	079b      	lsls	r3, r3, #30
 800e9d6:	d413      	bmi.n	800ea00 <_printf_i+0x204>
 800e9d8:	68e0      	ldr	r0, [r4, #12]
 800e9da:	9b03      	ldr	r3, [sp, #12]
 800e9dc:	4298      	cmp	r0, r3
 800e9de:	bfb8      	it	lt
 800e9e0:	4618      	movlt	r0, r3
 800e9e2:	e7a3      	b.n	800e92c <_printf_i+0x130>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	464a      	mov	r2, r9
 800e9e8:	4639      	mov	r1, r7
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	47c0      	blx	r8
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	d09a      	beq.n	800e928 <_printf_i+0x12c>
 800e9f2:	3501      	adds	r5, #1
 800e9f4:	68e3      	ldr	r3, [r4, #12]
 800e9f6:	9a03      	ldr	r2, [sp, #12]
 800e9f8:	1a9b      	subs	r3, r3, r2
 800e9fa:	42ab      	cmp	r3, r5
 800e9fc:	dcf2      	bgt.n	800e9e4 <_printf_i+0x1e8>
 800e9fe:	e7eb      	b.n	800e9d8 <_printf_i+0x1dc>
 800ea00:	2500      	movs	r5, #0
 800ea02:	f104 0919 	add.w	r9, r4, #25
 800ea06:	e7f5      	b.n	800e9f4 <_printf_i+0x1f8>
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1ac      	bne.n	800e966 <_printf_i+0x16a>
 800ea0c:	7803      	ldrb	r3, [r0, #0]
 800ea0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea16:	e76c      	b.n	800e8f2 <_printf_i+0xf6>
 800ea18:	0800ed31 	.word	0x0800ed31
 800ea1c:	0800ed42 	.word	0x0800ed42

0800ea20 <memcpy>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	1e43      	subs	r3, r0, #1
 800ea24:	440a      	add	r2, r1
 800ea26:	4291      	cmp	r1, r2
 800ea28:	d100      	bne.n	800ea2c <memcpy+0xc>
 800ea2a:	bd10      	pop	{r4, pc}
 800ea2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea34:	e7f7      	b.n	800ea26 <memcpy+0x6>

0800ea36 <memmove>:
 800ea36:	4288      	cmp	r0, r1
 800ea38:	b510      	push	{r4, lr}
 800ea3a:	eb01 0302 	add.w	r3, r1, r2
 800ea3e:	d807      	bhi.n	800ea50 <memmove+0x1a>
 800ea40:	1e42      	subs	r2, r0, #1
 800ea42:	4299      	cmp	r1, r3
 800ea44:	d00a      	beq.n	800ea5c <memmove+0x26>
 800ea46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ea4e:	e7f8      	b.n	800ea42 <memmove+0xc>
 800ea50:	4283      	cmp	r3, r0
 800ea52:	d9f5      	bls.n	800ea40 <memmove+0xa>
 800ea54:	1881      	adds	r1, r0, r2
 800ea56:	1ad2      	subs	r2, r2, r3
 800ea58:	42d3      	cmn	r3, r2
 800ea5a:	d100      	bne.n	800ea5e <memmove+0x28>
 800ea5c:	bd10      	pop	{r4, pc}
 800ea5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ea66:	e7f7      	b.n	800ea58 <memmove+0x22>

0800ea68 <_free_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	2900      	cmp	r1, #0
 800ea6e:	d045      	beq.n	800eafc <_free_r+0x94>
 800ea70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea74:	1f0c      	subs	r4, r1, #4
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	bfb8      	it	lt
 800ea7a:	18e4      	addlt	r4, r4, r3
 800ea7c:	f000 f8d2 	bl	800ec24 <__malloc_lock>
 800ea80:	4a1f      	ldr	r2, [pc, #124]	; (800eb00 <_free_r+0x98>)
 800ea82:	6813      	ldr	r3, [r2, #0]
 800ea84:	4610      	mov	r0, r2
 800ea86:	b933      	cbnz	r3, 800ea96 <_free_r+0x2e>
 800ea88:	6063      	str	r3, [r4, #4]
 800ea8a:	6014      	str	r4, [r2, #0]
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea92:	f000 b8c8 	b.w	800ec26 <__malloc_unlock>
 800ea96:	42a3      	cmp	r3, r4
 800ea98:	d90c      	bls.n	800eab4 <_free_r+0x4c>
 800ea9a:	6821      	ldr	r1, [r4, #0]
 800ea9c:	1862      	adds	r2, r4, r1
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	bf04      	itt	eq
 800eaa2:	681a      	ldreq	r2, [r3, #0]
 800eaa4:	685b      	ldreq	r3, [r3, #4]
 800eaa6:	6063      	str	r3, [r4, #4]
 800eaa8:	bf04      	itt	eq
 800eaaa:	1852      	addeq	r2, r2, r1
 800eaac:	6022      	streq	r2, [r4, #0]
 800eaae:	6004      	str	r4, [r0, #0]
 800eab0:	e7ec      	b.n	800ea8c <_free_r+0x24>
 800eab2:	4613      	mov	r3, r2
 800eab4:	685a      	ldr	r2, [r3, #4]
 800eab6:	b10a      	cbz	r2, 800eabc <_free_r+0x54>
 800eab8:	42a2      	cmp	r2, r4
 800eaba:	d9fa      	bls.n	800eab2 <_free_r+0x4a>
 800eabc:	6819      	ldr	r1, [r3, #0]
 800eabe:	1858      	adds	r0, r3, r1
 800eac0:	42a0      	cmp	r0, r4
 800eac2:	d10b      	bne.n	800eadc <_free_r+0x74>
 800eac4:	6820      	ldr	r0, [r4, #0]
 800eac6:	4401      	add	r1, r0
 800eac8:	1858      	adds	r0, r3, r1
 800eaca:	4282      	cmp	r2, r0
 800eacc:	6019      	str	r1, [r3, #0]
 800eace:	d1dd      	bne.n	800ea8c <_free_r+0x24>
 800ead0:	6810      	ldr	r0, [r2, #0]
 800ead2:	6852      	ldr	r2, [r2, #4]
 800ead4:	605a      	str	r2, [r3, #4]
 800ead6:	4401      	add	r1, r0
 800ead8:	6019      	str	r1, [r3, #0]
 800eada:	e7d7      	b.n	800ea8c <_free_r+0x24>
 800eadc:	d902      	bls.n	800eae4 <_free_r+0x7c>
 800eade:	230c      	movs	r3, #12
 800eae0:	602b      	str	r3, [r5, #0]
 800eae2:	e7d3      	b.n	800ea8c <_free_r+0x24>
 800eae4:	6820      	ldr	r0, [r4, #0]
 800eae6:	1821      	adds	r1, r4, r0
 800eae8:	428a      	cmp	r2, r1
 800eaea:	bf04      	itt	eq
 800eaec:	6811      	ldreq	r1, [r2, #0]
 800eaee:	6852      	ldreq	r2, [r2, #4]
 800eaf0:	6062      	str	r2, [r4, #4]
 800eaf2:	bf04      	itt	eq
 800eaf4:	1809      	addeq	r1, r1, r0
 800eaf6:	6021      	streq	r1, [r4, #0]
 800eaf8:	605c      	str	r4, [r3, #4]
 800eafa:	e7c7      	b.n	800ea8c <_free_r+0x24>
 800eafc:	bd38      	pop	{r3, r4, r5, pc}
 800eafe:	bf00      	nop
 800eb00:	20000474 	.word	0x20000474

0800eb04 <_malloc_r>:
 800eb04:	b570      	push	{r4, r5, r6, lr}
 800eb06:	1ccd      	adds	r5, r1, #3
 800eb08:	f025 0503 	bic.w	r5, r5, #3
 800eb0c:	3508      	adds	r5, #8
 800eb0e:	2d0c      	cmp	r5, #12
 800eb10:	bf38      	it	cc
 800eb12:	250c      	movcc	r5, #12
 800eb14:	2d00      	cmp	r5, #0
 800eb16:	4606      	mov	r6, r0
 800eb18:	db01      	blt.n	800eb1e <_malloc_r+0x1a>
 800eb1a:	42a9      	cmp	r1, r5
 800eb1c:	d903      	bls.n	800eb26 <_malloc_r+0x22>
 800eb1e:	230c      	movs	r3, #12
 800eb20:	6033      	str	r3, [r6, #0]
 800eb22:	2000      	movs	r0, #0
 800eb24:	bd70      	pop	{r4, r5, r6, pc}
 800eb26:	f000 f87d 	bl	800ec24 <__malloc_lock>
 800eb2a:	4a21      	ldr	r2, [pc, #132]	; (800ebb0 <_malloc_r+0xac>)
 800eb2c:	6814      	ldr	r4, [r2, #0]
 800eb2e:	4621      	mov	r1, r4
 800eb30:	b991      	cbnz	r1, 800eb58 <_malloc_r+0x54>
 800eb32:	4c20      	ldr	r4, [pc, #128]	; (800ebb4 <_malloc_r+0xb0>)
 800eb34:	6823      	ldr	r3, [r4, #0]
 800eb36:	b91b      	cbnz	r3, 800eb40 <_malloc_r+0x3c>
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f000 f863 	bl	800ec04 <_sbrk_r>
 800eb3e:	6020      	str	r0, [r4, #0]
 800eb40:	4629      	mov	r1, r5
 800eb42:	4630      	mov	r0, r6
 800eb44:	f000 f85e 	bl	800ec04 <_sbrk_r>
 800eb48:	1c43      	adds	r3, r0, #1
 800eb4a:	d124      	bne.n	800eb96 <_malloc_r+0x92>
 800eb4c:	230c      	movs	r3, #12
 800eb4e:	6033      	str	r3, [r6, #0]
 800eb50:	4630      	mov	r0, r6
 800eb52:	f000 f868 	bl	800ec26 <__malloc_unlock>
 800eb56:	e7e4      	b.n	800eb22 <_malloc_r+0x1e>
 800eb58:	680b      	ldr	r3, [r1, #0]
 800eb5a:	1b5b      	subs	r3, r3, r5
 800eb5c:	d418      	bmi.n	800eb90 <_malloc_r+0x8c>
 800eb5e:	2b0b      	cmp	r3, #11
 800eb60:	d90f      	bls.n	800eb82 <_malloc_r+0x7e>
 800eb62:	600b      	str	r3, [r1, #0]
 800eb64:	50cd      	str	r5, [r1, r3]
 800eb66:	18cc      	adds	r4, r1, r3
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f000 f85c 	bl	800ec26 <__malloc_unlock>
 800eb6e:	f104 000b 	add.w	r0, r4, #11
 800eb72:	1d23      	adds	r3, r4, #4
 800eb74:	f020 0007 	bic.w	r0, r0, #7
 800eb78:	1ac3      	subs	r3, r0, r3
 800eb7a:	d0d3      	beq.n	800eb24 <_malloc_r+0x20>
 800eb7c:	425a      	negs	r2, r3
 800eb7e:	50e2      	str	r2, [r4, r3]
 800eb80:	e7d0      	b.n	800eb24 <_malloc_r+0x20>
 800eb82:	428c      	cmp	r4, r1
 800eb84:	684b      	ldr	r3, [r1, #4]
 800eb86:	bf16      	itet	ne
 800eb88:	6063      	strne	r3, [r4, #4]
 800eb8a:	6013      	streq	r3, [r2, #0]
 800eb8c:	460c      	movne	r4, r1
 800eb8e:	e7eb      	b.n	800eb68 <_malloc_r+0x64>
 800eb90:	460c      	mov	r4, r1
 800eb92:	6849      	ldr	r1, [r1, #4]
 800eb94:	e7cc      	b.n	800eb30 <_malloc_r+0x2c>
 800eb96:	1cc4      	adds	r4, r0, #3
 800eb98:	f024 0403 	bic.w	r4, r4, #3
 800eb9c:	42a0      	cmp	r0, r4
 800eb9e:	d005      	beq.n	800ebac <_malloc_r+0xa8>
 800eba0:	1a21      	subs	r1, r4, r0
 800eba2:	4630      	mov	r0, r6
 800eba4:	f000 f82e 	bl	800ec04 <_sbrk_r>
 800eba8:	3001      	adds	r0, #1
 800ebaa:	d0cf      	beq.n	800eb4c <_malloc_r+0x48>
 800ebac:	6025      	str	r5, [r4, #0]
 800ebae:	e7db      	b.n	800eb68 <_malloc_r+0x64>
 800ebb0:	20000474 	.word	0x20000474
 800ebb4:	20000478 	.word	0x20000478

0800ebb8 <_realloc_r>:
 800ebb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebba:	4607      	mov	r7, r0
 800ebbc:	4614      	mov	r4, r2
 800ebbe:	460e      	mov	r6, r1
 800ebc0:	b921      	cbnz	r1, 800ebcc <_realloc_r+0x14>
 800ebc2:	4611      	mov	r1, r2
 800ebc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ebc8:	f7ff bf9c 	b.w	800eb04 <_malloc_r>
 800ebcc:	b922      	cbnz	r2, 800ebd8 <_realloc_r+0x20>
 800ebce:	f7ff ff4b 	bl	800ea68 <_free_r>
 800ebd2:	4625      	mov	r5, r4
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebd8:	f000 f826 	bl	800ec28 <_malloc_usable_size_r>
 800ebdc:	42a0      	cmp	r0, r4
 800ebde:	d20f      	bcs.n	800ec00 <_realloc_r+0x48>
 800ebe0:	4621      	mov	r1, r4
 800ebe2:	4638      	mov	r0, r7
 800ebe4:	f7ff ff8e 	bl	800eb04 <_malloc_r>
 800ebe8:	4605      	mov	r5, r0
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d0f2      	beq.n	800ebd4 <_realloc_r+0x1c>
 800ebee:	4631      	mov	r1, r6
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	f7ff ff15 	bl	800ea20 <memcpy>
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	f7ff ff35 	bl	800ea68 <_free_r>
 800ebfe:	e7e9      	b.n	800ebd4 <_realloc_r+0x1c>
 800ec00:	4635      	mov	r5, r6
 800ec02:	e7e7      	b.n	800ebd4 <_realloc_r+0x1c>

0800ec04 <_sbrk_r>:
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	4c06      	ldr	r4, [pc, #24]	; (800ec20 <_sbrk_r+0x1c>)
 800ec08:	2300      	movs	r3, #0
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	4608      	mov	r0, r1
 800ec0e:	6023      	str	r3, [r4, #0]
 800ec10:	f7fe fd54 	bl	800d6bc <_sbrk>
 800ec14:	1c43      	adds	r3, r0, #1
 800ec16:	d102      	bne.n	800ec1e <_sbrk_r+0x1a>
 800ec18:	6823      	ldr	r3, [r4, #0]
 800ec1a:	b103      	cbz	r3, 800ec1e <_sbrk_r+0x1a>
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	20031320 	.word	0x20031320

0800ec24 <__malloc_lock>:
 800ec24:	4770      	bx	lr

0800ec26 <__malloc_unlock>:
 800ec26:	4770      	bx	lr

0800ec28 <_malloc_usable_size_r>:
 800ec28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec2c:	1f18      	subs	r0, r3, #4
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	bfbc      	itt	lt
 800ec32:	580b      	ldrlt	r3, [r1, r0]
 800ec34:	18c0      	addlt	r0, r0, r3
 800ec36:	4770      	bx	lr

0800ec38 <_init>:
 800ec38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3a:	bf00      	nop
 800ec3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec3e:	bc08      	pop	{r3}
 800ec40:	469e      	mov	lr, r3
 800ec42:	4770      	bx	lr

0800ec44 <_fini>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	bf00      	nop
 800ec48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec4a:	bc08      	pop	{r3}
 800ec4c:	469e      	mov	lr, r3
 800ec4e:	4770      	bx	lr
