
anc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004580  08004580  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004588  08004588  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  0800459c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800459c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a611  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c70  00000000  00000000  0002a64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e0  00000000  00000000  0002c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002cca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a10  00000000  00000000  0002d598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081ea  00000000  00000000  0004efa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d04b4  00000000  00000000  00057192  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002968  00000000  00000000  001276c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004548 	.word	0x08004548

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004548 	.word	0x08004548

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f92b 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f003 f9e2 	bl	8004100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f943 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	f000 f90b 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000004 	.word	0x20000004
 8000da4:	20000000 	.word	0x20000000

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000038 	.word	0x20000038

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000038 	.word	0x20000038

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff29 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff3e 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff31 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa2 	bl	8000f44 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff feda 	bl	8000dd0 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e099      	b.n	800115c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2202      	movs	r2, #2
 8001034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001048:	e00f      	b.n	800106a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800104a:	f7ff fec1 	bl	8000dd0 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b05      	cmp	r3, #5
 8001056:	d908      	bls.n	800106a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2220      	movs	r2, #32
 800105c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2203      	movs	r2, #3
 8001062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e078      	b.n	800115c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e8      	bne.n	800104a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <HAL_DMA_Init+0x158>)
 8001084:	4013      	ands	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d107      	bne.n	80010d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4313      	orrs	r3, r2
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f023 0307 	bic.w	r3, r3, #7
 80010ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d117      	bne.n	800112e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00e      	beq.n	800112e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fa99 	bl	8001648 <DMA_CheckFifoParam>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2240      	movs	r2, #64	; 0x40
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800112a:	2301      	movs	r3, #1
 800112c:	e016      	b.n	800115c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fa50 	bl	80015dc <DMA_CalcBaseAndBitshift>
 800113c:	4603      	mov	r3, r0
 800113e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	223f      	movs	r2, #63	; 0x3f
 8001146:	409a      	lsls	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	f010803f 	.word	0xf010803f

08001168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_DMA_Start_IT+0x26>
 800118a:	2302      	movs	r3, #2
 800118c:	e048      	b.n	8001220 <HAL_DMA_Start_IT+0xb8>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d137      	bne.n	8001212 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2202      	movs	r2, #2
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 f9e2 	bl	8001580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c0:	223f      	movs	r2, #63	; 0x3f
 80011c2:	409a      	lsls	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0216 	orr.w	r2, r2, #22
 80011d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e005      	b.n	800121e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800121a:	2302      	movs	r3, #2
 800121c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800121e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d004      	beq.n	8001246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00c      	b.n	8001260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2205      	movs	r2, #5
 800124a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0201 	bic.w	r2, r2, #1
 800125c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001278:	4b92      	ldr	r3, [pc, #584]	; (80014c4 <HAL_DMA_IRQHandler+0x258>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a92      	ldr	r2, [pc, #584]	; (80014c8 <HAL_DMA_IRQHandler+0x25c>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0a9b      	lsrs	r3, r3, #10
 8001284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001296:	2208      	movs	r2, #8
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d01a      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d013      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0204 	bic.w	r2, r2, #4
 80012be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	2208      	movs	r2, #8
 80012c6:	409a      	lsls	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	f043 0201 	orr.w	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	2201      	movs	r2, #1
 80012de:	409a      	lsls	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d012      	beq.n	800130e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	2201      	movs	r2, #1
 80012fc:	409a      	lsls	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f043 0202 	orr.w	r2, r3, #2
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001312:	2204      	movs	r2, #4
 8001314:	409a      	lsls	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d012      	beq.n	8001344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2204      	movs	r2, #4
 8001332:	409a      	lsls	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	f043 0204 	orr.w	r2, r3, #4
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	2210      	movs	r2, #16
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d043      	beq.n	80013dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d03c      	beq.n	80013dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2210      	movs	r2, #16
 8001368:	409a      	lsls	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d018      	beq.n	80013ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d108      	bne.n	800139c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d024      	beq.n	80013dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	4798      	blx	r3
 800139a:	e01f      	b.n	80013dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01b      	beq.n	80013dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	4798      	blx	r3
 80013ac:	e016      	b.n	80013dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d107      	bne.n	80013cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0208 	bic.w	r2, r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e0:	2220      	movs	r2, #32
 80013e2:	409a      	lsls	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 808e 	beq.w	800150a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 8086 	beq.w	800150a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001402:	2220      	movs	r2, #32
 8001404:	409a      	lsls	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b05      	cmp	r3, #5
 8001414:	d136      	bne.n	8001484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0216 	bic.w	r2, r2, #22
 8001424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <HAL_DMA_IRQHandler+0x1da>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0208 	bic.w	r2, r2, #8
 8001454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145a:	223f      	movs	r2, #63	; 0x3f
 800145c:	409a      	lsls	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001476:	2b00      	cmp	r3, #0
 8001478:	d07d      	beq.n	8001576 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	4798      	blx	r3
        }
        return;
 8001482:	e078      	b.n	8001576 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01c      	beq.n	80014cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d108      	bne.n	80014b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d030      	beq.n	800150a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
 80014b0:	e02b      	b.n	800150a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d027      	beq.n	800150a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
 80014c2:	e022      	b.n	800150a <HAL_DMA_IRQHandler+0x29e>
 80014c4:	20000008 	.word	0x20000008
 80014c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0210 	bic.w	r2, r2, #16
 80014e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150e:	2b00      	cmp	r3, #0
 8001510:	d032      	beq.n	8001578 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d022      	beq.n	8001564 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2205      	movs	r2, #5
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	429a      	cmp	r2, r3
 8001540:	d307      	bcc.n	8001552 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f2      	bne.n	8001536 <HAL_DMA_IRQHandler+0x2ca>
 8001550:	e000      	b.n	8001554 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001552:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
 8001574:	e000      	b.n	8001578 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001576:	bf00      	nop
    }
  }
}
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop

08001580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800159c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b40      	cmp	r3, #64	; 0x40
 80015ac:	d108      	bne.n	80015c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015be:	e007      	b.n	80015d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	3b10      	subs	r3, #16
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <DMA_CalcBaseAndBitshift+0x64>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015f6:	4a13      	ldr	r2, [pc, #76]	; (8001644 <DMA_CalcBaseAndBitshift+0x68>)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d909      	bls.n	800161e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001612:	f023 0303 	bic.w	r3, r3, #3
 8001616:	1d1a      	adds	r2, r3, #4
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	659a      	str	r2, [r3, #88]	; 0x58
 800161c:	e007      	b.n	800162e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	aaaaaaab 	.word	0xaaaaaaab
 8001644:	08004560 	.word	0x08004560

08001648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11f      	bne.n	80016a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d855      	bhi.n	8001714 <DMA_CheckFifoParam+0xcc>
 8001668:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <DMA_CheckFifoParam+0x28>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	08001681 	.word	0x08001681
 8001674:	08001693 	.word	0x08001693
 8001678:	08001681 	.word	0x08001681
 800167c:	08001715 	.word	0x08001715
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d045      	beq.n	8001718 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001690:	e042      	b.n	8001718 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800169a:	d13f      	bne.n	800171c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a0:	e03c      	b.n	800171c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016aa:	d121      	bne.n	80016f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d836      	bhi.n	8001720 <DMA_CheckFifoParam+0xd8>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <DMA_CheckFifoParam+0x70>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	080016c9 	.word	0x080016c9
 80016bc:	080016cf 	.word	0x080016cf
 80016c0:	080016c9 	.word	0x080016c9
 80016c4:	080016e1 	.word	0x080016e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
      break;
 80016cc:	e02f      	b.n	800172e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d024      	beq.n	8001724 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016de:	e021      	b.n	8001724 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016e8:	d11e      	bne.n	8001728 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016ee:	e01b      	b.n	8001728 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d902      	bls.n	80016fc <DMA_CheckFifoParam+0xb4>
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d003      	beq.n	8001702 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016fa:	e018      	b.n	800172e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001700:	e015      	b.n	800172e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00e      	beq.n	800172c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
      break;
 8001712:	e00b      	b.n	800172c <DMA_CheckFifoParam+0xe4>
      break;
 8001714:	bf00      	nop
 8001716:	e00a      	b.n	800172e <DMA_CheckFifoParam+0xe6>
      break;
 8001718:	bf00      	nop
 800171a:	e008      	b.n	800172e <DMA_CheckFifoParam+0xe6>
      break;
 800171c:	bf00      	nop
 800171e:	e006      	b.n	800172e <DMA_CheckFifoParam+0xe6>
      break;
 8001720:	bf00      	nop
 8001722:	e004      	b.n	800172e <DMA_CheckFifoParam+0xe6>
      break;
 8001724:	bf00      	nop
 8001726:	e002      	b.n	800172e <DMA_CheckFifoParam+0xe6>
      break;   
 8001728:	bf00      	nop
 800172a:	e000      	b.n	800172e <DMA_CheckFifoParam+0xe6>
      break;
 800172c:	bf00      	nop
    }
  } 
  
  return status; 
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e16b      	b.n	8001a30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001758:	2201      	movs	r2, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	429a      	cmp	r2, r3
 8001772:	f040 815a 	bne.w	8001a2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x4a>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b12      	cmp	r3, #18
 8001784:	d123      	bne.n	80017ce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	69b9      	ldr	r1, [r7, #24]
 80017ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0203 	and.w	r2, r3, #3
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d00b      	beq.n	8001822 <HAL_GPIO_Init+0xe6>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001816:	2b11      	cmp	r3, #17
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b12      	cmp	r3, #18
 8001820:	d130      	bne.n	8001884 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001858:	2201      	movs	r2, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 0201 	and.w	r2, r3, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80b4 	beq.w	8001a2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_GPIO_Init+0x308>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_GPIO_Init+0x308>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <HAL_GPIO_Init+0x308>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018de:	4a5a      	ldr	r2, [pc, #360]	; (8001a48 <HAL_GPIO_Init+0x30c>)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a51      	ldr	r2, [pc, #324]	; (8001a4c <HAL_GPIO_Init+0x310>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d02b      	beq.n	8001962 <HAL_GPIO_Init+0x226>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a50      	ldr	r2, [pc, #320]	; (8001a50 <HAL_GPIO_Init+0x314>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d025      	beq.n	800195e <HAL_GPIO_Init+0x222>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4f      	ldr	r2, [pc, #316]	; (8001a54 <HAL_GPIO_Init+0x318>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01f      	beq.n	800195a <HAL_GPIO_Init+0x21e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4e      	ldr	r2, [pc, #312]	; (8001a58 <HAL_GPIO_Init+0x31c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d019      	beq.n	8001956 <HAL_GPIO_Init+0x21a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4d      	ldr	r2, [pc, #308]	; (8001a5c <HAL_GPIO_Init+0x320>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d013      	beq.n	8001952 <HAL_GPIO_Init+0x216>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_GPIO_Init+0x324>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00d      	beq.n	800194e <HAL_GPIO_Init+0x212>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <HAL_GPIO_Init+0x328>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d007      	beq.n	800194a <HAL_GPIO_Init+0x20e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <HAL_GPIO_Init+0x32c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d101      	bne.n	8001946 <HAL_GPIO_Init+0x20a>
 8001942:	2307      	movs	r3, #7
 8001944:	e00e      	b.n	8001964 <HAL_GPIO_Init+0x228>
 8001946:	2308      	movs	r3, #8
 8001948:	e00c      	b.n	8001964 <HAL_GPIO_Init+0x228>
 800194a:	2306      	movs	r3, #6
 800194c:	e00a      	b.n	8001964 <HAL_GPIO_Init+0x228>
 800194e:	2305      	movs	r3, #5
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x228>
 8001952:	2304      	movs	r3, #4
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x228>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x228>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x228>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x228>
 8001962:	2300      	movs	r3, #0
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001974:	4934      	ldr	r1, [pc, #208]	; (8001a48 <HAL_GPIO_Init+0x30c>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_GPIO_Init+0x330>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a6:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <HAL_GPIO_Init+0x330>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ac:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_GPIO_Init+0x330>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d0:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <HAL_GPIO_Init+0x330>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_GPIO_Init+0x330>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_GPIO_Init+0x330>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_GPIO_Init+0x330>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a24:	4a11      	ldr	r2, [pc, #68]	; (8001a6c <HAL_GPIO_Init+0x330>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	f67f ae90 	bls.w	8001758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3724      	adds	r7, #36	; 0x24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40021400 	.word	0x40021400
 8001a64:	40021800 	.word	0x40021800
 8001a68:	40021c00 	.word	0x40021c00
 8001a6c:	40013c00 	.word	0x40013c00

08001a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a8c:	e003      	b.n	8001a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	041a      	lsls	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	619a      	str	r2, [r3, #24]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e22d      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d075      	beq.n	8001bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ac2:	4ba3      	ldr	r3, [pc, #652]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d00c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ace:	4ba0      	ldr	r3, [pc, #640]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d112      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ada:	4b9d      	ldr	r3, [pc, #628]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae6:	d10b      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	4b99      	ldr	r3, [pc, #612]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d05b      	beq.n	8001bac <HAL_RCC_OscConfig+0x108>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d157      	bne.n	8001bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e208      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d106      	bne.n	8001b18 <HAL_RCC_OscConfig+0x74>
 8001b0a:	4b91      	ldr	r3, [pc, #580]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01d      	b.n	8001b54 <HAL_RCC_OscConfig+0xb0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x98>
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a8a      	ldr	r2, [pc, #552]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a87      	ldr	r2, [pc, #540]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xb0>
 8001b3c:	4b84      	ldr	r3, [pc, #528]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a83      	ldr	r2, [pc, #524]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a80      	ldr	r2, [pc, #512]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f938 	bl	8000dd0 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff f934 	bl	8000dd0 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1cd      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0xc0>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff f924 	bl	8000dd0 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f920 	bl	8000dd0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1b9      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0xe8>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d063      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bba:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc6:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd2:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x152>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e18d      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4952      	ldr	r1, [pc, #328]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e03a      	b.n	8001c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f8d9 	bl	8000dd0 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff f8d5 	bl	8000dd0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e16e      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4940      	ldr	r1, [pc, #256]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f8b8 	bl	8000dd0 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff f8b4 	bl	8000dd0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e14d      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d030      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_RCC_OscConfig+0x2b4>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f898 	bl	8000dd0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f894 	bl	8000dd0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e12d      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x200>
 8001cc2:	e015      	b.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_RCC_OscConfig+0x2b4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff f881 	bl	8000dd0 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f87d 	bl	8000dd0 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e116      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a0 	beq.w	8001e3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10f      	bne.n	8001d2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x2b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d121      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_RCC_OscConfig+0x2b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_RCC_OscConfig+0x2b8>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f843 	bl	8000dd0 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e011      	b.n	8001d72 <HAL_RCC_OscConfig+0x2ce>
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	42470000 	.word	0x42470000
 8001d58:	42470e80 	.word	0x42470e80
 8001d5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d60:	f7ff f836 	bl	8000dd0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0cf      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x478>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
 8001d86:	4b66      	ldr	r3, [pc, #408]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	4a65      	ldr	r2, [pc, #404]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
 8001d92:	e01c      	b.n	8001dce <HAL_RCC_OscConfig+0x32a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x312>
 8001d9c:	4b60      	ldr	r3, [pc, #384]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a5f      	ldr	r2, [pc, #380]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x32a>
 8001db6:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	4a59      	ldr	r2, [pc, #356]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc2:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a56      	ldr	r2, [pc, #344]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fffb 	bl	8000dd0 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7fe fff7 	bl	8000dd0 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e08e      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ee      	beq.n	8001dde <HAL_RCC_OscConfig+0x33a>
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7fe ffe5 	bl	8000dd0 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ffe1 	bl	8000dd0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e078      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a3a      	ldr	r2, [pc, #232]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d064      	beq.n	8001f10 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e46:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d05c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d141      	bne.n	8001ede <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_RCC_OscConfig+0x480>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe ffb6 	bl	8000dd0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe ffb2 	bl	8000dd0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04b      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	491d      	ldr	r1, [pc, #116]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_RCC_OscConfig+0x480>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7fe ff8b 	bl	8000dd0 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7fe ff87 	bl	8000dd0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e020      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x41a>
 8001edc:	e018      	b.n	8001f10 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_RCC_OscConfig+0x480>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ff74 	bl	8000dd0 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe ff70 	bl	8000dd0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e009      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_RCC_OscConfig+0x47c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x448>
 8001f0a:	e001      	b.n	8001f10 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	42470060 	.word	0x42470060

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0ca      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_RCC_ClockConfig+0x1b4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d90c      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b64      	ldr	r3, [pc, #400]	; (80020dc <HAL_RCC_ClockConfig+0x1b4>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b62      	ldr	r3, [pc, #392]	; (80020dc <HAL_RCC_ClockConfig+0x1b4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b6      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b58      	ldr	r3, [pc, #352]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a57      	ldr	r2, [pc, #348]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a51      	ldr	r2, [pc, #324]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494c      	ldr	r1, [pc, #304]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d044      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d119      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07d      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06d      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e065      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4933      	ldr	r1, [pc, #204]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe feda 	bl	8000dd0 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe fed6 	bl	8000dd0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e04d      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_ClockConfig+0x1b4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d20c      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCC_ClockConfig+0x1b4>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <HAL_RCC_ClockConfig+0x1b4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e030      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4915      	ldr	r1, [pc, #84]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490d      	ldr	r1, [pc, #52]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f81d 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020b2:	4601      	mov	r1, r0
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	fa21 f303 	lsr.w	r3, r1, r3
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7fe fe3c 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00
 80020e0:	40023800 	.word	0x40023800
 80020e4:	08004568 	.word	0x08004568
 80020e8:	20000008 	.word	0x20000008

080020ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b04      	cmp	r3, #4
 800210c:	d007      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x32>
 800210e:	2b08      	cmp	r3, #8
 8002110:	d008      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x38>
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80b4 	bne.w	8002280 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b5e      	ldr	r3, [pc, #376]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800211a:	60bb      	str	r3, [r7, #8]
       break;
 800211c:	e0b3      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002120:	60bb      	str	r3, [r7, #8]
      break;
 8002122:	e0b0      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002124:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212e:	4b58      	ldr	r3, [pc, #352]	; (8002290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04a      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213a:	4b55      	ldr	r3, [pc, #340]	; (8002290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	f04f 0400 	mov.w	r4, #0
 8002144:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	ea03 0501 	and.w	r5, r3, r1
 8002150:	ea04 0602 	and.w	r6, r4, r2
 8002154:	4629      	mov	r1, r5
 8002156:	4632      	mov	r2, r6
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	f04f 0400 	mov.w	r4, #0
 8002160:	0154      	lsls	r4, r2, #5
 8002162:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002166:	014b      	lsls	r3, r1, #5
 8002168:	4619      	mov	r1, r3
 800216a:	4622      	mov	r2, r4
 800216c:	1b49      	subs	r1, r1, r5
 800216e:	eb62 0206 	sbc.w	r2, r2, r6
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	f04f 0400 	mov.w	r4, #0
 800217a:	0194      	lsls	r4, r2, #6
 800217c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002180:	018b      	lsls	r3, r1, #6
 8002182:	1a5b      	subs	r3, r3, r1
 8002184:	eb64 0402 	sbc.w	r4, r4, r2
 8002188:	f04f 0100 	mov.w	r1, #0
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	00e2      	lsls	r2, r4, #3
 8002192:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002196:	00d9      	lsls	r1, r3, #3
 8002198:	460b      	mov	r3, r1
 800219a:	4614      	mov	r4, r2
 800219c:	195b      	adds	r3, r3, r5
 800219e:	eb44 0406 	adc.w	r4, r4, r6
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	02a2      	lsls	r2, r4, #10
 80021ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021b0:	0299      	lsls	r1, r3, #10
 80021b2:	460b      	mov	r3, r1
 80021b4:	4614      	mov	r4, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	4621      	mov	r1, r4
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f04f 0400 	mov.w	r4, #0
 80021c0:	461a      	mov	r2, r3
 80021c2:	4623      	mov	r3, r4
 80021c4:	f7fe fc1e 	bl	8000a04 <__aeabi_uldivmod>
 80021c8:	4603      	mov	r3, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e049      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	f04f 0400 	mov.w	r4, #0
 80021da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	ea03 0501 	and.w	r5, r3, r1
 80021e6:	ea04 0602 	and.w	r6, r4, r2
 80021ea:	4629      	mov	r1, r5
 80021ec:	4632      	mov	r2, r6
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	f04f 0400 	mov.w	r4, #0
 80021f6:	0154      	lsls	r4, r2, #5
 80021f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021fc:	014b      	lsls	r3, r1, #5
 80021fe:	4619      	mov	r1, r3
 8002200:	4622      	mov	r2, r4
 8002202:	1b49      	subs	r1, r1, r5
 8002204:	eb62 0206 	sbc.w	r2, r2, r6
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	f04f 0400 	mov.w	r4, #0
 8002210:	0194      	lsls	r4, r2, #6
 8002212:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002216:	018b      	lsls	r3, r1, #6
 8002218:	1a5b      	subs	r3, r3, r1
 800221a:	eb64 0402 	sbc.w	r4, r4, r2
 800221e:	f04f 0100 	mov.w	r1, #0
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	00e2      	lsls	r2, r4, #3
 8002228:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800222c:	00d9      	lsls	r1, r3, #3
 800222e:	460b      	mov	r3, r1
 8002230:	4614      	mov	r4, r2
 8002232:	195b      	adds	r3, r3, r5
 8002234:	eb44 0406 	adc.w	r4, r4, r6
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	02a2      	lsls	r2, r4, #10
 8002242:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002246:	0299      	lsls	r1, r3, #10
 8002248:	460b      	mov	r3, r1
 800224a:	4614      	mov	r4, r2
 800224c:	4618      	mov	r0, r3
 800224e:	4621      	mov	r1, r4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f04f 0400 	mov.w	r4, #0
 8002256:	461a      	mov	r2, r3
 8002258:	4623      	mov	r3, r4
 800225a:	f7fe fbd3 	bl	8000a04 <__aeabi_uldivmod>
 800225e:	4603      	mov	r3, r0
 8002260:	460c      	mov	r4, r1
 8002262:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	3301      	adds	r3, #1
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	60bb      	str	r3, [r7, #8]
      break;
 800227e:	e002      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002282:	60bb      	str	r3, [r7, #8]
      break;
 8002284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002286:	68bb      	ldr	r3, [r7, #8]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400

08002298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_RCC_GetHCLKFreq+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008

080022b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022b4:	f7ff fff0 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022b8:	4601      	mov	r1, r0
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	0a9b      	lsrs	r3, r3, #10
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40023800 	.word	0x40023800
 80022d4:	08004578 	.word	0x08004578

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022dc:	f7ff ffdc 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022e0:	4601      	mov	r1, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0b5b      	lsrs	r3, r3, #13
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4a03      	ldr	r2, [pc, #12]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	08004578 	.word	0x08004578

08002300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e03f      	b.n	8002392 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f001 ff12 	bl	8004150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fc61 	bl	8002c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b088      	sub	sp, #32
 800239e:	af02      	add	r7, sp, #8
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	f040 8090 	bne.w	80024dc <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_UART_Receive+0x2e>
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e088      	b.n	80024de <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_UART_Receive+0x40>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e081      	b.n	80024de <HAL_UART_Receive+0x144>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2222      	movs	r2, #34	; 0x22
 80023ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fcee 	bl	8000dd0 <HAL_GetTick>
 80023f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	88fa      	ldrh	r2, [r7, #6]
 80023fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	88fa      	ldrh	r2, [r7, #6]
 8002400:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002402:	e05c      	b.n	80024be <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241a:	d12b      	bne.n	8002474 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2200      	movs	r2, #0
 8002424:	2120      	movs	r1, #32
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fa6f 	bl	800290a <UART_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e053      	b.n	80024de <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244e:	b29a      	uxth	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3302      	adds	r3, #2
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	e030      	b.n	80024be <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	b29b      	uxth	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	b29a      	uxth	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	3301      	adds	r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	e024      	b.n	80024be <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2200      	movs	r2, #0
 800247c:	2120      	movs	r1, #32
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa43 	bl	800290a <UART_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e027      	b.n	80024de <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	60ba      	str	r2, [r7, #8]
 80024a2:	b2ca      	uxtb	r2, r1
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e00a      	b.n	80024be <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d19d      	bne.n	8002404 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d153      	bne.n	80025aa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_UART_Transmit_DMA+0x26>
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e04c      	b.n	80025ac <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_UART_Transmit_DMA+0x38>
 800251c:	2302      	movs	r3, #2
 800251e:	e045      	b.n	80025ac <HAL_UART_Transmit_DMA+0xc4>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2221      	movs	r2, #33	; 0x21
 8002544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_UART_Transmit_DMA+0xcc>)
 800254e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_UART_Transmit_DMA+0xd0>)
 8002556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_UART_Transmit_DMA+0xd4>)
 800255e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	2200      	movs	r2, #0
 8002566:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3304      	adds	r3, #4
 800257c:	461a      	mov	r2, r3
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	f7fe fdf2 	bl	8001168 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800258c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	08002809 	.word	0x08002809
 80025b8:	0800285b 	.word	0x0800285b
 80025bc:	08002877 	.word	0x08002877

080025c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_UART_IRQHandler+0x52>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa7d 	bl	8002b0a <UART_Receive_IT>
      return;
 8002610:	e0cc      	b.n	80027ac <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80ab 	beq.w	8002770 <HAL_UART_IRQHandler+0x1b0>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <HAL_UART_IRQHandler+0x70>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80a0 	beq.w	8002770 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_UART_IRQHandler+0x90>
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_UART_IRQHandler+0xb0>
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	f043 0202 	orr.w	r2, r3, #2
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_UART_IRQHandler+0xd0>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_UART_IRQHandler+0xf0>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	f043 0208 	orr.w	r2, r3, #8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d078      	beq.n	80027aa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_UART_IRQHandler+0x112>
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fa1c 	bl	8002b0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <HAL_UART_IRQHandler+0x13a>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d031      	beq.n	800275e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f965 	bl	80029ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d123      	bne.n	8002756 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002722:	2b00      	cmp	r3, #0
 8002724:	d013      	beq.n	800274e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <HAL_UART_IRQHandler+0x1f4>)
 800272c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fd78 	bl	8001228 <HAL_DMA_Abort_IT>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002748:	4610      	mov	r0, r2
 800274a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274c:	e00e      	b.n	800276c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f850 	bl	80027f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002754:	e00a      	b.n	800276c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f84c 	bl	80027f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	e006      	b.n	800276c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f848 	bl	80027f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800276a:	e01e      	b.n	80027aa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276c:	bf00      	nop
    return;
 800276e:	e01c      	b.n	80027aa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_UART_IRQHandler+0x1cc>
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f952 	bl	8002a2e <UART_Transmit_IT>
    return;
 800278a:	e00f      	b.n	80027ac <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_UART_IRQHandler+0x1ec>
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f99a 	bl	8002ada <UART_EndTransmit_IT>
    return;
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <HAL_UART_IRQHandler+0x1ec>
    return;
 80027aa:	bf00      	nop
  }
}
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	08002a07 	.word	0x08002a07

080027b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d113      	bne.n	800284c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002838:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002848:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800284a:	e002      	b.n	8002852 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff ffb3 	bl	80027b8 <HAL_UART_TxCpltCallback>
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff ffaf 	bl	80027cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002886:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b80      	cmp	r3, #128	; 0x80
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b21      	cmp	r3, #33	; 0x21
 80028a8:	d108      	bne.n	80028bc <UART_DMAError+0x46>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	f000 f871 	bl	800299e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b22      	cmp	r3, #34	; 0x22
 80028dc:	d108      	bne.n	80028f0 <UART_DMAError+0x7a>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2200      	movs	r2, #0
 80028e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80028ea:	68b8      	ldr	r0, [r7, #8]
 80028ec:	f000 f86d 	bl	80029ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	f043 0210 	orr.w	r2, r3, #16
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028fc:	68b8      	ldr	r0, [r7, #8]
 80028fe:	f7ff ff79 	bl	80027f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291a:	e02c      	b.n	8002976 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002922:	d028      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <UART_WaitOnFlagUntilTimeout+0x30>
 800292a:	f7fe fa51 	bl	8000dd0 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	429a      	cmp	r2, r3
 8002938:	d21d      	bcs.n	8002976 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002948:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e00f      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d0c3      	beq.n	800291c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80029b4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029e0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7ff fee7 	bl	80027f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b21      	cmp	r3, #33	; 0x21
 8002a40:	d144      	bne.n	8002acc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4a:	d11a      	bne.n	8002a82 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a60:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	1c9a      	adds	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	621a      	str	r2, [r3, #32]
 8002a74:	e00e      	b.n	8002a94 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	621a      	str	r2, [r3, #32]
 8002a80:	e008      	b.n	8002a94 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	1c59      	adds	r1, r3, #1
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6211      	str	r1, [r2, #32]
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fe5c 	bl	80027b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b22      	cmp	r3, #34	; 0x22
 8002b1c:	d171      	bne.n	8002c02 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b26:	d123      	bne.n	8002b70 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10e      	bne.n	8002b54 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	1c9a      	adds	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
 8002b52:	e029      	b.n	8002ba8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b6e:	e01b      	b.n	8002ba8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6858      	ldr	r0, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6291      	str	r1, [r2, #40]	; 0x28
 8002b88:	b2c2      	uxtb	r2, r0
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e00c      	b.n	8002ba8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	1c58      	adds	r0, r3, #1
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	6288      	str	r0, [r1, #40]	; 0x28
 8002ba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d120      	bne.n	8002bfe <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0220 	bic.w	r2, r2, #32
 8002bca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fdf3 	bl	80027e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e002      	b.n	8002c04 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	b5b0      	push	{r4, r5, r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c4c:	f023 030c 	bic.w	r3, r3, #12
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	68f9      	ldr	r1, [r7, #12]
 8002c56:	430b      	orrs	r3, r1
 8002c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c78:	f040 80e4 	bne.w	8002e44 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4aab      	ldr	r2, [pc, #684]	; (8002f30 <UART_SetConfig+0x324>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <UART_SetConfig+0x84>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4aaa      	ldr	r2, [pc, #680]	; (8002f34 <UART_SetConfig+0x328>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d16c      	bne.n	8002d6a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c90:	f7ff fb22 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009a      	lsls	r2, r3, #2
 8002c9e:	441a      	add	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	4aa3      	ldr	r2, [pc, #652]	; (8002f38 <UART_SetConfig+0x32c>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	011c      	lsls	r4, r3, #4
 8002cb4:	f7ff fb10 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009a      	lsls	r2, r3, #2
 8002cc2:	441a      	add	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cce:	f7ff fb03 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009a      	lsls	r2, r3, #2
 8002cdc:	441a      	add	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	4a93      	ldr	r2, [pc, #588]	; (8002f38 <UART_SetConfig+0x32c>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2264      	movs	r2, #100	; 0x64
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	1aeb      	subs	r3, r5, r3
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	3332      	adds	r3, #50	; 0x32
 8002cfc:	4a8e      	ldr	r2, [pc, #568]	; (8002f38 <UART_SetConfig+0x32c>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d0a:	441c      	add	r4, r3
 8002d0c:	f7ff fae4 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009a      	lsls	r2, r3, #2
 8002d1a:	441a      	add	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d26:	f7ff fad7 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	009a      	lsls	r2, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	4a7d      	ldr	r2, [pc, #500]	; (8002f38 <UART_SetConfig+0x32c>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2264      	movs	r2, #100	; 0x64
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	1aeb      	subs	r3, r5, r3
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	3332      	adds	r3, #50	; 0x32
 8002d54:	4a78      	ldr	r2, [pc, #480]	; (8002f38 <UART_SetConfig+0x32c>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	f003 0207 	and.w	r2, r3, #7
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4422      	add	r2, r4
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	e154      	b.n	8003014 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d6a:	f7ff faa1 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	4a6c      	ldr	r2, [pc, #432]	; (8002f38 <UART_SetConfig+0x32c>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	011c      	lsls	r4, r3, #4
 8002d8e:	f7ff fa8f 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002da8:	f7ff fa82 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009a      	lsls	r2, r3, #2
 8002db6:	441a      	add	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	4a5d      	ldr	r2, [pc, #372]	; (8002f38 <UART_SetConfig+0x32c>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	2264      	movs	r2, #100	; 0x64
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	1aeb      	subs	r3, r5, r3
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	3332      	adds	r3, #50	; 0x32
 8002dd6:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <UART_SetConfig+0x32c>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002de4:	441c      	add	r4, r3
 8002de6:	f7ff fa63 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009a      	lsls	r2, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e00:	f7ff fa56 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009a      	lsls	r2, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	4a47      	ldr	r2, [pc, #284]	; (8002f38 <UART_SetConfig+0x32c>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	2264      	movs	r2, #100	; 0x64
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	1aeb      	subs	r3, r5, r3
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	3332      	adds	r3, #50	; 0x32
 8002e2e:	4a42      	ldr	r2, [pc, #264]	; (8002f38 <UART_SetConfig+0x32c>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	f003 0207 	and.w	r2, r3, #7
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4422      	add	r2, r4
 8002e40:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002e42:	e0e7      	b.n	8003014 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a39      	ldr	r2, [pc, #228]	; (8002f30 <UART_SetConfig+0x324>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <UART_SetConfig+0x24c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a38      	ldr	r2, [pc, #224]	; (8002f34 <UART_SetConfig+0x328>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d171      	bne.n	8002f3c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e58:	f7ff fa3e 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009a      	lsls	r2, r3, #2
 8002e66:	441a      	add	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	4a31      	ldr	r2, [pc, #196]	; (8002f38 <UART_SetConfig+0x32c>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	011c      	lsls	r4, r3, #4
 8002e7c:	f7ff fa2c 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009a      	lsls	r2, r3, #2
 8002e8a:	441a      	add	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e96:	f7ff fa1f 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009a      	lsls	r2, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <UART_SetConfig+0x32c>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2264      	movs	r2, #100	; 0x64
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	1aeb      	subs	r3, r5, r3
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	3332      	adds	r3, #50	; 0x32
 8002ec4:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <UART_SetConfig+0x32c>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed0:	441c      	add	r4, r3
 8002ed2:	f7ff fa01 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002eec:	f7ff f9f4 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009a      	lsls	r2, r3, #2
 8002efa:	441a      	add	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <UART_SetConfig+0x32c>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	2264      	movs	r2, #100	; 0x64
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	1aeb      	subs	r3, r5, r3
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	3332      	adds	r3, #50	; 0x32
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <UART_SetConfig+0x32c>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	f003 020f 	and.w	r2, r3, #15
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4422      	add	r2, r4
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	e071      	b.n	8003014 <UART_SetConfig+0x408>
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40011400 	.word	0x40011400
 8002f38:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f3c:	f7ff f9b8 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	009a      	lsls	r2, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4a31      	ldr	r2, [pc, #196]	; (800301c <UART_SetConfig+0x410>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	011c      	lsls	r4, r3, #4
 8002f60:	f7ff f9a6 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009a      	lsls	r2, r3, #2
 8002f6e:	441a      	add	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f7a:	f7ff f999 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	009a      	lsls	r2, r3, #2
 8002f88:	441a      	add	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	4a21      	ldr	r2, [pc, #132]	; (800301c <UART_SetConfig+0x410>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2264      	movs	r2, #100	; 0x64
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	1aeb      	subs	r3, r5, r3
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	3332      	adds	r3, #50	; 0x32
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	; (800301c <UART_SetConfig+0x410>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb4:	441c      	add	r4, r3
 8002fb6:	f7ff f97b 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fd0:	f7ff f96e 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	009a      	lsls	r2, r3, #2
 8002fde:	441a      	add	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	4a0c      	ldr	r2, [pc, #48]	; (800301c <UART_SetConfig+0x410>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2264      	movs	r2, #100	; 0x64
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	1aeb      	subs	r3, r5, r3
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a07      	ldr	r2, [pc, #28]	; (800301c <UART_SetConfig+0x410>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4422      	add	r2, r4
 8003010:	609a      	str	r2, [r3, #8]
}
 8003012:	e7ff      	b.n	8003014 <UART_SetConfig+0x408>
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bdb0      	pop	{r4, r5, r7, pc}
 800301c:	51eb851f 	.word	0x51eb851f

08003020 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800307a:	481c      	ldr	r0, [pc, #112]	; (80030ec <LL_ADC_CommonInit+0x80>)
 800307c:	f7ff ffe3 	bl	8003046 <LL_ADC_IsEnabled>
 8003080:	4604      	mov	r4, r0
 8003082:	481b      	ldr	r0, [pc, #108]	; (80030f0 <LL_ADC_CommonInit+0x84>)
 8003084:	f7ff ffdf 	bl	8003046 <LL_ADC_IsEnabled>
 8003088:	4603      	mov	r3, r0
 800308a:	431c      	orrs	r4, r3
 800308c:	4819      	ldr	r0, [pc, #100]	; (80030f4 <LL_ADC_CommonInit+0x88>)
 800308e:	f7ff ffda 	bl	8003046 <LL_ADC_IsEnabled>
 8003092:	4603      	mov	r3, r0
 8003094:	4323      	orrs	r3, r4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d120      	bne.n	80030dc <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <LL_ADC_CommonInit+0x8c>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	6852      	ldr	r2, [r2, #4]
 80030b2:	4311      	orrs	r1, r2
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	4311      	orrs	r1, r2
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	68d2      	ldr	r2, [r2, #12]
 80030be:	430a      	orrs	r2, r1
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	e00b      	b.n	80030e0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <LL_ADC_CommonInit+0x8c>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e001      	b.n	80030e0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40012000 	.word	0x40012000
 80030f0:	40012100 	.word	0x40012100
 80030f4:	40012200 	.word	0x40012200
 80030f8:	fffc10e0 	.word	0xfffc10e0

080030fc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ff9b 	bl	8003046 <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d117      	bne.n	8003146 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800311e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6811      	ldr	r1, [r2, #0]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	6892      	ldr	r2, [r2, #8]
 800312a:	430a      	orrs	r2, r1
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e001      	b.n	800314a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff6f 	bl	8003046 <LL_ADC_IsEnabled>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d131      	bne.n	80031d2 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	430b      	orrs	r3, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	e008      	b.n	80031a2 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <LL_ADC_REG_Init+0x8c>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	4311      	orrs	r1, r2
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	6912      	ldr	r2, [r2, #16]
 80031bc:	430a      	orrs	r2, r1
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ff28 	bl	8003020 <LL_ADC_REG_SetSequencerLength>
 80031d0:	e001      	b.n	80031d6 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	c0fffcfd 	.word	0xc0fffcfd

080031e4 <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	401a      	ands	r2, r3
                   DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	429a      	cmp	r2, r3
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff ffd5 	bl	80031e4 <LL_DAC_IsEnabled>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d13a      	bne.n	80032b6 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01e      	beq.n	8003286 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	f640 71fa 	movw	r1, #4090	; 0xffa
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	401a      	ands	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4319      	orrs	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4319      	orrs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	4319      	orrs	r1, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	431a      	orrs	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e019      	b.n	80032ba <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	21fa      	movs	r1, #250	; 0xfa
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	401a      	ands	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	4319      	orrs	r1, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	431a      	orrs	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e001      	b.n	80032ba <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2103      	movs	r1, #3
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	431a      	orrs	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3724      	adds	r7, #36	; 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	43db      	mvns	r3, r3
 8003336:	401a      	ands	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	605a      	str	r2, [r3, #4]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003352:	b480      	push	{r7}
 8003354:	b089      	sub	sp, #36	; 0x24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	613b      	str	r3, [r7, #16]
  return result;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	2103      	movs	r1, #3
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	401a      	ands	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	61bb      	str	r3, [r7, #24]
  return result;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	431a      	orrs	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80033a4:	bf00      	nop
 80033a6:	3724      	adds	r7, #36	; 0x24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	613b      	str	r3, [r7, #16]
  return result;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2103      	movs	r1, #3
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	61bb      	str	r3, [r7, #24]
  return result;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	60da      	str	r2, [r3, #12]
}
 8003402:	bf00      	nop
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800340e:	b480      	push	{r7}
 8003410:	b089      	sub	sp, #36	; 0x24
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1a      	ldr	r2, [r3, #32]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	613b      	str	r3, [r7, #16]
  return result;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	210f      	movs	r1, #15
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	401a      	ands	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	61bb      	str	r3, [r7, #24]
  return result;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	431a      	orrs	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003460:	bf00      	nop
 8003462:	3724      	adds	r7, #36	; 0x24
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	613b      	str	r3, [r7, #16]
  return result;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	210f      	movs	r1, #15
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	401a      	ands	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	61bb      	str	r3, [r7, #24]
  return result;
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80034c2:	bf00      	nop
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	613b      	str	r3, [r7, #16]
  return result;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80034f8:	e049      	b.n	800358e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	2101      	movs	r1, #1
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d03b      	beq.n	8003588 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	461a      	mov	r2, r3
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fed3 	bl	80032c4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d003      	beq.n	800352e <LL_GPIO_Init+0x60>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d106      	bne.n	800353c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	461a      	mov	r2, r3
 8003534:	69b9      	ldr	r1, [r7, #24]
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff0b 	bl	8003352 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	461a      	mov	r2, r3
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff33 	bl	80033b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d11a      	bne.n	8003588 <LL_GPIO_Init+0xba>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	60bb      	str	r3, [r7, #8]
  return result;
 800355e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b07      	cmp	r3, #7
 8003568:	d807      	bhi.n	800357a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	461a      	mov	r2, r3
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ff4b 	bl	800340e <LL_GPIO_SetAFPin_0_7>
 8003578:	e006      	b.n	8003588 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	461a      	mov	r2, r3
 8003580:	69b9      	ldr	r1, [r7, #24]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ff72 	bl	800346c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	3301      	adds	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ae      	bne.n	80034fa <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d003      	beq.n	80035ac <LL_GPIO_Init+0xde>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d107      	bne.n	80035bc <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff feb3 	bl	8003322 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	615a      	str	r2, [r3, #20]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a3d      	ldr	r2, [pc, #244]	; (8003744 <LL_TIM_Init+0x108>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <LL_TIM_Init+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d00f      	beq.n	800367c <LL_TIM_Init+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a3a      	ldr	r2, [pc, #232]	; (8003748 <LL_TIM_Init+0x10c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00b      	beq.n	800367c <LL_TIM_Init+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a39      	ldr	r2, [pc, #228]	; (800374c <LL_TIM_Init+0x110>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <LL_TIM_Init+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a38      	ldr	r2, [pc, #224]	; (8003750 <LL_TIM_Init+0x114>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <LL_TIM_Init+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a37      	ldr	r2, [pc, #220]	; (8003754 <LL_TIM_Init+0x118>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d106      	bne.n	800368a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <LL_TIM_Init+0x108>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02b      	beq.n	80036ea <LL_TIM_Init+0xae>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d027      	beq.n	80036ea <LL_TIM_Init+0xae>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a2a      	ldr	r2, [pc, #168]	; (8003748 <LL_TIM_Init+0x10c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d023      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a29      	ldr	r2, [pc, #164]	; (800374c <LL_TIM_Init+0x110>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01f      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a28      	ldr	r2, [pc, #160]	; (8003750 <LL_TIM_Init+0x114>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01b      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <LL_TIM_Init+0x118>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d017      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a26      	ldr	r2, [pc, #152]	; (8003758 <LL_TIM_Init+0x11c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a25      	ldr	r2, [pc, #148]	; (800375c <LL_TIM_Init+0x120>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a24      	ldr	r2, [pc, #144]	; (8003760 <LL_TIM_Init+0x124>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a23      	ldr	r2, [pc, #140]	; (8003764 <LL_TIM_Init+0x128>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a22      	ldr	r2, [pc, #136]	; (8003768 <LL_TIM_Init+0x12c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <LL_TIM_Init+0xae>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a21      	ldr	r2, [pc, #132]	; (800376c <LL_TIM_Init+0x130>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d106      	bne.n	80036f8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff6c 	bl	80035e2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff58 	bl	80035c6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <LL_TIM_Init+0x108>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <LL_TIM_Init+0xea>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <LL_TIM_Init+0x118>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d105      	bne.n	8003732 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	7c1b      	ldrb	r3, [r3, #16]
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff66 	bl	80035fe <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ff71 	bl	800361a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40010000 	.word	0x40010000
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40010400 	.word	0x40010400
 8003758:	40014000 	.word	0x40014000
 800375c:	40014400 	.word	0x40014400
 8003760:	40014800 	.word	0x40014800
 8003764:	40001800 	.word	0x40001800
 8003768:	40001c00 	.word	0x40001c00
 800376c:	40002000 	.word	0x40002000

08003770 <__NVIC_GetPriorityGrouping>:
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <__NVIC_GetPriorityGrouping+0x18>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	f003 0307 	and.w	r3, r3, #7
}
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_EnableIRQ>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	2b00      	cmp	r3, #0
 800379c:	db0b      	blt.n	80037b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	4907      	ldr	r1, [pc, #28]	; (80037c4 <__NVIC_EnableIRQ+0x38>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2001      	movs	r0, #1
 80037ae:	fa00 f202 	lsl.w	r2, r0, r2
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e100 	.word	0xe000e100

080037c8 <__NVIC_SetPriority>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	db0a      	blt.n	80037f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	490c      	ldr	r1, [pc, #48]	; (8003814 <__NVIC_SetPriority+0x4c>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	440b      	add	r3, r1
 80037ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037f0:	e00a      	b.n	8003808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4908      	ldr	r1, [pc, #32]	; (8003818 <__NVIC_SetPriority+0x50>)
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b04      	subs	r3, #4
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	440b      	add	r3, r1
 8003806:	761a      	strb	r2, [r3, #24]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000e100 	.word	0xe000e100
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <NVIC_EncodePriority>:
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f1c3 0307 	rsb	r3, r3, #7
 8003836:	2b04      	cmp	r3, #4
 8003838:	bf28      	it	cs
 800383a:	2304      	movcs	r3, #4
 800383c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3304      	adds	r3, #4
 8003842:	2b06      	cmp	r3, #6
 8003844:	d902      	bls.n	800384c <NVIC_EncodePriority+0x30>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3b03      	subs	r3, #3
 800384a:	e000      	b.n	800384e <NVIC_EncodePriority+0x32>
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	401a      	ands	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	43d9      	mvns	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003874:	4313      	orrs	r3, r2
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	; 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_ADC_REG_SetSequencerRanks>:
{
 8003882:	b490      	push	{r4, r7}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	332c      	adds	r3, #44	; 0x2c
 8003892:	4619      	mov	r1, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800389e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	613a      	str	r2, [r7, #16]
  return result;
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	40d3      	lsrs	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	211f      	movs	r1, #31
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	401a      	ands	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f003 011f 	and.w	r1, r3, #31
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	6023      	str	r3, [r4, #0]
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc90      	pop	{r4, r7}
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LL_ADC_SetChannelSamplingTime>:
{
 800390e:	b490      	push	{r4, r7}
 8003910:	b08a      	sub	sp, #40	; 0x28
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	330c      	adds	r3, #12
 800391e:	4619      	mov	r1, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	fa92 f2a2 	rbit	r2, r2
 8003932:	613a      	str	r2, [r7, #16]
  return result;
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	fab2 f282 	clz	r2, r2
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	40d3      	lsrs	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800394c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003950:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	69f9      	ldr	r1, [r7, #28]
 8003954:	fa91 f1a1 	rbit	r1, r1
 8003958:	61b9      	str	r1, [r7, #24]
  return result;
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	fab1 f181 	clz	r1, r1
 8003960:	b2c9      	uxtb	r1, r1
 8003962:	40cb      	lsrs	r3, r1
 8003964:	2107      	movs	r1, #7
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	401a      	ands	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003974:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003978:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800397c:	fa91 f1a1 	rbit	r1, r1
 8003980:	6239      	str	r1, [r7, #32]
  return result;
 8003982:	6a39      	ldr	r1, [r7, #32]
 8003984:	fab1 f181 	clz	r1, r1
 8003988:	b2c9      	uxtb	r1, r1
 800398a:	40cb      	lsrs	r3, r1
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	6023      	str	r3, [r4, #0]
}
 8003996:	bf00      	nop
 8003998:	3728      	adds	r7, #40	; 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc90      	pop	{r4, r7}
 800399e:	4770      	bx	lr

080039a0 <LL_ADC_Enable>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_ADC_EnableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOCS(ADC_TypeDef *ADCx)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	605a      	str	r2, [r3, #4]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f023 0220 	bic.w	r2, r3, #32
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	605a      	str	r2, [r3, #4]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_DAC_Enable>:
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <LL_TIM_EnableCounter>:
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_TIM_DisableARRPreload>:
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	601a      	str	r2, [r3, #0]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <LL_TIM_SetClockSource>:
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa0:	f023 0307 	bic.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_TIM_SetTriggerOutput>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	605a      	str	r2, [r3, #4]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_TIM_DisableMasterSlaveMode>:
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	609a      	str	r2, [r3, #8]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0c:	4907      	ldr	r1, [pc, #28]	; (8003b2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40023800 	.word	0x40023800

08003b30 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3c:	4907      	ldr	r1, [pc, #28]	; (8003b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40023800 	.word	0x40023800

08003b60 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6c:	4907      	ldr	r1, [pc, #28]	; (8003b8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40023800 	.word	0x40023800

08003b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b96:	f7fd f8b5 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b9a:	f000 f865 	bl	8003c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b9e:	f000 fa23 	bl	8003fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ba2:	f000 fa01 	bl	8003fa8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003ba6:	f000 f9d5 	bl	8003f54 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003baa:	f000 f991 	bl	8003ed0 <MX_TIM2_Init>
  MX_ADC2_Init();
 8003bae:	f000 f8c5 	bl	8003d3c <MX_ADC2_Init>
  MX_DAC_Init();
 8003bb2:	f000 f951 	bl	8003e58 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  char uartbuf[20];
  int i = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bc0:	4822      	ldr	r0, [pc, #136]	; (8003c4c <main+0xbc>)
 8003bc2:	f7fd ff55 	bl	8001a70 <HAL_GPIO_WritePin>

  //LL_GPIO_SetOutputPin(ERR_A0_GPIO_Port, ERR_A0_Pin);
  //LL_GPIO_ResetOutputPin(ERR_A1_GPIO_Port, ERR_A1_Pin);
  HAL_GPIO_WritePin(ERR_A0_GPIO_Port, ERR_A0_Pin, GPIO_PIN_SET);
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	2140      	movs	r1, #64	; 0x40
 8003bca:	4821      	ldr	r0, [pc, #132]	; (8003c50 <main+0xc0>)
 8003bcc:	f7fd ff50 	bl	8001a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERR_A1_GPIO_Port, ERR_A1_Pin, GPIO_PIN_SET);
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	481e      	ldr	r0, [pc, #120]	; (8003c50 <main+0xc0>)
 8003bd6:	f7fd ff4b 	bl	8001a70 <HAL_GPIO_WritePin>

  //while(1);

  LL_ADC_Enable(ADC2);
 8003bda:	481e      	ldr	r0, [pc, #120]	; (8003c54 <main+0xc4>)
 8003bdc:	f7ff fee0 	bl	80039a0 <LL_ADC_Enable>
  LL_ADC_EnableIT_EOCS(ADC2);
 8003be0:	481c      	ldr	r0, [pc, #112]	; (8003c54 <main+0xc4>)
 8003be2:	f7ff fefe 	bl	80039e2 <LL_ADC_EnableIT_EOCS>
  LL_DAC_Enable(DAC, LL_DAC_CHANNEL_2);
 8003be6:	491c      	ldr	r1, [pc, #112]	; (8003c58 <main+0xc8>)
 8003be8:	481c      	ldr	r0, [pc, #112]	; (8003c5c <main+0xcc>)
 8003bea:	f7ff ff1a 	bl	8003a22 <LL_DAC_Enable>
  //LL_DAC_EnableTrigger(DAC, LL_DAC_CHANNEL_1);
  LL_TIM_EnableCounter(TIM2);
 8003bee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bf2:	f7ff ff2c 	bl	8003a4e <LL_TIM_EnableCounter>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //sprintf(uartbuf, "%d\n", i);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)uartbuf, strlen(uartbuf), 1000);
	  if (start == 0)
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <main+0xd0>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d121      	bne.n	8003c44 <main+0xb4>
	  {
		  if (HAL_UART_Receive(&huart1, (uint8_t*)uartbuf, 2, 1000) == HAL_OK)
 8003c00:	4639      	mov	r1, r7
 8003c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c06:	2202      	movs	r2, #2
 8003c08:	4816      	ldr	r0, [pc, #88]	; (8003c64 <main+0xd4>)
 8003c0a:	f7fe fbc6 	bl	800239a <HAL_UART_Receive>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d117      	bne.n	8003c44 <main+0xb4>
		  {
			  if (uartbuf[0] == '1')
 8003c14:	783b      	ldrb	r3, [r7, #0]
 8003c16:	2b31      	cmp	r3, #49	; 0x31
 8003c18:	d108      	bne.n	8003c2c <main+0x9c>
			  {
				  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c20:	480a      	ldr	r0, [pc, #40]	; (8003c4c <main+0xbc>)
 8003c22:	f7fd ff25 	bl	8001a70 <HAL_GPIO_WritePin>
				  start = 1;
 8003c26:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <main+0xd0>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
			  }
			  if (uartbuf[0] == '0')
 8003c2c:	783b      	ldrb	r3, [r7, #0]
 8003c2e:	2b30      	cmp	r3, #48	; 0x30
 8003c30:	d108      	bne.n	8003c44 <main+0xb4>
			  {
				  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003c32:	2201      	movs	r2, #1
 8003c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c38:	4804      	ldr	r0, [pc, #16]	; (8003c4c <main+0xbc>)
 8003c3a:	f7fd ff19 	bl	8001a70 <HAL_GPIO_WritePin>
				  start = 0;
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <main+0xd0>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  //HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uartbuf, strlen(uartbuf));
	  i++;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3301      	adds	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
	  if (start == 0)
 8003c4a:	e7d4      	b.n	8003bf6 <main+0x66>
 8003c4c:	40020400 	.word	0x40020400
 8003c50:	40020800 	.word	0x40020800
 8003c54:	40012100 	.word	0x40012100
 8003c58:	15430012 	.word	0x15430012
 8003c5c:	40007400 	.word	0x40007400
 8003c60:	20000028 	.word	0x20000028
 8003c64:	200000cc 	.word	0x200000cc

08003c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b094      	sub	sp, #80	; 0x50
 8003c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c6e:	f107 0320 	add.w	r3, r7, #32
 8003c72:	2230      	movs	r2, #48	; 0x30
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fc5e 	bl	8004538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c7c:	f107 030c 	add.w	r3, r7, #12
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <SystemClock_Config+0xcc>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <SystemClock_Config+0xcc>)
 8003c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <SystemClock_Config+0xcc>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <SystemClock_Config+0xd0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <SystemClock_Config+0xd0>)
 8003cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <SystemClock_Config+0xd0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cd8:	2308      	movs	r3, #8
 8003cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003cdc:	23a8      	movs	r3, #168	; 0xa8
 8003cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ce8:	f107 0320 	add.w	r3, r7, #32
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fed9 	bl	8001aa4 <HAL_RCC_OscConfig>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003cf8:	f000 f9fa 	bl	80040f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d00:	2302      	movs	r3, #2
 8003d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8003d0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003d12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	2105      	movs	r1, #5
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe f904 	bl	8001f28 <HAL_RCC_ClockConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003d26:	f000 f9e3 	bl	80040f0 <Error_Handler>
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3750      	adds	r7, #80	; 0x50
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000

08003d3c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b092      	sub	sp, #72	; 0x48
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003d42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8003d5e:	f107 0318 	add.w	r3, r7, #24
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	611a      	str	r2, [r3, #16]
 8003d7a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8003d7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003d80:	f7ff feee 	bl	8003b60 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7ff febb 	bl	8003b00 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PA7   ------> ADC2_IN7 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d96:	463b      	mov	r3, r7
 8003d98:	4619      	mov	r1, r3
 8003d9a:	482b      	ldr	r0, [pc, #172]	; (8003e48 <MX_ADC2_Init+0x10c>)
 8003d9c:	f7ff fb97 	bl	80034ce <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003da0:	f7ff fce6 	bl	8003770 <__NVIC_GetPriorityGrouping>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2200      	movs	r2, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fd36 	bl	800381c <NVIC_EncodePriority>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4619      	mov	r1, r3
 8003db4:	2012      	movs	r0, #18
 8003db6:	f7ff fd07 	bl	80037c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8003dba:	2012      	movs	r0, #18
 8003dbc:	f7ff fce6 	bl	800378c <__NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8003dcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	481e      	ldr	r0, [pc, #120]	; (8003e4c <MX_ADC2_Init+0x110>)
 8003dd4:	f7ff f992 	bl	80030fc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM2_TRGO;
 8003dd8:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8003dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8003df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003df4:	4619      	mov	r1, r3
 8003df6:	4815      	ldr	r0, [pc, #84]	; (8003e4c <MX_ADC2_Init+0x110>)
 8003df8:	f7ff f9ac 	bl	8003154 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8003dfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e00:	4812      	ldr	r0, [pc, #72]	; (8003e4c <MX_ADC2_Init+0x110>)
 8003e02:	f7ff fd71 	bl	80038e8 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 8003e06:	4811      	ldr	r0, [pc, #68]	; (8003e4c <MX_ADC2_Init+0x110>)
 8003e08:	f7ff fdfb 	bl	8003a02 <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e10:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8003e12:	f107 0318 	add.w	r3, r7, #24
 8003e16:	4619      	mov	r1, r3
 8003e18:	480d      	ldr	r0, [pc, #52]	; (8003e50 <MX_ADC2_Init+0x114>)
 8003e1a:	f7ff f927 	bl	800306c <LL_ADC_CommonInit>
  LL_ADC_REG_StartConversionExtTrig(ADC2, LL_ADC_REG_TRIG_EXT_RISING);
 8003e1e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8003e22:	480a      	ldr	r0, [pc, #40]	; (8003e4c <MX_ADC2_Init+0x110>)
 8003e24:	f7ff fdcc 	bl	80039c0 <LL_ADC_REG_StartConversionExtTrig>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 8003e28:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <MX_ADC2_Init+0x118>)
 8003e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e2e:	4807      	ldr	r0, [pc, #28]	; (8003e4c <MX_ADC2_Init+0x110>)
 8003e30:	f7ff fd27 	bl	8003882 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_3CYCLES);
 8003e34:	2200      	movs	r2, #0
 8003e36:	4907      	ldr	r1, [pc, #28]	; (8003e54 <MX_ADC2_Init+0x118>)
 8003e38:	4804      	ldr	r0, [pc, #16]	; (8003e4c <MX_ADC2_Init+0x110>)
 8003e3a:	f7ff fd68 	bl	800390e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003e3e:	bf00      	nop
 8003e40:	3748      	adds	r7, #72	; 0x48
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40020000 	.word	0x40020000
 8003e4c:	40012100 	.word	0x40012100
 8003e50:	40012300 	.word	0x40012300
 8003e54:	03500007 	.word	0x03500007

08003e58 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8003e5e:	f107 0318 	add.w	r3, r7, #24
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	611a      	str	r2, [r3, #16]
 8003e7a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8003e7c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003e80:	f7ff fe56 	bl	8003b30 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003e84:	2001      	movs	r0, #1
 8003e86:	f7ff fe3b 	bl	8003b00 <LL_AHB1_GRP1_EnableClock>
  /**DAC GPIO Configuration  
  PA5   ------> DAC_OUT2 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e96:	463b      	mov	r3, r7
 8003e98:	4619      	mov	r1, r3
 8003e9a:	480a      	ldr	r0, [pc, #40]	; (8003ec4 <MX_DAC_Init+0x6c>)
 8003e9c:	f7ff fb17 	bl	80034ce <LL_GPIO_Init>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC channel OUT2 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8003ea0:	2338      	movs	r3, #56	; 0x38
 8003ea2:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8003eac:	f107 0318 	add.w	r3, r7, #24
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4905      	ldr	r1, [pc, #20]	; (8003ec8 <MX_DAC_Init+0x70>)
 8003eb4:	4805      	ldr	r0, [pc, #20]	; (8003ecc <MX_DAC_Init+0x74>)
 8003eb6:	f7ff f9b4 	bl	8003222 <LL_DAC_Init>
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003eba:	bf00      	nop
 8003ebc:	3728      	adds	r7, #40	; 0x28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40020000 	.word	0x40020000
 8003ec8:	15430012 	.word	0x15430012
 8003ecc:	40007400 	.word	0x40007400

08003ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7ff fe23 	bl	8003b30 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003eea:	f7ff fc41 	bl	8003770 <__NVIC_GetPriorityGrouping>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fc91 	bl	800381c <NVIC_EncodePriority>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4619      	mov	r1, r3
 8003efe:	201c      	movs	r0, #28
 8003f00:	f7ff fc62 	bl	80037c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8003f04:	201c      	movs	r0, #28
 8003f06:	f7ff fc41 	bl	800378c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1049;
 8003f0a:	f240 4319 	movw	r3, #1049	; 0x419
 8003f0e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9;
 8003f14:	2309      	movs	r3, #9
 8003f16:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f24:	f7ff fb8a 	bl	800363c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003f28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f2c:	f7ff fd9f 	bl	8003a6e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003f30:	2100      	movs	r1, #0
 8003f32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f36:	f7ff fdaa 	bl	8003a8e <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f40:	f7ff fdba 	bl	8003ab8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003f44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f48:	f7ff fdc9 	bl	8003ade <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f5a:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <MX_USART1_UART_Init+0x50>)
 8003f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f60:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f7a:	220c      	movs	r2, #12
 8003f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f8c:	f7fe f9b8 	bl	8002300 <HAL_UART_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f96:	f000 f8ab 	bl	80040f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200000cc 	.word	0x200000cc
 8003fa4:	40011000 	.word	0x40011000

08003fa8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <MX_DMA_Init+0x3c>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <MX_DMA_Init+0x3c>)
 8003fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <MX_DMA_Init+0x3c>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	607b      	str	r3, [r7, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2100      	movs	r1, #0
 8003fce:	2046      	movs	r0, #70	; 0x46
 8003fd0:	f7fc ffe5 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003fd4:	2046      	movs	r0, #70	; 0x46
 8003fd6:	f7fc fffe 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fee:	f107 0314 	add.w	r3, r7, #20
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	4b38      	ldr	r3, [pc, #224]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a37      	ldr	r2, [pc, #220]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	4a30      	ldr	r2, [pc, #192]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6313      	str	r3, [r2, #48]	; 0x30
 800402a:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <MX_GPIO_Init+0xfc>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <MX_GPIO_Init+0xfc>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4a29      	ldr	r2, [pc, #164]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004040:	f043 0302 	orr.w	r3, r3, #2
 8004044:	6313      	str	r3, [r2, #48]	; 0x30
 8004046:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	4b23      	ldr	r3, [pc, #140]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <MX_GPIO_Init+0xfc>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6313      	str	r3, [r2, #48]	; 0x30
 8004062:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <MX_GPIO_Init+0xfc>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REF_A0_Pin|REF_A1_Pin|OUT_A0_Pin|OUT_A1_Pin 
 800406e:	2200      	movs	r2, #0
 8004070:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 8004074:	481c      	ldr	r0, [pc, #112]	; (80040e8 <MX_GPIO_Init+0x100>)
 8004076:	f7fd fcfb 	bl	8001a70 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ERR_A0_Pin|ERR_A1_Pin, GPIO_PIN_RESET);
 800407a:	2200      	movs	r2, #0
 800407c:	21c0      	movs	r1, #192	; 0xc0
 800407e:	481b      	ldr	r0, [pc, #108]	; (80040ec <MX_GPIO_Init+0x104>)
 8004080:	f7fd fcf6 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : REF_A0_Pin REF_A1_Pin OUT_A0_Pin OUT_A1_Pin */
  GPIO_InitStruct.Pin = REF_A0_Pin|REF_A1_Pin|OUT_A0_Pin|OUT_A1_Pin;
 8004084:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800408a:	2301      	movs	r3, #1
 800408c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004092:	2300      	movs	r3, #0
 8004094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	4619      	mov	r1, r3
 800409c:	4812      	ldr	r0, [pc, #72]	; (80040e8 <MX_GPIO_Init+0x100>)
 800409e:	f7fd fb4d 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ERR_A0_Pin ERR_A1_Pin */
  GPIO_InitStruct.Pin = ERR_A0_Pin|ERR_A1_Pin;
 80040a2:	23c0      	movs	r3, #192	; 0xc0
 80040a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a6:	2301      	movs	r3, #1
 80040a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b2:	f107 0314 	add.w	r3, r7, #20
 80040b6:	4619      	mov	r1, r3
 80040b8:	480c      	ldr	r0, [pc, #48]	; (80040ec <MX_GPIO_Init+0x104>)
 80040ba:	f7fd fb3f 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80040be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80040c4:	2311      	movs	r3, #17
 80040c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040c8:	2301      	movs	r3, #1
 80040ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040cc:	2300      	movs	r3, #0
 80040ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4619      	mov	r1, r3
 80040d6:	4804      	ldr	r0, [pc, #16]	; (80040e8 <MX_GPIO_Init+0x100>)
 80040d8:	f7fd fb30 	bl	800173c <HAL_GPIO_Init>

}
 80040dc:	bf00      	nop
 80040de:	3728      	adds	r7, #40	; 0x28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40020400 	.word	0x40020400
 80040ec:	40020800 	.word	0x40020800

080040f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_MspInit+0x4c>)
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	4a0f      	ldr	r2, [pc, #60]	; (800414c <HAL_MspInit+0x4c>)
 8004110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004114:	6453      	str	r3, [r2, #68]	; 0x44
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <HAL_MspInit+0x4c>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	603b      	str	r3, [r7, #0]
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_MspInit+0x4c>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <HAL_MspInit+0x4c>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_MspInit+0x4c>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800

08004150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a34      	ldr	r2, [pc, #208]	; (8004240 <HAL_UART_MspInit+0xf0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d162      	bne.n	8004238 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_UART_MspInit+0xf4>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	4a32      	ldr	r2, [pc, #200]	; (8004244 <HAL_UART_MspInit+0xf4>)
 800417c:	f043 0310 	orr.w	r3, r3, #16
 8004180:	6453      	str	r3, [r2, #68]	; 0x44
 8004182:	4b30      	ldr	r3, [pc, #192]	; (8004244 <HAL_UART_MspInit+0xf4>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b2c      	ldr	r3, [pc, #176]	; (8004244 <HAL_UART_MspInit+0xf4>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	4a2b      	ldr	r2, [pc, #172]	; (8004244 <HAL_UART_MspInit+0xf4>)
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	6313      	str	r3, [r2, #48]	; 0x30
 800419e:	4b29      	ldr	r3, [pc, #164]	; (8004244 <HAL_UART_MspInit+0xf4>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041aa:	23c0      	movs	r3, #192	; 0xc0
 80041ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	2302      	movs	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b6:	2303      	movs	r3, #3
 80041b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041ba:	2307      	movs	r3, #7
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	4619      	mov	r1, r3
 80041c4:	4820      	ldr	r0, [pc, #128]	; (8004248 <HAL_UART_MspInit+0xf8>)
 80041c6:	f7fd fab9 	bl	800173c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_UART_MspInit+0xfc>)
 80041cc:	4a20      	ldr	r2, [pc, #128]	; (8004250 <HAL_UART_MspInit+0x100>)
 80041ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_UART_MspInit+0xfc>)
 80041d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041d8:	4b1c      	ldr	r3, [pc, #112]	; (800424c <HAL_UART_MspInit+0xfc>)
 80041da:	2240      	movs	r2, #64	; 0x40
 80041dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041de:	4b1b      	ldr	r3, [pc, #108]	; (800424c <HAL_UART_MspInit+0xfc>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_UART_MspInit+0xfc>)
 80041e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <HAL_UART_MspInit+0xfc>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_UART_MspInit+0xfc>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_UART_MspInit+0xfc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <HAL_UART_MspInit+0xfc>)
 8004200:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004204:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_UART_MspInit+0xfc>)
 8004208:	2200      	movs	r2, #0
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800420c:	480f      	ldr	r0, [pc, #60]	; (800424c <HAL_UART_MspInit+0xfc>)
 800420e:	f7fc fefd 	bl	800100c <HAL_DMA_Init>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004218:	f7ff ff6a 	bl	80040f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0b      	ldr	r2, [pc, #44]	; (800424c <HAL_UART_MspInit+0xfc>)
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_UART_MspInit+0xfc>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004228:	2200      	movs	r2, #0
 800422a:	2100      	movs	r1, #0
 800422c:	2025      	movs	r0, #37	; 0x25
 800422e:	f7fc feb6 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004232:	2025      	movs	r0, #37	; 0x25
 8004234:	f7fc fecf 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004238:	bf00      	nop
 800423a:	3728      	adds	r7, #40	; 0x28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40011000 	.word	0x40011000
 8004244:	40023800 	.word	0x40023800
 8004248:	40020400 	.word	0x40020400
 800424c:	20000044 	.word	0x20000044
 8004250:	400264b8 	.word	0x400264b8

08004254 <LL_ADC_REG_ReadConversionData12>:
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004260:	b29b      	uxth	r3, r3
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <LL_ADC_IsActiveFlag_EOCS>:
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042a6:	e7fe      	b.n	80042a6 <HardFault_Handler+0x4>

080042a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042ac:	e7fe      	b.n	80042ac <MemManage_Handler+0x4>

080042ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042b2:	e7fe      	b.n	80042b2 <BusFault_Handler+0x4>

080042b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042b8:	e7fe      	b.n	80042b8 <UsageFault_Handler+0x4>

080042ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042e8:	f7fc fd5e 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80042f0:	b5b0      	push	{r4, r5, r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	static float last_y = 0;
	static float last_u = 0;
	static float u = 0;

	/* End of ADC2 conversion interrupt */
	if (LL_ADC_IsActiveFlag_EOCS(ADC2))
 80042f4:	4838      	ldr	r0, [pc, #224]	; (80043d8 <ADC_IRQHandler+0xe8>)
 80042f6:	f7ff ffba 	bl	800426e <LL_ADC_IsActiveFlag_EOCS>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d060      	beq.n	80043c2 <ADC_IRQHandler+0xd2>
	{
		u = (float)LL_ADC_REG_ReadConversionData12(ADC2);
 8004300:	4835      	ldr	r0, [pc, #212]	; (80043d8 <ADC_IRQHandler+0xe8>)
 8004302:	f7ff ffa7 	bl	8004254 <LL_ADC_REG_ReadConversionData12>
 8004306:	4603      	mov	r3, r0
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004310:	4b32      	ldr	r3, [pc, #200]	; (80043dc <ADC_IRQHandler+0xec>)
 8004312:	edc3 7a00 	vstr	s15, [r3]
		senduart = 0.9922 * u - 0.9922 * last_u + 0.9844 * last_y;
 8004316:	4b31      	ldr	r3, [pc, #196]	; (80043dc <ADC_IRQHandler+0xec>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc f8b8 	bl	8000490 <__aeabi_f2d>
 8004320:	a329      	add	r3, pc, #164	; (adr r3, 80043c8 <ADC_IRQHandler+0xd8>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fc f90b 	bl	8000540 <__aeabi_dmul>
 800432a:	4603      	mov	r3, r0
 800432c:	460c      	mov	r4, r1
 800432e:	4625      	mov	r5, r4
 8004330:	461c      	mov	r4, r3
 8004332:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <ADC_IRQHandler+0xf0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc f8aa 	bl	8000490 <__aeabi_f2d>
 800433c:	a322      	add	r3, pc, #136	; (adr r3, 80043c8 <ADC_IRQHandler+0xd8>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fc f8fd 	bl	8000540 <__aeabi_dmul>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4620      	mov	r0, r4
 800434c:	4629      	mov	r1, r5
 800434e:	f7fb ff3f 	bl	80001d0 <__aeabi_dsub>
 8004352:	4603      	mov	r3, r0
 8004354:	460c      	mov	r4, r1
 8004356:	4625      	mov	r5, r4
 8004358:	461c      	mov	r4, r3
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <ADC_IRQHandler+0xf4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f896 	bl	8000490 <__aeabi_f2d>
 8004364:	a31a      	add	r3, pc, #104	; (adr r3, 80043d0 <ADC_IRQHandler+0xe0>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fc f8e9 	bl	8000540 <__aeabi_dmul>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4620      	mov	r0, r4
 8004374:	4629      	mov	r1, r5
 8004376:	f7fb ff2d 	bl	80001d4 <__adddf3>
 800437a:	4603      	mov	r3, r0
 800437c:	460c      	mov	r4, r1
 800437e:	4618      	mov	r0, r3
 8004380:	4621      	mov	r1, r4
 8004382:	f7fc faef 	bl	8000964 <__aeabi_d2f>
 8004386:	4602      	mov	r2, r0
 8004388:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <ADC_IRQHandler+0xf8>)
 800438a:	601a      	str	r2, [r3, #0]
		last_u = u;
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <ADC_IRQHandler+0xec>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <ADC_IRQHandler+0xf0>)
 8004392:	6013      	str	r3, [r2, #0]
		last_y = senduart;
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <ADC_IRQHandler+0xf8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <ADC_IRQHandler+0xf4>)
 800439a:	6013      	str	r3, [r2, #0]
		if (start)
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <ADC_IRQHandler+0xfc>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <ADC_IRQHandler+0xd2>
		{

			//sprintf(uartbuf, "%d\t%d\t%d\n", sendbuf[0], sendbuf[1], sendbuf[2]);

			//HAL_StatusTypeDef error = HAL_UART_Transmit_IT(&huart1, (uint8_t*)uartbuf, strlen(uartbuf));
			if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&senduart, sizeof(senduart)) != HAL_OK)
 80043a6:	2204      	movs	r2, #4
 80043a8:	490f      	ldr	r1, [pc, #60]	; (80043e8 <ADC_IRQHandler+0xf8>)
 80043aa:	4811      	ldr	r0, [pc, #68]	; (80043f0 <ADC_IRQHandler+0x100>)
 80043ac:	f7fe f89c 	bl	80024e8 <HAL_UART_Transmit_DMA>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <ADC_IRQHandler+0xd2>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80043b6:	2201      	movs	r2, #1
 80043b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043bc:	480d      	ldr	r0, [pc, #52]	; (80043f4 <ADC_IRQHandler+0x104>)
 80043be:	f7fd fb57 	bl	8001a70 <HAL_GPIO_WritePin>
  
  /* USER CODE BEGIN ADC_IRQn 1 */


  /* USER CODE END ADC_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bdb0      	pop	{r4, r5, r7, pc}
 80043c6:	bf00      	nop
 80043c8:	36e2eb1c 	.word	0x36e2eb1c
 80043cc:	3fefc01a 	.word	0x3fefc01a
 80043d0:	6dc5d639 	.word	0x6dc5d639
 80043d4:	3fef8034 	.word	0x3fef8034
 80043d8:	40012100 	.word	0x40012100
 80043dc:	2000002c 	.word	0x2000002c
 80043e0:	20000030 	.word	0x20000030
 80043e4:	20000034 	.word	0x20000034
 80043e8:	2000010c 	.word	0x2000010c
 80043ec:	20000028 	.word	0x20000028
 80043f0:	200000cc 	.word	0x200000cc
 80043f4:	40020400 	.word	0x40020400

080043f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800440c:	4802      	ldr	r0, [pc, #8]	; (8004418 <USART1_IRQHandler+0x10>)
 800440e:	f7fe f8d7 	bl	80025c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200000cc 	.word	0x200000cc

0800441c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <DMA2_Stream7_IRQHandler+0x10>)
 8004422:	f7fc ff23 	bl	800126c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000044 	.word	0x20000044

08004430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <SystemInit+0x60>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <SystemInit+0x60>)
 800443c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <SystemInit+0x64>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a12      	ldr	r2, [pc, #72]	; (8004494 <SystemInit+0x64>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <SystemInit+0x64>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <SystemInit+0x64>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <SystemInit+0x64>)
 800445c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <SystemInit+0x64>)
 8004468:	4a0b      	ldr	r2, [pc, #44]	; (8004498 <SystemInit+0x68>)
 800446a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <SystemInit+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a08      	ldr	r2, [pc, #32]	; (8004494 <SystemInit+0x64>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <SystemInit+0x64>)
 800447a:	2200      	movs	r2, #0
 800447c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <SystemInit+0x60>)
 8004480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004484:	609a      	str	r2, [r3, #8]
#endif
}
 8004486:	bf00      	nop
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000ed00 	.word	0xe000ed00
 8004494:	40023800 	.word	0x40023800
 8004498:	24003010 	.word	0x24003010

0800449c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800449c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044a2:	e003      	b.n	80044ac <LoopCopyDataInit>

080044a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044aa:	3104      	adds	r1, #4

080044ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044ac:	480b      	ldr	r0, [pc, #44]	; (80044dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044b4:	d3f6      	bcc.n	80044a4 <CopyDataInit>
  ldr  r2, =_sbss
 80044b6:	4a0b      	ldr	r2, [pc, #44]	; (80044e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044b8:	e002      	b.n	80044c0 <LoopFillZerobss>

080044ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044bc:	f842 3b04 	str.w	r3, [r2], #4

080044c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044c4:	d3f9      	bcc.n	80044ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044c6:	f7ff ffb3 	bl	8004430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ca:	f000 f811 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044ce:	f7ff fb5f 	bl	8003b90 <main>
  bx  lr    
 80044d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044d4:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 80044d8:	08004590 	.word	0x08004590
  ldr  r0, =_sdata
 80044dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044e0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80044e4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80044e8:	20000110 	.word	0x20000110

080044ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044ec:	e7fe      	b.n	80044ec <CAN1_RX0_IRQHandler>
	...

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4e0d      	ldr	r6, [pc, #52]	; (8004528 <__libc_init_array+0x38>)
 80044f4:	4c0d      	ldr	r4, [pc, #52]	; (800452c <__libc_init_array+0x3c>)
 80044f6:	1ba4      	subs	r4, r4, r6
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2500      	movs	r5, #0
 80044fc:	42a5      	cmp	r5, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	4e0b      	ldr	r6, [pc, #44]	; (8004530 <__libc_init_array+0x40>)
 8004502:	4c0c      	ldr	r4, [pc, #48]	; (8004534 <__libc_init_array+0x44>)
 8004504:	f000 f820 	bl	8004548 <_init>
 8004508:	1ba4      	subs	r4, r4, r6
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	2500      	movs	r5, #0
 800450e:	42a5      	cmp	r5, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004518:	4798      	blx	r3
 800451a:	3501      	adds	r5, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004522:	4798      	blx	r3
 8004524:	3501      	adds	r5, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08004588 	.word	0x08004588
 800452c:	08004588 	.word	0x08004588
 8004530:	08004588 	.word	0x08004588
 8004534:	0800458c 	.word	0x0800458c

08004538 <memset>:
 8004538:	4402      	add	r2, r0
 800453a:	4603      	mov	r3, r0
 800453c:	4293      	cmp	r3, r2
 800453e:	d100      	bne.n	8004542 <memset+0xa>
 8004540:	4770      	bx	lr
 8004542:	f803 1b01 	strb.w	r1, [r3], #1
 8004546:	e7f9      	b.n	800453c <memset+0x4>

08004548 <_init>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr

08004554 <_fini>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	bf00      	nop
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr
