
sound_encoder_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134a0  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b53c  0801b53c  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b53c  0801b53c  0002b53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b544  0801b544  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b544  0801b544  0002b544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b548  0801b548  0002b548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801b54c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001262c  2000000c  0801b558  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012638  0801b558  00032638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000325ca  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ec9  00000000  00000000  00062606  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001e758  00000000  00000000  000674cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002070  00000000  00000000  00085c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002280  00000000  00000000  00087c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002f868  00000000  00000000  00089f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001c598  00000000  00000000  000b9780  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001225aa  00000000  00000000  000d5d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000eb  00000000  00000000  001f82c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a74  00000000  00000000  001f83b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008084 	.word	0x08008084

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08008084 	.word	0x08008084

080001ec <arm_bitreversal_32>:
 80001ec:	1c4b      	adds	r3, r1, #1
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	bf98      	it	ls
 80001f2:	4770      	bxls	lr
 80001f4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001f8:	1c91      	adds	r1, r2, #2
 80001fa:	089b      	lsrs	r3, r3, #2

080001fc <arm_bitreversal_32_0>:
 80001fc:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000200:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000204:	880a      	ldrh	r2, [r1, #0]
 8000206:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020a:	4480      	add	r8, r0
 800020c:	4481      	add	r9, r0
 800020e:	4402      	add	r2, r0
 8000210:	4484      	add	ip, r0
 8000212:	f8d9 7000 	ldr.w	r7, [r9]
 8000216:	f8d8 6000 	ldr.w	r6, [r8]
 800021a:	6815      	ldr	r5, [r2, #0]
 800021c:	f8dc 4000 	ldr.w	r4, [ip]
 8000220:	f8c9 6000 	str.w	r6, [r9]
 8000224:	f8c8 7000 	str.w	r7, [r8]
 8000228:	f8cc 5000 	str.w	r5, [ip]
 800022c:	6014      	str	r4, [r2, #0]
 800022e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000232:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000236:	6855      	ldr	r5, [r2, #4]
 8000238:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800023c:	f8c9 6004 	str.w	r6, [r9, #4]
 8000240:	f8c8 7004 	str.w	r7, [r8, #4]
 8000244:	f8cc 5004 	str.w	r5, [ip, #4]
 8000248:	6054      	str	r4, [r2, #4]
 800024a:	3108      	adds	r1, #8
 800024c:	3b01      	subs	r3, #1
 800024e:	d1d5      	bne.n	80001fc <arm_bitreversal_32_0>
 8000250:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000254:	4770      	bx	lr

08000256 <arm_bitreversal_16>:
 8000256:	1c4b      	adds	r3, r1, #1
 8000258:	2b01      	cmp	r3, #1
 800025a:	bf98      	it	ls
 800025c:	4770      	bxls	lr
 800025e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000262:	1c91      	adds	r1, r2, #2
 8000264:	089b      	lsrs	r3, r3, #2

08000266 <arm_bitreversal_16_0>:
 8000266:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026a:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800026e:	880a      	ldrh	r2, [r1, #0]
 8000270:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000274:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000278:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 800027c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000280:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000284:	f8d9 7000 	ldr.w	r7, [r9]
 8000288:	f8d8 6000 	ldr.w	r6, [r8]
 800028c:	6815      	ldr	r5, [r2, #0]
 800028e:	f8dc 4000 	ldr.w	r4, [ip]
 8000292:	f8c9 6000 	str.w	r6, [r9]
 8000296:	f8c8 7000 	str.w	r7, [r8]
 800029a:	f8cc 5000 	str.w	r5, [ip]
 800029e:	6014      	str	r4, [r2, #0]
 80002a0:	3108      	adds	r1, #8
 80002a2:	3b01      	subs	r3, #1
 80002a4:	d1df      	bne.n	8000266 <arm_bitreversal_16_0>
 80002a6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002aa:	4770      	bx	lr

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c0:	f000 b972 	b.w	80005a8 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e0:	9e08      	ldr	r6, [sp, #32]
 80002e2:	4604      	mov	r4, r0
 80002e4:	4688      	mov	r8, r1
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d14b      	bne.n	8000382 <__udivmoddi4+0xa6>
 80002ea:	428a      	cmp	r2, r1
 80002ec:	4615      	mov	r5, r2
 80002ee:	d967      	bls.n	80003c0 <__udivmoddi4+0xe4>
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	b14a      	cbz	r2, 800030a <__udivmoddi4+0x2e>
 80002f6:	f1c2 0720 	rsb	r7, r2, #32
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	fa20 f707 	lsr.w	r7, r0, r7
 8000302:	4095      	lsls	r5, r2
 8000304:	ea47 0803 	orr.w	r8, r7, r3
 8000308:	4094      	lsls	r4, r2
 800030a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fbb8 f7fe 	udiv	r7, r8, lr
 8000314:	fa1f fc85 	uxth.w	ip, r5
 8000318:	fb0e 8817 	mls	r8, lr, r7, r8
 800031c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000320:	fb07 f10c 	mul.w	r1, r7, ip
 8000324:	4299      	cmp	r1, r3
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x60>
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800032e:	f080 811b 	bcs.w	8000568 <__udivmoddi4+0x28c>
 8000332:	4299      	cmp	r1, r3
 8000334:	f240 8118 	bls.w	8000568 <__udivmoddi4+0x28c>
 8000338:	3f02      	subs	r7, #2
 800033a:	442b      	add	r3, r5
 800033c:	1a5b      	subs	r3, r3, r1
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb3 f0fe 	udiv	r0, r3, lr
 8000344:	fb0e 3310 	mls	r3, lr, r0, r3
 8000348:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800034c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000350:	45a4      	cmp	ip, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x8c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	f080 8107 	bcs.w	800056c <__udivmoddi4+0x290>
 800035e:	45a4      	cmp	ip, r4
 8000360:	f240 8104 	bls.w	800056c <__udivmoddi4+0x290>
 8000364:	3802      	subs	r0, #2
 8000366:	442c      	add	r4, r5
 8000368:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	2700      	movs	r7, #0
 8000372:	b11e      	cbz	r6, 800037c <__udivmoddi4+0xa0>
 8000374:	40d4      	lsrs	r4, r2
 8000376:	2300      	movs	r3, #0
 8000378:	e9c6 4300 	strd	r4, r3, [r6]
 800037c:	4639      	mov	r1, r7
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d909      	bls.n	800039a <__udivmoddi4+0xbe>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80eb 	beq.w	8000562 <__udivmoddi4+0x286>
 800038c:	2700      	movs	r7, #0
 800038e:	e9c6 0100 	strd	r0, r1, [r6]
 8000392:	4638      	mov	r0, r7
 8000394:	4639      	mov	r1, r7
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	fab3 f783 	clz	r7, r3
 800039e:	2f00      	cmp	r7, #0
 80003a0:	d147      	bne.n	8000432 <__udivmoddi4+0x156>
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xd0>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2c4>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb61 0303 	sbc.w	r3, r1, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	4698      	mov	r8, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d0e0      	beq.n	800037c <__udivmoddi4+0xa0>
 80003ba:	e9c6 4800 	strd	r4, r8, [r6]
 80003be:	e7dd      	b.n	800037c <__udivmoddi4+0xa0>
 80003c0:	b902      	cbnz	r2, 80003c4 <__udivmoddi4+0xe8>
 80003c2:	deff      	udf	#255	; 0xff
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	2a00      	cmp	r2, #0
 80003ca:	f040 808f 	bne.w	80004ec <__udivmoddi4+0x210>
 80003ce:	1b49      	subs	r1, r1, r5
 80003d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d4:	fa1f f885 	uxth.w	r8, r5
 80003d8:	2701      	movs	r7, #1
 80003da:	fbb1 fcfe 	udiv	ip, r1, lr
 80003de:	0c23      	lsrs	r3, r4, #16
 80003e0:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e8:	fb08 f10c 	mul.w	r1, r8, ip
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x124>
 80003f0:	18eb      	adds	r3, r5, r3
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x122>
 80003f8:	4299      	cmp	r1, r3
 80003fa:	f200 80cd 	bhi.w	8000598 <__udivmoddi4+0x2bc>
 80003fe:	4684      	mov	ip, r0
 8000400:	1a59      	subs	r1, r3, r1
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1410 	mls	r4, lr, r0, r1
 800040c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x14c>
 8000418:	192c      	adds	r4, r5, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x14a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80b6 	bhi.w	8000592 <__udivmoddi4+0x2b6>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e79f      	b.n	8000372 <__udivmoddi4+0x96>
 8000432:	f1c7 0c20 	rsb	ip, r7, #32
 8000436:	40bb      	lsls	r3, r7
 8000438:	fa22 fe0c 	lsr.w	lr, r2, ip
 800043c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000440:	fa01 f407 	lsl.w	r4, r1, r7
 8000444:	fa20 f50c 	lsr.w	r5, r0, ip
 8000448:	fa21 f30c 	lsr.w	r3, r1, ip
 800044c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000450:	4325      	orrs	r5, r4
 8000452:	fbb3 f9f8 	udiv	r9, r3, r8
 8000456:	0c2c      	lsrs	r4, r5, #16
 8000458:	fb08 3319 	mls	r3, r8, r9, r3
 800045c:	fa1f fa8e 	uxth.w	sl, lr
 8000460:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000464:	fb09 f40a 	mul.w	r4, r9, sl
 8000468:	429c      	cmp	r4, r3
 800046a:	fa02 f207 	lsl.w	r2, r2, r7
 800046e:	fa00 f107 	lsl.w	r1, r0, r7
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b0>
 8000474:	eb1e 0303 	adds.w	r3, lr, r3
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800047c:	f080 8087 	bcs.w	800058e <__udivmoddi4+0x2b2>
 8000480:	429c      	cmp	r4, r3
 8000482:	f240 8084 	bls.w	800058e <__udivmoddi4+0x2b2>
 8000486:	f1a9 0902 	sub.w	r9, r9, #2
 800048a:	4473      	add	r3, lr
 800048c:	1b1b      	subs	r3, r3, r4
 800048e:	b2ad      	uxth	r5, r5
 8000490:	fbb3 f0f8 	udiv	r0, r3, r8
 8000494:	fb08 3310 	mls	r3, r8, r0, r3
 8000498:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800049c:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a0:	45a2      	cmp	sl, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1da>
 80004a4:	eb1e 0404 	adds.w	r4, lr, r4
 80004a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004ac:	d26b      	bcs.n	8000586 <__udivmoddi4+0x2aa>
 80004ae:	45a2      	cmp	sl, r4
 80004b0:	d969      	bls.n	8000586 <__udivmoddi4+0x2aa>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4474      	add	r4, lr
 80004b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	eba4 040a 	sub.w	r4, r4, sl
 80004c2:	454c      	cmp	r4, r9
 80004c4:	46c2      	mov	sl, r8
 80004c6:	464b      	mov	r3, r9
 80004c8:	d354      	bcc.n	8000574 <__udivmoddi4+0x298>
 80004ca:	d051      	beq.n	8000570 <__udivmoddi4+0x294>
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d069      	beq.n	80005a4 <__udivmoddi4+0x2c8>
 80004d0:	ebb1 050a 	subs.w	r5, r1, sl
 80004d4:	eb64 0403 	sbc.w	r4, r4, r3
 80004d8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004dc:	40fd      	lsrs	r5, r7
 80004de:	40fc      	lsrs	r4, r7
 80004e0:	ea4c 0505 	orr.w	r5, ip, r5
 80004e4:	e9c6 5400 	strd	r5, r4, [r6]
 80004e8:	2700      	movs	r7, #0
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0xa0>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f703 	lsr.w	r7, r0, r3
 80004f4:	4095      	lsls	r5, r2
 80004f6:	fa01 f002 	lsl.w	r0, r1, r2
 80004fa:	fa21 f303 	lsr.w	r3, r1, r3
 80004fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000502:	4338      	orrs	r0, r7
 8000504:	0c01      	lsrs	r1, r0, #16
 8000506:	fbb3 f7fe 	udiv	r7, r3, lr
 800050a:	fa1f f885 	uxth.w	r8, r5
 800050e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb07 f308 	mul.w	r3, r7, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d907      	bls.n	8000532 <__udivmoddi4+0x256>
 8000522:	1869      	adds	r1, r5, r1
 8000524:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000528:	d22f      	bcs.n	800058a <__udivmoddi4+0x2ae>
 800052a:	428b      	cmp	r3, r1
 800052c:	d92d      	bls.n	800058a <__udivmoddi4+0x2ae>
 800052e:	3f02      	subs	r7, #2
 8000530:	4429      	add	r1, r5
 8000532:	1acb      	subs	r3, r1, r3
 8000534:	b281      	uxth	r1, r0
 8000536:	fbb3 f0fe 	udiv	r0, r3, lr
 800053a:	fb0e 3310 	mls	r3, lr, r0, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb00 f308 	mul.w	r3, r0, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x27e>
 800054a:	1869      	adds	r1, r5, r1
 800054c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000550:	d217      	bcs.n	8000582 <__udivmoddi4+0x2a6>
 8000552:	428b      	cmp	r3, r1
 8000554:	d915      	bls.n	8000582 <__udivmoddi4+0x2a6>
 8000556:	3802      	subs	r0, #2
 8000558:	4429      	add	r1, r5
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000560:	e73b      	b.n	80003da <__udivmoddi4+0xfe>
 8000562:	4637      	mov	r7, r6
 8000564:	4630      	mov	r0, r6
 8000566:	e709      	b.n	800037c <__udivmoddi4+0xa0>
 8000568:	4607      	mov	r7, r0
 800056a:	e6e7      	b.n	800033c <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fb      	b.n	8000368 <__udivmoddi4+0x8c>
 8000570:	4541      	cmp	r1, r8
 8000572:	d2ab      	bcs.n	80004cc <__udivmoddi4+0x1f0>
 8000574:	ebb8 0a02 	subs.w	sl, r8, r2
 8000578:	eb69 020e 	sbc.w	r2, r9, lr
 800057c:	3801      	subs	r0, #1
 800057e:	4613      	mov	r3, r2
 8000580:	e7a4      	b.n	80004cc <__udivmoddi4+0x1f0>
 8000582:	4660      	mov	r0, ip
 8000584:	e7e9      	b.n	800055a <__udivmoddi4+0x27e>
 8000586:	4618      	mov	r0, r3
 8000588:	e795      	b.n	80004b6 <__udivmoddi4+0x1da>
 800058a:	4667      	mov	r7, ip
 800058c:	e7d1      	b.n	8000532 <__udivmoddi4+0x256>
 800058e:	4681      	mov	r9, r0
 8000590:	e77c      	b.n	800048c <__udivmoddi4+0x1b0>
 8000592:	3802      	subs	r0, #2
 8000594:	442c      	add	r4, r5
 8000596:	e747      	b.n	8000428 <__udivmoddi4+0x14c>
 8000598:	f1ac 0c02 	sub.w	ip, ip, #2
 800059c:	442b      	add	r3, r5
 800059e:	e72f      	b.n	8000400 <__udivmoddi4+0x124>
 80005a0:	4638      	mov	r0, r7
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xda>
 80005a4:	4637      	mov	r7, r6
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0xa0>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <HAL_InitTick+0x44>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	b90b      	cbnz	r3, 80005b6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80005b2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80005b4:	4770      	bx	lr
{
 80005b6:	b510      	push	{r4, lr}
 80005b8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	fbb0 f3f3 	udiv	r3, r0, r3
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <HAL_InitTick+0x48>)
 80005c4:	6810      	ldr	r0, [r2, #0]
 80005c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80005ca:	f000 fc99 	bl	8000f00 <HAL_SYSTICK_Config>
 80005ce:	b968      	cbnz	r0, 80005ec <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d0:	2c0f      	cmp	r4, #15
 80005d2:	d901      	bls.n	80005d8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80005d4:	2001      	movs	r0, #1
 80005d6:	e00a      	b.n	80005ee <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	4621      	mov	r1, r4
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e0:	f000 fc4e 	bl	8000e80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_InitTick+0x4c>)
 80005e6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e8:	2000      	movs	r0, #0
 80005ea:	e000      	b.n	80005ee <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80005ec:	2001      	movs	r0, #1
}
 80005ee:	bd10      	pop	{r4, pc}
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000004 	.word	0x20000004

080005fc <HAL_Init>:
{
 80005fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fe:	2003      	movs	r0, #3
 8000600:	f000 fc2c 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ffd1 	bl	80005ac <HAL_InitTick>
 800060a:	b110      	cbz	r0, 8000612 <HAL_Init+0x16>
    status = HAL_ERROR;
 800060c:	2401      	movs	r4, #1
}
 800060e:	4620      	mov	r0, r4
 8000610:	bd10      	pop	{r4, pc}
 8000612:	4604      	mov	r4, r0
    HAL_MspInit();
 8000614:	f005 ff00 	bl	8006418 <HAL_MspInit>
 8000618:	e7f9      	b.n	800060e <HAL_Init+0x12>
	...

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	6813      	ldr	r3, [r2, #0]
 8000620:	4903      	ldr	r1, [pc, #12]	; (8000630 <HAL_IncTick+0x14>)
 8000622:	6809      	ldr	r1, [r1, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000088 	.word	0x20000088
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000088 	.word	0x20000088

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
 8000648:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800064e:	d002      	beq.n	8000656 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_Delay+0x24>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	42a0      	cmp	r0, r4
 800065e:	d3fa      	bcc.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000668:	b530      	push	{r4, r5, lr}
 800066a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800066c:	2300      	movs	r3, #0
 800066e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000670:	2800      	cmp	r0, #0
 8000672:	f000 80f7 	beq.w	8000864 <HAL_ADC_Init+0x1fc>
 8000676:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000678:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800067a:	b303      	cbz	r3, 80006be <HAL_ADC_Init+0x56>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800067c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000684:	d005      	beq.n	8000692 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 800068c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000690:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000692:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000694:	6893      	ldr	r3, [r2, #8]
 8000696:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800069a:	d11d      	bne.n	80006d8 <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 800069c:	6893      	ldr	r3, [r2, #8]
 800069e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80006a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80006ac:	4b6e      	ldr	r3, [pc, #440]	; (8000868 <HAL_ADC_Init+0x200>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	099b      	lsrs	r3, r3, #6
 80006b2:	4a6e      	ldr	r2, [pc, #440]	; (800086c <HAL_ADC_Init+0x204>)
 80006b4:	fba2 2303 	umull	r2, r3, r2, r3
 80006b8:	099b      	lsrs	r3, r3, #6
 80006ba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80006bc:	e009      	b.n	80006d2 <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 80006be:	f005 fec3 	bl	8006448 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80006c2:	2300      	movs	r3, #0
 80006c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80006c6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80006ca:	e7d7      	b.n	800067c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80006cc:	9b01      	ldr	r3, [sp, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80006d2:	9b01      	ldr	r3, [sp, #4]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f9      	bne.n	80006cc <HAL_ADC_Init+0x64>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006d8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80006e0:	f040 808b 	bne.w	80007fa <HAL_ADC_Init+0x192>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80006e6:	f042 0210 	orr.w	r2, r2, #16
 80006ea:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006ec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80006ee:	f042 0201 	orr.w	r2, r2, #1
 80006f2:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80006f4:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	f012 0f04 	tst.w	r2, #4
 80006fc:	d07f      	beq.n	80007fe <HAL_ADC_Init+0x196>
 80006fe:	2101      	movs	r1, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000700:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000702:	f012 0f10 	tst.w	r2, #16
 8000706:	f040 80a6 	bne.w	8000856 <HAL_ADC_Init+0x1ee>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800070a:	2900      	cmp	r1, #0
 800070c:	f040 80a3 	bne.w	8000856 <HAL_ADC_Init+0x1ee>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000710:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000712:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000716:	f042 0202 	orr.w	r2, r2, #2
 800071a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	f013 0f01 	tst.w	r3, #1
 8000722:	d11b      	bne.n	800075c <HAL_ADC_Init+0xf4>
 8000724:	4b52      	ldr	r3, [pc, #328]	; (8000870 <HAL_ADC_Init+0x208>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f013 0f01 	tst.w	r3, #1
 800072c:	d069      	beq.n	8000802 <HAL_ADC_Init+0x19a>
 800072e:	2101      	movs	r1, #1
 8000730:	4a50      	ldr	r2, [pc, #320]	; (8000874 <HAL_ADC_Init+0x20c>)
 8000732:	6892      	ldr	r2, [r2, #8]
 8000734:	f012 0f01 	tst.w	r2, #1
 8000738:	d065      	beq.n	8000806 <HAL_ADC_Init+0x19e>
 800073a:	2301      	movs	r3, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800073c:	430b      	orrs	r3, r1
 800073e:	4a4e      	ldr	r2, [pc, #312]	; (8000878 <HAL_ADC_Init+0x210>)
 8000740:	6892      	ldr	r2, [r2, #8]
 8000742:	f012 0f01 	tst.w	r2, #1
 8000746:	d060      	beq.n	800080a <HAL_ADC_Init+0x1a2>
 8000748:	2201      	movs	r2, #1
 800074a:	4313      	orrs	r3, r2
 800074c:	d106      	bne.n	800075c <HAL_ADC_Init+0xf4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800074e:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000750:	494a      	ldr	r1, [pc, #296]	; (800087c <HAL_ADC_Init+0x214>)
 8000752:	688a      	ldr	r2, [r1, #8]
 8000754:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000758:	4313      	orrs	r3, r2
 800075a:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800075c:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 800075e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000760:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8000764:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8000766:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8000768:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 800076a:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800076c:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000774:	2a01      	cmp	r2, #1
 8000776:	d04a      	beq.n	800080e <HAL_ADC_Init+0x1a6>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000778:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800077a:	b122      	cbz	r2, 8000786 <HAL_ADC_Init+0x11e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800077c:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000780:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000782:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000784:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000786:	6821      	ldr	r1, [r4, #0]
 8000788:	68cd      	ldr	r5, [r1, #12]
 800078a:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <HAL_ADC_Init+0x218>)
 800078c:	402a      	ands	r2, r5
 800078e:	4313      	orrs	r3, r2
 8000790:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000792:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	f012 0f04 	tst.w	r2, #4
 800079a:	d03d      	beq.n	8000818 <HAL_ADC_Init+0x1b0>
 800079c:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800079e:	689a      	ldr	r2, [r3, #8]
 80007a0:	f012 0f08 	tst.w	r2, #8
 80007a4:	d03a      	beq.n	800081c <HAL_ADC_Init+0x1b4>
 80007a6:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80007a8:	b9c1      	cbnz	r1, 80007dc <HAL_ADC_Init+0x174>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80007aa:	b9ba      	cbnz	r2, 80007dc <HAL_ADC_Init+0x174>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80007ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80007ae:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80007b0:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80007b4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80007b8:	ea42 0141 	orr.w	r1, r2, r1, lsl #1

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80007bc:	68da      	ldr	r2, [r3, #12]
 80007be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80007c2:	f022 0206 	bic.w	r2, r2, #6
 80007c6:	430a      	orrs	r2, r1
 80007c8:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80007ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d026      	beq.n	8000820 <HAL_ADC_Init+0x1b8>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80007d2:	6822      	ldr	r2, [r4, #0]
 80007d4:	6913      	ldr	r3, [r2, #16]
 80007d6:	f023 0301 	bic.w	r3, r3, #1
 80007da:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80007dc:	6923      	ldr	r3, [r4, #16]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d030      	beq.n	8000844 <HAL_ADC_Init+0x1dc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80007e2:	6822      	ldr	r2, [r4, #0]
 80007e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80007e6:	f023 030f 	bic.w	r3, r3, #15
 80007ea:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80007ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007ee:	f023 0303 	bic.w	r3, r3, #3
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80007f8:	e032      	b.n	8000860 <HAL_ADC_Init+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007fa:	2000      	movs	r0, #0
 80007fc:	e77b      	b.n	80006f6 <HAL_ADC_Init+0x8e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007fe:	2100      	movs	r1, #0
 8000800:	e77e      	b.n	8000700 <HAL_ADC_Init+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000802:	2100      	movs	r1, #0
 8000804:	e794      	b.n	8000730 <HAL_ADC_Init+0xc8>
 8000806:	2300      	movs	r3, #0
 8000808:	e798      	b.n	800073c <HAL_ADC_Init+0xd4>
 800080a:	2200      	movs	r2, #0
 800080c:	e79d      	b.n	800074a <HAL_ADC_Init+0xe2>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800080e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000810:	3a01      	subs	r2, #1
 8000812:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000816:	e7af      	b.n	8000778 <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000818:	2100      	movs	r1, #0
 800081a:	e7c0      	b.n	800079e <HAL_ADC_Init+0x136>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800081c:	2200      	movs	r2, #0
 800081e:	e7c3      	b.n	80007a8 <HAL_ADC_Init+0x140>
        MODIFY_REG(hadc->Instance->CFGR2,
 8000820:	6821      	ldr	r1, [r4, #0]
 8000822:	690b      	ldr	r3, [r1, #16]
 8000824:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000828:	f023 0304 	bic.w	r3, r3, #4
 800082c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800082e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000830:	432a      	orrs	r2, r5
 8000832:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000834:	432a      	orrs	r2, r5
 8000836:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000838:	432a      	orrs	r2, r5
 800083a:	4313      	orrs	r3, r2
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	610b      	str	r3, [r1, #16]
 8000842:	e7cb      	b.n	80007dc <HAL_ADC_Init+0x174>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000844:	6821      	ldr	r1, [r4, #0]
 8000846:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000848:	f023 030f 	bic.w	r3, r3, #15
 800084c:	69e2      	ldr	r2, [r4, #28]
 800084e:	3a01      	subs	r2, #1
 8000850:	4313      	orrs	r3, r2
 8000852:	630b      	str	r3, [r1, #48]	; 0x30
 8000854:	e7ca      	b.n	80007ec <HAL_ADC_Init+0x184>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800085e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000860:	b003      	add	sp, #12
 8000862:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000864:	2001      	movs	r0, #1
 8000866:	e7fb      	b.n	8000860 <HAL_ADC_Init+0x1f8>
 8000868:	20000008 	.word	0x20000008
 800086c:	053e2d63 	.word	0x053e2d63
 8000870:	50040000 	.word	0x50040000
 8000874:	50040100 	.word	0x50040100
 8000878:	50040200 	.word	0x50040200
 800087c:	50040300 	.word	0x50040300
 8000880:	fff0c007 	.word	0xfff0c007

08000884 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000884:	b4f0      	push	{r4, r5, r6, r7}
 8000886:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000888:	2200      	movs	r2, #0
 800088a:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800088c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8000890:	2a01      	cmp	r2, #1
 8000892:	f000 8234 	beq.w	8000cfe <HAL_ADC_ConfigChannel+0x47a>
 8000896:	4603      	mov	r3, r0
 8000898:	2201      	movs	r2, #1
 800089a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800089e:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80008a0:	6892      	ldr	r2, [r2, #8]
 80008a2:	f012 0f04 	tst.w	r2, #4
 80008a6:	d00a      	beq.n	80008be <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008a8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80008aa:	f042 0220 	orr.w	r2, r2, #32
 80008ae:	6582      	str	r2, [r0, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80008b0:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80008b8:	b002      	add	sp, #8
 80008ba:	bcf0      	pop	{r4, r5, r6, r7}
 80008bc:	4770      	bx	lr
    if (sConfig->Rank <= 5U)
 80008be:	684a      	ldr	r2, [r1, #4]
 80008c0:	2a05      	cmp	r2, #5
 80008c2:	d809      	bhi.n	80008d8 <HAL_ADC_ConfigChannel+0x54>
      switch (sConfig->Rank)
 80008c4:	3a02      	subs	r2, #2
 80008c6:	2a03      	cmp	r2, #3
 80008c8:	f200 8098 	bhi.w	80009fc <HAL_ADC_ConfigChannel+0x178>
 80008cc:	e8df f002 	tbb	[pc, r2]
 80008d0:	928f8c02 	.word	0x928f8c02
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80008d4:	220c      	movs	r2, #12
 80008d6:	604a      	str	r2, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80008d8:	681e      	ldr	r6, [r3, #0]
 80008da:	684d      	ldr	r5, [r1, #4]
 80008dc:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008de:	3630      	adds	r6, #48	; 0x30
 80008e0:	0a2a      	lsrs	r2, r5, #8
 80008e2:	0092      	lsls	r2, r2, #2
 80008e4:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80008e8:	58b0      	ldr	r0, [r6, r2]
 80008ea:	f005 051f 	and.w	r5, r5, #31
 80008ee:	271f      	movs	r7, #31
 80008f0:	40af      	lsls	r7, r5
 80008f2:	ea20 0007 	bic.w	r0, r0, r7
 80008f6:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80008fa:	40ac      	lsls	r4, r5
 80008fc:	4320      	orrs	r0, r4
 80008fe:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000900:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000902:	6890      	ldr	r0, [r2, #8]
 8000904:	f010 0f04 	tst.w	r0, #4
 8000908:	d07b      	beq.n	8000a02 <HAL_ADC_ConfigChannel+0x17e>
 800090a:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800090c:	6894      	ldr	r4, [r2, #8]
 800090e:	f014 0f08 	tst.w	r4, #8
 8000912:	d078      	beq.n	8000a06 <HAL_ADC_ConfigChannel+0x182>
 8000914:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000916:	2800      	cmp	r0, #0
 8000918:	d133      	bne.n	8000982 <HAL_ADC_ConfigChannel+0xfe>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800091a:	2c00      	cmp	r4, #0
 800091c:	d131      	bne.n	8000982 <HAL_ADC_ConfigChannel+0xfe>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800091e:	688c      	ldr	r4, [r1, #8]
 8000920:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8000924:	d071      	beq.n	8000a0a <HAL_ADC_ConfigChannel+0x186>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000926:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000928:	3214      	adds	r2, #20
 800092a:	0e70      	lsrs	r0, r6, #25
 800092c:	0080      	lsls	r0, r0, #2
 800092e:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000932:	5815      	ldr	r5, [r2, r0]
 8000934:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8000938:	2707      	movs	r7, #7
 800093a:	40b7      	lsls	r7, r6
 800093c:	ea25 0507 	bic.w	r5, r5, r7
 8000940:	40b4      	lsls	r4, r6
 8000942:	432c      	orrs	r4, r5
 8000944:	5014      	str	r4, [r2, r0]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000946:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000948:	6942      	ldr	r2, [r0, #20]
 800094a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800094e:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000950:	694c      	ldr	r4, [r1, #20]
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	68c2      	ldr	r2, [r0, #12]
 8000956:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800095a:	0052      	lsls	r2, r2, #1
 800095c:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000960:	690d      	ldr	r5, [r1, #16]
 8000962:	2d04      	cmp	r5, #4
 8000964:	d066      	beq.n	8000a34 <HAL_ADC_ConfigChannel+0x1b0>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000966:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000968:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 800096a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800096e:	4cb5      	ldr	r4, [pc, #724]	; (8000c44 <HAL_ADC_ConfigChannel+0x3c0>)
 8000970:	403c      	ands	r4, r7
 8000972:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000976:	4332      	orrs	r2, r6
 8000978:	4314      	orrs	r4, r2
 800097a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800097e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000982:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000984:	6882      	ldr	r2, [r0, #8]
 8000986:	f012 0f01 	tst.w	r2, #1
 800098a:	d116      	bne.n	80009ba <HAL_ADC_ConfigChannel+0x136>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800098c:	680a      	ldr	r2, [r1, #0]
 800098e:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000990:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000994:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8000998:	ea24 0406 	bic.w	r4, r4, r6
 800099c:	f005 0618 	and.w	r6, r5, #24
 80009a0:	4da9      	ldr	r5, [pc, #676]	; (8000c48 <HAL_ADC_ConfigChannel+0x3c4>)
 80009a2:	40f5      	lsrs	r5, r6
 80009a4:	402a      	ands	r2, r5
 80009a6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80009aa:	4322      	orrs	r2, r4
 80009ac:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80009b0:	68c8      	ldr	r0, [r1, #12]
 80009b2:	4aa6      	ldr	r2, [pc, #664]	; (8000c4c <HAL_ADC_ConfigChannel+0x3c8>)
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f000 8099 	beq.w	8000aec <HAL_ADC_ConfigChannel+0x268>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80009ba:	680a      	ldr	r2, [r1, #0]
 80009bc:	49a4      	ldr	r1, [pc, #656]	; (8000c50 <HAL_ADC_ConfigChannel+0x3cc>)
 80009be:	420a      	tst	r2, r1
 80009c0:	f000 8199 	beq.w	8000cf6 <HAL_ADC_ConfigChannel+0x472>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009c4:	49a3      	ldr	r1, [pc, #652]	; (8000c54 <HAL_ADC_ConfigChannel+0x3d0>)
 80009c6:	6889      	ldr	r1, [r1, #8]
 80009c8:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80009cc:	48a2      	ldr	r0, [pc, #648]	; (8000c58 <HAL_ADC_ConfigChannel+0x3d4>)
 80009ce:	4282      	cmp	r2, r0
 80009d0:	f000 812a 	beq.w	8000c28 <HAL_ADC_ConfigChannel+0x3a4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80009d4:	48a1      	ldr	r0, [pc, #644]	; (8000c5c <HAL_ADC_ConfigChannel+0x3d8>)
 80009d6:	4282      	cmp	r2, r0
 80009d8:	f000 8162 	beq.w	8000ca0 <HAL_ADC_ConfigChannel+0x41c>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80009dc:	48a0      	ldr	r0, [pc, #640]	; (8000c60 <HAL_ADC_ConfigChannel+0x3dc>)
 80009de:	4282      	cmp	r2, r0
 80009e0:	f000 8176 	beq.w	8000cd0 <HAL_ADC_ConfigChannel+0x44c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e4:	2000      	movs	r0, #0
 80009e6:	e764      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80009e8:	2212      	movs	r2, #18
 80009ea:	604a      	str	r2, [r1, #4]
 80009ec:	e774      	b.n	80008d8 <HAL_ADC_ConfigChannel+0x54>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80009ee:	2218      	movs	r2, #24
 80009f0:	604a      	str	r2, [r1, #4]
 80009f2:	e771      	b.n	80008d8 <HAL_ADC_ConfigChannel+0x54>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80009f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f8:	604a      	str	r2, [r1, #4]
 80009fa:	e76d      	b.n	80008d8 <HAL_ADC_ConfigChannel+0x54>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80009fc:	2206      	movs	r2, #6
 80009fe:	604a      	str	r2, [r1, #4]
 8000a00:	e76a      	b.n	80008d8 <HAL_ADC_ConfigChannel+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a02:	2000      	movs	r0, #0
 8000a04:	e782      	b.n	800090c <HAL_ADC_ConfigChannel+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a06:	2400      	movs	r4, #0
 8000a08:	e785      	b.n	8000916 <HAL_ADC_ConfigChannel+0x92>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000a0a:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000a0c:	3214      	adds	r2, #20
 8000a0e:	0e60      	lsrs	r0, r4, #25
 8000a10:	0080      	lsls	r0, r0, #2
 8000a12:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000a16:	5815      	ldr	r5, [r2, r0]
 8000a18:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8000a1c:	2607      	movs	r6, #7
 8000a1e:	fa06 f404 	lsl.w	r4, r6, r4
 8000a22:	ea25 0404 	bic.w	r4, r5, r4
 8000a26:	5014      	str	r4, [r2, r0]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000a28:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000a2a:	6942      	ldr	r2, [r0, #20]
 8000a2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a30:	6142      	str	r2, [r0, #20]
 8000a32:	e78d      	b.n	8000950 <HAL_ADC_ConfigChannel+0xcc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a34:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000a36:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a38:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8000a3c:	680a      	ldr	r2, [r1, #0]
 8000a3e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8000a42:	bb85      	cbnz	r5, 8000aa6 <HAL_ADC_ConfigChannel+0x222>
 8000a44:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000a48:	4294      	cmp	r4, r2
 8000a4a:	d031      	beq.n	8000ab0 <HAL_ADC_ConfigChannel+0x22c>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a4c:	681c      	ldr	r4, [r3, #0]
 8000a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a50:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000a52:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8000a56:	680a      	ldr	r2, [r1, #0]
 8000a58:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8000a5c:	bb6d      	cbnz	r5, 8000aba <HAL_ADC_ConfigChannel+0x236>
 8000a5e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000a62:	4290      	cmp	r0, r2
 8000a64:	d02e      	beq.n	8000ac4 <HAL_ADC_ConfigChannel+0x240>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a66:	681c      	ldr	r4, [r3, #0]
 8000a68:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000a6a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000a6c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8000a70:	680a      	ldr	r2, [r1, #0]
 8000a72:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8000a76:	bb55      	cbnz	r5, 8000ace <HAL_ADC_ConfigChannel+0x24a>
 8000a78:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d02b      	beq.n	8000ad8 <HAL_ADC_ConfigChannel+0x254>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a80:	681c      	ldr	r4, [r3, #0]
 8000a82:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8000a84:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000a86:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8000a8a:	680a      	ldr	r2, [r1, #0]
 8000a8c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8000a90:	bb3d      	cbnz	r5, 8000ae2 <HAL_ADC_ConfigChannel+0x25e>
 8000a92:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000a96:	4290      	cmp	r0, r2
 8000a98:	f47f af73 	bne.w	8000982 <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(*preg,
 8000a9c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8000a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000aa2:	66e2      	str	r2, [r4, #108]	; 0x6c
 8000aa4:	e76d      	b.n	8000982 <HAL_ADC_ConfigChannel+0xfe>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa6:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000aaa:	fab2 f282 	clz	r2, r2
 8000aae:	e7cb      	b.n	8000a48 <HAL_ADC_ConfigChannel+0x1c4>
 8000ab0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000ab2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ab6:	6602      	str	r2, [r0, #96]	; 0x60
 8000ab8:	e7c8      	b.n	8000a4c <HAL_ADC_ConfigChannel+0x1c8>
 8000aba:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	e7ce      	b.n	8000a62 <HAL_ADC_ConfigChannel+0x1de>
 8000ac4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ac6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000aca:	6662      	str	r2, [r4, #100]	; 0x64
 8000acc:	e7cb      	b.n	8000a66 <HAL_ADC_ConfigChannel+0x1e2>
 8000ace:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ad2:	fab2 f282 	clz	r2, r2
 8000ad6:	e7d1      	b.n	8000a7c <HAL_ADC_ConfigChannel+0x1f8>
 8000ad8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000ada:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ade:	66a2      	str	r2, [r4, #104]	; 0x68
 8000ae0:	e7ce      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x1fc>
 8000ae2:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	e7d4      	b.n	8000a96 <HAL_ADC_ConfigChannel+0x212>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000aec:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000aee:	680a      	ldr	r2, [r1, #0]
 8000af0:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8000af4:	bb96      	cbnz	r6, 8000b5c <HAL_ADC_ConfigChannel+0x2d8>
 8000af6:	0e90      	lsrs	r0, r2, #26
 8000af8:	3001      	adds	r0, #1
 8000afa:	f000 001f 	and.w	r0, r0, #31
 8000afe:	2809      	cmp	r0, #9
 8000b00:	bf8c      	ite	hi
 8000b02:	2000      	movhi	r0, #0
 8000b04:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d052      	beq.n	8000bb0 <HAL_ADC_ConfigChannel+0x32c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000b0a:	bb9e      	cbnz	r6, 8000b74 <HAL_ADC_ConfigChannel+0x2f0>
 8000b0c:	0e94      	lsrs	r4, r2, #26
 8000b0e:	3401      	adds	r4, #1
 8000b10:	06a4      	lsls	r4, r4, #26
 8000b12:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000b16:	bbb6      	cbnz	r6, 8000b86 <HAL_ADC_ConfigChannel+0x302>
 8000b18:	0e90      	lsrs	r0, r2, #26
 8000b1a:	3001      	adds	r0, #1
 8000b1c:	f000 071f 	and.w	r7, r0, #31
 8000b20:	2001      	movs	r0, #1
 8000b22:	40b8      	lsls	r0, r7
 8000b24:	4304      	orrs	r4, r0
 8000b26:	bbc6      	cbnz	r6, 8000b9a <HAL_ADC_ConfigChannel+0x316>
 8000b28:	0e92      	lsrs	r2, r2, #26
 8000b2a:	3201      	adds	r2, #1
 8000b2c:	f002 021f 	and.w	r2, r2, #31
 8000b30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b34:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000b36:	4322      	orrs	r2, r4
 8000b38:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b3a:	3514      	adds	r5, #20
 8000b3c:	0e50      	lsrs	r0, r2, #25
 8000b3e:	0080      	lsls	r0, r0, #2
 8000b40:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000b44:	582e      	ldr	r6, [r5, r0]
 8000b46:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8000b4a:	2707      	movs	r7, #7
 8000b4c:	4097      	lsls	r7, r2
 8000b4e:	ea26 0607 	bic.w	r6, r6, r7
 8000b52:	fa04 f202 	lsl.w	r2, r4, r2
 8000b56:	4332      	orrs	r2, r6
 8000b58:	502a      	str	r2, [r5, r0]
 8000b5a:	e72e      	b.n	80009ba <HAL_ADC_ConfigChannel+0x136>
 8000b5c:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000b60:	fab0 f080 	clz	r0, r0
 8000b64:	3001      	adds	r0, #1
 8000b66:	f000 001f 	and.w	r0, r0, #31
 8000b6a:	2809      	cmp	r0, #9
 8000b6c:	bf8c      	ite	hi
 8000b6e:	2000      	movhi	r0, #0
 8000b70:	2001      	movls	r0, #1
 8000b72:	e7c8      	b.n	8000b06 <HAL_ADC_ConfigChannel+0x282>
 8000b74:	fa92 f4a2 	rbit	r4, r2
 8000b78:	fab4 f484 	clz	r4, r4
 8000b7c:	3401      	adds	r4, #1
 8000b7e:	06a4      	lsls	r4, r4, #26
 8000b80:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000b84:	e7c7      	b.n	8000b16 <HAL_ADC_ConfigChannel+0x292>
 8000b86:	fa92 f0a2 	rbit	r0, r2
 8000b8a:	fab0 f080 	clz	r0, r0
 8000b8e:	3001      	adds	r0, #1
 8000b90:	f000 071f 	and.w	r7, r0, #31
 8000b94:	2001      	movs	r0, #1
 8000b96:	40b8      	lsls	r0, r7
 8000b98:	e7c4      	b.n	8000b24 <HAL_ADC_ConfigChannel+0x2a0>
 8000b9a:	fa92 f2a2 	rbit	r2, r2
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	3201      	adds	r2, #1
 8000ba4:	f002 021f 	and.w	r2, r2, #31
 8000ba8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000bac:	0512      	lsls	r2, r2, #20
 8000bae:	e7c2      	b.n	8000b36 <HAL_ADC_ConfigChannel+0x2b2>
 8000bb0:	b9ce      	cbnz	r6, 8000be6 <HAL_ADC_ConfigChannel+0x362>
 8000bb2:	0e94      	lsrs	r4, r2, #26
 8000bb4:	3401      	adds	r4, #1
 8000bb6:	06a4      	lsls	r4, r4, #26
 8000bb8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000bbc:	b9e6      	cbnz	r6, 8000bf8 <HAL_ADC_ConfigChannel+0x374>
 8000bbe:	0e90      	lsrs	r0, r2, #26
 8000bc0:	3001      	adds	r0, #1
 8000bc2:	f000 071f 	and.w	r7, r0, #31
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	40b8      	lsls	r0, r7
 8000bca:	4304      	orrs	r4, r0
 8000bcc:	b9f6      	cbnz	r6, 8000c0c <HAL_ADC_ConfigChannel+0x388>
 8000bce:	0e90      	lsrs	r0, r2, #26
 8000bd0:	3001      	adds	r0, #1
 8000bd2:	f000 001f 	and.w	r0, r0, #31
 8000bd6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000bda:	3a1e      	subs	r2, #30
 8000bdc:	0512      	lsls	r2, r2, #20
 8000bde:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000be2:	4322      	orrs	r2, r4
 8000be4:	e7a8      	b.n	8000b38 <HAL_ADC_ConfigChannel+0x2b4>
 8000be6:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000bea:	fab4 f484 	clz	r4, r4
 8000bee:	3401      	adds	r4, #1
 8000bf0:	06a4      	lsls	r4, r4, #26
 8000bf2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000bf6:	e7e1      	b.n	8000bbc <HAL_ADC_ConfigChannel+0x338>
 8000bf8:	fa92 f0a2 	rbit	r0, r2
 8000bfc:	fab0 f080 	clz	r0, r0
 8000c00:	3001      	adds	r0, #1
 8000c02:	f000 071f 	and.w	r7, r0, #31
 8000c06:	2001      	movs	r0, #1
 8000c08:	40b8      	lsls	r0, r7
 8000c0a:	e7de      	b.n	8000bca <HAL_ADC_ConfigChannel+0x346>
 8000c0c:	fa92 f0a2 	rbit	r0, r2
 8000c10:	fab0 f080 	clz	r0, r0
 8000c14:	3001      	adds	r0, #1
 8000c16:	f000 001f 	and.w	r0, r0, #31
 8000c1a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000c1e:	3a1e      	subs	r2, #30
 8000c20:	0512      	lsls	r2, r2, #20
 8000c22:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c26:	e7dc      	b.n	8000be2 <HAL_ADC_ConfigChannel+0x35e>
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000c28:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8000c2c:	f47f aed2 	bne.w	80009d4 <HAL_ADC_ConfigChannel+0x150>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	490c      	ldr	r1, [pc, #48]	; (8000c64 <HAL_ADC_ConfigChannel+0x3e0>)
 8000c34:	428a      	cmp	r2, r1
 8000c36:	d017      	beq.n	8000c68 <HAL_ADC_ConfigChannel+0x3e4>
 8000c38:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	d013      	beq.n	8000c68 <HAL_ADC_ConfigChannel+0x3e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c40:	2000      	movs	r0, #0
 8000c42:	e636      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
 8000c44:	03fff000 	.word	0x03fff000
 8000c48:	0007ffff 	.word	0x0007ffff
 8000c4c:	407f0000 	.word	0x407f0000
 8000c50:	80080000 	.word	0x80080000
 8000c54:	50040300 	.word	0x50040300
 8000c58:	c7520000 	.word	0xc7520000
 8000c5c:	cb840000 	.word	0xcb840000
 8000c60:	80000001 	.word	0x80000001
 8000c64:	50040000 	.word	0x50040000
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000c68:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c6c:	4925      	ldr	r1, [pc, #148]	; (8000d04 <HAL_ADC_ConfigChannel+0x480>)
 8000c6e:	688a      	ldr	r2, [r1, #8]
 8000c70:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000c74:	4314      	orrs	r4, r2
 8000c76:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c78:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <HAL_ADC_ConfigChannel+0x484>)
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	0992      	lsrs	r2, r2, #6
 8000c7e:	4923      	ldr	r1, [pc, #140]	; (8000d0c <HAL_ADC_ConfigChannel+0x488>)
 8000c80:	fba1 1202 	umull	r1, r2, r1, r2
 8000c84:	0992      	lsrs	r2, r2, #6
 8000c86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000c8a:	0091      	lsls	r1, r2, #2
 8000c8c:	9101      	str	r1, [sp, #4]
          while (wait_loop_index != 0UL)
 8000c8e:	e002      	b.n	8000c96 <HAL_ADC_ConfigChannel+0x412>
            wait_loop_index--;
 8000c90:	9a01      	ldr	r2, [sp, #4]
 8000c92:	3a01      	subs	r2, #1
 8000c94:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8000c96:	9a01      	ldr	r2, [sp, #4]
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d1f9      	bne.n	8000c90 <HAL_ADC_ConfigChannel+0x40c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e608      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000ca0:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000ca4:	f47f ae9a 	bne.w	80009dc <HAL_ADC_ConfigChannel+0x158>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4919      	ldr	r1, [pc, #100]	; (8000d10 <HAL_ADC_ConfigChannel+0x48c>)
 8000cac:	428a      	cmp	r2, r1
 8000cae:	d005      	beq.n	8000cbc <HAL_ADC_ConfigChannel+0x438>
 8000cb0:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	d001      	beq.n	8000cbc <HAL_ADC_ConfigChannel+0x438>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e5fa      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000cbc:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 8000cc0:	4810      	ldr	r0, [pc, #64]	; (8000d04 <HAL_ADC_ConfigChannel+0x480>)
 8000cc2:	6881      	ldr	r1, [r0, #8]
 8000cc4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e5f0      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000cd0:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8000cd4:	d111      	bne.n	8000cfa <HAL_ADC_ConfigChannel+0x476>
        if (ADC_VREFINT_INSTANCE(hadc))
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_ADC_ConfigChannel+0x48c>)
 8000cda:	4291      	cmp	r1, r2
 8000cdc:	d001      	beq.n	8000ce2 <HAL_ADC_ConfigChannel+0x45e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e5e7      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000ce2:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
 8000ce6:	4807      	ldr	r0, [pc, #28]	; (8000d04 <HAL_ADC_ConfigChannel+0x480>)
 8000ce8:	6881      	ldr	r1, [r0, #8]
 8000cea:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	e5dd      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	e5db      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	e5d9      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8000cfe:	2002      	movs	r0, #2
 8000d00:	e5da      	b.n	80008b8 <HAL_ADC_ConfigChannel+0x34>
 8000d02:	bf00      	nop
 8000d04:	50040300 	.word	0x50040300
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	053e2d63 	.word	0x053e2d63
 8000d10:	50040000 	.word	0x50040000

08000d14 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d14:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8000d18:	2a01      	cmp	r2, #1
 8000d1a:	f000 8095 	beq.w	8000e48 <HAL_ADCEx_MultiModeConfigChannel+0x134>
{
 8000d1e:	b430      	push	{r4, r5}
 8000d20:	b09a      	sub	sp, #104	; 0x68
 8000d22:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000d2a:	6802      	ldr	r2, [r0, #0]
 8000d2c:	4847      	ldr	r0, [pc, #284]	; (8000e4c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	d03f      	beq.n	8000db2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8000d32:	2000      	movs	r0, #0
 8000d34:	9000      	str	r0, [sp, #0]

  if (tmphadcSlave.Instance == NULL)
 8000d36:	9800      	ldr	r0, [sp, #0]
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	d03e      	beq.n	8000dba <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d3c:	6880      	ldr	r0, [r0, #8]
 8000d3e:	f010 0f04 	tst.w	r0, #4
 8000d42:	d043      	beq.n	8000dcc <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8000d44:	2001      	movs	r0, #1
 8000d46:	6892      	ldr	r2, [r2, #8]
 8000d48:	f012 0f04 	tst.w	r2, #4
 8000d4c:	d16d      	bne.n	8000e2a <HAL_ADCEx_MultiModeConfigChannel+0x116>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d16b      	bne.n	8000e2a <HAL_ADCEx_MultiModeConfigChannel+0x116>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000d52:	680a      	ldr	r2, [r1, #0]
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d041      	beq.n	8000ddc <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8000d58:	4c3d      	ldr	r4, [pc, #244]	; (8000e50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8000d5a:	68a2      	ldr	r2, [r4, #8]
 8000d5c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d60:	6848      	ldr	r0, [r1, #4]
 8000d62:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8000d66:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8000d6a:	4302      	orrs	r2, r0
 8000d6c:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d6e:	4a37      	ldr	r2, [pc, #220]	; (8000e4c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8000d70:	6892      	ldr	r2, [r2, #8]
 8000d72:	f012 0f01 	tst.w	r2, #1
 8000d76:	d02b      	beq.n	8000dd0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4a36      	ldr	r2, [pc, #216]	; (8000e54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8000d7c:	6892      	ldr	r2, [r2, #8]
 8000d7e:	f012 0f01 	tst.w	r2, #1
 8000d82:	d027      	beq.n	8000dd4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 8000d84:	2201      	movs	r2, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d86:	4302      	orrs	r2, r0
 8000d88:	4833      	ldr	r0, [pc, #204]	; (8000e58 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8000d8a:	6880      	ldr	r0, [r0, #8]
 8000d8c:	f010 0f01 	tst.w	r0, #1
 8000d90:	d022      	beq.n	8000dd8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8000d92:	2001      	movs	r0, #1
 8000d94:	4302      	orrs	r2, r0
 8000d96:	d153      	bne.n	8000e40 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8000d98:	4c2d      	ldr	r4, [pc, #180]	; (8000e50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8000d9a:	68a2      	ldr	r2, [r4, #8]
 8000d9c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000da0:	f022 020f 	bic.w	r2, r2, #15
 8000da4:	6808      	ldr	r0, [r1, #0]
 8000da6:	6889      	ldr	r1, [r1, #8]
 8000da8:	4301      	orrs	r1, r0
 8000daa:	430a      	orrs	r2, r1
 8000dac:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dae:	2000      	movs	r0, #0
 8000db0:	e040      	b.n	8000e34 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000db2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000db6:	9000      	str	r0, [sp, #0]
 8000db8:	e7bd      	b.n	8000d36 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dbc:	f042 0220 	orr.w	r2, r2, #32
 8000dc0:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
 8000dca:	e036      	b.n	8000e3a <HAL_ADCEx_MultiModeConfigChannel+0x126>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e7ba      	b.n	8000d46 <HAL_ADCEx_MultiModeConfigChannel+0x32>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e7d2      	b.n	8000d7a <HAL_ADCEx_MultiModeConfigChannel+0x66>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e7d6      	b.n	8000d86 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	e7db      	b.n	8000d94 <HAL_ADCEx_MultiModeConfigChannel+0x80>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000ddc:	481c      	ldr	r0, [pc, #112]	; (8000e50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8000dde:	6881      	ldr	r1, [r0, #8]
 8000de0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8000de4:	6081      	str	r1, [r0, #8]
 8000de6:	4919      	ldr	r1, [pc, #100]	; (8000e4c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8000de8:	6889      	ldr	r1, [r1, #8]
 8000dea:	f011 0f01 	tst.w	r1, #1
 8000dee:	d018      	beq.n	8000e22 <HAL_ADCEx_MultiModeConfigChannel+0x10e>
 8000df0:	2001      	movs	r0, #1
 8000df2:	4918      	ldr	r1, [pc, #96]	; (8000e54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8000df4:	6889      	ldr	r1, [r1, #8]
 8000df6:	f011 0f01 	tst.w	r1, #1
 8000dfa:	d014      	beq.n	8000e26 <HAL_ADCEx_MultiModeConfigChannel+0x112>
 8000dfc:	2101      	movs	r1, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000dfe:	4301      	orrs	r1, r0
 8000e00:	4815      	ldr	r0, [pc, #84]	; (8000e58 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8000e02:	6880      	ldr	r0, [r0, #8]
 8000e04:	f010 0f01 	tst.w	r0, #1
 8000e08:	d000      	beq.n	8000e0c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	d119      	bne.n	8000e44 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000e10:	490f      	ldr	r1, [pc, #60]	; (8000e50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8000e12:	688a      	ldr	r2, [r1, #8]
 8000e14:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000e18:	f022 020f 	bic.w	r2, r2, #15
 8000e1c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e1e:	2000      	movs	r0, #0
 8000e20:	e008      	b.n	8000e34 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8000e22:	4610      	mov	r0, r2
 8000e24:	e7e5      	b.n	8000df2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8000e26:	4611      	mov	r1, r2
 8000e28:	e7e9      	b.n	8000dfe <HAL_ADCEx_MultiModeConfigChannel+0xea>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e2c:	f042 0220 	orr.w	r2, r2, #32
 8000e30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8000e3a:	b01a      	add	sp, #104	; 0x68
 8000e3c:	bc30      	pop	{r4, r5}
 8000e3e:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e40:	2000      	movs	r0, #0
 8000e42:	e7f7      	b.n	8000e34 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8000e44:	2000      	movs	r0, #0
 8000e46:	e7f5      	b.n	8000e34 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  __HAL_LOCK(hadc);
 8000e48:	2002      	movs	r0, #2
}
 8000e4a:	4770      	bx	lr
 8000e4c:	50040000 	.word	0x50040000
 8000e50:	50040300 	.word	0x50040300
 8000e54:	50040100 	.word	0x50040100
 8000e58:	50040200 	.word	0x50040200

08000e5c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e5e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e68:	0200      	lsls	r0, r0, #8
 8000e6a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000e70:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000e74:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000e78:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_NVIC_SetPriority+0x60>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8a:	f1c3 0407 	rsb	r4, r3, #7
 8000e8e:	2c04      	cmp	r4, #4
 8000e90:	bf28      	it	cs
 8000e92:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e94:	1d1d      	adds	r5, r3, #4
 8000e96:	2d06      	cmp	r5, #6
 8000e98:	d918      	bls.n	8000ecc <HAL_NVIC_SetPriority+0x4c>
 8000e9a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000ea0:	fa05 f404 	lsl.w	r4, r5, r4
 8000ea4:	ea21 0104 	bic.w	r1, r1, r4
 8000ea8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eaa:	fa05 f303 	lsl.w	r3, r5, r3
 8000eae:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	db0b      	blt.n	8000ed0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	0109      	lsls	r1, r1, #4
 8000eba:	b2c9      	uxtb	r1, r1
 8000ebc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ec0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ec4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ec8:	bc30      	pop	{r4, r5}
 8000eca:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e7e5      	b.n	8000e9c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	f000 000f 	and.w	r0, r0, #15
 8000ed4:	0109      	lsls	r1, r1, #4
 8000ed6:	b2c9      	uxtb	r1, r1
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_NVIC_SetPriority+0x64>)
 8000eda:	5419      	strb	r1, [r3, r0]
 8000edc:	e7f4      	b.n	8000ec8 <HAL_NVIC_SetPriority+0x48>
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	e000ed14 	.word	0xe000ed14

08000ee8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ee8:	f000 021f 	and.w	r2, r0, #31
 8000eec:	0940      	lsrs	r0, r0, #5
 8000eee:	2301      	movs	r3, #1
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	4a02      	ldr	r2, [pc, #8]	; (8000efc <HAL_NVIC_EnableIRQ+0x14>)
 8000ef4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	3801      	subs	r0, #1
 8000f02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f06:	d20a      	bcs.n	8000f1e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_SYSTICK_Config+0x24>)
 8000f0a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_SYSTICK_Config+0x28>)
 8000f0e:	21f0      	movs	r1, #240	; 0xf0
 8000f10:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f14:	2000      	movs	r0, #0
 8000f16:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d04f      	beq.n	8000fd0 <HAL_DCMI_Init+0xa4>
{
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000f34:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d037      	beq.n	8000fac <HAL_DCMI_Init+0x80>
    HAL_DCMI_MspInit(hdcmi);
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8000f42:	6822      	ldr	r2, [r4, #0]
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f4a:	6013      	str	r3, [r2, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8000f4c:	69a3      	ldr	r3, [r4, #24]
 8000f4e:	b10b      	cbz	r3, 8000f54 <HAL_DCMI_Init+0x28>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000f54:	6822      	ldr	r2, [r4, #0]
 8000f56:	6811      	ldr	r1, [r2, #0]
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <HAL_DCMI_Init+0xa8>)
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	6811      	ldr	r1, [r2, #0]
 8000f62:	6863      	ldr	r3, [r4, #4]
 8000f64:	6960      	ldr	r0, [r4, #20]
 8000f66:	4303      	orrs	r3, r0
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000f68:	68e0      	ldr	r0, [r4, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000f6a:	4303      	orrs	r3, r0
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000f6c:	6920      	ldr	r0, [r4, #16]
 8000f6e:	4303      	orrs	r3, r0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000f70:	68a0      	ldr	r0, [r4, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000f72:	4303      	orrs	r3, r0
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000f74:	69a0      	ldr	r0, [r4, #24]
 8000f76:	4303      	orrs	r3, r0
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000f78:	6a20      	ldr	r0, [r4, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000f7a:	4303      	orrs	r3, r0
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000f7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000f7e:	4303      	orrs	r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000f80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000f82:	4303      	orrs	r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000f84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000f86:	4303      	orrs	r3, r0
                                     hdcmi->Init.LineSelectStart);
 8000f88:	6b20      	ldr	r0, [r4, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000f8a:	4303      	orrs	r3, r0
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	6013      	str	r3, [r2, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	2b10      	cmp	r3, #16
 8000f94:	d00f      	beq.n	8000fb6 <HAL_DCMI_Init+0x8a>
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8000f96:	6822      	ldr	r2, [r4, #0]
 8000f98:	68d3      	ldr	r3, [r2, #12]
 8000f9a:	f043 031f 	orr.w	r3, r3, #31
 8000f9e:	60d3      	str	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
}
 8000faa:	bd10      	pop	{r4, pc}
    hdcmi->Lock = HAL_UNLOCKED;
 8000fac:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    HAL_DCMI_MspInit(hdcmi);
 8000fb0:	f005 faec 	bl	800658c <HAL_DCMI_MspInit>
 8000fb4:	e7c2      	b.n	8000f3c <HAL_DCMI_Init+0x10>
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8000fb6:	7f23      	ldrb	r3, [r4, #28]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000fb8:	7f62      	ldrb	r2, [r4, #29]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8000fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000fbe:	7fa2      	ldrb	r2, [r4, #30]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000fc4:	7fe1      	ldrb	r1, [r4, #31]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8000fc6:	6822      	ldr	r2, [r4, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000fc8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	e7e2      	b.n	8000f96 <HAL_DCMI_Init+0x6a>
     return HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
}
 8000fd2:	4770      	bx	lr
 8000fd4:	ffe0f007 	.word	0xffe0f007

08000fd8 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <DFSDM_GetChannelFromInstance+0x54>)
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d018      	beq.n	8001010 <DFSDM_GetChannelFromInstance+0x38>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 8000fde:	3320      	adds	r3, #32
 8000fe0:	4298      	cmp	r0, r3
 8000fe2:	d017      	beq.n	8001014 <DFSDM_GetChannelFromInstance+0x3c>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 8000fe4:	3320      	adds	r3, #32
 8000fe6:	4298      	cmp	r0, r3
 8000fe8:	d016      	beq.n	8001018 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 8000fea:	3320      	adds	r3, #32
 8000fec:	4298      	cmp	r0, r3
 8000fee:	d015      	beq.n	800101c <DFSDM_GetChannelFromInstance+0x44>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8000ff0:	3320      	adds	r3, #32
 8000ff2:	4298      	cmp	r0, r3
 8000ff4:	d014      	beq.n	8001020 <DFSDM_GetChannelFromInstance+0x48>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 8000ff6:	3320      	adds	r3, #32
 8000ff8:	4298      	cmp	r0, r3
 8000ffa:	d013      	beq.n	8001024 <DFSDM_GetChannelFromInstance+0x4c>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 8000ffc:	3320      	adds	r3, #32
 8000ffe:	4298      	cmp	r0, r3
 8001000:	d012      	beq.n	8001028 <DFSDM_GetChannelFromInstance+0x50>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
 8001002:	3320      	adds	r3, #32
 8001004:	4298      	cmp	r0, r3
 8001006:	d001      	beq.n	800100c <DFSDM_GetChannelFromInstance+0x34>
    channel = 7;
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8001008:	2000      	movs	r0, #0
  }

  return channel;
}
 800100a:	4770      	bx	lr
    channel = 7;
 800100c:	2007      	movs	r0, #7
 800100e:	4770      	bx	lr
    channel = 0;
 8001010:	2000      	movs	r0, #0
 8001012:	4770      	bx	lr
    channel = 1;
 8001014:	2001      	movs	r0, #1
 8001016:	4770      	bx	lr
    channel = 2;
 8001018:	2002      	movs	r0, #2
 800101a:	4770      	bx	lr
    channel = 3;
 800101c:	2003      	movs	r0, #3
 800101e:	4770      	bx	lr
    channel = 4;
 8001020:	2004      	movs	r0, #4
 8001022:	4770      	bx	lr
    channel = 5;
 8001024:	2005      	movs	r0, #5
 8001026:	4770      	bx	lr
    channel = 6;
 8001028:	2006      	movs	r0, #6
 800102a:	4770      	bx	lr
 800102c:	40016000 	.word	0x40016000

08001030 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001030:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001032:	b963      	cbnz	r3, 800104e <DFSDM_RegConvStart+0x1e>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001034:	6802      	ldr	r2, [r0, #0]
 8001036:	6813      	ldr	r3, [r2, #0]
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6013      	str	r3, [r2, #0]
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800103e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001042:	2b01      	cmp	r3, #1
 8001044:	d026      	beq.n	8001094 <DFSDM_RegConvStart+0x64>
 8001046:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001048:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 800104c:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800104e:	6802      	ldr	r2, [r0, #0]
 8001050:	6813      	ldr	r3, [r2, #0]
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001058:	6802      	ldr	r2, [r0, #0]
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001060:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001062:	6802      	ldr	r2, [r0, #0]
 8001064:	6813      	ldr	r3, [r2, #0]
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6013      	str	r3, [r2, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800106c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001070:	2b03      	cmp	r3, #3
 8001072:	d1e4      	bne.n	800103e <DFSDM_RegConvStart+0xe>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001074:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001076:	b923      	cbnz	r3, 8001082 <DFSDM_RegConvStart+0x52>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001078:	6802      	ldr	r2, [r0, #0]
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6013      	str	r3, [r2, #0]
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001082:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001086:	2b01      	cmp	r3, #1
 8001088:	d002      	beq.n	8001090 <DFSDM_RegConvStart+0x60>
 800108a:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800108c:	6483      	str	r3, [r0, #72]	; 0x48
 800108e:	e7d6      	b.n	800103e <DFSDM_RegConvStart+0xe>
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001090:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001092:	e7fb      	b.n	800108c <DFSDM_RegConvStart+0x5c>
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001094:	2302      	movs	r3, #2
 8001096:	e7d7      	b.n	8001048 <DFSDM_RegConvStart+0x18>

08001098 <DFSDM_RegConvStop>:
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001098:	6802      	ldr	r2, [r0, #0]
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	6013      	str	r3, [r2, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80010a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d010      	beq.n	80010ca <DFSDM_RegConvStop+0x32>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80010a8:	6802      	ldr	r2, [r0, #0]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6013      	str	r3, [r2, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80010b2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d00d      	beq.n	80010d6 <DFSDM_RegConvStop+0x3e>
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80010ba:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d019      	beq.n	80010f6 <DFSDM_RegConvStop+0x5e>
 80010c2:	2303      	movs	r3, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80010c4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 80010c8:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80010ca:	6802      	ldr	r2, [r0, #0]
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e7e8      	b.n	80010a8 <DFSDM_RegConvStop+0x10>
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80010d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80010d8:	b923      	cbnz	r3, 80010e4 <DFSDM_RegConvStop+0x4c>
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80010da:	6802      	ldr	r2, [r0, #0]
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80010e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d002      	beq.n	80010f2 <DFSDM_RegConvStop+0x5a>
 80010ec:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80010ee:	6483      	str	r3, [r0, #72]	; 0x48
 80010f0:	e7e3      	b.n	80010ba <DFSDM_RegConvStop+0x22>
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80010f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010f4:	e7fb      	b.n	80010ee <DFSDM_RegConvStop+0x56>
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e7e4      	b.n	80010c4 <DFSDM_RegConvStop+0x2c>
	...

080010fc <HAL_DFSDM_ChannelInit>:
  if (hdfsdm_channel == NULL)
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d078      	beq.n	80011f2 <HAL_DFSDM_ChannelInit+0xf6>
{
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001104:	6800      	ldr	r0, [r0, #0]
 8001106:	f7ff ff67 	bl	8000fd8 <DFSDM_GetChannelFromInstance>
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_DFSDM_ChannelInit+0xfc>)
 800110c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001110:	b10b      	cbz	r3, 8001116 <HAL_DFSDM_ChannelInit+0x1a>
    return HAL_ERROR;
 8001112:	2001      	movs	r0, #1
}
 8001114:	bd10      	pop	{r4, pc}
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001116:	4620      	mov	r0, r4
 8001118:	f005 fb16 	bl	8006748 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HAL_DFSDM_ChannelInit+0x100>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	3201      	adds	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d045      	beq.n	80011b6 <HAL_DFSDM_ChannelInit+0xba>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800112a:	6822      	ldr	r2, [r4, #0]
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8001132:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001134:	6821      	ldr	r1, [r4, #0]
 8001136:	680a      	ldr	r2, [r1, #0]
 8001138:	6923      	ldr	r3, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800113a:	6960      	ldr	r0, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800113c:	4303      	orrs	r3, r0
                                        hdfsdm_channel->Init.Input.Pins);
 800113e:	69a0      	ldr	r0, [r4, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001140:	4303      	orrs	r3, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f023 030f 	bic.w	r3, r3, #15
 800114e:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001150:	6821      	ldr	r1, [r4, #0]
 8001152:	680b      	ldr	r3, [r1, #0]
 8001154:	69e2      	ldr	r2, [r4, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001156:	6a20      	ldr	r0, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001158:	4302      	orrs	r2, r0
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800115e:	6822      	ldr	r2, [r4, #0]
 8001160:	6893      	ldr	r3, [r2, #8]
 8001162:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001166:	6093      	str	r3, [r2, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	6883      	ldr	r3, [r0, #8]
 800116c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800116e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001170:	3901      	subs	r1, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001172:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001176:	4313      	orrs	r3, r2
 8001178:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	6853      	ldr	r3, [r2, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	6053      	str	r3, [r2, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001184:	6821      	ldr	r1, [r4, #0]
 8001186:	684a      	ldr	r2, [r1, #4]
 8001188:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800118a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800118c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800118e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001196:	6822      	ldr	r2, [r4, #0]
 8001198:	6813      	ldr	r3, [r2, #0]
 800119a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119e:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80011a6:	6820      	ldr	r0, [r4, #0]
 80011a8:	f7ff ff16 	bl	8000fd8 <DFSDM_GetChannelFromInstance>
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_DFSDM_ChannelInit+0xfc>)
 80011ae:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  return HAL_OK;
 80011b2:	2000      	movs	r0, #0
 80011b4:	e7ae      	b.n	8001114 <HAL_DFSDM_ChannelInit+0x18>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_DFSDM_ChannelInit+0x104>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80011be:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68a1      	ldr	r1, [r4, #8]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80011ce:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80011d0:	7923      	ldrb	r3, [r4, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_DFSDM_ChannelInit+0xe6>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_DFSDM_ChannelInit+0x104>)
 80011d8:	6813      	ldr	r3, [r2, #0]
 80011da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e7a3      	b.n	800112a <HAL_DFSDM_ChannelInit+0x2e>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80011e2:	4907      	ldr	r1, [pc, #28]	; (8001200 <HAL_DFSDM_ChannelInit+0x104>)
 80011e4:	680b      	ldr	r3, [r1, #0]
 80011e6:	68e2      	ldr	r2, [r4, #12]
 80011e8:	3a01      	subs	r2, #1
 80011ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011ee:	600b      	str	r3, [r1, #0]
 80011f0:	e7f1      	b.n	80011d6 <HAL_DFSDM_ChannelInit+0xda>
    return HAL_ERROR;
 80011f2:	2001      	movs	r0, #1
}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000028 	.word	0x20000028
 80011fc:	20000048 	.word	0x20000048
 8001200:	40016000 	.word	0x40016000

08001204 <HAL_DFSDM_FilterInit>:
  if (hdfsdm_filter == NULL)
 8001204:	2800      	cmp	r0, #0
 8001206:	f000 808a 	beq.w	800131e <HAL_DFSDM_FilterInit+0x11a>
{
 800120a:	b510      	push	{r4, lr}
 800120c:	4604      	mov	r4, r0
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800120e:	6802      	ldr	r2, [r0, #0]
 8001210:	4b45      	ldr	r3, [pc, #276]	; (8001328 <HAL_DFSDM_FilterInit+0x124>)
 8001212:	429a      	cmp	r2, r3
 8001214:	d05d      	beq.n	80012d2 <HAL_DFSDM_FilterInit+0xce>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001216:	2300      	movs	r3, #0
 8001218:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800121a:	2201      	movs	r2, #1
 800121c:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800121e:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001220:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001222:	4620      	mov	r0, r4
 8001224:	f005 fa12 	bl	800664c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001228:	6822      	ldr	r2, [r4, #0]
 800122a:	6813      	ldr	r3, [r2, #0]
 800122c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001230:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001232:	7a23      	ldrb	r3, [r4, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d054      	beq.n	80012e2 <HAL_DFSDM_FilterInit+0xde>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001238:	6822      	ldr	r2, [r4, #0]
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001240:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001242:	7a63      	ldrb	r3, [r4, #9]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d052      	beq.n	80012ee <HAL_DFSDM_FilterInit+0xea>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	6813      	ldr	r3, [r2, #0]
 800124c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001250:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	6813      	ldr	r3, [r2, #0]
 8001256:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 800125a:	f023 0308 	bic.w	r3, r3, #8
 800125e:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001260:	68e3      	ldr	r3, [r4, #12]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d049      	beq.n	80012fa <HAL_DFSDM_FilterInit+0xf6>
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001266:	7c23      	ldrb	r3, [r4, #16]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d04c      	beq.n	8001306 <HAL_DFSDM_FilterInit+0x102>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	6813      	ldr	r3, [r2, #0]
 8001270:	f023 0310 	bic.w	r3, r3, #16
 8001274:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001276:	7c63      	ldrb	r3, [r4, #17]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d04a      	beq.n	8001312 <HAL_DFSDM_FilterInit+0x10e>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800127c:	6822      	ldr	r2, [r4, #0]
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	f023 0320 	bic.w	r3, r3, #32
 8001284:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001286:	6822      	ldr	r2, [r4, #0]
 8001288:	6953      	ldr	r3, [r2, #20]
 800128a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800128e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001292:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001294:	6820      	ldr	r0, [r4, #0]
 8001296:	6942      	ldr	r2, [r0, #20]
 8001298:	69e3      	ldr	r3, [r4, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800129a:	6a21      	ldr	r1, [r4, #32]
 800129c:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80012a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012a4:	3901      	subs	r1, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80012a6:	430b      	orrs	r3, r1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80012a8:	4313      	orrs	r3, r2
 80012aa:	6143      	str	r3, [r0, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	6363      	str	r3, [r4, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80012b0:	68e3      	ldr	r3, [r4, #12]
 80012b2:	63a3      	str	r3, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80012b4:	69a3      	ldr	r3, [r4, #24]
 80012b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80012b8:	7c23      	ldrb	r3, [r4, #16]
 80012ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 80012ce:	2000      	movs	r0, #0
}
 80012d0:	bd10      	pop	{r4, pc}
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80012d2:	6843      	ldr	r3, [r0, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d024      	beq.n	8001322 <HAL_DFSDM_FilterInit+0x11e>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80012d8:	68c3      	ldr	r3, [r0, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d19b      	bne.n	8001216 <HAL_DFSDM_FilterInit+0x12>
    return HAL_ERROR;
 80012de:	2001      	movs	r0, #1
 80012e0:	e7f6      	b.n	80012d0 <HAL_DFSDM_FilterInit+0xcc>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80012e2:	6822      	ldr	r2, [r4, #0]
 80012e4:	6813      	ldr	r3, [r2, #0]
 80012e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e7a9      	b.n	8001242 <HAL_DFSDM_FilterInit+0x3e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e7ab      	b.n	8001252 <HAL_DFSDM_FilterInit+0x4e>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80012fa:	6822      	ldr	r2, [r4, #0]
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	6961      	ldr	r1, [r4, #20]
 8001300:	430b      	orrs	r3, r1
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e7af      	b.n	8001266 <HAL_DFSDM_FilterInit+0x62>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001306:	6822      	ldr	r2, [r4, #0]
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e7b1      	b.n	8001276 <HAL_DFSDM_FilterInit+0x72>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001312:	6822      	ldr	r2, [r4, #0]
 8001314:	6813      	ldr	r3, [r2, #0]
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e7b3      	b.n	8001286 <HAL_DFSDM_FilterInit+0x82>
    return HAL_ERROR;
 800131e:	2001      	movs	r0, #1
}
 8001320:	4770      	bx	lr
    return HAL_ERROR;
 8001322:	2001      	movs	r0, #1
 8001324:	e7d4      	b.n	80012d0 <HAL_DFSDM_FilterInit+0xcc>
 8001326:	bf00      	nop
 8001328:	40016100 	.word	0x40016100

0800132c <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800132c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001330:	3b01      	subs	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2bfd      	cmp	r3, #253	; 0xfd
 8001336:	d81f      	bhi.n	8001378 <HAL_DFSDM_FilterConfigRegChannel+0x4c>
{
 8001338:	b410      	push	{r4}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800133a:	6804      	ldr	r4, [r0, #0]
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6023      	str	r3, [r4, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001348:	2a01      	cmp	r2, #1
 800134a:	d00b      	beq.n	8001364 <HAL_DFSDM_FilterConfigRegChannel+0x38>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800134c:	6804      	ldr	r4, [r0, #0]
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	0209      	lsls	r1, r1, #8
 8001352:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001356:	4319      	orrs	r1, r3
 8001358:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800135a:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 800135c:	2000      	movs	r0, #0
}
 800135e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001362:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001364:	6804      	ldr	r4, [r0, #0]
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	0209      	lsls	r1, r1, #8
 800136a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800136e:	4319      	orrs	r1, r3
 8001370:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8001374:	6021      	str	r1, [r4, #0]
 8001376:	e7f0      	b.n	800135a <HAL_DFSDM_FilterConfigRegChannel+0x2e>
    status = HAL_ERROR;
 8001378:	2001      	movs	r0, #1
}
 800137a:	4770      	bx	lr

0800137c <HAL_DFSDM_FilterRegularStart_DMA>:
{
 800137c:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Length == 0U))
 800137e:	2900      	cmp	r1, #0
 8001380:	d042      	beq.n	8001408 <HAL_DFSDM_FilterRegularStart_DMA+0x8c>
 8001382:	460d      	mov	r5, r1
 8001384:	2a00      	cmp	r2, #0
 8001386:	d041      	beq.n	800140c <HAL_DFSDM_FilterRegularStart_DMA+0x90>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001388:	6801      	ldr	r1, [r0, #0]
 800138a:	6809      	ldr	r1, [r1, #0]
 800138c:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8001390:	d03f      	beq.n	8001412 <HAL_DFSDM_FilterRegularStart_DMA+0x96>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001392:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001394:	b941      	cbnz	r1, 80013a8 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001396:	6b04      	ldr	r4, [r0, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001398:	b934      	cbnz	r4, 80013a8 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800139a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800139c:	69e4      	ldr	r4, [r4, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800139e:	b91c      	cbnz	r4, 80013a8 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80013a0:	2a01      	cmp	r2, #1
 80013a2:	d001      	beq.n	80013a8 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
    status = HAL_ERROR;
 80013a4:	2501      	movs	r5, #1
 80013a6:	e032      	b.n	800140e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80013a8:	b929      	cbnz	r1, 80013b6 <HAL_DFSDM_FilterRegularStart_DMA+0x3a>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80013aa:	6b01      	ldr	r1, [r0, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80013ac:	b919      	cbnz	r1, 80013b6 <HAL_DFSDM_FilterRegularStart_DMA+0x3a>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80013ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80013b0:	69c9      	ldr	r1, [r1, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80013b2:	2920      	cmp	r1, #32
 80013b4:	d02f      	beq.n	8001416 <HAL_DFSDM_FilterRegularStart_DMA+0x9a>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80013b6:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 80013ba:	2901      	cmp	r1, #1
 80013bc:	d003      	beq.n	80013c6 <HAL_DFSDM_FilterRegularStart_DMA+0x4a>
 80013be:	2903      	cmp	r1, #3
 80013c0:	d001      	beq.n	80013c6 <HAL_DFSDM_FilterRegularStart_DMA+0x4a>
    status = HAL_ERROR;
 80013c2:	2501      	movs	r5, #1
 80013c4:	e023      	b.n	800140e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80013c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80013c8:	4c14      	ldr	r4, [pc, #80]	; (800141c <HAL_DFSDM_FilterRegularStart_DMA+0xa0>)
 80013ca:	62cc      	str	r4, [r1, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80013cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80013ce:	4c14      	ldr	r4, [pc, #80]	; (8001420 <HAL_DFSDM_FilterRegularStart_DMA+0xa4>)
 80013d0:	634c      	str	r4, [r1, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80013d2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80013d4:	69cc      	ldr	r4, [r1, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80013d6:	2c20      	cmp	r4, #32
 80013d8:	d010      	beq.n	80013fc <HAL_DFSDM_FilterRegularStart_DMA+0x80>
 80013da:	2600      	movs	r6, #0
 80013dc:	4613      	mov	r3, r2
 80013de:	4604      	mov	r4, r0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80013e0:	630e      	str	r6, [r1, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, ((uint32_t)&hdfsdm_filter->Instance->FLTRDATAR) + 2, \
 80013e2:	6801      	ldr	r1, [r0, #0]
 80013e4:	462a      	mov	r2, r5
 80013e6:	311e      	adds	r1, #30
 80013e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80013ea:	f000 f8dd 	bl	80015a8 <HAL_DMA_Start_IT>
 80013ee:	4605      	mov	r5, r0
 80013f0:	b130      	cbz	r0, 8001400 <HAL_DFSDM_FilterRegularStart_DMA+0x84>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80013f2:	23ff      	movs	r3, #255	; 0xff
 80013f4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
      status = HAL_ERROR;
 80013f8:	2501      	movs	r5, #1
 80013fa:	e008      	b.n	800140e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80013fc:	4e09      	ldr	r6, [pc, #36]	; (8001424 <HAL_DFSDM_FilterRegularStart_DMA+0xa8>)
 80013fe:	e7ed      	b.n	80013dc <HAL_DFSDM_FilterRegularStart_DMA+0x60>
      DFSDM_RegConvStart(hdfsdm_filter);
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fe15 	bl	8001030 <DFSDM_RegConvStart>
 8001406:	e002      	b.n	800140e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
    status = HAL_ERROR;
 8001408:	2501      	movs	r5, #1
 800140a:	e000      	b.n	800140e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
 800140c:	2501      	movs	r5, #1
}
 800140e:	4628      	mov	r0, r5
 8001410:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8001412:	2501      	movs	r5, #1
 8001414:	e7fb      	b.n	800140e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
    status = HAL_ERROR;
 8001416:	2501      	movs	r5, #1
 8001418:	e7f9      	b.n	800140e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
 800141a:	bf00      	nop
 800141c:	0800145b 	.word	0x0800145b
 8001420:	08001471 	.word	0x08001471
 8001424:	08001465 	.word	0x08001465

08001428 <HAL_DFSDM_FilterRegularStop_DMA>:
{
 8001428:	b538      	push	{r3, r4, r5, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800142a:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800142e:	2b02      	cmp	r3, #2
 8001430:	d004      	beq.n	800143c <HAL_DFSDM_FilterRegularStop_DMA+0x14>
 8001432:	2b04      	cmp	r3, #4
 8001434:	d002      	beq.n	800143c <HAL_DFSDM_FilterRegularStop_DMA+0x14>
    status = HAL_ERROR;
 8001436:	2501      	movs	r5, #1
}
 8001438:	4628      	mov	r0, r5
 800143a:	bd38      	pop	{r3, r4, r5, pc}
 800143c:	4604      	mov	r4, r0
    if (HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 800143e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001440:	f000 f8ed 	bl	800161e <HAL_DMA_Abort>
 8001444:	4605      	mov	r5, r0
 8001446:	b120      	cbz	r0, 8001452 <HAL_DFSDM_FilterRegularStop_DMA+0x2a>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001448:	23ff      	movs	r3, #255	; 0xff
 800144a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
      status = HAL_ERROR;
 800144e:	2501      	movs	r5, #1
 8001450:	e7f2      	b.n	8001438 <HAL_DFSDM_FilterRegularStop_DMA+0x10>
      DFSDM_RegConvStop(hdfsdm_filter);
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fe20 	bl	8001098 <DFSDM_RegConvStop>
 8001458:	e7ee      	b.n	8001438 <HAL_DFSDM_FilterRegularStop_DMA+0x10>

0800145a <DFSDM_DMARegularConvCplt>:
{
 800145a:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800145c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800145e:	f004 fa15 	bl	800588c <HAL_DFSDM_FilterRegConvCpltCallback>
}
 8001462:	bd08      	pop	{r3, pc}

08001464 <DFSDM_DMARegularHalfConvCplt>:
{
 8001464:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001466:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001468:	f004 f9e8 	bl	800583c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
}
 800146c:	bd08      	pop	{r3, pc}

0800146e <HAL_DFSDM_FilterErrorCallback>:
}
 800146e:	4770      	bx	lr

08001470 <DFSDM_DMAError>:
{
 8001470:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001472:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001474:	2303      	movs	r3, #3
 8001476:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001478:	f7ff fff9 	bl	800146e <HAL_DFSDM_FilterErrorCallback>
}
 800147c:	bd08      	pop	{r3, pc}

0800147e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800147e:	b470      	push	{r4, r5, r6}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001480:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001482:	f004 051c 	and.w	r5, r4, #28
 8001486:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001488:	2401      	movs	r4, #1
 800148a:	40ac      	lsls	r4, r5
 800148c:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800148e:	6804      	ldr	r4, [r0, #0]
 8001490:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001492:	6883      	ldr	r3, [r0, #8]
 8001494:	2b10      	cmp	r3, #16
 8001496:	d005      	beq.n	80014a4 <DMA_SetConfig+0x26>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001498:	6803      	ldr	r3, [r0, #0]
 800149a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800149c:	6803      	ldr	r3, [r0, #0]
 800149e:	60da      	str	r2, [r3, #12]
  }
}
 80014a0:	bc70      	pop	{r4, r5, r6}
 80014a2:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80014a8:	6803      	ldr	r3, [r0, #0]
 80014aa:	60d9      	str	r1, [r3, #12]
 80014ac:	e7f8      	b.n	80014a0 <DMA_SetConfig+0x22>
	...

080014b0 <HAL_DMA_Init>:
  if(hdma == NULL)
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d069      	beq.n	8001588 <HAL_DMA_Init+0xd8>
{
 80014b4:	b410      	push	{r4}
 80014b6:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014b8:	6801      	ldr	r1, [r0, #0]
 80014ba:	4a34      	ldr	r2, [pc, #208]	; (800158c <HAL_DMA_Init+0xdc>)
 80014bc:	4291      	cmp	r1, r2
 80014be:	d845      	bhi.n	800154c <HAL_DMA_Init+0x9c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014c0:	4a33      	ldr	r2, [pc, #204]	; (8001590 <HAL_DMA_Init+0xe0>)
 80014c2:	440a      	add	r2, r1
 80014c4:	4933      	ldr	r1, [pc, #204]	; (8001594 <HAL_DMA_Init+0xe4>)
 80014c6:	fba1 1202 	umull	r1, r2, r1, r2
 80014ca:	0912      	lsrs	r2, r2, #4
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014d0:	4a31      	ldr	r2, [pc, #196]	; (8001598 <HAL_DMA_Init+0xe8>)
 80014d2:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d4:	2202      	movs	r2, #2
 80014d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014de:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80014e2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80014e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014ea:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ec:	691c      	ldr	r4, [r3, #16]
 80014ee:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	699c      	ldr	r4, [r3, #24]
 80014f6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f8:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fa:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fc:	6a1c      	ldr	r4, [r3, #32]
 80014fe:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8001500:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8001502:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800150a:	d015      	beq.n	8001538 <HAL_DMA_Init+0x88>
    if (DMA1 == hdma->DmaBaseAddress)
 800150c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <HAL_DMA_Init+0xe8>)
 8001510:	4291      	cmp	r1, r2
 8001512:	d026      	beq.n	8001562 <HAL_DMA_Init+0xb2>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001514:	4a21      	ldr	r2, [pc, #132]	; (800159c <HAL_DMA_Init+0xec>)
 8001516:	6811      	ldr	r1, [r2, #0]
 8001518:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800151a:	f000 041c 	and.w	r4, r0, #28
 800151e:	200f      	movs	r0, #15
 8001520:	40a0      	lsls	r0, r4
 8001522:	ea21 0100 	bic.w	r1, r1, r0
 8001526:	6011      	str	r1, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001528:	6811      	ldr	r1, [r2, #0]
 800152a:	6858      	ldr	r0, [r3, #4]
 800152c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800152e:	f004 041c 	and.w	r4, r4, #28
 8001532:	40a0      	lsls	r0, r4
 8001534:	4301      	orrs	r1, r0
 8001536:	6011      	str	r1, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001538:	2000      	movs	r0, #0
 800153a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8001542:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 8001546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800154a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_DMA_Init+0xf0>)
 800154e:	440a      	add	r2, r1
 8001550:	4910      	ldr	r1, [pc, #64]	; (8001594 <HAL_DMA_Init+0xe4>)
 8001552:	fba1 1202 	umull	r1, r2, r1, r2
 8001556:	0912      	lsrs	r2, r2, #4
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_DMA_Init+0xf4>)
 800155e:	6402      	str	r2, [r0, #64]	; 0x40
 8001560:	e7b8      	b.n	80014d4 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001562:	32a8      	adds	r2, #168	; 0xa8
 8001564:	6811      	ldr	r1, [r2, #0]
 8001566:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001568:	f000 041c 	and.w	r4, r0, #28
 800156c:	200f      	movs	r0, #15
 800156e:	40a0      	lsls	r0, r4
 8001570:	ea21 0100 	bic.w	r1, r1, r0
 8001574:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001576:	6811      	ldr	r1, [r2, #0]
 8001578:	6858      	ldr	r0, [r3, #4]
 800157a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800157c:	f004 041c 	and.w	r4, r4, #28
 8001580:	40a0      	lsls	r0, r4
 8001582:	4301      	orrs	r1, r0
 8001584:	6011      	str	r1, [r2, #0]
 8001586:	e7d7      	b.n	8001538 <HAL_DMA_Init+0x88>
    return HAL_ERROR;
 8001588:	2001      	movs	r0, #1
}
 800158a:	4770      	bx	lr
 800158c:	40020407 	.word	0x40020407
 8001590:	bffdfff8 	.word	0xbffdfff8
 8001594:	cccccccd 	.word	0xcccccccd
 8001598:	40020000 	.word	0x40020000
 800159c:	400204a8 	.word	0x400204a8
 80015a0:	bffdfbf8 	.word	0xbffdfbf8
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_DMA_Start_IT>:
{
 80015a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80015aa:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80015ae:	2c01      	cmp	r4, #1
 80015b0:	d033      	beq.n	800161a <HAL_DMA_Start_IT+0x72>
 80015b2:	2401      	movs	r4, #1
 80015b4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 80015b8:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80015bc:	b2e4      	uxtb	r4, r4
 80015be:	2c01      	cmp	r4, #1
 80015c0:	d004      	beq.n	80015cc <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80015c2:	2300      	movs	r3, #0
 80015c4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 80015c8:	2002      	movs	r0, #2
}
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
 80015cc:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ce:	2002      	movs	r0, #2
 80015d0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d4:	2000      	movs	r0, #0
 80015d6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80015d8:	6825      	ldr	r5, [r4, #0]
 80015da:	6828      	ldr	r0, [r5, #0]
 80015dc:	f020 0001 	bic.w	r0, r0, #1
 80015e0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff ff4b 	bl	800147e <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 80015e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015ea:	b15b      	cbz	r3, 8001604 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ec:	6822      	ldr	r2, [r4, #0]
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f043 030e 	orr.w	r3, r3, #14
 80015f4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	6813      	ldr	r3, [r2, #0]
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2000      	movs	r0, #0
 8001602:	e7e2      	b.n	80015ca <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001604:	6822      	ldr	r2, [r4, #0]
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800160e:	6822      	ldr	r2, [r4, #0]
 8001610:	6813      	ldr	r3, [r2, #0]
 8001612:	f043 030a 	orr.w	r3, r3, #10
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e7ed      	b.n	80015f6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800161a:	2002      	movs	r0, #2
 800161c:	e7d5      	b.n	80015ca <HAL_DMA_Start_IT+0x22>

0800161e <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d006      	beq.n	8001636 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001628:	2304      	movs	r3, #4
 800162a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800162c:	2300      	movs	r3, #0
 800162e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001632:	2001      	movs	r0, #1
 8001634:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001636:	6802      	ldr	r2, [r0, #0]
 8001638:	6813      	ldr	r3, [r2, #0]
 800163a:	f023 030e 	bic.w	r3, r3, #14
 800163e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001640:	6802      	ldr	r2, [r0, #0]
 8001642:	6813      	ldr	r3, [r2, #0]
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800164a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800164c:	f003 031c 	and.w	r3, r3, #28
 8001650:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001652:	2201      	movs	r2, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800165a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800165e:	2300      	movs	r3, #0
 8001660:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8001664:	4618      	mov	r0, r3
}
 8001666:	4770      	bx	lr

08001668 <HAL_DMA_Abort_IT>:
{
 8001668:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800166a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d003      	beq.n	800167c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001674:	2304      	movs	r3, #4
 8001676:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001678:	2001      	movs	r0, #1
}
 800167a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167c:	6802      	ldr	r2, [r0, #0]
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	f023 030e 	bic.w	r3, r3, #14
 8001684:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	6813      	ldr	r3, [r2, #0]
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001690:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001692:	f003 031c 	and.w	r3, r3, #28
 8001696:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001698:	2201      	movs	r2, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80016a0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80016a4:	2300      	movs	r3, #0
 80016a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80016aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80016ac:	b113      	cbz	r3, 80016b4 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 80016ae:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80016b0:	2000      	movs	r0, #0
 80016b2:	e7e2      	b.n	800167a <HAL_DMA_Abort_IT+0x12>
 80016b4:	2000      	movs	r0, #0
 80016b6:	e7e0      	b.n	800167a <HAL_DMA_Abort_IT+0x12>

080016b8 <HAL_DMA_IRQHandler>:
{
 80016b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016bc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80016be:	6804      	ldr	r4, [r0, #0]
 80016c0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016c4:	f003 031c 	and.w	r3, r3, #28
 80016c8:	2204      	movs	r2, #4
 80016ca:	409a      	lsls	r2, r3
 80016cc:	420a      	tst	r2, r1
 80016ce:	d015      	beq.n	80016fc <HAL_DMA_IRQHandler+0x44>
 80016d0:	f015 0f04 	tst.w	r5, #4
 80016d4:	d012      	beq.n	80016fc <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	f013 0f20 	tst.w	r3, #32
 80016dc:	d103      	bne.n	80016e6 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016e8:	f003 021c 	and.w	r2, r3, #28
 80016ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80016ee:	2304      	movs	r3, #4
 80016f0:	4093      	lsls	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80016f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80016f6:	b103      	cbz	r3, 80016fa <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80016f8:	4798      	blx	r3
}
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016fc:	2202      	movs	r2, #2
 80016fe:	409a      	lsls	r2, r3
 8001700:	420a      	tst	r2, r1
 8001702:	d01c      	beq.n	800173e <HAL_DMA_IRQHandler+0x86>
 8001704:	f015 0f02 	tst.w	r5, #2
 8001708:	d019      	beq.n	800173e <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	f013 0f20 	tst.w	r3, #32
 8001710:	d106      	bne.n	8001720 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	f023 030a 	bic.w	r3, r3, #10
 8001718:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800171a:	2301      	movs	r3, #1
 800171c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001720:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001722:	f003 021c 	and.w	r2, r3, #28
 8001726:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001728:	2302      	movs	r3, #2
 800172a:	4093      	lsls	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800172e:	2300      	movs	r3, #0
 8001730:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001734:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0df      	beq.n	80016fa <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800173a:	4798      	blx	r3
 800173c:	e7dd      	b.n	80016fa <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800173e:	2208      	movs	r2, #8
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	420b      	tst	r3, r1
 8001746:	d0d8      	beq.n	80016fa <HAL_DMA_IRQHandler+0x42>
 8001748:	f015 0f08 	tst.w	r5, #8
 800174c:	d0d5      	beq.n	80016fa <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	f023 030e 	bic.w	r3, r3, #14
 8001754:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001756:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001758:	f003 031c 	and.w	r3, r3, #28
 800175c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800175e:	2201      	movs	r2, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001766:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001768:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800176c:	2300      	movs	r3, #0
 800176e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001772:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0c0      	beq.n	80016fa <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8001778:	4798      	blx	r3
  return;
 800177a:	e7be      	b.n	80016fa <HAL_DMA_IRQHandler+0x42>

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b4f0      	push	{r4, r5, r6, r7}
 800177e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001780:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e036      	b.n	80017f2 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001784:	2407      	movs	r4, #7
 8001786:	e000      	b.n	800178a <HAL_GPIO_Init+0xe>
 8001788:	2400      	movs	r4, #0
 800178a:	40b4      	lsls	r4, r6
 800178c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800178e:	3502      	adds	r5, #2
 8001790:	4e64      	ldr	r6, [pc, #400]	; (8001924 <HAL_GPIO_Init+0x1a8>)
 8001792:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001796:	4c64      	ldr	r4, [pc, #400]	; (8001928 <HAL_GPIO_Init+0x1ac>)
 8001798:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800179a:	43d4      	mvns	r4, r2
 800179c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a0:	684f      	ldr	r7, [r1, #4]
 80017a2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80017a6:	d001      	beq.n	80017ac <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 80017a8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80017ac:	4d5e      	ldr	r5, [pc, #376]	; (8001928 <HAL_GPIO_Init+0x1ac>)
 80017ae:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80017b0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80017b2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b6:	684f      	ldr	r7, [r1, #4]
 80017b8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80017bc:	d001      	beq.n	80017c2 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 80017be:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80017c2:	4d59      	ldr	r5, [pc, #356]	; (8001928 <HAL_GPIO_Init+0x1ac>)
 80017c4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80017c8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017cc:	684f      	ldr	r7, [r1, #4]
 80017ce:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80017d2:	d001      	beq.n	80017d8 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 80017d4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80017d8:	4d53      	ldr	r5, [pc, #332]	; (8001928 <HAL_GPIO_Init+0x1ac>)
 80017da:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80017dc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80017de:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e0:	684e      	ldr	r6, [r1, #4]
 80017e2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80017e6:	d001      	beq.n	80017ec <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80017e8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80017ec:	4a4e      	ldr	r2, [pc, #312]	; (8001928 <HAL_GPIO_Init+0x1ac>)
 80017ee:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80017f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	680a      	ldr	r2, [r1, #0]
 80017f4:	fa32 f403 	lsrs.w	r4, r2, r3
 80017f8:	f000 8091 	beq.w	800191e <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017fc:	2401      	movs	r4, #1
 80017fe:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001800:	4022      	ands	r2, r4
 8001802:	d0f5      	beq.n	80017f0 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001804:	684d      	ldr	r5, [r1, #4]
 8001806:	2d02      	cmp	r5, #2
 8001808:	d001      	beq.n	800180e <HAL_GPIO_Init+0x92>
 800180a:	2d12      	cmp	r5, #18
 800180c:	d110      	bne.n	8001830 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 800180e:	08de      	lsrs	r6, r3, #3
 8001810:	3608      	adds	r6, #8
 8001812:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001816:	f003 0507 	and.w	r5, r3, #7
 800181a:	00af      	lsls	r7, r5, #2
 800181c:	250f      	movs	r5, #15
 800181e:	40bd      	lsls	r5, r7
 8001820:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001824:	690d      	ldr	r5, [r1, #16]
 8001826:	40bd      	lsls	r5, r7
 8001828:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 800182c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001830:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001832:	005f      	lsls	r7, r3, #1
 8001834:	2503      	movs	r5, #3
 8001836:	40bd      	lsls	r5, r7
 8001838:	43ed      	mvns	r5, r5
 800183a:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183e:	684e      	ldr	r6, [r1, #4]
 8001840:	f006 0603 	and.w	r6, r6, #3
 8001844:	40be      	lsls	r6, r7
 8001846:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 800184a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184c:	684e      	ldr	r6, [r1, #4]
 800184e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8001852:	f1bc 0f01 	cmp.w	ip, #1
 8001856:	d903      	bls.n	8001860 <HAL_GPIO_Init+0xe4>
 8001858:	2e11      	cmp	r6, #17
 800185a:	d001      	beq.n	8001860 <HAL_GPIO_Init+0xe4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185c:	2e12      	cmp	r6, #18
 800185e:	d110      	bne.n	8001882 <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 8001860:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001862:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001866:	68ce      	ldr	r6, [r1, #12]
 8001868:	40be      	lsls	r6, r7
 800186a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 800186e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001870:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001872:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001876:	684e      	ldr	r6, [r1, #4]
 8001878:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800187c:	409e      	lsls	r6, r3
 800187e:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001880:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001882:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001884:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001886:	688c      	ldr	r4, [r1, #8]
 8001888:	40bc      	lsls	r4, r7
 800188a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800188c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188e:	684c      	ldr	r4, [r1, #4]
 8001890:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001894:	d0ac      	beq.n	80017f0 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4c25      	ldr	r4, [pc, #148]	; (800192c <HAL_GPIO_Init+0x1b0>)
 8001898:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800189a:	f045 0501 	orr.w	r5, r5, #1
 800189e:	6625      	str	r5, [r4, #96]	; 0x60
 80018a0:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80018a2:	f004 0401 	and.w	r4, r4, #1
 80018a6:	9401      	str	r4, [sp, #4]
 80018a8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80018aa:	089d      	lsrs	r5, r3, #2
 80018ac:	1cae      	adds	r6, r5, #2
 80018ae:	4c1d      	ldr	r4, [pc, #116]	; (8001924 <HAL_GPIO_Init+0x1a8>)
 80018b0:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b4:	f003 0403 	and.w	r4, r3, #3
 80018b8:	00a6      	lsls	r6, r4, #2
 80018ba:	240f      	movs	r4, #15
 80018bc:	40b4      	lsls	r4, r6
 80018be:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80018c6:	f43f af5f 	beq.w	8001788 <HAL_GPIO_Init+0xc>
 80018ca:	4c19      	ldr	r4, [pc, #100]	; (8001930 <HAL_GPIO_Init+0x1b4>)
 80018cc:	42a0      	cmp	r0, r4
 80018ce:	d01a      	beq.n	8001906 <HAL_GPIO_Init+0x18a>
 80018d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018d4:	42a0      	cmp	r0, r4
 80018d6:	d018      	beq.n	800190a <HAL_GPIO_Init+0x18e>
 80018d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018dc:	42a0      	cmp	r0, r4
 80018de:	d016      	beq.n	800190e <HAL_GPIO_Init+0x192>
 80018e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018e4:	42a0      	cmp	r0, r4
 80018e6:	d014      	beq.n	8001912 <HAL_GPIO_Init+0x196>
 80018e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018ec:	42a0      	cmp	r0, r4
 80018ee:	d012      	beq.n	8001916 <HAL_GPIO_Init+0x19a>
 80018f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018f4:	42a0      	cmp	r0, r4
 80018f6:	d010      	beq.n	800191a <HAL_GPIO_Init+0x19e>
 80018f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018fc:	42a0      	cmp	r0, r4
 80018fe:	f43f af41 	beq.w	8001784 <HAL_GPIO_Init+0x8>
 8001902:	2408      	movs	r4, #8
 8001904:	e741      	b.n	800178a <HAL_GPIO_Init+0xe>
 8001906:	2401      	movs	r4, #1
 8001908:	e73f      	b.n	800178a <HAL_GPIO_Init+0xe>
 800190a:	2402      	movs	r4, #2
 800190c:	e73d      	b.n	800178a <HAL_GPIO_Init+0xe>
 800190e:	2403      	movs	r4, #3
 8001910:	e73b      	b.n	800178a <HAL_GPIO_Init+0xe>
 8001912:	2404      	movs	r4, #4
 8001914:	e739      	b.n	800178a <HAL_GPIO_Init+0xe>
 8001916:	2405      	movs	r4, #5
 8001918:	e737      	b.n	800178a <HAL_GPIO_Init+0xe>
 800191a:	2406      	movs	r4, #6
 800191c:	e735      	b.n	800178a <HAL_GPIO_Init+0xe>
  }
}
 800191e:	b002      	add	sp, #8
 8001920:	bcf0      	pop	{r4, r5, r6, r7}
 8001922:	4770      	bx	lr
 8001924:	40010000 	.word	0x40010000
 8001928:	40010400 	.word	0x40010400
 800192c:	40021000 	.word	0x40021000
 8001930:	48000400 	.word	0x48000400

08001934 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	b90a      	cbnz	r2, 800193a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001936:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001938:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193a:	6181      	str	r1, [r0, #24]
 800193c:	4770      	bx	lr

0800193e <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800193e:	2800      	cmp	r0, #0
 8001940:	d059      	beq.n	80019f6 <HAL_I2C_Init+0xb8>
{
 8001942:	b510      	push	{r4, lr}
 8001944:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001946:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800194a:	2b00      	cmp	r3, #0
 800194c:	d043      	beq.n	80019d6 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800194e:	2324      	movs	r3, #36	; 0x24
 8001950:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800195e:	6863      	ldr	r3, [r4, #4]
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001966:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	6893      	ldr	r3, [r2, #8]
 800196c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001970:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001972:	68e3      	ldr	r3, [r4, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d033      	beq.n	80019e0 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001978:	68a3      	ldr	r3, [r4, #8]
 800197a:	6822      	ldr	r2, [r4, #0]
 800197c:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001980:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001982:	68e3      	ldr	r3, [r4, #12]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d031      	beq.n	80019ec <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001988:	6822      	ldr	r2, [r4, #0]
 800198a:	6853      	ldr	r3, [r2, #4]
 800198c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001994:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001996:	6822      	ldr	r2, [r4, #0]
 8001998:	68d3      	ldr	r3, [r2, #12]
 800199a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800199e:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019a0:	6923      	ldr	r3, [r4, #16]
 80019a2:	6962      	ldr	r2, [r4, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	69a1      	ldr	r1, [r4, #24]
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80019ae:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019b0:	69e3      	ldr	r3, [r4, #28]
 80019b2:	6a21      	ldr	r1, [r4, #32]
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	6813      	ldr	r3, [r2, #0]
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c4:	2000      	movs	r0, #0
 80019c6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019c8:	2320      	movs	r3, #32
 80019ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 80019d4:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80019da:	f004 ff09 	bl	80067f0 <HAL_I2C_MspInit>
 80019de:	e7b6      	b.n	800194e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019e0:	68a3      	ldr	r3, [r4, #8]
 80019e2:	6822      	ldr	r2, [r4, #0]
 80019e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e8:	6093      	str	r3, [r2, #8]
 80019ea:	e7ca      	b.n	8001982 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	e7c8      	b.n	8001988 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80019f6:	2001      	movs	r0, #1
}
 80019f8:	4770      	bx	lr

080019fa <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d124      	bne.n	8001a4e <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d022      	beq.n	8001a52 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a12:	2324      	movs	r3, #36	; 0x24
 8001a14:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a18:	6802      	ldr	r2, [r0, #0]
 8001a1a:	6813      	ldr	r3, [r2, #0]
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a22:	6802      	ldr	r2, [r0, #0]
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a2a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a2c:	6802      	ldr	r2, [r0, #0]
 8001a2e:	6813      	ldr	r3, [r2, #0]
 8001a30:	4319      	orrs	r1, r3
 8001a32:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a34:	6802      	ldr	r2, [r0, #0]
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a44:	2300      	movs	r3, #0
 8001a46:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2002      	movs	r0, #2
 8001a50:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001a52:	2002      	movs	r0, #2
  }
}
 8001a54:	4770      	bx	lr

08001a56 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d122      	bne.n	8001aa6 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d020      	beq.n	8001aaa <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6e:	2324      	movs	r3, #36	; 0x24
 8001a70:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a74:	6802      	ldr	r2, [r0, #0]
 8001a76:	6813      	ldr	r3, [r2, #0]
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a7e:	6802      	ldr	r2, [r0, #0]
 8001a80:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a86:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a8a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a8c:	6802      	ldr	r2, [r0, #0]
 8001a8e:	6813      	ldr	r3, [r2, #0]
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	2320      	movs	r3, #32
 8001a98:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001aaa:	2002      	movs	r0, #2
  }
}
 8001aac:	4770      	bx	lr

08001aae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab0:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	f000 8091 	beq.w	8001bda <HAL_PCD_Init+0x12c>
 8001ab8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001aba:	6805      	ldr	r5, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001abc:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001ac0:	b323      	cbz	r3, 8001b0c <HAL_PCD_Init+0x5e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ac8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001aca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ace:	d101      	bne.n	8001ad4 <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6123      	str	r3, [r4, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ad4:	6820      	ldr	r0, [r4, #0]
 8001ad6:	f003 fc3e 	bl	8005356 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ada:	4625      	mov	r5, r4
 8001adc:	f855 7b10 	ldr.w	r7, [r5], #16
 8001ae0:	466e      	mov	r6, sp
 8001ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001aea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aee:	e886 0003 	stmia.w	r6, {r0, r1}
 8001af2:	1d23      	adds	r3, r4, #4
 8001af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001af6:	4638      	mov	r0, r7
 8001af8:	f003 fbf4 	bl	80052e4 <USB_CoreInit>
 8001afc:	b158      	cbz	r0, 8001b16 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001afe:	2302      	movs	r3, #2
 8001b00:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001b04:	2501      	movs	r5, #1
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001b06:	4628      	mov	r0, r5
 8001b08:	b00b      	add	sp, #44	; 0x2c
 8001b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001b0c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001b10:	f005 f8bc 	bl	8006c8c <HAL_PCD_MspInit>
 8001b14:	e7d5      	b.n	8001ac2 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b16:	2100      	movs	r1, #0
 8001b18:	6820      	ldr	r0, [r4, #0]
 8001b1a:	f003 fc22 	bl	8005362 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e015      	b.n	8001b4e <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8001b22:	00d9      	lsls	r1, r3, #3
 8001b24:	1ac8      	subs	r0, r1, r3
 8001b26:	0082      	lsls	r2, r0, #2
 8001b28:	4422      	add	r2, r4
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001b30:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b34:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b3e:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b40:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b42:	1aca      	subs	r2, r1, r3
 8001b44:	0091      	lsls	r1, r2, #2
 8001b46:	4421      	add	r1, r4
 8001b48:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	6865      	ldr	r5, [r4, #4]
 8001b50:	42ab      	cmp	r3, r5
 8001b52:	d3e6      	bcc.n	8001b22 <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	e015      	b.n	8001b84 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 8001b58:	00d8      	lsls	r0, r3, #3
 8001b5a:	1ac1      	subs	r1, r0, r3
 8001b5c:	008a      	lsls	r2, r1, #2
 8001b5e:	4422      	add	r2, r4
 8001b60:	2100      	movs	r1, #0
 8001b62:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001b66:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b6a:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b6e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b72:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b76:	1ac2      	subs	r2, r0, r3
 8001b78:	0090      	lsls	r0, r2, #2
 8001b7a:	4420      	add	r0, r4
 8001b7c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b80:	3301      	adds	r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	429d      	cmp	r5, r3
 8001b86:	d8e7      	bhi.n	8001b58 <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b88:	4625      	mov	r5, r4
 8001b8a:	f855 7b10 	ldr.w	r7, [r5], #16
 8001b8e:	466e      	mov	r6, sp
 8001b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b9c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001ba0:	1d23      	adds	r3, r4, #4
 8001ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba4:	4638      	mov	r0, r7
 8001ba6:	f003 fc23 	bl	80053f0 <USB_DevInit>
 8001baa:	4605      	mov	r5, r0
 8001bac:	b960      	cbnz	r0, 8001bc8 <HAL_PCD_Init+0x11a>
  hpcd->USB_Address = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8001bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d008      	beq.n	8001bd2 <HAL_PCD_Init+0x124>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bc0:	6820      	ldr	r0, [r4, #0]
 8001bc2:	f003 fcc3 	bl	800554c <USB_DevDisconnect>
  return HAL_OK;
 8001bc6:	e79e      	b.n	8001b06 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001bce:	2501      	movs	r5, #1
 8001bd0:	e799      	b.n	8001b06 <HAL_PCD_Init+0x58>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f000 f803 	bl	8001bde <HAL_PCDEx_ActivateLPM>
 8001bd8:	e7f2      	b.n	8001bc0 <HAL_PCD_Init+0x112>
    return HAL_ERROR;
 8001bda:	2501      	movs	r5, #1
 8001bdc:	e793      	b.n	8001b06 <HAL_PCD_Init+0x58>

08001bde <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bde:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001be0:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8001be2:	2101      	movs	r1, #1
 8001be4:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001be8:	2000      	movs	r0, #0
 8001bea:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001bee:	6993      	ldr	r3, [r2, #24]
 8001bf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bf4:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001bf6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	f043 0303 	orr.w	r3, r3, #3
 8001c00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001c02:	4770      	bx	lr

08001c04 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c04:	4a02      	ldr	r2, [pc, #8]	; (8001c10 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001c06:	6813      	ldr	r3, [r2, #0]
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	4770      	bx	lr
 8001c10:	40007000 	.word	0x40007000

08001c14 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_PWREx_GetVoltageRange+0xc>)
 8001c16:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001c18:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40007000 	.word	0x40007000

08001c24 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001c28:	d00f      	beq.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d034      	beq.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c3a:	6813      	ldr	r3, [r2, #0]
 8001c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c44:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c46:	2000      	movs	r0, #0
 8001c48:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c56:	d022      	beq.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c58:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c64:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2332      	movs	r3, #50	; 0x32
 8001c6c:	fb03 f302 	mul.w	r3, r3, r2
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c7a:	e000      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8001c7c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c80:	6952      	ldr	r2, [r2, #20]
 8001c82:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001c86:	d001      	beq.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x68>
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f7      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001c94:	d101      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8001c96:	2000      	movs	r0, #0
 8001c98:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	4770      	bx	lr
  return HAL_OK;
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	4770      	bx	lr
 8001ca2:	2000      	movs	r0, #0
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	431bde83 	.word	0x431bde83

08001cb4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001cb4:	4a02      	ldr	r2, [pc, #8]	; (8001cc0 <HAL_PWREx_EnableVddUSB+0xc>)
 8001cb6:	6853      	ldr	r3, [r2, #4]
 8001cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cbc:	6053      	str	r3, [r2, #4]
}
 8001cbe:	4770      	bx	lr
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001cc4:	4a02      	ldr	r2, [pc, #8]	; (8001cd0 <HAL_PWREx_EnableVddIO2+0xc>)
 8001cc6:	6853      	ldr	r3, [r2, #4]
 8001cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ccc:	6053      	str	r3, [r2, #4]
}
 8001cce:	4770      	bx	lr
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd8:	4605      	mov	r5, r0
 8001cda:	460f      	mov	r7, r1
 8001cdc:	4616      	mov	r6, r2
 8001cde:	4698      	mov	r8, r3
 8001ce0:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ce2:	682b      	ldr	r3, [r5, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	423b      	tst	r3, r7
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	42b3      	cmp	r3, r6
 8001cf0:	d013      	beq.n	8001d1a <QSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001cf6:	d0f4      	beq.n	8001ce2 <QSPI_WaitFlagStateUntilTimeout+0xe>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf8:	f7fe fc9c 	bl	8000634 <HAL_GetTick>
 8001cfc:	eba0 0008 	sub.w	r0, r0, r8
 8001d00:	42a0      	cmp	r0, r4
 8001d02:	d801      	bhi.n	8001d08 <QSPI_WaitFlagStateUntilTimeout+0x34>
 8001d04:	2c00      	cmp	r4, #0
 8001d06:	d1ec      	bne.n	8001ce2 <QSPI_WaitFlagStateUntilTimeout+0xe>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001d0e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
 8001d18:	e000      	b.n	8001d1c <QSPI_WaitFlagStateUntilTimeout+0x48>
      }
    }
  }
  return HAL_OK;
 8001d1a:	2000      	movs	r0, #0
}
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d20 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 8001d20:	6481      	str	r1, [r0, #72]	; 0x48
}
 8001d22:	4770      	bx	lr

08001d24 <HAL_QSPI_Init>:
{
 8001d24:	b530      	push	{r4, r5, lr}
 8001d26:	b083      	sub	sp, #12
 8001d28:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d2a:	f7fe fc83 	bl	8000634 <HAL_GetTick>
  if(hqspi == NULL)
 8001d2e:	2c00      	cmp	r4, #0
 8001d30:	d056      	beq.n	8001de0 <HAL_QSPI_Init+0xbc>
 8001d32:	4605      	mov	r5, r0
  __HAL_LOCK(hqspi);
 8001d34:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d052      	beq.n	8001de4 <HAL_QSPI_Init+0xc0>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001d44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d03e      	beq.n	8001dca <HAL_QSPI_Init+0xa6>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001d4c:	6821      	ldr	r1, [r4, #0]
 8001d4e:	680b      	ldr	r3, [r1, #0]
 8001d50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d54:	68a2      	ldr	r2, [r4, #8]
 8001d56:	3a01      	subs	r2, #1
 8001d58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d5c:	600b      	str	r3, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001d5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	462b      	mov	r3, r5
 8001d64:	2200      	movs	r2, #0
 8001d66:	2120      	movs	r1, #32
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7ff ffb3 	bl	8001cd4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001d6e:	4601      	mov	r1, r0
 8001d70:	bb28      	cbnz	r0, 8001dbe <HAL_QSPI_Init+0x9a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001d72:	6820      	ldr	r0, [r4, #0]
 8001d74:	6803      	ldr	r3, [r0, #0]
 8001d76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d7a:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8001d7e:	6865      	ldr	r5, [r4, #4]
 8001d80:	68e2      	ldr	r2, [r4, #12]
 8001d82:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8001d86:	69e5      	ldr	r5, [r4, #28]
 8001d88:	432a      	orrs	r2, r5
 8001d8a:	6a25      	ldr	r5, [r4, #32]
 8001d8c:	432a      	orrs	r2, r5
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	6003      	str	r3, [r0, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001d92:	6820      	ldr	r0, [r4, #0]
 8001d94:	6842      	ldr	r2, [r0, #4]
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_QSPI_Init+0xc4>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	6925      	ldr	r5, [r4, #16]
 8001d9c:	6962      	ldr	r2, [r4, #20]
 8001d9e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001da2:	69a5      	ldr	r5, [r4, #24]
 8001da4:	432a      	orrs	r2, r5
 8001da6:	4313      	orrs	r3, r2
 8001da8:	6043      	str	r3, [r0, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	b003      	add	sp, #12
 8001dc8:	bd30      	pop	{r4, r5, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8001dca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f004 fe3e 	bl	8006a50 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001dd4:	f241 3188 	movw	r1, #5000	; 0x1388
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff ffa1 	bl	8001d20 <HAL_QSPI_SetTimeout>
 8001dde:	e7b5      	b.n	8001d4c <HAL_QSPI_Init+0x28>
    return HAL_ERROR;
 8001de0:	2101      	movs	r1, #1
 8001de2:	e7ef      	b.n	8001dc4 <HAL_QSPI_Init+0xa0>
  __HAL_LOCK(hqspi);
 8001de4:	2102      	movs	r1, #2
 8001de6:	e7ed      	b.n	8001dc4 <HAL_QSPI_Init+0xa0>
 8001de8:	ffe0f8fe 	.word	0xffe0f8fe

08001dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dec:	b530      	push	{r4, r5, lr}
 8001dee:	b083      	sub	sp, #12
 8001df0:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001dfa:	d00b      	beq.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dfc:	f7ff ff0a 	bl	8001c14 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e00:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001e04:	d017      	beq.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e06:	2d80      	cmp	r5, #128	; 0x80
 8001e08:	d81f      	bhi.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e0a:	d02d      	beq.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e0c:	2d70      	cmp	r5, #112	; 0x70
 8001e0e:	d02d      	beq.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e10:	2100      	movs	r1, #0
 8001e12:	e01b      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4c17      	ldr	r4, [pc, #92]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001e16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001e28:	f7ff fef4 	bl	8001c14 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e32:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e34:	e7e4      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001e36:	2d80      	cmp	r5, #128	; 0x80
 8001e38:	d903      	bls.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001e3a:	2da0      	cmp	r5, #160	; 0xa0
 8001e3c:	d903      	bls.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e3e:	2102      	movs	r1, #2
 8001e40:	e004      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e42:	2100      	movs	r1, #0
 8001e44:	e002      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e46:	2101      	movs	r1, #1
 8001e48:	e000      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e4a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	f023 0307 	bic.w	r3, r3, #7
 8001e54:	430b      	orrs	r3, r1
 8001e56:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	428b      	cmp	r3, r1
 8001e60:	d006      	beq.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8001e62:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001e64:	b003      	add	sp, #12
 8001e66:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e68:	2102      	movs	r1, #2
 8001e6a:	e7ef      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	e7ed      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8001e70:	2000      	movs	r0, #0
 8001e72:	e7f7      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7c:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e7e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e80:	68d2      	ldr	r2, [r2, #12]
 8001e82:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e86:	f013 030c 	ands.w	r3, r3, #12
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x26>
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d006      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d01f      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	e010      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e9e:	2a01      	cmp	r2, #1
 8001ea0:	d1f6      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	f012 0f08 	tst.w	r2, #8
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eae:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8001eb2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8001eb6:	491b      	ldr	r1, [pc, #108]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001eb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ebc:	b143      	cbz	r3, 8001ed0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ebe:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8001ec4:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001ece:	e7f2      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	e7f5      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8001ed4:	4814      	ldr	r0, [pc, #80]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	e7f2      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001edc:	2200      	movs	r2, #0
 8001ede:	e7ef      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d015      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x9c>
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d015      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ef2:	68d8      	ldr	r0, [r3, #12]
 8001ef4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001ef8:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001efa:	68d9      	ldr	r1, [r3, #12]
 8001efc:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001f00:	fb02 f201 	mul.w	r2, r2, r1
 8001f04:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f08:	68d8      	ldr	r0, [r3, #12]
 8001f0a:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8001f0e:	3001      	adds	r0, #1
 8001f10:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8001f12:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8001f16:	e7d5      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8001f18:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f1a:	e7e9      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 8001f1c:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f1e:	e7e7      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x74>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	080080b4 	.word	0x080080b4
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f000 8308 	beq.w	8002546 <HAL_RCC_OscConfig+0x616>
{
 8001f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3c:	4bad      	ldr	r3, [pc, #692]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8001f3e:	689d      	ldr	r5, [r3, #8]
 8001f40:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f44:	68de      	ldr	r6, [r3, #12]
 8001f46:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f4a:	6803      	ldr	r3, [r0, #0]
 8001f4c:	f013 0f10 	tst.w	r3, #16
 8001f50:	d05e      	beq.n	8002010 <HAL_RCC_OscConfig+0xe0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f52:	b1e5      	cbz	r5, 8001f8e <HAL_RCC_OscConfig+0x5e>
 8001f54:	2d0c      	cmp	r5, #12
 8001f56:	d018      	beq.n	8001f8a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f58:	69a3      	ldr	r3, [r4, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80b8 	beq.w	80020d0 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_ENABLE();
 8001f60:	4aa4      	ldr	r2, [pc, #656]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f6a:	f7fe fb63 	bl	8000634 <HAL_GetTick>
 8001f6e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f70:	4ba0      	ldr	r3, [pc, #640]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f013 0f02 	tst.w	r3, #2
 8001f78:	f040 8097 	bne.w	80020aa <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f7c:	f7fe fb5a 	bl	8000634 <HAL_GetTick>
 8001f80:	1bc0      	subs	r0, r0, r7
 8001f82:	2802      	cmp	r0, #2
 8001f84:	d9f4      	bls.n	8001f70 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e2e9      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f8a:	2e01      	cmp	r6, #1
 8001f8c:	d1e4      	bne.n	8001f58 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f8e:	4b99      	ldr	r3, [pc, #612]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f013 0f02 	tst.w	r3, #2
 8001f96:	d003      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x70>
 8001f98:	69a3      	ldr	r3, [r4, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 82d6 	beq.w	800254c <HAL_RCC_OscConfig+0x61c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fa0:	6a20      	ldr	r0, [r4, #32]
 8001fa2:	4b94      	ldr	r3, [pc, #592]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f013 0f08 	tst.w	r3, #8
 8001faa:	d05e      	beq.n	800206a <HAL_RCC_OscConfig+0x13a>
 8001fac:	4b91      	ldr	r3, [pc, #580]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb4:	4298      	cmp	r0, r3
 8001fb6:	d95f      	bls.n	8002078 <HAL_RCC_OscConfig+0x148>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb8:	f7ff ff18 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	f040 82c7 	bne.w	8002550 <HAL_RCC_OscConfig+0x620>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	4b8c      	ldr	r3, [pc, #560]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	f042 0208 	orr.w	r2, r2, #8
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fd2:	6a21      	ldr	r1, [r4, #32]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001fde:	69e1      	ldr	r1, [r4, #28]
 8001fe0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fe4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe6:	f7ff ff49 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001fea:	4b82      	ldr	r3, [pc, #520]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ff2:	4a81      	ldr	r2, [pc, #516]	; (80021f8 <HAL_RCC_OscConfig+0x2c8>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	40d8      	lsrs	r0, r3
 8001ffc:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <HAL_RCC_OscConfig+0x2cc>)
 8001ffe:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002000:	4b7f      	ldr	r3, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x2d0>)
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	f7fe fad2 	bl	80005ac <HAL_InitTick>
        if(status != HAL_OK)
 8002008:	4603      	mov	r3, r0
 800200a:	2800      	cmp	r0, #0
 800200c:	f040 82a7 	bne.w	800255e <HAL_RCC_OscConfig+0x62e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	f013 0f01 	tst.w	r3, #1
 8002016:	d07a      	beq.n	800210e <HAL_RCC_OscConfig+0x1de>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002018:	2d08      	cmp	r5, #8
 800201a:	d06f      	beq.n	80020fc <HAL_RCC_OscConfig+0x1cc>
 800201c:	2d0c      	cmp	r5, #12
 800201e:	d06b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	6863      	ldr	r3, [r4, #4]
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002026:	f000 8091 	beq.w	800214c <HAL_RCC_OscConfig+0x21c>
 800202a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800202e:	f000 8093 	beq.w	8002158 <HAL_RCC_OscConfig+0x228>
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002042:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	6863      	ldr	r3, [r4, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8093 	beq.w	8002172 <HAL_RCC_OscConfig+0x242>
        tickstart = HAL_GetTick();
 800204c:	f7fe faf2 	bl	8000634 <HAL_GetTick>
 8002050:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002052:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800205a:	d158      	bne.n	800210e <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7fe faea 	bl	8000634 <HAL_GetTick>
 8002060:	1bc0      	subs	r0, r0, r7
 8002062:	2864      	cmp	r0, #100	; 0x64
 8002064:	d9f5      	bls.n	8002052 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e279      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800206a:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 800206c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002076:	e79d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x84>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002078:	4b5e      	ldr	r3, [pc, #376]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	f042 0208 	orr.w	r2, r2, #8
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002088:	6a21      	ldr	r1, [r4, #32]
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002094:	69e1      	ldr	r1, [r4, #28]
 8002096:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800209a:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800209c:	6a20      	ldr	r0, [r4, #32]
 800209e:	f7ff fea5 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d09f      	beq.n	8001fe6 <HAL_RCC_OscConfig+0xb6>
            return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e259      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020aa:	4b52      	ldr	r3, [pc, #328]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f042 0208 	orr.w	r2, r2, #8
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020ba:	6a21      	ldr	r1, [r4, #32]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80020c6:	69e1      	ldr	r1, [r4, #28]
 80020c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	e79f      	b.n	8002010 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_MSI_DISABLE();
 80020d0:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020da:	f7fe faab 	bl	8000634 <HAL_GetTick>
 80020de:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e0:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f013 0f02 	tst.w	r3, #2
 80020e8:	d092      	beq.n	8002010 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ea:	f7fe faa3 	bl	8000634 <HAL_GetTick>
 80020ee:	1bc0      	subs	r0, r0, r7
 80020f0:	2802      	cmp	r0, #2
 80020f2:	d9f5      	bls.n	80020e0 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e232      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020f8:	2e03      	cmp	r6, #3
 80020fa:	d191      	bne.n	8002020 <HAL_RCC_OscConfig+0xf0>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002104:	d003      	beq.n	800210e <HAL_RCC_OscConfig+0x1de>
 8002106:	6863      	ldr	r3, [r4, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8223 	beq.w	8002554 <HAL_RCC_OscConfig+0x624>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	f013 0f02 	tst.w	r3, #2
 8002114:	d04f      	beq.n	80021b6 <HAL_RCC_OscConfig+0x286>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002116:	2d04      	cmp	r5, #4
 8002118:	d03c      	beq.n	8002194 <HAL_RCC_OscConfig+0x264>
 800211a:	2d0c      	cmp	r5, #12
 800211c:	d038      	beq.n	8002190 <HAL_RCC_OscConfig+0x260>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211e:	68e3      	ldr	r3, [r4, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d078      	beq.n	8002216 <HAL_RCC_OscConfig+0x2e6>
        __HAL_RCC_HSI_ENABLE();
 8002124:	4a33      	ldr	r2, [pc, #204]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8002126:	6813      	ldr	r3, [r2, #0]
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800212e:	f7fe fa81 	bl	8000634 <HAL_GetTick>
 8002132:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800213c:	d162      	bne.n	8002204 <HAL_RCC_OscConfig+0x2d4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213e:	f7fe fa79 	bl	8000634 <HAL_GetTick>
 8002142:	1b80      	subs	r0, r0, r6
 8002144:	2802      	cmp	r0, #2
 8002146:	d9f5      	bls.n	8002134 <HAL_RCC_OscConfig+0x204>
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e208      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214c:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 800214e:	6813      	ldr	r3, [r2, #0]
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e775      	b.n	8002044 <HAL_RCC_OscConfig+0x114>
 8002158:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800215c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e768      	b.n	8002044 <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 8002172:	f7fe fa5f 	bl	8000634 <HAL_GetTick>
 8002176:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002178:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002180:	d0c5      	beq.n	800210e <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002182:	f7fe fa57 	bl	8000634 <HAL_GetTick>
 8002186:	1bc0      	subs	r0, r0, r7
 8002188:	2864      	cmp	r0, #100	; 0x64
 800218a:	d9f5      	bls.n	8002178 <HAL_RCC_OscConfig+0x248>
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1e6      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002190:	2e02      	cmp	r6, #2
 8002192:	d1c4      	bne.n	800211e <HAL_RCC_OscConfig+0x1ee>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_OscConfig+0x276>
 800219e:	68e3      	ldr	r3, [r4, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 81d9 	beq.w	8002558 <HAL_RCC_OscConfig+0x628>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 80021a8:	6853      	ldr	r3, [r2, #4]
 80021aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021ae:	6921      	ldr	r1, [r4, #16]
 80021b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80021b4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	f013 0f08 	tst.w	r3, #8
 80021bc:	d056      	beq.n	800226c <HAL_RCC_OscConfig+0x33c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021be:	6963      	ldr	r3, [r4, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d03c      	beq.n	800223e <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 80021c4:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 80021c6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80021d2:	f7fe fa2f 	bl	8000634 <HAL_GetTick>
 80021d6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_OscConfig+0x2c4>)
 80021da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021de:	f013 0f02 	tst.w	r3, #2
 80021e2:	d143      	bne.n	800226c <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7fe fa26 	bl	8000634 <HAL_GetTick>
 80021e8:	1b80      	subs	r0, r0, r6
 80021ea:	2802      	cmp	r0, #2
 80021ec:	d9f4      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2a8>
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1b5      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	0800809c 	.word	0x0800809c
 80021fc:	20000008 	.word	0x20000008
 8002200:	20000004 	.word	0x20000004
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4ab6      	ldr	r2, [pc, #728]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002206:	6853      	ldr	r3, [r2, #4]
 8002208:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800220c:	6921      	ldr	r1, [r4, #16]
 800220e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002212:	6053      	str	r3, [r2, #4]
 8002214:	e7cf      	b.n	80021b6 <HAL_RCC_OscConfig+0x286>
        __HAL_RCC_HSI_DISABLE();
 8002216:	4ab2      	ldr	r2, [pc, #712]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002218:	6813      	ldr	r3, [r2, #0]
 800221a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800221e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002220:	f7fe fa08 	bl	8000634 <HAL_GetTick>
 8002224:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002226:	4bae      	ldr	r3, [pc, #696]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800222e:	d0c2      	beq.n	80021b6 <HAL_RCC_OscConfig+0x286>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe fa00 	bl	8000634 <HAL_GetTick>
 8002234:	1b80      	subs	r0, r0, r6
 8002236:	2802      	cmp	r0, #2
 8002238:	d9f5      	bls.n	8002226 <HAL_RCC_OscConfig+0x2f6>
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e18f      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_LSI_DISABLE();
 800223e:	4aa8      	ldr	r2, [pc, #672]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002240:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800224c:	f7fe f9f2 	bl	8000634 <HAL_GetTick>
 8002250:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002252:	4ba3      	ldr	r3, [pc, #652]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002258:	f013 0f02 	tst.w	r3, #2
 800225c:	d006      	beq.n	800226c <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe f9e9 	bl	8000634 <HAL_GetTick>
 8002262:	1b80      	subs	r0, r0, r6
 8002264:	2802      	cmp	r0, #2
 8002266:	d9f4      	bls.n	8002252 <HAL_RCC_OscConfig+0x322>
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e178      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	f013 0f04 	tst.w	r3, #4
 8002272:	d07a      	beq.n	800236a <HAL_RCC_OscConfig+0x43a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002274:	4b9a      	ldr	r3, [pc, #616]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800227c:	d10b      	bne.n	8002296 <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b98      	ldr	r3, [pc, #608]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002280:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002282:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002286:	659a      	str	r2, [r3, #88]	; 0x58
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002292:	2601      	movs	r6, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x368>
    FlagStatus       pwrclkchanged = RESET;
 8002296:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002298:	4b92      	ldr	r3, [pc, #584]	; (80024e4 <HAL_RCC_OscConfig+0x5b4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022a0:	d026      	beq.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a2:	68a3      	ldr	r3, [r4, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d037      	beq.n	8002318 <HAL_RCC_OscConfig+0x3e8>
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d03d      	beq.n	8002328 <HAL_RCC_OscConfig+0x3f8>
 80022ac:	4b8c      	ldr	r3, [pc, #560]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 80022ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80022ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022be:	f022 0204 	bic.w	r2, r2, #4
 80022c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c6:	68a3      	ldr	r3, [r4, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d03b      	beq.n	8002344 <HAL_RCC_OscConfig+0x414>
      tickstart = HAL_GetTick();
 80022cc:	f7fe f9b2 	bl	8000634 <HAL_GetTick>
 80022d0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	4b83      	ldr	r3, [pc, #524]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f013 0f02 	tst.w	r3, #2
 80022dc:	d144      	bne.n	8002368 <HAL_RCC_OscConfig+0x438>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe f9a9 	bl	8000634 <HAL_GetTick>
 80022e2:	1bc0      	subs	r0, r0, r7
 80022e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80022e8:	4298      	cmp	r0, r3
 80022ea:	d9f2      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e136      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f0:	4a7c      	ldr	r2, [pc, #496]	; (80024e4 <HAL_RCC_OscConfig+0x5b4>)
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022fa:	f7fe f99b 	bl	8000634 <HAL_GetTick>
 80022fe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002300:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <HAL_RCC_OscConfig+0x5b4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002308:	d1cb      	bne.n	80022a2 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe f993 	bl	8000634 <HAL_GetTick>
 800230e:	1bc0      	subs	r0, r0, r7
 8002310:	2802      	cmp	r0, #2
 8002312:	d9f5      	bls.n	8002300 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e122      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	4a71      	ldr	r2, [pc, #452]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 800231a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002326:	e7ce      	b.n	80022c6 <HAL_RCC_OscConfig+0x396>
 8002328:	4b6d      	ldr	r3, [pc, #436]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 800232a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800232e:	f042 0204 	orr.w	r2, r2, #4
 8002332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002336:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002342:	e7c0      	b.n	80022c6 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002344:	f7fe f976 	bl	8000634 <HAL_GetTick>
 8002348:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800234a:	4b65      	ldr	r3, [pc, #404]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	f013 0f02 	tst.w	r3, #2
 8002354:	d008      	beq.n	8002368 <HAL_RCC_OscConfig+0x438>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe f96d 	bl	8000634 <HAL_GetTick>
 800235a:	1bc0      	subs	r0, r0, r7
 800235c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002360:	4298      	cmp	r0, r3
 8002362:	d9f2      	bls.n	800234a <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0fa      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
    if(pwrclkchanged == SET)
 8002368:	b9e6      	cbnz	r6, 80023a4 <HAL_RCC_OscConfig+0x474>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	f013 0f20 	tst.w	r3, #32
 8002370:	d035      	beq.n	80023de <HAL_RCC_OscConfig+0x4ae>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002374:	b1e3      	cbz	r3, 80023b0 <HAL_RCC_OscConfig+0x480>
      __HAL_RCC_HSI48_ENABLE();
 8002376:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002378:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002384:	f7fe f956 	bl	8000634 <HAL_GetTick>
 8002388:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800238a:	4b55      	ldr	r3, [pc, #340]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 800238c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002390:	f013 0f02 	tst.w	r3, #2
 8002394:	d123      	bne.n	80023de <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002396:	f7fe f94d 	bl	8000634 <HAL_GetTick>
 800239a:	1b80      	subs	r0, r0, r6
 800239c:	2802      	cmp	r0, #2
 800239e:	d9f4      	bls.n	800238a <HAL_RCC_OscConfig+0x45a>
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0dc      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 80023a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
 80023ae:	e7dc      	b.n	800236a <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSI48_DISABLE();
 80023b0:	4a4b      	ldr	r2, [pc, #300]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 80023b2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80023be:	f7fe f939 	bl	8000634 <HAL_GetTick>
 80023c2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c4:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 80023c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ca:	f013 0f02 	tst.w	r3, #2
 80023ce:	d006      	beq.n	80023de <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d0:	f7fe f930 	bl	8000634 <HAL_GetTick>
 80023d4:	1b80      	subs	r0, r0, r6
 80023d6:	2802      	cmp	r0, #2
 80023d8:	d9f4      	bls.n	80023c4 <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e0bf      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80bb 	beq.w	800255c <HAL_RCC_OscConfig+0x62c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e6:	2d0c      	cmp	r5, #12
 80023e8:	d06f      	beq.n	80024ca <HAL_RCC_OscConfig+0x59a>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d023      	beq.n	8002436 <HAL_RCC_OscConfig+0x506>
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b3c      	ldr	r3, [pc, #240]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80023f6:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 80023fe:	d104      	bne.n	800240a <HAL_RCC_OscConfig+0x4da>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002400:	4a37      	ldr	r2, [pc, #220]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002402:	68d3      	ldr	r3, [r2, #12]
 8002404:	f023 0303 	bic.w	r3, r3, #3
 8002408:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800240a:	4a35      	ldr	r2, [pc, #212]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 800240c:	68d3      	ldr	r3, [r2, #12]
 800240e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002418:	f7fe f90c 	bl	8000634 <HAL_GetTick>
 800241c:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002426:	d04e      	beq.n	80024c6 <HAL_RCC_OscConfig+0x596>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe f904 	bl	8000634 <HAL_GetTick>
 800242c:	1b00      	subs	r0, r0, r4
 800242e:	2802      	cmp	r0, #2
 8002430:	d9f5      	bls.n	800241e <HAL_RCC_OscConfig+0x4ee>
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e093      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_PLL_DISABLE();
 8002436:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002438:	6813      	ldr	r3, [r2, #0]
 800243a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800243e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002440:	f7fe f8f8 	bl	8000634 <HAL_GetTick>
 8002444:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800244e:	d006      	beq.n	800245e <HAL_RCC_OscConfig+0x52e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe f8f0 	bl	8000634 <HAL_GetTick>
 8002454:	1b40      	subs	r0, r0, r5
 8002456:	2802      	cmp	r0, #2
 8002458:	d9f5      	bls.n	8002446 <HAL_RCC_OscConfig+0x516>
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e07f      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245e:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 8002460:	68d3      	ldr	r3, [r2, #12]
 8002462:	4921      	ldr	r1, [pc, #132]	; (80024e8 <HAL_RCC_OscConfig+0x5b8>)
 8002464:	4019      	ands	r1, r3
 8002466:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002468:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800246a:	3801      	subs	r0, #1
 800246c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002470:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002472:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002476:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002478:	0840      	lsrs	r0, r0, #1
 800247a:	3801      	subs	r0, #1
 800247c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002480:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002482:	0840      	lsrs	r0, r0, #1
 8002484:	3801      	subs	r0, #1
 8002486:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800248a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800248c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8002490:	430b      	orrs	r3, r1
 8002492:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8002494:	6813      	ldr	r3, [r2, #0]
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800249c:	68d3      	ldr	r3, [r2, #12]
 800249e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80024a4:	f7fe f8c6 	bl	8000634 <HAL_GetTick>
 80024a8:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x592>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe f8be 	bl	8000634 <HAL_GetTick>
 80024b8:	1b00      	subs	r0, r0, r4
 80024ba:	2802      	cmp	r0, #2
 80024bc:	d9f5      	bls.n	80024aa <HAL_RCC_OscConfig+0x57a>
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04d      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e04b      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
 80024c6:	2300      	movs	r3, #0
 80024c8:	e049      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d04a      	beq.n	8002564 <HAL_RCC_OscConfig+0x634>
        pll_config = RCC->PLLCFGR;
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <HAL_RCC_OscConfig+0x5b0>)
 80024d0:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	f003 0103 	and.w	r1, r3, #3
 80024d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024d8:	4291      	cmp	r1, r2
 80024da:	d007      	beq.n	80024ec <HAL_RCC_OscConfig+0x5bc>
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e03e      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40007000 	.word	0x40007000
 80024e8:	019d808c 	.word	0x019d808c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80024f2:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x5ce>
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e02f      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002502:	6b61      	ldr	r1, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002504:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x5de>
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e027      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800250e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002512:	6ba1      	ldr	r1, [r4, #56]	; 0x38
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002514:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x5ee>
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e01f      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002522:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002524:	0852      	lsrs	r2, r2, #1
 8002526:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002528:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x602>
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002532:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002536:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002538:	0852      	lsrs	r2, r2, #1
 800253a:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002540:	d012      	beq.n	8002568 <HAL_RCC_OscConfig+0x638>
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00b      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	4770      	bx	lr
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e006      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e004      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e002      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	b003      	add	sp, #12
 8002562:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e7fa      	b.n	800255e <HAL_RCC_OscConfig+0x62e>
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e7f8      	b.n	800255e <HAL_RCC_OscConfig+0x62e>

0800256c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800256c:	2800      	cmp	r0, #0
 800256e:	f000 809b 	beq.w	80026a8 <HAL_RCC_ClockConfig+0x13c>
{
 8002572:	b570      	push	{r4, r5, r6, lr}
 8002574:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002576:	4b4e      	ldr	r3, [pc, #312]	; (80026b0 <HAL_RCC_ClockConfig+0x144>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	428b      	cmp	r3, r1
 8002580:	d20c      	bcs.n	800259c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <HAL_RCC_ClockConfig+0x144>)
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	430b      	orrs	r3, r1
 800258c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	428b      	cmp	r3, r1
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002598:	2001      	movs	r0, #1
}
 800259a:	bd70      	pop	{r4, r5, r6, pc}
 800259c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	f013 0f01 	tst.w	r3, #1
 80025a4:	d039      	beq.n	800261a <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	6863      	ldr	r3, [r4, #4]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d009      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d026      	beq.n	80025fe <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025b0:	bb63      	cbnz	r3, 800260c <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b2:	4a40      	ldr	r2, [pc, #256]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	f012 0f02 	tst.w	r2, #2
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80025bc:	2001      	movs	r0, #1
 80025be:	e7ec      	b.n	800259a <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c0:	4a3c      	ldr	r2, [pc, #240]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80025c8:	d070      	beq.n	80026ac <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	493a      	ldr	r1, [pc, #232]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 80025cc:	688a      	ldr	r2, [r1, #8]
 80025ce:	f022 0203 	bic.w	r2, r2, #3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025d6:	f7fe f82d 	bl	8000634 <HAL_GetTick>
 80025da:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025dc:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	6862      	ldr	r2, [r4, #4]
 80025e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025ea:	d016      	beq.n	800261a <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe f822 	bl	8000634 <HAL_GetTick>
 80025f0:	1b80      	subs	r0, r0, r6
 80025f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80025f6:	4298      	cmp	r0, r3
 80025f8:	d9f0      	bls.n	80025dc <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 80025fa:	2003      	movs	r0, #3
 80025fc:	e7cd      	b.n	800259a <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fe:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002606:	d1e0      	bne.n	80025ca <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002608:	2001      	movs	r0, #1
 800260a:	e7c6      	b.n	800259a <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800260c:	4a29      	ldr	r2, [pc, #164]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002614:	d1d9      	bne.n	80025ca <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002616:	2001      	movs	r0, #1
 8002618:	e7bf      	b.n	800259a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	f013 0f02 	tst.w	r3, #2
 8002620:	d006      	beq.n	8002630 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002622:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 8002624:	6893      	ldr	r3, [r2, #8]
 8002626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800262a:	68a1      	ldr	r1, [r4, #8]
 800262c:	430b      	orrs	r3, r1
 800262e:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_RCC_ClockConfig+0x144>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	42ab      	cmp	r3, r5
 800263a:	d90c      	bls.n	8002656 <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263c:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <HAL_RCC_ClockConfig+0x144>)
 800263e:	6813      	ldr	r3, [r2, #0]
 8002640:	f023 0307 	bic.w	r3, r3, #7
 8002644:	432b      	orrs	r3, r5
 8002646:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002648:	6813      	ldr	r3, [r2, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	42ab      	cmp	r3, r5
 8002650:	d001      	beq.n	8002656 <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8002652:	2001      	movs	r0, #1
 8002654:	e7a1      	b.n	800259a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	f013 0f04 	tst.w	r3, #4
 800265c:	d006      	beq.n	800266c <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265e:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 8002660:	6893      	ldr	r3, [r2, #8]
 8002662:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002666:	68e1      	ldr	r1, [r4, #12]
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	f013 0f08 	tst.w	r3, #8
 8002672:	d007      	beq.n	8002684 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002674:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 8002676:	6893      	ldr	r3, [r2, #8]
 8002678:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800267c:	6921      	ldr	r1, [r4, #16]
 800267e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002682:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002684:	f7ff fbfa 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_ClockConfig+0x148>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002690:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x14c>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	40d8      	lsrs	r0, r3
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_RCC_ClockConfig+0x150>)
 800269c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_ClockConfig+0x154>)
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f7fd ff83 	bl	80005ac <HAL_InitTick>
  return status;
 80026a6:	e778      	b.n	800259a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
}
 80026aa:	4770      	bx	lr
        return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e774      	b.n	800259a <HAL_RCC_ClockConfig+0x2e>
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	0800809c 	.word	0x0800809c
 80026bc:	20000008 	.word	0x20000008
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetHCLKFreq>:
}
 80026c4:	4b01      	ldr	r3, [pc, #4]	; (80026cc <HAL_RCC_GetHCLKFreq+0x8>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000008 	.word	0x20000008

080026d0 <HAL_RCC_GetPCLK1Freq>:
{
 80026d0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026d2:	f7ff fff7 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	f003 031f 	and.w	r3, r3, #31
}
 80026e6:	40d8      	lsrs	r0, r3
 80026e8:	bd08      	pop	{r3, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080080ac 	.word	0x080080ac

080026f4 <HAL_RCC_GetPCLK2Freq>:
{
 80026f4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f6:	f7ff ffe5 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	f003 031f 	and.w	r3, r3, #31
}
 800270a:	40d8      	lsrs	r0, r3
 800270c:	bd08      	pop	{r3, pc}
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	080080ac 	.word	0x080080ac

08002718 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8002718:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800271c:	d028      	beq.n	8002770 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800271e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002722:	d02f      	beq.n	8002784 <RCCEx_GetSAIxPeriphCLKFreq+0x6c>
  uint32_t srcclk = 0U;
 8002724:	2000      	movs	r0, #0
  if(frequency == 0U)
  {
    pllvco = InputFrequency;

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8002726:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800272a:	d035      	beq.n	8002798 <RCCEx_GetSAIxPeriphCLKFreq+0x80>
 800272c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8002730:	d032      	beq.n	8002798 <RCCEx_GetSAIxPeriphCLKFreq+0x80>
          }
        }
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8002732:	2800      	cmp	r0, #0
 8002734:	d151      	bne.n	80027da <RCCEx_GetSAIxPeriphCLKFreq+0xc2>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8002736:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800273e:	d076      	beq.n	800282e <RCCEx_GetSAIxPeriphCLKFreq+0x116>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 8002742:	68d8      	ldr	r0, [r3, #12]
 8002744:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8002748:	3001      	adds	r0, #1
 800274a:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800274e:	6918      	ldr	r0, [r3, #16]
 8002750:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8002754:	691b      	ldr	r3, [r3, #16]
#endif
        if(pllp == 0U)
 8002756:	0edb      	lsrs	r3, r3, #27
 8002758:	d105      	bne.n	8002766 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002762:	d138      	bne.n	80027d6 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 8002764:	2307      	movs	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 8002766:	fb00 f001 	mul.w	r0, r0, r1
 800276a:	fbb0 f0f3 	udiv	r0, r0, r3
 800276e:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8002770:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 8002772:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002776:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800277a:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 800277e:	d1d2      	bne.n	8002726 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8002780:	482c      	ldr	r0, [pc, #176]	; (8002834 <RCCEx_GetSAIxPeriphCLKFreq+0x11c>)
 8002782:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 8002786:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800278a:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800278e:	f1b0 7f40 	cmp.w	r0, #50331648	; 0x3000000
 8002792:	d1c8      	bne.n	8002726 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8002794:	4827      	ldr	r0, [pc, #156]	; (8002834 <RCCEx_GetSAIxPeriphCLKFreq+0x11c>)
 8002796:	4770      	bx	lr
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80027a0:	d042      	beq.n	8002828 <RCCEx_GetSAIxPeriphCLKFreq+0x110>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 80027a4:	68d8      	ldr	r0, [r3, #12]
 80027a6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80027aa:	3001      	adds	r0, #1
 80027ac:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80027b0:	68d8      	ldr	r0, [r3, #12]
 80027b2:	f3c0 2006 	ubfx	r0, r0, #8, #7
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80027b6:	68db      	ldr	r3, [r3, #12]
        if(pllp == 0U)
 80027b8:	0edb      	lsrs	r3, r3, #27
 80027ba:	d105      	bne.n	80027c8 <RCCEx_GetSAIxPeriphCLKFreq+0xb0>
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80027bc:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027c4:	d105      	bne.n	80027d2 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
            pllp = 7U;
 80027c6:	2307      	movs	r3, #7
        frequency = (pllvco * plln) / pllp;
 80027c8:	fb00 f001 	mul.w	r0, r0, r1
 80027cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80027d0:	4770      	bx	lr
            pllp = 17U;
 80027d2:	2311      	movs	r3, #17
 80027d4:	e7f8      	b.n	80027c8 <RCCEx_GetSAIxPeriphCLKFreq+0xb0>
            pllp = 17U;
 80027d6:	2311      	movs	r3, #17
 80027d8:	e7c5      	b.n	8002766 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80027da:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80027de:	d004      	beq.n	80027ea <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
 80027e0:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80027e4:	d001      	beq.n	80027ea <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
 80027e6:	2000      	movs	r0, #0
 80027e8:	4770      	bx	lr
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80027f2:	d01b      	beq.n	800282c <RCCEx_GetSAIxPeriphCLKFreq+0x114>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 80027f6:	68d8      	ldr	r0, [r3, #12]
 80027f8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80027fc:	3001      	adds	r0, #1
 80027fe:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002802:	6958      	ldr	r0, [r3, #20]
 8002804:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8002808:	695b      	ldr	r3, [r3, #20]
#endif
        if(pllp == 0U)
 800280a:	0edb      	lsrs	r3, r3, #27
 800280c:	d105      	bne.n	800281a <RCCEx_GetSAIxPeriphCLKFreq+0x102>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <RCCEx_GetSAIxPeriphCLKFreq+0x118>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002816:	d005      	beq.n	8002824 <RCCEx_GetSAIxPeriphCLKFreq+0x10c>
          {
            pllp = 17U;
 8002818:	2311      	movs	r3, #17
          else
          {
            pllp = 7U;
          }
        }
        frequency = (pllvco * plln) / pllp;
 800281a:	fb00 f001 	mul.w	r0, r0, r1
 800281e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002822:	4770      	bx	lr
            pllp = 7U;
 8002824:	2307      	movs	r3, #7
 8002826:	e7f8      	b.n	800281a <RCCEx_GetSAIxPeriphCLKFreq+0x102>
 8002828:	2000      	movs	r0, #0
 800282a:	4770      	bx	lr
 800282c:	2000      	movs	r0, #0
    }
  }


  return frequency;
}
 800282e:	4770      	bx	lr
 8002830:	40021000 	.word	0x40021000
 8002834:	001fff68 	.word	0x001fff68

08002838 <RCCEx_PLLSAI1_Config>:
{
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800283a:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f013 0f03 	tst.w	r3, #3
 8002842:	d018      	beq.n	8002876 <RCCEx_PLLSAI1_Config+0x3e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	6802      	ldr	r2, [r0, #0]
 800284e:	4293      	cmp	r3, r2
 8002850:	d002      	beq.n	8002858 <RCCEx_PLLSAI1_Config+0x20>
 8002852:	2501      	movs	r5, #1
}
 8002854:	4628      	mov	r0, r5
 8002856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002858:	2a00      	cmp	r2, #0
 800285a:	f000 809f 	beq.w	800299c <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800285e:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002866:	3301      	adds	r3, #1
 8002868:	6842      	ldr	r2, [r0, #4]
       ||
 800286a:	4293      	cmp	r3, r2
 800286c:	d001      	beq.n	8002872 <RCCEx_PLLSAI1_Config+0x3a>
 800286e:	2501      	movs	r5, #1
 8002870:	e7f0      	b.n	8002854 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	2500      	movs	r5, #0
 8002874:	e01a      	b.n	80028ac <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 8002876:	6803      	ldr	r3, [r0, #0]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d058      	beq.n	800292e <RCCEx_PLLSAI1_Config+0xf6>
 800287c:	2b03      	cmp	r3, #3
 800287e:	d05d      	beq.n	800293c <RCCEx_PLLSAI1_Config+0x104>
 8002880:	2b01      	cmp	r3, #1
 8002882:	d001      	beq.n	8002888 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 8002884:	2501      	movs	r5, #1
 8002886:	e00f      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002888:	4a45      	ldr	r2, [pc, #276]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	f012 0f02 	tst.w	r2, #2
 8002890:	d060      	beq.n	8002954 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002892:	4d43      	ldr	r5, [pc, #268]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 8002894:	68ea      	ldr	r2, [r5, #12]
 8002896:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800289a:	6844      	ldr	r4, [r0, #4]
 800289c:	3c01      	subs	r4, #1
 800289e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60eb      	str	r3, [r5, #12]
 80028a6:	2500      	movs	r5, #0
  if(status == HAL_OK)
 80028a8:	2d00      	cmp	r5, #0
 80028aa:	d1d3      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1c>
 80028ac:	460f      	mov	r7, r1
 80028ae:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80028b0:	4a3b      	ldr	r2, [pc, #236]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80028ba:	f7fd febb 	bl	8000634 <HAL_GetTick>
 80028be:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028c0:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80028c8:	d005      	beq.n	80028d6 <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028ca:	f7fd feb3 	bl	8000634 <HAL_GetTick>
 80028ce:	1b80      	subs	r0, r0, r6
 80028d0:	2802      	cmp	r0, #2
 80028d2:	d9f5      	bls.n	80028c0 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 80028d4:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80028d6:	2d00      	cmp	r5, #0
 80028d8:	d1bc      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 80028da:	2f00      	cmp	r7, #0
 80028dc:	d13c      	bne.n	8002958 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028de:	4930      	ldr	r1, [pc, #192]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 80028e0:	690b      	ldr	r3, [r1, #16]
 80028e2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ea:	68a0      	ldr	r0, [r4, #8]
 80028ec:	68e2      	ldr	r2, [r4, #12]
 80028ee:	06d2      	lsls	r2, r2, #27
 80028f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80028f4:	4313      	orrs	r3, r2
 80028f6:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80028f8:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002900:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002902:	f7fd fe97 	bl	8000634 <HAL_GetTick>
 8002906:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002910:	d105      	bne.n	800291e <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002912:	f7fd fe8f 	bl	8000634 <HAL_GetTick>
 8002916:	1b80      	subs	r0, r0, r6
 8002918:	2802      	cmp	r0, #2
 800291a:	d9f5      	bls.n	8002908 <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 800291c:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800291e:	2d00      	cmp	r5, #0
 8002920:	d198      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 8002924:	6913      	ldr	r3, [r2, #16]
 8002926:	69a1      	ldr	r1, [r4, #24]
 8002928:	430b      	orrs	r3, r1
 800292a:	6113      	str	r3, [r2, #16]
 800292c:	e792      	b.n	8002854 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002936:	d1ac      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 8002938:	2501      	movs	r5, #1
 800293a:	e7b5      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800293c:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002944:	d1a5      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002946:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800294e:	d1a0      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 8002950:	2501      	movs	r5, #1
 8002952:	e7a9      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 8002954:	2501      	movs	r5, #1
 8002956:	e7a7      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002958:	2f01      	cmp	r7, #1
 800295a:	d00f      	beq.n	800297c <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800295c:	4810      	ldr	r0, [pc, #64]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 800295e:	6902      	ldr	r2, [r0, #16]
 8002960:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002964:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002968:	68a1      	ldr	r1, [r4, #8]
 800296a:	6963      	ldr	r3, [r4, #20]
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	3b01      	subs	r3, #1
 8002970:	065b      	lsls	r3, r3, #25
 8002972:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002976:	4313      	orrs	r3, r2
 8002978:	6103      	str	r3, [r0, #16]
 800297a:	e7bd      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297c:	4808      	ldr	r0, [pc, #32]	; (80029a0 <RCCEx_PLLSAI1_Config+0x168>)
 800297e:	6902      	ldr	r2, [r0, #16]
 8002980:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002984:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002988:	68a1      	ldr	r1, [r4, #8]
 800298a:	6923      	ldr	r3, [r4, #16]
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	055b      	lsls	r3, r3, #21
 8002992:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002996:	4313      	orrs	r3, r2
 8002998:	6103      	str	r3, [r0, #16]
 800299a:	e7ad      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0xc0>
 800299c:	2501      	movs	r5, #1
 800299e:	e759      	b.n	8002854 <RCCEx_PLLSAI1_Config+0x1c>
 80029a0:	40021000 	.word	0x40021000

080029a4 <RCCEx_PLLSAI2_Config>:
{
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a6:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f013 0f03 	tst.w	r3, #3
 80029ae:	d018      	beq.n	80029e2 <RCCEx_PLLSAI2_Config+0x3e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029b0:	4b4d      	ldr	r3, [pc, #308]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	6802      	ldr	r2, [r0, #0]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d002      	beq.n	80029c4 <RCCEx_PLLSAI2_Config+0x20>
 80029be:	2501      	movs	r5, #1
}
 80029c0:	4628      	mov	r0, r5
 80029c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80029c4:	2a00      	cmp	r2, #0
 80029c6:	f000 808d 	beq.w	8002ae4 <RCCEx_PLLSAI2_Config+0x140>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	6842      	ldr	r2, [r0, #4]
       ||
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d001      	beq.n	80029de <RCCEx_PLLSAI2_Config+0x3a>
 80029da:	2501      	movs	r5, #1
 80029dc:	e7f0      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80029de:	2500      	movs	r5, #0
 80029e0:	e01a      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0x74>
    switch(PllSai2->PLLSAI2Source)
 80029e2:	6803      	ldr	r3, [r0, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d058      	beq.n	8002a9a <RCCEx_PLLSAI2_Config+0xf6>
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d05d      	beq.n	8002aa8 <RCCEx_PLLSAI2_Config+0x104>
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d001      	beq.n	80029f4 <RCCEx_PLLSAI2_Config+0x50>
      status = HAL_ERROR;
 80029f0:	2501      	movs	r5, #1
 80029f2:	e00f      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029f4:	4a3c      	ldr	r2, [pc, #240]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	f012 0f02 	tst.w	r2, #2
 80029fc:	d060      	beq.n	8002ac0 <RCCEx_PLLSAI2_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029fe:	4d3a      	ldr	r5, [pc, #232]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002a00:	68ea      	ldr	r2, [r5, #12]
 8002a02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002a06:	6844      	ldr	r4, [r0, #4]
 8002a08:	3c01      	subs	r4, #1
 8002a0a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60eb      	str	r3, [r5, #12]
 8002a12:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8002a14:	2d00      	cmp	r5, #0
 8002a16:	d1d3      	bne.n	80029c0 <RCCEx_PLLSAI2_Config+0x1c>
 8002a18:	460f      	mov	r7, r1
 8002a1a:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a1c:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002a1e:	6813      	ldr	r3, [r2, #0]
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002a26:	f7fd fe05 	bl	8000634 <HAL_GetTick>
 8002a2a:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002a34:	d005      	beq.n	8002a42 <RCCEx_PLLSAI2_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a36:	f7fd fdfd 	bl	8000634 <HAL_GetTick>
 8002a3a:	1b80      	subs	r0, r0, r6
 8002a3c:	2802      	cmp	r0, #2
 8002a3e:	d9f5      	bls.n	8002a2c <RCCEx_PLLSAI2_Config+0x88>
        status = HAL_TIMEOUT;
 8002a40:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8002a42:	2d00      	cmp	r5, #0
 8002a44:	d1bc      	bne.n	80029c0 <RCCEx_PLLSAI2_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8002a46:	2f00      	cmp	r7, #0
 8002a48:	d13c      	bne.n	8002ac4 <RCCEx_PLLSAI2_Config+0x120>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a4a:	4927      	ldr	r1, [pc, #156]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002a4c:	694b      	ldr	r3, [r1, #20]
 8002a4e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a56:	68a0      	ldr	r0, [r4, #8]
 8002a58:	68e2      	ldr	r2, [r4, #12]
 8002a5a:	06d2      	lsls	r2, r2, #27
 8002a5c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002a60:	4313      	orrs	r3, r2
 8002a62:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a6e:	f7fd fde1 	bl	8000634 <HAL_GetTick>
 8002a72:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002a7c:	d105      	bne.n	8002a8a <RCCEx_PLLSAI2_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a7e:	f7fd fdd9 	bl	8000634 <HAL_GetTick>
 8002a82:	1b80      	subs	r0, r0, r6
 8002a84:	2802      	cmp	r0, #2
 8002a86:	d9f5      	bls.n	8002a74 <RCCEx_PLLSAI2_Config+0xd0>
          status = HAL_TIMEOUT;
 8002a88:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	d198      	bne.n	80029c0 <RCCEx_PLLSAI2_Config+0x1c>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a8e:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002a90:	6953      	ldr	r3, [r2, #20]
 8002a92:	6961      	ldr	r1, [r4, #20]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6153      	str	r3, [r2, #20]
 8002a98:	e792      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a9a:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002aa2:	d1ac      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0x5a>
        status = HAL_ERROR;
 8002aa4:	2501      	movs	r5, #1
 8002aa6:	e7b5      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002ab0:	d1a5      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002aba:	d1a0      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0x5a>
          status = HAL_ERROR;
 8002abc:	2501      	movs	r5, #1
 8002abe:	e7a9      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x70>
        status = HAL_ERROR;
 8002ac0:	2501      	movs	r5, #1
 8002ac2:	e7a7      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x70>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ac4:	4808      	ldr	r0, [pc, #32]	; (8002ae8 <RCCEx_PLLSAI2_Config+0x144>)
 8002ac6:	6942      	ldr	r2, [r0, #20]
 8002ac8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002acc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002ad0:	68a1      	ldr	r1, [r4, #8]
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	065b      	lsls	r3, r3, #25
 8002ada:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	6143      	str	r3, [r0, #20]
 8002ae2:	e7bf      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0xc0>
 8002ae4:	2501      	movs	r5, #1
 8002ae6:	e76b      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0x1c>
 8002ae8:	40021000 	.word	0x40021000

08002aec <HAL_RCCEx_PeriphCLKConfig>:
{
 8002aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002af4:	6803      	ldr	r3, [r0, #0]
 8002af6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002afa:	d02f      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002afc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b02:	d025      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b04:	d908      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8002b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002b0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b10:	f040 8099 	bne.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b14:	2600      	movs	r6, #0
 8002b16:	e010      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 8094 	bne.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b1e:	2100      	movs	r1, #0
 8002b20:	3004      	adds	r0, #4
 8002b22:	f7ff fe89 	bl	8002838 <RCCEx_PLLSAI1_Config>
 8002b26:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b28:	b13e      	cbz	r6, 8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002b2a:	4637      	mov	r7, r6
 8002b2c:	e018      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b30:	68d3      	ldr	r3, [r2, #12]
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b38:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b40:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b44:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002b46:	430b      	orrs	r3, r1
 8002b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b4c:	2700      	movs	r7, #0
 8002b4e:	e007      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b50:	2100      	movs	r1, #0
 8002b52:	3020      	adds	r0, #32
 8002b54:	f7ff ff26 	bl	80029a4 <RCCEx_PLLSAI2_Config>
 8002b58:	4606      	mov	r6, r0
      break;
 8002b5a:	e7e5      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b5c:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b5e:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002b66:	d015      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002b68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6e:	d07a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002b70:	d96c      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b76:	d070      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002b78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b7c:	d17a      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 8002b7e:	2e00      	cmp	r6, #0
 8002b80:	d17b      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b82:	4a49      	ldr	r2, [pc, #292]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b84:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b88:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002b8c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b9a:	f000 808e 	beq.w	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b9e:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002ba6:	d16a      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002baa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bb0:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002bbc:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc0:	4a3a      	ldr	r2, [pc, #232]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bc2:	6813      	ldr	r3, [r2, #0]
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002bca:	f7fd fd33 	bl	8000634 <HAL_GetTick>
 8002bce:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bd0:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fd fd2b 	bl	8000634 <HAL_GetTick>
 8002bde:	1b40      	subs	r0, r0, r5
 8002be0:	2802      	cmp	r0, #2
 8002be2:	d9f5      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        ret = HAL_TIMEOUT;
 8002be4:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8002be6:	2e00      	cmp	r6, #0
 8002be8:	d162      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bf0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8002bf6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d012      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x138>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c08:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002c0c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002c10:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c14:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002c18:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002c1c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c24:	f013 0f01 	tst.w	r3, #1
 8002c28:	d12c      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      if(ret == HAL_OK)
 8002c2a:	2e00      	cmp	r6, #0
 8002c2c:	f040 8151 	bne.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c44:	e035      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      ret = HAL_ERROR;
 8002c46:	2701      	movs	r7, #1
 8002c48:	463e      	mov	r6, r7
 8002c4a:	e789      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002c4c:	b993      	cbnz	r3, 8002c74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c4e:	2100      	movs	r1, #0
 8002c50:	1d20      	adds	r0, r4, #4
 8002c52:	f7ff fdf1 	bl	8002838 <RCCEx_PLLSAI1_Config>
 8002c56:	4606      	mov	r6, r0
      break;
 8002c58:	e791      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x92>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c5c:	68d3      	ldr	r3, [r2, #12]
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	60d3      	str	r3, [r2, #12]
      break;
 8002c64:	e78b      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c66:	2100      	movs	r1, #0
 8002c68:	f104 0020 	add.w	r0, r4, #32
 8002c6c:	f7ff fe9a 	bl	80029a4 <RCCEx_PLLSAI2_Config>
 8002c70:	4606      	mov	r6, r0
      break;
 8002c72:	e784      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = HAL_ERROR;
 8002c74:	2701      	movs	r7, #1
 8002c76:	463e      	mov	r6, r7
 8002c78:	e78c      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8002c7a:	4637      	mov	r7, r6
 8002c7c:	e78a      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	f04f 0800 	mov.w	r8, #0
 8002c82:	e79d      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8002c84:	f7fd fcd6 	bl	8000634 <HAL_GetTick>
 8002c88:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f013 0f02 	tst.w	r3, #2
 8002c94:	d1c9      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fd fccd 	bl	8000634 <HAL_GetTick>
 8002c9a:	1b40      	subs	r0, r0, r5
 8002c9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ca0:	4298      	cmp	r0, r3
 8002ca2:	d9f2      	bls.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
            ret = HAL_TIMEOUT;
 8002ca4:	2603      	movs	r6, #3
 8002ca6:	e7c0      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
      status = ret;
 8002cb0:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8002cb2:	f1b8 0f00 	cmp.w	r8, #0
 8002cb6:	f040 810e 	bne.w	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	f013 0f01 	tst.w	r3, #1
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc2:	4aa4      	ldr	r2, [pc, #656]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002cc4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cc8:	f023 0303 	bic.w	r3, r3, #3
 8002ccc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	f013 0f02 	tst.w	r3, #2
 8002cda:	d008      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cdc:	4a9d      	ldr	r2, [pc, #628]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002cde:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ce2:	f023 030c 	bic.w	r3, r3, #12
 8002ce6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	f013 0f04 	tst.w	r3, #4
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf6:	4a97      	ldr	r2, [pc, #604]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002cf8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cfc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d00:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002d02:	430b      	orrs	r3, r1
 8002d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	f013 0f08 	tst.w	r3, #8
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d10:	4a90      	ldr	r2, [pc, #576]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	f013 0f10 	tst.w	r3, #16
 8002d28:	d008      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d2a:	4a8a      	ldr	r2, [pc, #552]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002d36:	430b      	orrs	r3, r1
 8002d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	f013 0f20 	tst.w	r3, #32
 8002d42:	d008      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d44:	4a83      	ldr	r2, [pc, #524]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d4a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d4e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002d50:	430b      	orrs	r3, r1
 8002d52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d5e:	4a7d      	ldr	r2, [pc, #500]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d64:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002d68:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d76:	d008      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d78:	4a76      	ldr	r2, [pc, #472]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d7e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d82:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002d84:	430b      	orrs	r3, r1
 8002d86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d92:	4a70      	ldr	r2, [pc, #448]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d94:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002daa:	d008      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dac:	4a69      	ldr	r2, [pc, #420]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002dae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002db2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002db6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002db8:	430b      	orrs	r3, r1
 8002dba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc6:	4a63      	ldr	r2, [pc, #396]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002dc8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002dcc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002dd0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002de0:	4a5c      	ldr	r2, [pc, #368]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002de2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002dec:	430b      	orrs	r3, r1
 8002dee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002df8:	d00f      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dfa:	4a56      	ldr	r2, [pc, #344]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002dfc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e00:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002e04:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002e06:	430b      	orrs	r3, r1
 8002e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e12:	d066      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e18:	d068      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x400>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002e20:	d00f      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x356>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e22:	4a4c      	ldr	r2, [pc, #304]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002e24:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e28:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002e2c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e34:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3a:	d05f      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x410>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e40:	d061      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002e48:	d00f      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e4a:	4a42      	ldr	r2, [pc, #264]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002e4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e50:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002e54:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002e56:	430b      	orrs	r3, r1
 8002e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e5c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e62:	d058      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e68:	d05a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x434>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002e70:	d00f      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e72:	4a38      	ldr	r2, [pc, #224]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002e74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e78:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002e7c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e84:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8a:	d051      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e90:	d056      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002e98:	d009      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e9a:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002e9c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ea0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ea4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002eb4:	d009      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eb6:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002eb8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ec0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002eca:	4638      	mov	r0, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002ed2:	4637      	mov	r7, r6
 8002ed4:	e6ed      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002ed8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee0:	e6eb      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee2:	68d3      	ldr	r3, [r2, #12]
 8002ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee8:	60d3      	str	r3, [r2, #12]
 8002eea:	e796      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eec:	2101      	movs	r1, #1
 8002eee:	1d20      	adds	r0, r4, #4
 8002ef0:	f7ff fca2 	bl	8002838 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	d090      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
          status = ret;
 8002ef8:	4607      	mov	r7, r0
 8002efa:	e78e      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002efc:	68d3      	ldr	r3, [r2, #12]
 8002efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f02:	60d3      	str	r3, [r2, #12]
 8002f04:	e79d      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x356>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f06:	2101      	movs	r1, #1
 8002f08:	1d20      	adds	r0, r4, #4
 8002f0a:	f7ff fc95 	bl	8002838 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d097      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x356>
        status = ret;
 8002f12:	4607      	mov	r7, r0
 8002f14:	e795      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f16:	68d3      	ldr	r3, [r2, #12]
 8002f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1c:	60d3      	str	r3, [r2, #12]
 8002f1e:	e7a4      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f20:	2101      	movs	r1, #1
 8002f22:	1d20      	adds	r0, r4, #4
 8002f24:	f7ff fc88 	bl	8002838 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d09e      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        status = ret;
 8002f2c:	4607      	mov	r7, r0
 8002f2e:	e79c      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f30:	2102      	movs	r1, #2
 8002f32:	1d20      	adds	r0, r4, #4
 8002f34:	f7ff fc80 	bl	8002838 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d0aa      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        status = ret;
 8002f3c:	4607      	mov	r7, r0
 8002f3e:	e7a8      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f40:	2102      	movs	r1, #2
 8002f42:	f104 0020 	add.w	r0, r4, #32
 8002f46:	f7ff fd2d 	bl	80029a4 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d0a1      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        status = ret;
 8002f4e:	4607      	mov	r7, r0
 8002f50:	e79f      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000

08002f58 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8002f58:	b508      	push	{r3, lr}
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002f5a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8002f5e:	d038      	beq.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f60:	4bbb      	ldr	r3, [pc, #748]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d074      	beq.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d079      	beq.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d058      	beq.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      pllvco = 0U;
 8002f74:	2100      	movs	r1, #0
    switch(PeriphClk)
 8002f76:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002f7a:	f000 830b 	beq.w	8003594 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8002f7e:	f200 80cb 	bhi.w	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8002f82:	2810      	cmp	r0, #16
 8002f84:	f000 822b 	beq.w	80033de <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002f88:	f200 808a 	bhi.w	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002f8c:	2802      	cmp	r0, #2
 8002f8e:	f000 81c0 	beq.w	8003312 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8002f92:	d974      	bls.n	800307e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002f94:	2804      	cmp	r0, #4
 8002f96:	f000 81ea 	beq.w	800336e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8002f9a:	2808      	cmp	r0, #8
 8002f9c:	f040 8357 	bne.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002fa0:	4bab      	ldr	r3, [pc, #684]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	f000 820c 	beq.w	80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 8002fb0:	f240 8204 	bls.w	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8002fb4:	2b80      	cmp	r3, #128	; 0x80
 8002fb6:	f000 820a 	beq.w	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8002fba:	2bc0      	cmp	r3, #192	; 0xc0
 8002fbc:	f040 836a 	bne.w	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fc0:	4ba3      	ldr	r3, [pc, #652]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f013 0f02 	tst.w	r3, #2
 8002fca:	f040 8367 	bne.w	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
  uint32_t frequency = 0U;
 8002fce:	2000      	movs	r0, #0
 8002fd0:	e00e      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002fd2:	4b9f      	ldr	r3, [pc, #636]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe0:	d010      	beq.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8002fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe6:	d016      	beq.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8002fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  uint32_t frequency = 0U;
 8002fee:	2000      	movs	r0, #0
}
 8002ff0:	bd08      	pop	{r3, pc}
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ff2:	4b97      	ldr	r3, [pc, #604]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	f013 0f02 	tst.w	r3, #2
 8002ffc:	f040 831f 	bne.w	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
  uint32_t frequency = 0U;
 8003000:	2000      	movs	r0, #0
 8003002:	e7f5      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003004:	4b92      	ldr	r3, [pc, #584]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300a:	f013 0f02 	tst.w	r3, #2
 800300e:	f040 8319 	bne.w	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
  uint32_t frequency = 0U;
 8003012:	2000      	movs	r0, #0
 8003014:	e7ec      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003016:	4b8e      	ldr	r3, [pc, #568]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800301e:	f040 8314 	bne.w	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
  uint32_t frequency = 0U;
 8003022:	2000      	movs	r0, #0
 8003024:	e7e4      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003026:	4b8a      	ldr	r3, [pc, #552]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f013 0f02 	tst.w	r3, #2
 800302e:	d020      	beq.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003030:	4b87      	ldr	r3, [pc, #540]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f013 0f08 	tst.w	r3, #8
 8003038:	d007      	beq.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800303a:	4b85      	ldr	r3, [pc, #532]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003042:	4a84      	ldr	r2, [pc, #528]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003044:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003048:	e795      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800304a:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800304c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003050:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003054:	e7f5      	b.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003056:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
        pllvco = HSI_VALUE;
 8003060:	497d      	ldr	r1, [pc, #500]	; (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003062:	e788      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003064:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800306c:	d005      	beq.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
        pllvco = HSE_VALUE;
 800306e:	497b      	ldr	r1, [pc, #492]	; (800325c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003070:	e781      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
        pllvco = 0U;
 8003072:	2100      	movs	r1, #0
 8003074:	e77f      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
        pllvco = 0U;
 8003076:	2100      	movs	r1, #0
 8003078:	e77d      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
        pllvco = 0U;
 800307a:	2100      	movs	r1, #0
 800307c:	e77b      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
    switch(PeriphClk)
 800307e:	2801      	cmp	r0, #1
 8003080:	f040 82e5 	bne.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003084:	4b72      	ldr	r3, [pc, #456]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800308e:	2b03      	cmp	r3, #3
 8003090:	f200 82eb 	bhi.w	800366a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 8003094:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003098:	01290126 	.word	0x01290126
 800309c:	0134012c 	.word	0x0134012c
    switch(PeriphClk)
 80030a0:	2840      	cmp	r0, #64	; 0x40
 80030a2:	f000 8221 	beq.w	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80030a6:	d918      	bls.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80030a8:	2880      	cmp	r0, #128	; 0x80
 80030aa:	f000 8239 	beq.w	8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 80030ae:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80030b2:	f040 82cc 	bne.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	f000 824d 	beq.w	8003562 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 80030c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030cc:	f000 824c 	beq.w	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8243 	beq.w	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
  uint32_t frequency = 0U;
 80030d6:	2000      	movs	r0, #0
 80030d8:	e78a      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
    switch(PeriphClk)
 80030da:	2820      	cmp	r0, #32
 80030dc:	f040 82b7 	bne.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80030e0:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	f000 81a6 	beq.w	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80030f2:	f240 819e 	bls.w	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80030f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fa:	f000 81a3 	beq.w	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80030fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003102:	f040 82d5 	bne.w	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003106:	4b52      	ldr	r3, [pc, #328]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f013 0f02 	tst.w	r3, #2
 8003110:	f040 82d2 	bne.w	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
  uint32_t frequency = 0U;
 8003114:	2000      	movs	r0, #0
 8003116:	e76b      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
    switch(PeriphClk)
 8003118:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800311c:	f000 819a 	beq.w	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8003120:	d914      	bls.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003122:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8003126:	d041      	beq.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8003128:	d863      	bhi.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800312a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800312e:	f000 8273 	beq.w	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
 8003132:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003136:	f040 828a 	bne.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800313a:	4b45      	ldr	r3, [pc, #276]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003140:	2b00      	cmp	r3, #0
 8003142:	f2c0 81ce 	blt.w	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003146:	f7ff fad5 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 800314a:	e751      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
    switch(PeriphClk)
 800314c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003150:	d066      	beq.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8003152:	d907      	bls.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8003154:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003158:	d124      	bne.n	80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800315a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800315e:	f7ff fadb 	bl	8002718 <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 8003162:	e745      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
    switch(PeriphClk)
 8003164:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003168:	f040 8271 	bne.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800316c:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317a:	f000 823e 	beq.w	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800317e:	f240 8237 	bls.w	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8003182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003186:	f000 8240 	beq.w	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800318a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800318e:	f040 82ac 	bne.w	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f013 0f02 	tst.w	r3, #2
 800319c:	f040 82ac 	bne.w	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
  uint32_t frequency = 0U;
 80031a0:	2000      	movs	r0, #0
 80031a2:	e725      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
    switch(PeriphClk)
 80031a4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80031a8:	f040 8251 	bne.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80031ae:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80031b2:	f000 6040 	and.w	r0, r0, #201326592	; 0xc000000
        switch(srcclk)
 80031b6:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80031ba:	d073      	beq.n	80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80031bc:	d935      	bls.n	800322a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80031be:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80031c2:	d04f      	beq.n	8003264 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80031c4:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 80031c8:	f040 8243 	bne.w	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f013 0f02 	tst.w	r3, #2
 80031d4:	f000 823f 	beq.w	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f013 0f08 	tst.w	r3, #8
 80031e0:	d02f      	beq.n	8003242 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031ea:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80031ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031f0:	e6fe      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
    switch(PeriphClk)
 80031f2:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80031f6:	d0d9      	beq.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80031f8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80031fc:	f040 8227 	bne.w	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003206:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800320a:	2b01      	cmp	r3, #1
 800320c:	f000 81b7 	beq.w	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 81b1 	beq.w	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8003216:	2b02      	cmp	r3, #2
 8003218:	f000 81b4 	beq.w	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
  uint32_t frequency = 0U;
 800321c:	2000      	movs	r0, #0
 800321e:	e6e7      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003220:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003224:	f7ff fa78 	bl	8002718 <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 8003228:	e6e2      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        switch(srcclk)
 800322a:	2800      	cmp	r0, #0
 800322c:	f040 8211 	bne.w	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003236:	f013 0f02 	tst.w	r3, #2
 800323a:	f43f aed9 	beq.w	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI48_VALUE;
 800323e:	4808      	ldr	r0, [pc, #32]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003240:	e6d6      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003242:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003248:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800324c:	e7cd      	b.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	080080b4 	.word	0x080080b4
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200
 8003260:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003264:	4bb8      	ldr	r3, [pc, #736]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800326c:	f000 81f5 	beq.w	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003270:	4bb5      	ldr	r3, [pc, #724]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003278:	f000 81f1 	beq.w	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800327c:	4ab2      	ldr	r2, [pc, #712]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800327e:	68d0      	ldr	r0, [r2, #12]
 8003280:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003284:	fb00 f001 	mul.w	r0, r0, r1
 8003288:	68d3      	ldr	r3, [r2, #12]
 800328a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800328e:	3301      	adds	r3, #1
 8003290:	fbb0 f0f3 	udiv	r0, r0, r3
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003294:	68d3      	ldr	r3, [r2, #12]
 8003296:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fbb0 f0f3 	udiv	r0, r0, r3
 80032a2:	e6a5      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80032a4:	4ba8      	ldr	r3, [pc, #672]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80032ac:	f000 81d9 	beq.w	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80032b0:	4ba5      	ldr	r3, [pc, #660]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80032b8:	f000 81d5 	beq.w	8003666 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80032bc:	4aa2      	ldr	r2, [pc, #648]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80032be:	6910      	ldr	r0, [r2, #16]
 80032c0:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80032c4:	fb00 f001 	mul.w	r0, r0, r1
 80032c8:	68d3      	ldr	r3, [r2, #12]
 80032ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80032ce:	3301      	adds	r3, #1
 80032d0:	fbb0 f0f3 	udiv	r0, r0, r3
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80032d4:	6913      	ldr	r3, [r2, #16]
 80032d6:	f3c3 5341 	ubfx	r3, r3, #21, #2
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	fbb0 f0f3 	udiv	r0, r0, r3
 80032e2:	e685      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7ff fa06 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
          break;
 80032e8:	e682      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fdc7 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 80032ee:	e67f      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032f0:	4b95      	ldr	r3, [pc, #596]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80032f8:	f040 81b9 	bne.w	800366e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
  uint32_t frequency = 0U;
 80032fc:	2000      	movs	r0, #0
 80032fe:	e677      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003300:	4b91      	ldr	r3, [pc, #580]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003306:	f013 0f02 	tst.w	r3, #2
 800330a:	f040 81b2 	bne.w	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
  uint32_t frequency = 0U;
 800330e:	2000      	movs	r0, #0
 8003310:	e66e      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f003 030c 	and.w	r3, r3, #12
        switch(srcclk)
 800331c:	2b0c      	cmp	r3, #12
 800331e:	f200 81ab 	bhi.w	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8003322:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003326:	000d      	.short	0x000d
 8003328:	01a901a9 	.word	0x01a901a9
 800332c:	001001a9 	.word	0x001001a9
 8003330:	01a901a9 	.word	0x01a901a9
 8003334:	001301a9 	.word	0x001301a9
 8003338:	01a901a9 	.word	0x01a901a9
 800333c:	001b01a9 	.word	0x001b01a9
          frequency = HAL_RCC_GetPCLK1Freq();
 8003340:	f7ff f9c6 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 8003344:	e654      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 8003346:	f7fe fd99 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 800334a:	e651      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003354:	f040 8192 	bne.w	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
  uint32_t frequency = 0U;
 8003358:	2000      	movs	r0, #0
 800335a:	e649      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800335c:	4b7a      	ldr	r3, [pc, #488]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f013 0f02 	tst.w	r3, #2
 8003366:	f040 818b 	bne.w	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
  uint32_t frequency = 0U;
 800336a:	2000      	movs	r0, #0
 800336c:	e640      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 8003378:	2b10      	cmp	r3, #16
 800337a:	d014      	beq.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800337c:	d90d      	bls.n	800339a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800337e:	2b20      	cmp	r3, #32
 8003380:	d014      	beq.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8003382:	2b30      	cmp	r3, #48	; 0x30
 8003384:	f040 817f 	bne.w	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f013 0f02 	tst.w	r3, #2
 8003392:	f040 817c 	bne.w	800368e <HAL_RCCEx_GetPeriphCLKFreq+0x736>
  uint32_t frequency = 0U;
 8003396:	2000      	movs	r0, #0
 8003398:	e62a      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        switch(srcclk)
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 8173 	bne.w	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033a0:	f7ff f996 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 80033a4:	e624      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 80033a6:	f7fe fd69 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 80033aa:	e621      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80033b4:	f040 8169 	bne.w	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
  uint32_t frequency = 0U;
 80033b8:	2000      	movs	r0, #0
 80033ba:	e619      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        switch(srcclk)
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 8169 	bne.w	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033c2:	f7ff f985 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 80033c6:	e613      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 80033c8:	f7fe fd58 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 80033cc:	e610      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033ce:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80033d6:	f040 815f 	bne.w	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
  uint32_t frequency = 0U;
 80033da:	2000      	movs	r0, #0
 80033dc:	e608      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80033de:	4b5a      	ldr	r3, [pc, #360]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
        switch(srcclk)
 80033e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ec:	d016      	beq.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80033ee:	d90f      	bls.n	8003410 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80033f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f4:	d015      	beq.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80033f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fa:	f040 8152 	bne.w	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80033fe:	4b52      	ldr	r3, [pc, #328]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f013 0f02 	tst.w	r3, #2
 8003408:	f040 814f 	bne.w	80036aa <HAL_RCCEx_GetPeriphCLKFreq+0x752>
  uint32_t frequency = 0U;
 800340c:	2000      	movs	r0, #0
 800340e:	e5ef      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        switch(srcclk)
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 8146 	bne.w	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003416:	f7ff f95b 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 800341a:	e5e9      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 800341c:	f7fe fd2e 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 8003420:	e5e6      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003422:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800342a:	f040 813c 	bne.w	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
  uint32_t frequency = 0U;
 800342e:	2000      	movs	r0, #0
 8003430:	e5de      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        switch(srcclk)
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 813c 	bne.w	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003438:	f7ff f94a 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 800343c:	e5d8      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 800343e:	f7fe fd1d 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 8003442:	e5d5      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800344c:	f040 8132 	bne.w	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
  uint32_t frequency = 0U;
 8003450:	2000      	movs	r0, #0
 8003452:	e5cd      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003454:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        switch(srcclk)
 800345e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003462:	d024      	beq.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8003464:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003468:	d004      	beq.n	8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800346a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800346e:	d004      	beq.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
  uint32_t frequency = 0U;
 8003470:	2000      	movs	r0, #0
 8003472:	e5bd      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 8003474:	f7fe fd02 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 8003478:	e5ba      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003482:	f000 811c 	beq.w	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003486:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003488:	6910      	ldr	r0, [r2, #16]
 800348a:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800348e:	fb00 f001 	mul.w	r0, r0, r1
 8003492:	68d3      	ldr	r3, [r2, #12]
 8003494:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003498:	3301      	adds	r3, #1
 800349a:	fbb0 f0f3 	udiv	r0, r0, r3
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800349e:	6913      	ldr	r3, [r2, #16]
 80034a0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80034a4:	3301      	adds	r3, #1
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80034ac:	e5a0      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80034b6:	f000 8104 	beq.w	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80034ba:	4a23      	ldr	r2, [pc, #140]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80034bc:	6950      	ldr	r0, [r2, #20]
 80034be:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80034c2:	fb00 f001 	mul.w	r0, r0, r1
 80034c6:	68d3      	ldr	r3, [r2, #12]
 80034c8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80034cc:	3301      	adds	r3, #1
 80034ce:	fbb0 f0f3 	udiv	r0, r0, r3
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80034d2:	6953      	ldr	r3, [r2, #20]
 80034d4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80034d8:	3301      	adds	r3, #1
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80034e0:	e586      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 80034e2:	f7fe fccb 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 80034e6:	e583      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f6:	d008      	beq.n	800350a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80034f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80034fe:	b10b      	cbz	r3, 8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
  uint32_t frequency = 0U;
 8003500:	2000      	movs	r0, #0
 8003502:	e575      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003504:	f7ff f8e4 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 8003508:	e572      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 800350a:	f7fe fcb7 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 800350e:	e56f      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003518:	f040 80d5 	bne.w	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
  uint32_t frequency = 0U;
 800351c:	2000      	movs	r0, #0
 800351e:	e567      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 800352a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 8003536:	b10b      	cbz	r3, 800353c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
  uint32_t frequency = 0U;
 8003538:	2000      	movs	r0, #0
 800353a:	e559      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetPCLK1Freq();
 800353c:	f7ff f8c8 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 8003540:	e556      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe fc9b 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 8003546:	e553      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003548:	40021000 	.word	0x40021000
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800354c:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003554:	f040 80b9 	bne.w	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
  uint32_t frequency = 0U;
 8003558:	2000      	movs	r0, #0
 800355a:	e549      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetPCLK1Freq();
 800355c:	f7ff f8b8 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 8003560:	e546      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 8003562:	f7fe fc8b 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 8003566:	e543      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003568:	4b66      	ldr	r3, [pc, #408]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003570:	f040 80ad 	bne.w	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
  uint32_t frequency = 0U;
 8003574:	2000      	movs	r0, #0
 8003576:	e53b      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003578:	f7ff f8aa 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 800357c:	e538      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetSysClockFreq();
 800357e:	f7fe fc7d 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
          break;
 8003582:	e535      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003584:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800358c:	f040 80a1 	bne.w	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
  uint32_t frequency = 0U;
 8003590:	2000      	movs	r0, #0
 8003592:	e52d      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003594:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 800359e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035a2:	d016      	beq.n	80035d2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 80035a4:	d90f      	bls.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80035a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035aa:	d01a      	beq.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80035ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035b0:	f040 8091 	bne.w	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f013 0f02 	tst.w	r3, #2
 80035be:	f040 8091 	bne.w	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
  uint32_t frequency = 0U;
 80035c2:	2000      	movs	r0, #0
 80035c4:	e514      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        switch(srcclk)
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 8085 	bne.w	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80035cc:	f7ff f880 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 80035d0:	e50e      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80035d2:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80035d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d8:	f013 0f02 	tst.w	r3, #2
 80035dc:	d17d      	bne.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
  uint32_t frequency = 0U;
 80035de:	2000      	movs	r0, #0
 80035e0:	e506      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80035e2:	4b48      	ldr	r3, [pc, #288]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80035ea:	d179      	bne.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
  uint32_t frequency = 0U;
 80035ec:	2000      	movs	r0, #0
 80035ee:	e4ff      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        switch(srcclk)
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d17a      	bne.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          frequency = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7ff f86c 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 80035f8:	e4fa      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80035fa:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003600:	f013 0f02 	tst.w	r3, #2
 8003604:	d173      	bne.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x796>
  uint32_t frequency = 0U;
 8003606:	2000      	movs	r0, #0
 8003608:	e4f2      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003612:	d16f      	bne.n	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
  uint32_t frequency = 0U;
 8003614:	2000      	movs	r0, #0
 8003616:	e4eb      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003618:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        switch(srcclk)
 800361e:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8003622:	d002      	beq.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8003624:	b923      	cbnz	r3, 8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
  uint32_t frequency = 0U;
 8003626:	2000      	movs	r0, #0
 8003628:	e4e2      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = HAL_RCC_GetPCLK1Freq();
 800362a:	f7ff f851 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
          break;
 800362e:	e4df      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003630:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003638:	d161      	bne.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  uint32_t frequency = 0U;
 800363a:	2000      	movs	r0, #0
 800363c:	e4d8      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSE_VALUE;
 800363e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003642:	e4d5      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          frequency = LSI_VALUE;
 8003644:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8003648:	e4d2      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = HSE_VALUE / 32U;
 800364a:	482f      	ldr	r0, [pc, #188]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800364c:	e4d0      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 800364e:	2000      	movs	r0, #0
 8003650:	e4ce      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003652:	2000      	movs	r0, #0
 8003654:	e4cc      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003656:	2000      	movs	r0, #0
 8003658:	e4ca      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 800365a:	2000      	movs	r0, #0
 800365c:	e4c8      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 800365e:	2000      	movs	r0, #0
 8003660:	e4c6      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003662:	2000      	movs	r0, #0
 8003664:	e4c4      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003666:	2000      	movs	r0, #0
 8003668:	e4c2      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 800366a:	2000      	movs	r0, #0
 800366c:	e4c0      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 800366e:	4827      	ldr	r0, [pc, #156]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8003670:	e4be      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSE_VALUE;
 8003672:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003676:	e4bb      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 8003678:	2000      	movs	r0, #0
 800367a:	e4b9      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 800367c:	4823      	ldr	r0, [pc, #140]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800367e:	e4b7      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSE_VALUE;
 8003680:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003684:	e4b4      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 8003686:	2000      	movs	r0, #0
 8003688:	e4b2      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 800368a:	4820      	ldr	r0, [pc, #128]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800368c:	e4b0      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSE_VALUE;
 800368e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003692:	e4ad      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 8003694:	2000      	movs	r0, #0
 8003696:	e4ab      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 8003698:	481c      	ldr	r0, [pc, #112]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800369a:	e4a9      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSE_VALUE;
 800369c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036a0:	e4a6      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 80036a2:	2000      	movs	r0, #0
 80036a4:	e4a4      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036a6:	4819      	ldr	r0, [pc, #100]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80036a8:	e4a2      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSE_VALUE;
 80036aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036ae:	e49f      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 80036b0:	2000      	movs	r0, #0
 80036b2:	e49d      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036b4:	4815      	ldr	r0, [pc, #84]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80036b6:	e49b      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSE_VALUE;
 80036b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036bc:	e498      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 80036be:	2000      	movs	r0, #0
 80036c0:	e496      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80036c2:	2000      	movs	r0, #0
 80036c4:	e494      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036c6:	4811      	ldr	r0, [pc, #68]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80036c8:	e492      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036ca:	4810      	ldr	r0, [pc, #64]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80036cc:	e490      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036ce:	480f      	ldr	r0, [pc, #60]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80036d0:	e48e      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036d2:	480e      	ldr	r0, [pc, #56]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80036d4:	e48c      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 80036d6:	2000      	movs	r0, #0
 80036d8:	e48a      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
              frequency = LSI_VALUE;
 80036da:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80036de:	e487      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036e0:	480a      	ldr	r0, [pc, #40]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80036e2:	e485      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSE_VALUE;
 80036e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036e8:	e482      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
  uint32_t frequency = 0U;
 80036ea:	2000      	movs	r0, #0
 80036ec:	e480      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
              frequency = LSI_VALUE;
 80036ee:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80036f2:	e47d      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036f4:	4805      	ldr	r0, [pc, #20]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80036f6:	e47b      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSE_VALUE;
 80036f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036fc:	e478      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = HSI_VALUE;
 80036fe:	4803      	ldr	r0, [pc, #12]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
  return(frequency);
 8003700:	e476      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	0003d090 	.word	0x0003d090
 800370c:	00f42400 	.word	0x00f42400

08003710 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003710:	4a02      	ldr	r2, [pc, #8]	; (800371c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8003712:	6813      	ldr	r3, [r2, #0]
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	6013      	str	r3, [r2, #0]
}
 800371a:	4770      	bx	lr
 800371c:	40021000 	.word	0x40021000

08003720 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <SAI_Disable+0x3c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <SAI_Disable+0x40>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0b1b      	lsrs	r3, r3, #12
 800372c:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800372e:	6801      	ldr	r1, [r0, #0]
 8003730:	680a      	ldr	r2, [r1, #0]
 8003732:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003736:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8003738:	b13b      	cbz	r3, 800374a <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 800373a:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800373c:	6802      	ldr	r2, [r0, #0]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003744:	d1f8      	bne.n	8003738 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003746:	2000      	movs	r0, #0

  return status;
}
 8003748:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800374a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800374e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003752:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8003756:	2003      	movs	r0, #3
      break;
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000008 	.word	0x20000008
 8003760:	95cbec1b 	.word	0x95cbec1b

08003764 <HAL_SAI_Init>:
{
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 8003766:	2800      	cmp	r0, #0
 8003768:	f000 80d6 	beq.w	8003918 <HAL_SAI_Init+0x1b4>
 800376c:	4604      	mov	r4, r0
  if (hsai->State == HAL_SAI_STATE_RESET)
 800376e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8003772:	b30b      	cbz	r3, 80037b8 <HAL_SAI_Init+0x54>
  if (SAI_Disable(hsai) != HAL_OK)
 8003774:	4620      	mov	r0, r4
 8003776:	f7ff ffd3 	bl	8003720 <SAI_Disable>
 800377a:	4605      	mov	r5, r0
 800377c:	2800      	cmp	r0, #0
 800377e:	f040 80cd 	bne.w	800391c <HAL_SAI_Init+0x1b8>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  switch (hsai->Init.SynchroExt)
 8003788:	68e3      	ldr	r3, [r4, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d01b      	beq.n	80037c6 <HAL_SAI_Init+0x62>
 800378e:	2b02      	cmp	r3, #2
 8003790:	d017      	beq.n	80037c2 <HAL_SAI_Init+0x5e>
      tmpregisterGCR = 0;
 8003792:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 8003794:	68a3      	ldr	r3, [r4, #8]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d017      	beq.n	80037ca <HAL_SAI_Init+0x66>
 800379a:	2b03      	cmp	r3, #3
 800379c:	d018      	beq.n	80037d0 <HAL_SAI_Init+0x6c>
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d01b      	beq.n	80037da <HAL_SAI_Init+0x76>
      syncen_bits = 0;
 80037a2:	2600      	movs	r6, #0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	495e      	ldr	r1, [pc, #376]	; (8003920 <HAL_SAI_Init+0x1bc>)
 80037a8:	428b      	cmp	r3, r1
 80037aa:	d019      	beq.n	80037e0 <HAL_SAI_Init+0x7c>
 80037ac:	3120      	adds	r1, #32
 80037ae:	428b      	cmp	r3, r1
 80037b0:	d016      	beq.n	80037e0 <HAL_SAI_Init+0x7c>
    SAI2->GCR = tmpregisterGCR;
 80037b2:	4b5c      	ldr	r3, [pc, #368]	; (8003924 <HAL_SAI_Init+0x1c0>)
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e015      	b.n	80037e4 <HAL_SAI_Init+0x80>
    hsai->Lock = HAL_UNLOCKED;
 80037b8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80037bc:	f003 fab2 	bl	8006d24 <HAL_SAI_MspInit>
 80037c0:	e7d8      	b.n	8003774 <HAL_SAI_Init+0x10>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80037c2:	2220      	movs	r2, #32
      break;
 80037c4:	e7e6      	b.n	8003794 <HAL_SAI_Init+0x30>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80037c6:	2210      	movs	r2, #16
 80037c8:	e7e4      	b.n	8003794 <HAL_SAI_Init+0x30>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80037ca:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 80037ce:	e7e9      	b.n	80037a4 <HAL_SAI_Init+0x40>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80037d0:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80037d4:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 80037d8:	e7e4      	b.n	80037a4 <HAL_SAI_Init+0x40>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80037da:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80037de:	e7e1      	b.n	80037a4 <HAL_SAI_Init+0x40>
    SAI1->GCR = tmpregisterGCR;
 80037e0:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_SAI_Init+0x1c4>)
 80037e2:	601a      	str	r2, [r3, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80037e4:	69e3      	ldr	r3, [r4, #28]
 80037e6:	b31b      	cbz	r3, 8003830 <HAL_SAI_Init+0xcc>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	4a4d      	ldr	r2, [pc, #308]	; (8003920 <HAL_SAI_Init+0x1bc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <HAL_SAI_Init+0x9c>
 80037f0:	3220      	adds	r2, #32
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_SAI_Init+0x9c>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80037f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80037fa:	f7ff fbad 	bl	8002f58 <HAL_RCCEx_GetPeriphCLKFreq>
 80037fe:	e003      	b.n	8003808 <HAL_SAI_Init+0xa4>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003800:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003804:	f7ff fba8 	bl	8002f58 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800380c:	0041      	lsls	r1, r0, #1
 800380e:	69e3      	ldr	r3, [r4, #28]
 8003810:	025b      	lsls	r3, r3, #9
 8003812:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8003816:	4b45      	ldr	r3, [pc, #276]	; (800392c <HAL_SAI_Init+0x1c8>)
 8003818:	fba3 2301 	umull	r2, r3, r3, r1
 800381c:	08db      	lsrs	r3, r3, #3
 800381e:	6223      	str	r3, [r4, #32]
    if ((tmpval % 10U) > 8U)
 8003820:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003824:	0042      	lsls	r2, r0, #1
 8003826:	1a8a      	subs	r2, r1, r2
 8003828:	2a08      	cmp	r2, #8
 800382a:	d901      	bls.n	8003830 <HAL_SAI_Init+0xcc>
      hsai->Init.Mckdiv += 1U;
 800382c:	3301      	adds	r3, #1
 800382e:	6223      	str	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	b133      	cbz	r3, 8003842 <HAL_SAI_Init+0xde>
 8003834:	2b02      	cmp	r3, #2
 8003836:	d004      	beq.n	8003842 <HAL_SAI_Init+0xde>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003838:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d069      	beq.n	8003912 <HAL_SAI_Init+0x1ae>
 800383e:	2700      	movs	r7, #0
 8003840:	e004      	b.n	800384c <HAL_SAI_Init+0xe8>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d062      	beq.n	800390e <HAL_SAI_Init+0x1aa>
 8003848:	f44f 7700 	mov.w	r7, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800384c:	6821      	ldr	r1, [r4, #0]
 800384e:	680b      	ldr	r3, [r1, #0]
 8003850:	4a37      	ldr	r2, [pc, #220]	; (8003930 <HAL_SAI_Init+0x1cc>)
 8003852:	401a      	ands	r2, r3
 8003854:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003856:	6821      	ldr	r1, [r4, #0]
 8003858:	680a      	ldr	r2, [r1, #0]
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800385e:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003860:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003862:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003864:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003866:	4303      	orrs	r3, r0
 8003868:	433b      	orrs	r3, r7
                          ckstr_bits | syncen_bits |                             \
 800386a:	4333      	orrs	r3, r6
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800386c:	6a60      	ldr	r0, [r4, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800386e:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003870:	6920      	ldr	r0, [r4, #16]
 8003872:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003874:	6960      	ldr	r0, [r4, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003876:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003878:	6a20      	ldr	r0, [r4, #32]
 800387a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003882:	6822      	ldr	r2, [r4, #0]
 8003884:	6853      	ldr	r3, [r2, #4]
 8003886:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800388a:	f023 030f 	bic.w	r3, r3, #15
 800388e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003890:	6821      	ldr	r1, [r4, #0]
 8003892:	684a      	ldr	r2, [r1, #4]
 8003894:	69a3      	ldr	r3, [r4, #24]
 8003896:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003898:	4303      	orrs	r3, r0
 800389a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800389c:	4303      	orrs	r3, r0
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	6891      	ldr	r1, [r2, #8]
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_SAI_Init+0x1d0>)
 80038a8:	400b      	ands	r3, r1
 80038aa:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80038ac:	6820      	ldr	r0, [r4, #0]
 80038ae:	6882      	ldr	r2, [r0, #8]
 80038b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038b2:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 80038b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80038b6:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 80038b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80038ba:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 80038bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80038be:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80038c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80038c2:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 80038c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80038c8:	4313      	orrs	r3, r2
 80038ca:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	68d3      	ldr	r3, [r2, #12]
 80038d0:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80038d4:	f023 030f 	bic.w	r3, r3, #15
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	0c1b      	lsrs	r3, r3, #16
 80038dc:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	68c2      	ldr	r2, [r0, #12]
 80038e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038e4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038e6:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80038e8:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80038ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80038ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80038f0:	3901      	subs	r1, #1
 80038f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_READY;
 8003900:	2201      	movs	r2, #1
 8003902:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8003906:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 800390a:	4628      	mov	r0, r5
 800390c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800390e:	2700      	movs	r7, #0
 8003910:	e79c      	b.n	800384c <HAL_SAI_Init+0xe8>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003912:	f44f 7700 	mov.w	r7, #512	; 0x200
 8003916:	e799      	b.n	800384c <HAL_SAI_Init+0xe8>
    return HAL_ERROR;
 8003918:	2501      	movs	r5, #1
 800391a:	e7f6      	b.n	800390a <HAL_SAI_Init+0x1a6>
    return HAL_ERROR;
 800391c:	2501      	movs	r5, #1
 800391e:	e7f4      	b.n	800390a <HAL_SAI_Init+0x1a6>
 8003920:	40015404 	.word	0x40015404
 8003924:	40015800 	.word	0x40015800
 8003928:	40015400 	.word	0x40015400
 800392c:	cccccccd 	.word	0xcccccccd
 8003930:	ff05c010 	.word	0xff05c010
 8003934:	fff88000 	.word	0xfff88000

08003938 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	9301      	str	r3, [sp, #4]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003942:	6800      	ldr	r0, [r0, #0]
 8003944:	f001 fbe2 	bl	800510c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003948:	4606      	mov	r6, r0
 800394a:	b110      	cbz	r0, 8003952 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 800394c:	4630      	mov	r0, r6
 800394e:	b002      	add	sp, #8
 8003950:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	f001 fbed 	bl	8005132 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003958:	b938      	cbnz	r0, 800396a <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800395a:	2301      	movs	r3, #1
 800395c:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800395e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003960:	2b01      	cmp	r3, #1
 8003962:	d00b      	beq.n	800397c <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003964:	4635      	mov	r5, r6
 8003966:	4630      	mov	r0, r6
 8003968:	e014      	b.n	8003994 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800396a:	2300      	movs	r3, #0
 800396c:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800396e:	6820      	ldr	r0, [r4, #0]
 8003970:	f001 fbcc 	bl	800510c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003974:	2800      	cmp	r0, #0
 8003976:	d0f2      	beq.n	800395e <SD_PowerON+0x26>
      return errorstate;
 8003978:	4606      	mov	r6, r0
 800397a:	e7e7      	b.n	800394c <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800397c:	2100      	movs	r1, #0
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	f001 fbee 	bl	8005160 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003984:	2800      	cmp	r0, #0
 8003986:	d0ed      	beq.n	8003964 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003988:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 800398c:	e7de      	b.n	800394c <SD_PowerON+0x14>
    count++;
 800398e:	9b01      	ldr	r3, [sp, #4]
 8003990:	3301      	adds	r3, #1
 8003992:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003994:	9a01      	ldr	r2, [sp, #4]
 8003996:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800399a:	429a      	cmp	r2, r3
 800399c:	d813      	bhi.n	80039c6 <SD_PowerON+0x8e>
 800399e:	b995      	cbnz	r5, 80039c6 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80039a0:	2100      	movs	r1, #0
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	f001 fbdc 	bl	8005160 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80039a8:	b9d8      	cbnz	r0, 80039e2 <SD_PowerON+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80039aa:	4912      	ldr	r1, [pc, #72]	; (80039f4 <SD_PowerON+0xbc>)
 80039ac:	6820      	ldr	r0, [r4, #0]
 80039ae:	f001 fbef 	bl	8005190 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80039b2:	4605      	mov	r5, r0
 80039b4:	b9b8      	cbnz	r0, 80039e6 <SD_PowerON+0xae>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80039b6:	2100      	movs	r1, #0
 80039b8:	6820      	ldr	r0, [r4, #0]
 80039ba:	f001 fa63 	bl	8004e84 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80039be:	0fc3      	lsrs	r3, r0, #31
 80039c0:	d0e5      	beq.n	800398e <SD_PowerON+0x56>
 80039c2:	461d      	mov	r5, r3
 80039c4:	e7e3      	b.n	800398e <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80039c6:	9a01      	ldr	r2, [sp, #4]
 80039c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d80d      	bhi.n	80039ec <SD_PowerON+0xb4>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80039d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80039d4:	d102      	bne.n	80039dc <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDSC;
 80039d6:	2300      	movs	r3, #0
 80039d8:	6463      	str	r3, [r4, #68]	; 0x44
 80039da:	e7b7      	b.n	800394c <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80039dc:	2301      	movs	r3, #1
 80039de:	6463      	str	r3, [r4, #68]	; 0x44
 80039e0:	e7b4      	b.n	800394c <SD_PowerON+0x14>
      return errorstate;
 80039e2:	4606      	mov	r6, r0
 80039e4:	e7b2      	b.n	800394c <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039e6:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80039ea:	e7af      	b.n	800394c <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80039ec:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80039f0:	e7ac      	b.n	800394c <SD_PowerON+0x14>
 80039f2:	bf00      	nop
 80039f4:	c1100000 	.word	0xc1100000

080039f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80039f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fc:	b088      	sub	sp, #32
 80039fe:	4604      	mov	r4, r0
 8003a00:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a02:	f7fc fe17 	bl	8000634 <HAL_GetTick>
 8003a06:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003a0e:	2108      	movs	r1, #8
 8003a10:	6820      	ldr	r0, [r4, #0]
 8003a12:	f001 fb4b 	bl	80050ac <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a16:	4605      	mov	r5, r0
 8003a18:	b118      	cbz	r0, 8003a22 <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	b008      	add	sp, #32
 8003a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003a22:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003a24:	0409      	lsls	r1, r1, #16
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	f001 fb9a 	bl	8005160 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d1f3      	bne.n	8003a1a <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a36:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003a38:	2308      	movs	r3, #8
 8003a3a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8003a3c:	2330      	movs	r3, #48	; 0x30
 8003a3e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003a40:	2302      	movs	r3, #2
 8003a42:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003a4c:	a902      	add	r1, sp, #8
 8003a4e:	6820      	ldr	r0, [r4, #0]
 8003a50:	f001 fb1a 	bl	8005088 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	f001 fbcc 	bl	80051f2 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a5a:	4605      	mov	r5, r0
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d1dc      	bne.n	8003a1a <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8003a60:	4680      	mov	r8, r0
 8003a62:	e005      	b.n	8003a70 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003a64:	f7fc fde6 	bl	8000634 <HAL_GetTick>
 8003a68:	1b80      	subs	r0, r0, r6
 8003a6a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003a6e:	d043      	beq.n	8003af8 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a74:	f240 432a 	movw	r3, #1066	; 0x42a
 8003a78:	421a      	tst	r2, r3
 8003a7a:	d10a      	bne.n	8003a92 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8003a7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a7e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003a82:	d0ef      	beq.n	8003a64 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003a84:	f001 f9da 	bl	8004e3c <SDMMC_ReadFIFO>
 8003a88:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8003a8c:	f108 0801 	add.w	r8, r8, #1
 8003a90:	e7e8      	b.n	8003a64 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003a92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a94:	f013 0f08 	tst.w	r3, #8
 8003a98:	d125      	bne.n	8003ae6 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003a9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a9c:	f013 0f02 	tst.w	r3, #2
 8003aa0:	d124      	bne.n	8003aec <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003aa2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003aa4:	f013 0f20 	tst.w	r3, #32
 8003aa8:	d123      	bne.n	8003af2 <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003aaa:	f240 533a 	movw	r3, #1338	; 0x53a
 8003aae:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ab0:	9a01      	ldr	r2, [sp, #4]
 8003ab2:	0213      	lsls	r3, r2, #8
 8003ab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ab8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003abc:	0a11      	lsrs	r1, r2, #8
 8003abe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ac2:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003ac4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ac8:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003aca:	9a00      	ldr	r2, [sp, #0]
 8003acc:	0213      	lsls	r3, r2, #8
 8003ace:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ad2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ad6:	0a11      	lsrs	r1, r2, #8
 8003ad8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003adc:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ade:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ae2:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8003ae4:	e799      	b.n	8003a1a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8003ae6:	2508      	movs	r5, #8
 8003ae8:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003aea:	e796      	b.n	8003a1a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8003aec:	2502      	movs	r5, #2
 8003aee:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003af0:	e793      	b.n	8003a1a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003af2:	2520      	movs	r5, #32
 8003af4:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8003af6:	e790      	b.n	8003a1a <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8003af8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8003afc:	e78d      	b.n	8003a1a <SD_FindSCR+0x22>

08003afe <SD_WideBus_Enable>:
{
 8003afe:	b510      	push	{r4, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003b04:	2100      	movs	r1, #0
 8003b06:	9100      	str	r1, [sp, #0]
 8003b08:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	f001 f9ba 	bl	8004e84 <SDMMC_GetResponse>
 8003b10:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003b14:	d116      	bne.n	8003b44 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8003b16:	4669      	mov	r1, sp
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7ff ff6d 	bl	80039f8 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b1e:	4603      	mov	r3, r0
 8003b20:	b990      	cbnz	r0, 8003b48 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003b22:	9b01      	ldr	r3, [sp, #4]
 8003b24:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003b28:	d011      	beq.n	8003b4e <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b2a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b2c:	0409      	lsls	r1, r1, #16
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	f001 fb16 	bl	8005160 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b34:	4603      	mov	r3, r0
 8003b36:	b938      	cbnz	r0, 8003b48 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003b38:	2102      	movs	r1, #2
 8003b3a:	6820      	ldr	r0, [r4, #0]
 8003b3c:	f001 fb41 	bl	80051c2 <SDMMC_CmdBusWidth>
 8003b40:	4603      	mov	r3, r0
 8003b42:	e001      	b.n	8003b48 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003b44:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b52:	e7f9      	b.n	8003b48 <SD_WideBus_Enable+0x4a>

08003b54 <SD_WideBus_Disable>:
{
 8003b54:	b510      	push	{r4, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	9100      	str	r1, [sp, #0]
 8003b5e:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b60:	6800      	ldr	r0, [r0, #0]
 8003b62:	f001 f98f 	bl	8004e84 <SDMMC_GetResponse>
 8003b66:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003b6a:	d116      	bne.n	8003b9a <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8003b6c:	4669      	mov	r1, sp
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff ff42 	bl	80039f8 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b74:	4603      	mov	r3, r0
 8003b76:	b990      	cbnz	r0, 8003b9e <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003b78:	9b01      	ldr	r3, [sp, #4]
 8003b7a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b7e:	d011      	beq.n	8003ba4 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b80:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b82:	0409      	lsls	r1, r1, #16
 8003b84:	6820      	ldr	r0, [r4, #0]
 8003b86:	f001 faeb 	bl	8005160 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	b938      	cbnz	r0, 8003b9e <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	f001 fb16 	bl	80051c2 <SDMMC_CmdBusWidth>
 8003b96:	4603      	mov	r3, r0
 8003b98:	e001      	b.n	8003b9e <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ba4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ba8:	e7f9      	b.n	8003b9e <SD_WideBus_Disable+0x4a>
	...

08003bac <HAL_SD_GetCardCSD>:
{
 8003bac:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003bae:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003bb0:	0f9b      	lsrs	r3, r3, #30
 8003bb2:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003bb4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003bb6:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8003bba:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003bbc:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003bc6:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8003bca:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003bcc:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8003bd0:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003bd2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8003bd6:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003bd8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003bda:	0d1b      	lsrs	r3, r3, #20
 8003bdc:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003bde:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003be8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003bea:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8003bee:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003bf0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003bf2:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8003bf6:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003bf8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003bfa:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8003bfe:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003c00:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003c02:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8003c06:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003c08:	2300      	movs	r3, #0
 8003c0a:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003c0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 8088 	bne.w	8003d24 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003c14:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003c16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c1a:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8003c1e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003c20:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8003c24:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003c26:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003c28:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8003c2c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003c2e:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c38:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003c3a:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8003c3e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c40:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003c42:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8003c46:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003c48:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003c4a:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8003c4e:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003c50:	690b      	ldr	r3, [r1, #16]
 8003c52:	3301      	adds	r3, #1
 8003c54:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003c56:	7e0a      	ldrb	r2, [r1, #24]
 8003c58:	f002 0207 	and.w	r2, r2, #7
 8003c5c:	3202      	adds	r2, #2
 8003c5e:	fa03 f202 	lsl.w	r2, r3, r2
 8003c62:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003c64:	7a0b      	ldrb	r3, [r1, #8]
 8003c66:	f003 040f 	and.w	r4, r3, #15
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	40a3      	lsls	r3, r4
 8003c6e:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003c70:	0a5b      	lsrs	r3, r3, #9
 8003c72:	fb03 f302 	mul.w	r3, r3, r2
 8003c76:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c7c:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c7e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003c80:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8003c84:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c86:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003c88:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8003c8c:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003c8e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c94:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003c96:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003c98:	0fdb      	lsrs	r3, r3, #31
 8003c9a:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003c9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003c9e:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8003ca2:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ca4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003ca6:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003caa:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003cac:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003cae:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8003cb2:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003cb4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003cb6:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8003cba:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003cc4:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8003cc8:	f002 0201 	and.w	r2, r2, #1
 8003ccc:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003cd0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003cd2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003cd6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003cda:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003cdc:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8003ce0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003ce4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003ce6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003cea:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003cee:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003cf0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003cf4:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003cf8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003cfa:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8003cfe:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d02:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003d04:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8003d08:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003d0c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003d0e:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8003d12:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003d16:	2201      	movs	r2, #1
 8003d18:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8003d1c:	4618      	mov	r0, r3
}
 8003d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d22:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d00b      	beq.n	8003d40 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d28:	6803      	ldr	r3, [r0, #0]
 8003d2a:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <HAL_SD_GetCardCSD+0x1b8>)
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d34:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	e7ee      	b.n	8003d1e <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003d40:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003d48:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003d50:	690b      	ldr	r3, [r1, #16]
 8003d52:	3301      	adds	r3, #1
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003d58:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5e:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003d60:	6603      	str	r3, [r0, #96]	; 0x60
 8003d62:	e78c      	b.n	8003c7e <HAL_SD_GetCardCSD+0xd2>
 8003d64:	004005ff 	.word	0x004005ff

08003d68 <SD_InitCard>:
{
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	b090      	sub	sp, #64	; 0x40
 8003d6c:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003d74:	6800      	ldr	r0, [r0, #0]
 8003d76:	f001 f86c 	bl	8004e52 <SDMMC_GetPowerState>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d06c      	beq.n	8003e58 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d145      	bne.n	8003e10 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d15d      	bne.n	8003e46 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d01d      	beq.n	8003dcc <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003d90:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8003d94:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d96:	0409      	lsls	r1, r1, #16
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	f001 fa57 	bl	800524c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d9e:	4605      	mov	r5, r0
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d15b      	bne.n	8003e5c <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003da4:	2100      	movs	r1, #0
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	f001 f86c 	bl	8004e84 <SDMMC_GetResponse>
 8003dac:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003dae:	2104      	movs	r1, #4
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	f001 f867 	bl	8004e84 <SDMMC_GetResponse>
 8003db6:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003db8:	2108      	movs	r1, #8
 8003dba:	6820      	ldr	r0, [r4, #0]
 8003dbc:	f001 f862 	bl	8004e84 <SDMMC_GetResponse>
 8003dc0:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003dc2:	210c      	movs	r1, #12
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	f001 f85d 	bl	8004e84 <SDMMC_GetResponse>
 8003dca:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003dcc:	2104      	movs	r1, #4
 8003dce:	6820      	ldr	r0, [r4, #0]
 8003dd0:	f001 f858 	bl	8004e84 <SDMMC_GetResponse>
 8003dd4:	0d00      	lsrs	r0, r0, #20
 8003dd6:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003dd8:	a905      	add	r1, sp, #20
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f7ff fee6 	bl	8003bac <HAL_SD_GetCardCSD>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d13e      	bne.n	8003e62 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003de4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003de6:	0412      	lsls	r2, r2, #16
 8003de8:	2300      	movs	r3, #0
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	f001 f976 	bl	80050dc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003df0:	4605      	mov	r5, r0
 8003df2:	bb98      	cbnz	r0, 8003e5c <SD_InitCard+0xf4>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003df4:	4623      	mov	r3, r4
 8003df6:	f853 6b10 	ldr.w	r6, [r3], #16
 8003dfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003dfe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003e02:	3404      	adds	r4, #4
 8003e04:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 fffb 	bl	8004e04 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 8003e0e:	e025      	b.n	8003e5c <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	f001 fa06 	bl	8005222 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e16:	4605      	mov	r5, r0
 8003e18:	bb00      	cbnz	r0, 8003e5c <SD_InitCard+0xf4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	f001 f831 	bl	8004e84 <SDMMC_GetResponse>
 8003e22:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003e24:	2104      	movs	r1, #4
 8003e26:	6820      	ldr	r0, [r4, #0]
 8003e28:	f001 f82c 	bl	8004e84 <SDMMC_GetResponse>
 8003e2c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003e2e:	2108      	movs	r1, #8
 8003e30:	6820      	ldr	r0, [r4, #0]
 8003e32:	f001 f827 	bl	8004e84 <SDMMC_GetResponse>
 8003e36:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003e38:	210c      	movs	r1, #12
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	f001 f822 	bl	8004e84 <SDMMC_GetResponse>
 8003e40:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8003e44:	e79e      	b.n	8003d84 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003e46:	f10d 0112 	add.w	r1, sp, #18
 8003e4a:	6820      	ldr	r0, [r4, #0]
 8003e4c:	f001 fa13 	bl	8005276 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e50:	4605      	mov	r5, r0
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d099      	beq.n	8003d8a <SD_InitCard+0x22>
 8003e56:	e001      	b.n	8003e5c <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e58:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	b010      	add	sp, #64	; 0x40
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e62:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003e66:	e7f9      	b.n	8003e5c <SD_InitCard+0xf4>

08003e68 <HAL_SD_InitCard>:
{
 8003e68:	b530      	push	{r4, r5, lr}
 8003e6a:	b08b      	sub	sp, #44	; 0x2c
 8003e6c:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003e72:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003e74:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003e76:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003e78:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003e7a:	2376      	movs	r3, #118	; 0x76
 8003e7c:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDMMC_Init(hsd->Instance, Init);
 8003e7e:	ab0a      	add	r3, sp, #40	; 0x28
 8003e80:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003e84:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003e88:	ab04      	add	r3, sp, #16
 8003e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	f000 ffb9 	bl	8004e04 <SDMMC_Init>
  if(status != HAL_OK)
 8003e92:	b118      	cbz	r0, 8003e9c <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8003e94:	2501      	movs	r5, #1
}
 8003e96:	4628      	mov	r0, r5
 8003e98:	b00b      	add	sp, #44	; 0x2c
 8003e9a:	bd30      	pop	{r4, r5, pc}
  __HAL_SD_DISABLE(hsd);
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	6853      	ldr	r3, [r2, #4]
 8003ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea4:	6053      	str	r3, [r2, #4]
  status = SDMMC_PowerState_ON(hsd->Instance);
 8003ea6:	6820      	ldr	r0, [r4, #0]
 8003ea8:	f000 ffcb 	bl	8004e42 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8003eac:	4605      	mov	r5, r0
 8003eae:	b108      	cbz	r0, 8003eb4 <HAL_SD_InitCard+0x4c>
    return HAL_ERROR;
 8003eb0:	2501      	movs	r5, #1
 8003eb2:	e7f0      	b.n	8003e96 <HAL_SD_InitCard+0x2e>
  __HAL_SD_ENABLE(hsd);
 8003eb4:	6822      	ldr	r2, [r4, #0]
 8003eb6:	6853      	ldr	r3, [r2, #4]
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebc:	6053      	str	r3, [r2, #4]
  errorstate = SD_PowerON(hsd);
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff fd3a 	bl	8003938 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	b130      	cbz	r0, 8003ed6 <HAL_SD_InitCard+0x6e>
    hsd->State = HAL_SD_STATE_READY;
 8003ec8:	2501      	movs	r5, #1
 8003eca:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003ece:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003ed0:	4318      	orrs	r0, r3
 8003ed2:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003ed4:	e7df      	b.n	8003e96 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f7ff ff46 	bl	8003d68 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d0da      	beq.n	8003e96 <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8003ee0:	2501      	movs	r5, #1
 8003ee2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ee8:	4303      	orrs	r3, r0
 8003eea:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003eec:	e7d3      	b.n	8003e96 <HAL_SD_InitCard+0x2e>

08003eee <HAL_SD_Init>:
  if(hsd == NULL)
 8003eee:	b1c0      	cbz	r0, 8003f22 <HAL_SD_Init+0x34>
{
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8003ef4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003ef8:	b17b      	cbz	r3, 8003f1a <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8003efa:	2303      	movs	r3, #3
 8003efc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003f00:	4620      	mov	r0, r4
 8003f02:	f7ff ffb1 	bl	8003e68 <HAL_SD_InitCard>
 8003f06:	4603      	mov	r3, r0
 8003f08:	b970      	cbnz	r0, 8003f28 <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003f0e:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003f10:	2201      	movs	r2, #1
 8003f12:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003f1a:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003f1c:	f002 fde4 	bl	8006ae8 <HAL_SD_MspInit>
 8003f20:	e7eb      	b.n	8003efa <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	4770      	bx	lr
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e7f4      	b.n	8003f16 <HAL_SD_Init+0x28>

08003f2c <HAL_SD_ConfigWideBusOperation>:
{
 8003f2c:	b530      	push	{r4, r5, lr}
 8003f2e:	b08b      	sub	sp, #44	; 0x2c
 8003f30:	4604      	mov	r4, r0
 8003f32:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8003f34:	2303      	movs	r3, #3
 8003f36:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d01c      	beq.n	8003f7a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003f40:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003f44:	d008      	beq.n	8003f58 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003f46:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003f4a:	d00a      	beq.n	8003f62 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003f4c:	b179      	cbz	r1, 8003f6e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f54:	6383      	str	r3, [r0, #56]	; 0x38
 8003f56:	e014      	b.n	8003f82 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6383      	str	r3, [r0, #56]	; 0x38
 8003f60:	e00f      	b.n	8003f82 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8003f62:	f7ff fdcc 	bl	8003afe <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8003f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f68:	4318      	orrs	r0, r3
 8003f6a:	63a0      	str	r0, [r4, #56]	; 0x38
 8003f6c:	e009      	b.n	8003f82 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8003f6e:	f7ff fdf1 	bl	8003b54 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8003f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f74:	4318      	orrs	r0, r3
 8003f76:	63a0      	str	r0, [r4, #56]	; 0x38
 8003f78:	e003      	b.n	8003f82 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f84:	b13b      	cbz	r3, 8003f96 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HAL_SD_ConfigWideBusOperation+0xa0>)
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8003f92:	b00b      	add	sp, #44	; 0x2c
 8003f94:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003f96:	6863      	ldr	r3, [r4, #4]
 8003f98:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003f9a:	68a3      	ldr	r3, [r4, #8]
 8003f9c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003f9e:	68e3      	ldr	r3, [r4, #12]
 8003fa0:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8003fa2:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003fa4:	6963      	ldr	r3, [r4, #20]
 8003fa6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003fa8:	69a3      	ldr	r3, [r4, #24]
 8003faa:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8003fac:	ab0a      	add	r3, sp, #40	; 0x28
 8003fae:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003fb2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003fb6:	ab04      	add	r3, sp, #16
 8003fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fba:	6820      	ldr	r0, [r4, #0]
 8003fbc:	f000 ff22 	bl	8004e04 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e7e3      	b.n	8003f92 <HAL_SD_ConfigWideBusOperation+0x66>
 8003fca:	bf00      	nop
 8003fcc:	004005ff 	.word	0x004005ff

08003fd0 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d053      	beq.n	800407c <HAL_SPI_Init+0xac>
{
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	4604      	mov	r4, r0
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fdc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d040      	beq.n	8004066 <HAL_SPI_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	6813      	ldr	r3, [r2, #0]
 8003fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff2:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff4:	68e3      	ldr	r3, [r4, #12]
 8003ff6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ffa:	d939      	bls.n	8004070 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ffc:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ffe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004002:	d004      	beq.n	800400e <HAL_SPI_Init+0x3e>
 8004004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004008:	d001      	beq.n	800400e <HAL_SPI_Init+0x3e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800400a:	2100      	movs	r1, #0
 800400c:	62a1      	str	r1, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800400e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004010:	b921      	cbnz	r1, 800401c <HAL_SPI_Init+0x4c>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004012:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004016:	d92e      	bls.n	8004076 <HAL_SPI_Init+0xa6>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004018:	2302      	movs	r3, #2
 800401a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800401c:	6863      	ldr	r3, [r4, #4]
 800401e:	68a1      	ldr	r1, [r4, #8]
 8004020:	430b      	orrs	r3, r1
 8004022:	6921      	ldr	r1, [r4, #16]
 8004024:	430b      	orrs	r3, r1
 8004026:	6961      	ldr	r1, [r4, #20]
 8004028:	430b      	orrs	r3, r1
 800402a:	69a1      	ldr	r1, [r4, #24]
 800402c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004030:	430b      	orrs	r3, r1
 8004032:	69e1      	ldr	r1, [r4, #28]
 8004034:	430b      	orrs	r3, r1
 8004036:	6a21      	ldr	r1, [r4, #32]
 8004038:	430b      	orrs	r3, r1
 800403a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800403c:	6821      	ldr	r1, [r4, #0]
 800403e:	4303      	orrs	r3, r0
 8004040:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004042:	8b63      	ldrh	r3, [r4, #26]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800404a:	430b      	orrs	r3, r1
 800404c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800404e:	430b      	orrs	r3, r1
 8004050:	68e1      	ldr	r1, [r4, #12]
 8004052:	430b      	orrs	r3, r1
 8004054:	6821      	ldr	r1, [r4, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800405a:	2000      	movs	r0, #0
 800405c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800405e:	2301      	movs	r3, #1
 8004060:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004064:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004066:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800406a:	f002 fd89 	bl	8006b80 <HAL_SPI_MspInit>
 800406e:	e7b9      	b.n	8003fe4 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004074:	e7c3      	b.n	8003ffe <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004076:	2301      	movs	r3, #1
 8004078:	6323      	str	r3, [r4, #48]	; 0x30
 800407a:	e7cf      	b.n	800401c <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800407c:	2001      	movs	r0, #1
}
 800407e:	4770      	bx	lr

08004080 <HAL_SRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004080:	b328      	cbz	r0, 80040ce <HAL_SRAM_Init+0x4e>
{ 
 8004082:	b570      	push	{r4, r5, r6, lr}
 8004084:	4604      	mov	r4, r0
 8004086:	4615      	mov	r5, r2
 8004088:	460e      	mov	r6, r1
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800408a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800408e:	b1cb      	cbz	r3, 80040c4 <HAL_SRAM_Init+0x44>
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004090:	f104 0108 	add.w	r1, r4, #8
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	f000 fd6f 	bl	8004b78 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800409a:	68a2      	ldr	r2, [r4, #8]
 800409c:	4631      	mov	r1, r6
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	f000 fdb4 	bl	8004c0c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80040a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040a6:	68a2      	ldr	r2, [r4, #8]
 80040a8:	4629      	mov	r1, r5
 80040aa:	6860      	ldr	r0, [r4, #4]
 80040ac:	f000 fdde 	bl	8004c6c <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	68a1      	ldr	r1, [r4, #8]
 80040b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 80040c0:	2000      	movs	r0, #0
}
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80040c4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    HAL_SRAM_MspInit(hsram);
 80040c8:	f002 fe28 	bl	8006d1c <HAL_SRAM_MspInit>
 80040cc:	e7e0      	b.n	8004090 <HAL_SRAM_Init+0x10>
     return HAL_ERROR;
 80040ce:	2001      	movs	r0, #1
}
 80040d0:	4770      	bx	lr

080040d2 <UART_EndTxTransfer>:
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040d2:	6802      	ldr	r2, [r0, #0]
 80040d4:	6813      	ldr	r3, [r2, #0]
 80040d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040da:	6013      	str	r3, [r2, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	2320      	movs	r3, #32
 80040de:	6743      	str	r3, [r0, #116]	; 0x74
}
 80040e0:	4770      	bx	lr

080040e2 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e2:	6802      	ldr	r2, [r0, #0]
 80040e4:	6813      	ldr	r3, [r2, #0]
 80040e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ea:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	6802      	ldr	r2, [r0, #0]
 80040ee:	6893      	ldr	r3, [r2, #8]
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f6:	2320      	movs	r3, #32
 80040f8:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	6603      	str	r3, [r0, #96]	; 0x60
}
 80040fe:	4770      	bx	lr

08004100 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004100:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004102:	2b20      	cmp	r3, #32
 8004104:	d15a      	bne.n	80041bc <HAL_UART_Receive_IT+0xbc>
    if ((pData == NULL) || (Size == 0U))
 8004106:	2900      	cmp	r1, #0
 8004108:	d05a      	beq.n	80041c0 <HAL_UART_Receive_IT+0xc0>
 800410a:	2a00      	cmp	r2, #0
 800410c:	d05a      	beq.n	80041c4 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 800410e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004112:	2b01      	cmp	r3, #1
 8004114:	d058      	beq.n	80041c8 <HAL_UART_Receive_IT+0xc8>
 8004116:	2301      	movs	r3, #1
 8004118:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 800411c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 800411e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8004122:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800412a:	6883      	ldr	r3, [r0, #8]
 800412c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004130:	d006      	beq.n	8004140 <HAL_UART_Receive_IT+0x40>
 8004132:	b9a3      	cbnz	r3, 800415e <HAL_UART_Receive_IT+0x5e>
 8004134:	6903      	ldr	r3, [r0, #16]
 8004136:	b973      	cbnz	r3, 8004156 <HAL_UART_Receive_IT+0x56>
 8004138:	23ff      	movs	r3, #255	; 0xff
 800413a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800413e:	e014      	b.n	800416a <HAL_UART_Receive_IT+0x6a>
 8004140:	6903      	ldr	r3, [r0, #16]
 8004142:	b923      	cbnz	r3, 800414e <HAL_UART_Receive_IT+0x4e>
 8004144:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004148:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800414c:	e00d      	b.n	800416a <HAL_UART_Receive_IT+0x6a>
 800414e:	23ff      	movs	r3, #255	; 0xff
 8004150:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004154:	e009      	b.n	800416a <HAL_UART_Receive_IT+0x6a>
 8004156:	237f      	movs	r3, #127	; 0x7f
 8004158:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800415c:	e005      	b.n	800416a <HAL_UART_Receive_IT+0x6a>
 800415e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004162:	d01b      	beq.n	800419c <HAL_UART_Receive_IT+0x9c>
 8004164:	2300      	movs	r3, #0
 8004166:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416a:	2300      	movs	r3, #0
 800416c:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800416e:	2322      	movs	r3, #34	; 0x22
 8004170:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	6802      	ldr	r2, [r0, #0]
 8004174:	6893      	ldr	r3, [r2, #8]
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417c:	6883      	ldr	r3, [r0, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d015      	beq.n	80041b0 <HAL_UART_Receive_IT+0xb0>
      huart->RxISR = UART_RxISR_8BIT;
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_UART_Receive_IT+0xcc>)
 8004186:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 8004188:	2300      	movs	r3, #0
 800418a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800418e:	6801      	ldr	r1, [r0, #0]
 8004190:	680a      	ldr	r2, [r1, #0]
 8004192:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004196:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8004198:	4618      	mov	r0, r3
 800419a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800419c:	6903      	ldr	r3, [r0, #16]
 800419e:	b91b      	cbnz	r3, 80041a8 <HAL_UART_Receive_IT+0xa8>
 80041a0:	237f      	movs	r3, #127	; 0x7f
 80041a2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80041a6:	e7e0      	b.n	800416a <HAL_UART_Receive_IT+0x6a>
 80041a8:	233f      	movs	r3, #63	; 0x3f
 80041aa:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80041ae:	e7dc      	b.n	800416a <HAL_UART_Receive_IT+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	6903      	ldr	r3, [r0, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <HAL_UART_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_UART_Receive_IT+0xd0>)
 80041b8:	6603      	str	r3, [r0, #96]	; 0x60
 80041ba:	e7e5      	b.n	8004188 <HAL_UART_Receive_IT+0x88>
    return HAL_BUSY;
 80041bc:	2002      	movs	r0, #2
 80041be:	4770      	bx	lr
      return HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
 80041c2:	4770      	bx	lr
 80041c4:	2001      	movs	r0, #1
 80041c6:	4770      	bx	lr
    __HAL_LOCK(huart);
 80041c8:	2002      	movs	r0, #2
}
 80041ca:	4770      	bx	lr
 80041cc:	080042d3 	.word	0x080042d3
 80041d0:	08004335 	.word	0x08004335

080041d4 <HAL_UART_Transmit_DMA>:
{
 80041d4:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80041d6:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80041d8:	2c20      	cmp	r4, #32
 80041da:	d13e      	bne.n	800425a <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 80041dc:	2900      	cmp	r1, #0
 80041de:	d03e      	beq.n	800425e <HAL_UART_Transmit_DMA+0x8a>
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	d03e      	beq.n	8004262 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_LOCK(huart);
 80041e4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d03c      	beq.n	8004266 <HAL_UART_Transmit_DMA+0x92>
 80041ec:	4613      	mov	r3, r2
 80041ee:	4604      	mov	r4, r0
 80041f0:	2201      	movs	r2, #1
 80041f2:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80041f6:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80041f8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80041fc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	2200      	movs	r2, #0
 8004202:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004204:	2221      	movs	r2, #33	; 0x21
 8004206:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8004208:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800420a:	b18a      	cbz	r2, 8004230 <HAL_UART_Transmit_DMA+0x5c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800420c:	4917      	ldr	r1, [pc, #92]	; (800426c <HAL_UART_Transmit_DMA+0x98>)
 800420e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004210:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004212:	4917      	ldr	r1, [pc, #92]	; (8004270 <HAL_UART_Transmit_DMA+0x9c>)
 8004214:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004216:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8004218:	4916      	ldr	r1, [pc, #88]	; (8004274 <HAL_UART_Transmit_DMA+0xa0>)
 800421a:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800421c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800421e:	2100      	movs	r1, #0
 8004220:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004222:	6802      	ldr	r2, [r0, #0]
 8004224:	3228      	adds	r2, #40	; 0x28
 8004226:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004228:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800422a:	f7fd f9bd 	bl	80015a8 <HAL_DMA_Start_IT>
 800422e:	b958      	cbnz	r0, 8004248 <HAL_UART_Transmit_DMA+0x74>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	2240      	movs	r2, #64	; 0x40
 8004234:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8004236:	2000      	movs	r0, #0
 8004238:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800423c:	6822      	ldr	r2, [r4, #0]
 800423e:	6893      	ldr	r3, [r2, #8]
 8004240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004244:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8004246:	e009      	b.n	800425c <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004248:	2310      	movs	r3, #16
 800424a:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800424c:	2300      	movs	r3, #0
 800424e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8004252:	2320      	movs	r3, #32
 8004254:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8004256:	2001      	movs	r0, #1
 8004258:	e000      	b.n	800425c <HAL_UART_Transmit_DMA+0x88>
    return HAL_BUSY;
 800425a:	2002      	movs	r0, #2
}
 800425c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800425e:	2001      	movs	r0, #1
 8004260:	e7fc      	b.n	800425c <HAL_UART_Transmit_DMA+0x88>
 8004262:	2001      	movs	r0, #1
 8004264:	e7fa      	b.n	800425c <HAL_UART_Transmit_DMA+0x88>
    __HAL_LOCK(huart);
 8004266:	2002      	movs	r0, #2
 8004268:	e7f8      	b.n	800425c <HAL_UART_Transmit_DMA+0x88>
 800426a:	bf00      	nop
 800426c:	0800427b 	.word	0x0800427b
 8004270:	080042c9 	.word	0x080042c9
 8004274:	08004397 	.word	0x08004397

08004278 <HAL_UART_TxCpltCallback>:
}
 8004278:	4770      	bx	lr

0800427a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800427a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800427c:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800427e:	6802      	ldr	r2, [r0, #0]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	f012 0f20 	tst.w	r2, #32
 8004286:	d10d      	bne.n	80042a4 <UART_DMATransmitCplt+0x2a>
  {
    huart->TxXferCount = 0U;
 8004288:	2200      	movs	r2, #0
 800428a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	688a      	ldr	r2, [r1, #8]
 8004292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004296:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a0:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042a2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ffe7 	bl	8004278 <HAL_UART_TxCpltCallback>
}
 80042aa:	e7fa      	b.n	80042a2 <UART_DMATransmitCplt+0x28>

080042ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ac:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ae:	6801      	ldr	r1, [r0, #0]
 80042b0:	680a      	ldr	r2, [r1, #0]
 80042b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b6:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042b8:	2220      	movs	r2, #32
 80042ba:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042bc:	2200      	movs	r2, #0
 80042be:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042c0:	f7ff ffda 	bl	8004278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c4:	bd08      	pop	{r3, pc}

080042c6 <HAL_UART_TxHalfCpltCallback>:
}
 80042c6:	4770      	bx	lr

080042c8 <UART_DMATxHalfCplt>:
{
 80042c8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80042ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80042cc:	f7ff fffb 	bl	80042c6 <HAL_UART_TxHalfCpltCallback>
}
 80042d0:	bd08      	pop	{r3, pc}

080042d2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042d2:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80042d4:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042d8:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80042da:	2a22      	cmp	r2, #34	; 0x22
 80042dc:	d005      	beq.n	80042ea <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042de:	6802      	ldr	r2, [r0, #0]
 80042e0:	8b13      	ldrh	r3, [r2, #24]
 80042e2:	f043 0308 	orr.w	r3, r3, #8
 80042e6:	8313      	strh	r3, [r2, #24]
  }
}
 80042e8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042ea:	6802      	ldr	r2, [r0, #0]
 80042ec:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80042f2:	400b      	ands	r3, r1
 80042f4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80042f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80042f8:	3301      	adds	r3, #1
 80042fa:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80042fc:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004300:	3b01      	subs	r3, #1
 8004302:	b29b      	uxth	r3, r3
 8004304:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8004308:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ea      	bne.n	80042e8 <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004312:	6802      	ldr	r2, [r0, #0]
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800431a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	6802      	ldr	r2, [r0, #0]
 800431e:	6893      	ldr	r3, [r2, #8]
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004326:	2320      	movs	r3, #32
 8004328:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800432e:	f001 fec7 	bl	80060c0 <HAL_UART_RxCpltCallback>
 8004332:	e7d9      	b.n	80042e8 <UART_RxISR_8BIT+0x16>

08004334 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004334:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004336:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800433a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800433c:	2a22      	cmp	r2, #34	; 0x22
 800433e:	d005      	beq.n	800434c <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004340:	6802      	ldr	r2, [r0, #0]
 8004342:	8b13      	ldrh	r3, [r2, #24]
 8004344:	f043 0308 	orr.w	r3, r3, #8
 8004348:	8313      	strh	r3, [r2, #24]
  }
}
 800434a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800434c:	6802      	ldr	r2, [r0, #0]
 800434e:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004350:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8004352:	400b      	ands	r3, r1
 8004354:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8004356:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004358:	3302      	adds	r3, #2
 800435a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800435c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004360:	3b01      	subs	r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8004368:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1eb      	bne.n	800434a <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004372:	6802      	ldr	r2, [r0, #0]
 8004374:	6813      	ldr	r3, [r2, #0]
 8004376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437c:	6802      	ldr	r2, [r0, #0]
 800437e:	6893      	ldr	r3, [r2, #8]
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004386:	2320      	movs	r3, #32
 8004388:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800438e:	f001 fe97 	bl	80060c0 <HAL_UART_RxCpltCallback>
 8004392:	e7da      	b.n	800434a <UART_RxISR_16BIT+0x16>

08004394 <HAL_UART_ErrorCallback>:
}
 8004394:	4770      	bx	lr

08004396 <UART_DMAError>:
{
 8004396:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004398:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800439a:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800439c:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043a6:	d001      	beq.n	80043ac <UART_DMAError+0x16>
 80043a8:	2a21      	cmp	r2, #33	; 0x21
 80043aa:	d00e      	beq.n	80043ca <UART_DMAError+0x34>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043b4:	d001      	beq.n	80043ba <UART_DMAError+0x24>
 80043b6:	2d22      	cmp	r5, #34	; 0x22
 80043b8:	d00e      	beq.n	80043d8 <UART_DMAError+0x42>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80043bc:	f043 0310 	orr.w	r3, r3, #16
 80043c0:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff ffe6 	bl	8004394 <HAL_UART_ErrorCallback>
}
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7ff fe7e 	bl	80040d2 <UART_EndTxTransfer>
 80043d6:	e7e9      	b.n	80043ac <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80043de:	4620      	mov	r0, r4
 80043e0:	f7ff fe7f 	bl	80040e2 <UART_EndRxTransfer>
 80043e4:	e7e9      	b.n	80043ba <UART_DMAError+0x24>
	...

080043e8 <HAL_UART_IRQHandler>:
{
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043ec:	6802      	ldr	r2, [r0, #0]
 80043ee:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043f0:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043f2:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80043f4:	f013 050f 	ands.w	r5, r3, #15
 80043f8:	d10c      	bne.n	8004414 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043fa:	f013 0f20 	tst.w	r3, #32
 80043fe:	d009      	beq.n	8004414 <HAL_UART_IRQHandler+0x2c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004400:	f011 0f20 	tst.w	r1, #32
 8004404:	d006      	beq.n	8004414 <HAL_UART_IRQHandler+0x2c>
      if (huart->RxISR != NULL)
 8004406:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8093 	beq.w	8004534 <HAL_UART_IRQHandler+0x14c>
        huart->RxISR(huart);
 800440e:	4620      	mov	r0, r4
 8004410:	4798      	blx	r3
 8004412:	e08f      	b.n	8004534 <HAL_UART_IRQHandler+0x14c>
  if ((errorflags != 0U)
 8004414:	2d00      	cmp	r5, #0
 8004416:	d06f      	beq.n	80044f8 <HAL_UART_IRQHandler+0x110>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004418:	f010 0501 	ands.w	r5, r0, #1
 800441c:	d102      	bne.n	8004424 <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800441e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004422:	d069      	beq.n	80044f8 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004424:	f013 0f01 	tst.w	r3, #1
 8004428:	d007      	beq.n	800443a <HAL_UART_IRQHandler+0x52>
 800442a:	f411 7f80 	tst.w	r1, #256	; 0x100
 800442e:	d004      	beq.n	800443a <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004430:	2001      	movs	r0, #1
 8004432:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004434:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004436:	4302      	orrs	r2, r0
 8004438:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800443a:	f013 0f02 	tst.w	r3, #2
 800443e:	d007      	beq.n	8004450 <HAL_UART_IRQHandler+0x68>
 8004440:	b135      	cbz	r5, 8004450 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	2002      	movs	r0, #2
 8004446:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004448:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800444a:	f042 0204 	orr.w	r2, r2, #4
 800444e:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004450:	f013 0f04 	tst.w	r3, #4
 8004454:	d007      	beq.n	8004466 <HAL_UART_IRQHandler+0x7e>
 8004456:	b135      	cbz	r5, 8004466 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004458:	6822      	ldr	r2, [r4, #0]
 800445a:	2004      	movs	r0, #4
 800445c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800445e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004460:	f042 0202 	orr.w	r2, r2, #2
 8004464:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004466:	f013 0f08 	tst.w	r3, #8
 800446a:	d009      	beq.n	8004480 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800446c:	f011 0f20 	tst.w	r1, #32
 8004470:	d100      	bne.n	8004474 <HAL_UART_IRQHandler+0x8c>
 8004472:	b12d      	cbz	r5, 8004480 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	2008      	movs	r0, #8
 8004478:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800447a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800447c:	4302      	orrs	r2, r0
 800447e:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004480:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004482:	2a00      	cmp	r2, #0
 8004484:	d056      	beq.n	8004534 <HAL_UART_IRQHandler+0x14c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004486:	f013 0f20 	tst.w	r3, #32
 800448a:	d006      	beq.n	800449a <HAL_UART_IRQHandler+0xb2>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800448c:	f011 0f20 	tst.w	r1, #32
 8004490:	d003      	beq.n	800449a <HAL_UART_IRQHandler+0xb2>
        if (huart->RxISR != NULL)
 8004492:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004494:	b10b      	cbz	r3, 800449a <HAL_UART_IRQHandler+0xb2>
          huart->RxISR(huart);
 8004496:	4620      	mov	r0, r4
 8004498:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800449a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044a4:	d102      	bne.n	80044ac <HAL_UART_IRQHandler+0xc4>
 80044a6:	f012 0f08 	tst.w	r2, #8
 80044aa:	d01f      	beq.n	80044ec <HAL_UART_IRQHandler+0x104>
        UART_EndRxTransfer(huart);
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff fe18 	bl	80040e2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044ba:	d013      	beq.n	80044e4 <HAL_UART_IRQHandler+0xfc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80044c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80044c6:	b14b      	cbz	r3, 80044dc <HAL_UART_IRQHandler+0xf4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_UART_IRQHandler+0x158>)
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044cc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044ce:	f7fd f8cb 	bl	8001668 <HAL_DMA_Abort_IT>
 80044d2:	b378      	cbz	r0, 8004534 <HAL_UART_IRQHandler+0x14c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044d8:	4798      	blx	r3
 80044da:	e02b      	b.n	8004534 <HAL_UART_IRQHandler+0x14c>
            HAL_UART_ErrorCallback(huart);
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff ff59 	bl	8004394 <HAL_UART_ErrorCallback>
 80044e2:	e027      	b.n	8004534 <HAL_UART_IRQHandler+0x14c>
          HAL_UART_ErrorCallback(huart);
 80044e4:	4620      	mov	r0, r4
 80044e6:	f7ff ff55 	bl	8004394 <HAL_UART_ErrorCallback>
 80044ea:	e023      	b.n	8004534 <HAL_UART_IRQHandler+0x14c>
        HAL_UART_ErrorCallback(huart);
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7ff ff51 	bl	8004394 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	67e3      	str	r3, [r4, #124]	; 0x7c
 80044f6:	e01d      	b.n	8004534 <HAL_UART_IRQHandler+0x14c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80044fc:	d002      	beq.n	8004504 <HAL_UART_IRQHandler+0x11c>
 80044fe:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8004502:	d10a      	bne.n	800451a <HAL_UART_IRQHandler+0x132>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004504:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004508:	d00e      	beq.n	8004528 <HAL_UART_IRQHandler+0x140>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800450a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800450e:	d00b      	beq.n	8004528 <HAL_UART_IRQHandler+0x140>
    if (huart->TxISR != NULL)
 8004510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004512:	b17b      	cbz	r3, 8004534 <HAL_UART_IRQHandler+0x14c>
      huart->TxISR(huart);
 8004514:	4620      	mov	r0, r4
 8004516:	4798      	blx	r3
 8004518:	e00c      	b.n	8004534 <HAL_UART_IRQHandler+0x14c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800451a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800451e:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004520:	4620      	mov	r0, r4
 8004522:	f000 fb27 	bl	8004b74 <HAL_UARTEx_WakeupCallback>
    return;
 8004526:	e005      	b.n	8004534 <HAL_UART_IRQHandler+0x14c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004528:	f013 0f40 	tst.w	r3, #64	; 0x40
 800452c:	d002      	beq.n	8004534 <HAL_UART_IRQHandler+0x14c>
 800452e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004532:	d100      	bne.n	8004536 <HAL_UART_IRQHandler+0x14e>
}
 8004534:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8004536:	4620      	mov	r0, r4
 8004538:	f7ff feb8 	bl	80042ac <UART_EndTransmit_IT>
    return;
 800453c:	e7fa      	b.n	8004534 <HAL_UART_IRQHandler+0x14c>
 800453e:	bf00      	nop
 8004540:	08004545 	.word	0x08004545

08004544 <UART_DMAAbortOnError>:
{
 8004544:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004546:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800454e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8004552:	f7ff ff1f 	bl	8004394 <HAL_UART_ErrorCallback>
}
 8004556:	bd08      	pop	{r3, pc}

08004558 <UART_SetConfig>:
{
 8004558:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800455c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800455e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004560:	6883      	ldr	r3, [r0, #8]
 8004562:	6902      	ldr	r2, [r0, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	6942      	ldr	r2, [r0, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	69c2      	ldr	r2, [r0, #28]
 800456c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800456e:	6808      	ldr	r0, [r1, #0]
 8004570:	4aa2      	ldr	r2, [pc, #648]	; (80047fc <UART_SetConfig+0x2a4>)
 8004572:	4002      	ands	r2, r0
 8004574:	4313      	orrs	r3, r2
 8004576:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	6853      	ldr	r3, [r2, #4]
 800457c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004580:	68e1      	ldr	r1, [r4, #12]
 8004582:	430b      	orrs	r3, r1
 8004584:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004586:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	4b9d      	ldr	r3, [pc, #628]	; (8004800 <UART_SetConfig+0x2a8>)
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8004590:	6a23      	ldr	r3, [r4, #32]
 8004592:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004594:	6893      	ldr	r3, [r2, #8]
 8004596:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800459a:	430b      	orrs	r3, r1
 800459c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	4a98      	ldr	r2, [pc, #608]	; (8004804 <UART_SetConfig+0x2ac>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d027      	beq.n	80045f6 <UART_SetConfig+0x9e>
 80045a6:	4a98      	ldr	r2, [pc, #608]	; (8004808 <UART_SetConfig+0x2b0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d038      	beq.n	800461e <UART_SetConfig+0xc6>
 80045ac:	4a97      	ldr	r2, [pc, #604]	; (800480c <UART_SetConfig+0x2b4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d04e      	beq.n	8004650 <UART_SetConfig+0xf8>
 80045b2:	4a97      	ldr	r2, [pc, #604]	; (8004810 <UART_SetConfig+0x2b8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d061      	beq.n	800467c <UART_SetConfig+0x124>
 80045b8:	4a96      	ldr	r2, [pc, #600]	; (8004814 <UART_SetConfig+0x2bc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d074      	beq.n	80046a8 <UART_SetConfig+0x150>
 80045be:	4a90      	ldr	r2, [pc, #576]	; (8004800 <UART_SetConfig+0x2a8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	f000 808a 	beq.w	80046da <UART_SetConfig+0x182>
 80045c6:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80045c8:	4a8d      	ldr	r2, [pc, #564]	; (8004800 <UART_SetConfig+0x2a8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	f000 80aa 	beq.w	8004724 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d0:	69e3      	ldr	r3, [r4, #28]
 80045d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d6:	f000 8135 	beq.w	8004844 <UART_SetConfig+0x2ec>
    switch (clocksource)
 80045da:	2d08      	cmp	r5, #8
 80045dc:	f200 81bf 	bhi.w	800495e <UART_SetConfig+0x406>
 80045e0:	e8df f015 	tbh	[pc, r5, lsl #1]
 80045e4:	0195017f 	.word	0x0195017f
 80045e8:	01bd019f 	.word	0x01bd019f
 80045ec:	01bd01aa 	.word	0x01bd01aa
 80045f0:	01bd01bd 	.word	0x01bd01bd
 80045f4:	01b4      	.short	0x01b4
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f6:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80045fa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80045fe:	f002 0203 	and.w	r2, r2, #3
 8004602:	2a03      	cmp	r2, #3
 8004604:	d809      	bhi.n	800461a <UART_SetConfig+0xc2>
 8004606:	e8df f002 	tbb	[pc, r2]
 800460a:	0402      	.short	0x0402
 800460c:	0681      	.short	0x0681
 800460e:	2501      	movs	r5, #1
 8004610:	e7da      	b.n	80045c8 <UART_SetConfig+0x70>
 8004612:	2504      	movs	r5, #4
 8004614:	e7d8      	b.n	80045c8 <UART_SetConfig+0x70>
 8004616:	2508      	movs	r5, #8
 8004618:	e7d6      	b.n	80045c8 <UART_SetConfig+0x70>
 800461a:	2510      	movs	r5, #16
 800461c:	e7d4      	b.n	80045c8 <UART_SetConfig+0x70>
 800461e:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8004622:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004626:	f002 020c 	and.w	r2, r2, #12
 800462a:	2a0c      	cmp	r2, #12
 800462c:	d80e      	bhi.n	800464c <UART_SetConfig+0xf4>
 800462e:	e8df f002 	tbb	[pc, r2]
 8004632:	0d07      	.short	0x0d07
 8004634:	0d090d0d 	.word	0x0d090d0d
 8004638:	0d6f0d0d 	.word	0x0d6f0d0d
 800463c:	0d0d      	.short	0x0d0d
 800463e:	0b          	.byte	0x0b
 800463f:	00          	.byte	0x00
 8004640:	2500      	movs	r5, #0
 8004642:	e7c1      	b.n	80045c8 <UART_SetConfig+0x70>
 8004644:	2504      	movs	r5, #4
 8004646:	e7bf      	b.n	80045c8 <UART_SetConfig+0x70>
 8004648:	2508      	movs	r5, #8
 800464a:	e7bd      	b.n	80045c8 <UART_SetConfig+0x70>
 800464c:	2510      	movs	r5, #16
 800464e:	e7bb      	b.n	80045c8 <UART_SetConfig+0x70>
 8004650:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8004654:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004658:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800465c:	2a10      	cmp	r2, #16
 800465e:	d009      	beq.n	8004674 <UART_SetConfig+0x11c>
 8004660:	d905      	bls.n	800466e <UART_SetConfig+0x116>
 8004662:	2a20      	cmp	r2, #32
 8004664:	d056      	beq.n	8004714 <UART_SetConfig+0x1bc>
 8004666:	2a30      	cmp	r2, #48	; 0x30
 8004668:	d106      	bne.n	8004678 <UART_SetConfig+0x120>
 800466a:	2508      	movs	r5, #8
 800466c:	e7ac      	b.n	80045c8 <UART_SetConfig+0x70>
 800466e:	b91a      	cbnz	r2, 8004678 <UART_SetConfig+0x120>
 8004670:	2500      	movs	r5, #0
 8004672:	e7a9      	b.n	80045c8 <UART_SetConfig+0x70>
 8004674:	2504      	movs	r5, #4
 8004676:	e7a7      	b.n	80045c8 <UART_SetConfig+0x70>
 8004678:	2510      	movs	r5, #16
 800467a:	e7a5      	b.n	80045c8 <UART_SetConfig+0x70>
 800467c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8004680:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004684:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004688:	2a40      	cmp	r2, #64	; 0x40
 800468a:	d009      	beq.n	80046a0 <UART_SetConfig+0x148>
 800468c:	d905      	bls.n	800469a <UART_SetConfig+0x142>
 800468e:	2a80      	cmp	r2, #128	; 0x80
 8004690:	d042      	beq.n	8004718 <UART_SetConfig+0x1c0>
 8004692:	2ac0      	cmp	r2, #192	; 0xc0
 8004694:	d106      	bne.n	80046a4 <UART_SetConfig+0x14c>
 8004696:	2508      	movs	r5, #8
 8004698:	e796      	b.n	80045c8 <UART_SetConfig+0x70>
 800469a:	b91a      	cbnz	r2, 80046a4 <UART_SetConfig+0x14c>
 800469c:	2500      	movs	r5, #0
 800469e:	e793      	b.n	80045c8 <UART_SetConfig+0x70>
 80046a0:	2504      	movs	r5, #4
 80046a2:	e791      	b.n	80045c8 <UART_SetConfig+0x70>
 80046a4:	2510      	movs	r5, #16
 80046a6:	e78f      	b.n	80045c8 <UART_SetConfig+0x70>
 80046a8:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80046ac:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80046b0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80046b4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80046b8:	d00b      	beq.n	80046d2 <UART_SetConfig+0x17a>
 80046ba:	d907      	bls.n	80046cc <UART_SetConfig+0x174>
 80046bc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80046c0:	d02c      	beq.n	800471c <UART_SetConfig+0x1c4>
 80046c2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80046c6:	d106      	bne.n	80046d6 <UART_SetConfig+0x17e>
 80046c8:	2508      	movs	r5, #8
 80046ca:	e77d      	b.n	80045c8 <UART_SetConfig+0x70>
 80046cc:	b91a      	cbnz	r2, 80046d6 <UART_SetConfig+0x17e>
 80046ce:	2500      	movs	r5, #0
 80046d0:	e77a      	b.n	80045c8 <UART_SetConfig+0x70>
 80046d2:	2504      	movs	r5, #4
 80046d4:	e778      	b.n	80045c8 <UART_SetConfig+0x70>
 80046d6:	2510      	movs	r5, #16
 80046d8:	e776      	b.n	80045c8 <UART_SetConfig+0x70>
 80046da:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80046de:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80046e2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80046e6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80046ea:	d00b      	beq.n	8004704 <UART_SetConfig+0x1ac>
 80046ec:	d907      	bls.n	80046fe <UART_SetConfig+0x1a6>
 80046ee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80046f2:	d015      	beq.n	8004720 <UART_SetConfig+0x1c8>
 80046f4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80046f8:	d106      	bne.n	8004708 <UART_SetConfig+0x1b0>
 80046fa:	2508      	movs	r5, #8
 80046fc:	e764      	b.n	80045c8 <UART_SetConfig+0x70>
 80046fe:	b91a      	cbnz	r2, 8004708 <UART_SetConfig+0x1b0>
 8004700:	2500      	movs	r5, #0
 8004702:	e761      	b.n	80045c8 <UART_SetConfig+0x70>
 8004704:	2504      	movs	r5, #4
 8004706:	e75f      	b.n	80045c8 <UART_SetConfig+0x70>
 8004708:	2510      	movs	r5, #16
 800470a:	e75d      	b.n	80045c8 <UART_SetConfig+0x70>
 800470c:	2502      	movs	r5, #2
 800470e:	e75b      	b.n	80045c8 <UART_SetConfig+0x70>
 8004710:	2502      	movs	r5, #2
 8004712:	e759      	b.n	80045c8 <UART_SetConfig+0x70>
 8004714:	2502      	movs	r5, #2
 8004716:	e757      	b.n	80045c8 <UART_SetConfig+0x70>
 8004718:	2502      	movs	r5, #2
 800471a:	e755      	b.n	80045c8 <UART_SetConfig+0x70>
 800471c:	2502      	movs	r5, #2
 800471e:	e753      	b.n	80045c8 <UART_SetConfig+0x70>
 8004720:	2502      	movs	r5, #2
 8004722:	e751      	b.n	80045c8 <UART_SetConfig+0x70>
    switch (clocksource)
 8004724:	2d08      	cmp	r5, #8
 8004726:	f200 811d 	bhi.w	8004964 <UART_SetConfig+0x40c>
 800472a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800472e:	000c      	.short	0x000c
 8004730:	0014011b 	.word	0x0014011b
 8004734:	0011011b 	.word	0x0011011b
 8004738:	011b011b 	.word	0x011b011b
 800473c:	0009011b 	.word	0x0009011b
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004740:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004744:	e008      	b.n	8004758 <UART_SetConfig+0x200>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004746:	f7fd ffc3 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800474a:	b928      	cbnz	r0, 8004758 <UART_SetConfig+0x200>
 800474c:	2000      	movs	r0, #0
 800474e:	e0d9      	b.n	8004904 <UART_SetConfig+0x3ac>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004750:	f7fd fb94 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
        break;
 8004754:	e7f9      	b.n	800474a <UART_SetConfig+0x1f2>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004756:	4830      	ldr	r0, [pc, #192]	; (8004818 <UART_SetConfig+0x2c0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004758:	6862      	ldr	r2, [r4, #4]
 800475a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800475e:	4283      	cmp	r3, r0
 8004760:	f200 8102 	bhi.w	8004968 <UART_SetConfig+0x410>
 8004764:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004768:	f200 8100 	bhi.w	800496c <UART_SetConfig+0x414>
        switch (clocksource)
 800476c:	2d08      	cmp	r5, #8
 800476e:	d866      	bhi.n	800483e <UART_SetConfig+0x2e6>
 8004770:	e8df f005 	tbb	[pc, r5]
 8004774:	65206505 	.word	0x65206505
 8004778:	65656530 	.word	0x65656530
 800477c:	58          	.byte	0x58
 800477d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800477e:	f7fd ffa7 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8004782:	2500      	movs	r5, #0
 8004784:	0e07      	lsrs	r7, r0, #24
 8004786:	0206      	lsls	r6, r0, #8
 8004788:	6862      	ldr	r2, [r4, #4]
 800478a:	0850      	lsrs	r0, r2, #1
 800478c:	462b      	mov	r3, r5
 800478e:	eb16 0b00 	adds.w	fp, r6, r0
 8004792:	f147 0c00 	adc.w	ip, r7, #0
 8004796:	4658      	mov	r0, fp
 8004798:	4661      	mov	r1, ip
 800479a:	f7fb fd87 	bl	80002ac <__aeabi_uldivmod>
 800479e:	4603      	mov	r3, r0
            break;
 80047a0:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047a2:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 80047a6:	4a1d      	ldr	r2, [pc, #116]	; (800481c <UART_SetConfig+0x2c4>)
 80047a8:	4291      	cmp	r1, r2
 80047aa:	f200 80e1 	bhi.w	8004970 <UART_SetConfig+0x418>
          huart->Instance->BRR = usartdiv;
 80047ae:	6822      	ldr	r2, [r4, #0]
 80047b0:	60d3      	str	r3, [r2, #12]
 80047b2:	e0a7      	b.n	8004904 <UART_SetConfig+0x3ac>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80047b4:	0856      	lsrs	r6, r2, #1
 80047b6:	2500      	movs	r5, #0
 80047b8:	462b      	mov	r3, r5
 80047ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004820 <UART_SetConfig+0x2c8>
 80047be:	f04f 0c00 	mov.w	ip, #0
 80047c2:	eb1b 0006 	adds.w	r0, fp, r6
 80047c6:	f14c 0100 	adc.w	r1, ip, #0
 80047ca:	f7fb fd6f 	bl	80002ac <__aeabi_uldivmod>
 80047ce:	4603      	mov	r3, r0
            break;
 80047d0:	4628      	mov	r0, r5
 80047d2:	e7e6      	b.n	80047a2 <UART_SetConfig+0x24a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80047d4:	f7fd fb52 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 80047d8:	2500      	movs	r5, #0
 80047da:	0e07      	lsrs	r7, r0, #24
 80047dc:	0206      	lsls	r6, r0, #8
 80047de:	6862      	ldr	r2, [r4, #4]
 80047e0:	0850      	lsrs	r0, r2, #1
 80047e2:	462b      	mov	r3, r5
 80047e4:	eb16 0b00 	adds.w	fp, r6, r0
 80047e8:	f147 0c00 	adc.w	ip, r7, #0
 80047ec:	4658      	mov	r0, fp
 80047ee:	4661      	mov	r1, ip
 80047f0:	f7fb fd5c 	bl	80002ac <__aeabi_uldivmod>
 80047f4:	4603      	mov	r3, r0
            break;
 80047f6:	4628      	mov	r0, r5
 80047f8:	e7d3      	b.n	80047a2 <UART_SetConfig+0x24a>
 80047fa:	bf00      	nop
 80047fc:	efff69f3 	.word	0xefff69f3
 8004800:	40008000 	.word	0x40008000
 8004804:	40013800 	.word	0x40013800
 8004808:	40004400 	.word	0x40004400
 800480c:	40004800 	.word	0x40004800
 8004810:	40004c00 	.word	0x40004c00
 8004814:	40005000 	.word	0x40005000
 8004818:	00f42400 	.word	0x00f42400
 800481c:	000ffcff 	.word	0x000ffcff
 8004820:	f4240000 	.word	0xf4240000
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004824:	0850      	lsrs	r0, r2, #1
 8004826:	2700      	movs	r7, #0
 8004828:	2500      	movs	r5, #0
 800482a:	462b      	mov	r3, r5
 800482c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8004830:	f147 0100 	adc.w	r1, r7, #0
 8004834:	f7fb fd3a 	bl	80002ac <__aeabi_uldivmod>
 8004838:	4603      	mov	r3, r0
            break;
 800483a:	4628      	mov	r0, r5
 800483c:	e7b1      	b.n	80047a2 <UART_SetConfig+0x24a>
            ret = HAL_ERROR;
 800483e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004840:	2300      	movs	r3, #0
 8004842:	e7ae      	b.n	80047a2 <UART_SetConfig+0x24a>
    switch (clocksource)
 8004844:	2d08      	cmp	r5, #8
 8004846:	d849      	bhi.n	80048dc <UART_SetConfig+0x384>
 8004848:	e8df f005 	tbb	[pc, r5]
 800484c:	48291e05 	.word	0x48291e05
 8004850:	48484834 	.word	0x48484834
 8004854:	3f          	.byte	0x3f
 8004855:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004856:	f7fd ff3b 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	0853      	lsrs	r3, r2, #1
 800485e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004862:	fbb3 f3f2 	udiv	r3, r3, r2
 8004866:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004868:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486a:	f1a3 0110 	sub.w	r1, r3, #16
 800486e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004872:	4291      	cmp	r1, r2
 8004874:	d87e      	bhi.n	8004974 <UART_SetConfig+0x41c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004876:	b29a      	uxth	r2, r3
 8004878:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800487c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004880:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	60d3      	str	r3, [r2, #12]
 8004886:	e03d      	b.n	8004904 <UART_SetConfig+0x3ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004888:	f7fd ff34 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 800488c:	6862      	ldr	r2, [r4, #4]
 800488e:	0853      	lsrs	r3, r2, #1
 8004890:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004894:	fbb3 f3f2 	udiv	r3, r3, r2
 8004898:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800489a:	2000      	movs	r0, #0
        break;
 800489c:	e7e5      	b.n	800486a <UART_SetConfig+0x312>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800489e:	6862      	ldr	r2, [r4, #4]
 80048a0:	0853      	lsrs	r3, r2, #1
 80048a2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80048a6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80048aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b0:	2000      	movs	r0, #0
        break;
 80048b2:	e7da      	b.n	800486a <UART_SetConfig+0x312>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048b4:	f7fd fae2 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 80048b8:	6862      	ldr	r2, [r4, #4]
 80048ba:	0853      	lsrs	r3, r2, #1
 80048bc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80048c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c6:	2000      	movs	r0, #0
        break;
 80048c8:	e7cf      	b.n	800486a <UART_SetConfig+0x312>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	0853      	lsrs	r3, r2, #1
 80048ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80048d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80048d8:	2000      	movs	r0, #0
        break;
 80048da:	e7c6      	b.n	800486a <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 80048dc:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80048de:	2300      	movs	r3, #0
 80048e0:	e7c3      	b.n	800486a <UART_SetConfig+0x312>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048e2:	f7fd fef5 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80048ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f0:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f2:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f4:	f1a2 0110 	sub.w	r1, r2, #16
 80048f8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d83b      	bhi.n	8004978 <UART_SetConfig+0x420>
      huart->Instance->BRR = usartdiv;
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8004904:	2200      	movs	r2, #0
 8004906:	6622      	str	r2, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004908:	6662      	str	r2, [r4, #100]	; 0x64
}
 800490a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800490e:	f7fd fef1 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 8004912:	6863      	ldr	r3, [r4, #4]
 8004914:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8004918:	fbb2 f2f3 	udiv	r2, r2, r3
 800491c:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800491e:	2000      	movs	r0, #0
        break;
 8004920:	e7e8      	b.n	80048f4 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	085a      	lsrs	r2, r3, #1
 8004926:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 800492a:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
 800492e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004932:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8004934:	2000      	movs	r0, #0
        break;
 8004936:	e7dd      	b.n	80048f4 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004938:	f7fd faa0 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8004942:	fbb2 f2f3 	udiv	r2, r2, r3
 8004946:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8004948:	2000      	movs	r0, #0
        break;
 800494a:	e7d3      	b.n	80048f4 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	085a      	lsrs	r2, r3, #1
 8004950:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8004954:	fbb2 f2f3 	udiv	r2, r2, r3
 8004958:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800495a:	2000      	movs	r0, #0
        break;
 800495c:	e7ca      	b.n	80048f4 <UART_SetConfig+0x39c>
        ret = HAL_ERROR;
 800495e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004960:	2200      	movs	r2, #0
 8004962:	e7c7      	b.n	80048f4 <UART_SetConfig+0x39c>
        ret = HAL_ERROR;
 8004964:	2001      	movs	r0, #1
 8004966:	e7cd      	b.n	8004904 <UART_SetConfig+0x3ac>
        ret = HAL_ERROR;
 8004968:	2001      	movs	r0, #1
 800496a:	e7cb      	b.n	8004904 <UART_SetConfig+0x3ac>
 800496c:	2001      	movs	r0, #1
 800496e:	e7c9      	b.n	8004904 <UART_SetConfig+0x3ac>
          ret = HAL_ERROR;
 8004970:	2001      	movs	r0, #1
 8004972:	e7c7      	b.n	8004904 <UART_SetConfig+0x3ac>
      ret = HAL_ERROR;
 8004974:	2001      	movs	r0, #1
 8004976:	e7c5      	b.n	8004904 <UART_SetConfig+0x3ac>
      ret = HAL_ERROR;
 8004978:	2001      	movs	r0, #1
 800497a:	e7c3      	b.n	8004904 <UART_SetConfig+0x3ac>

0800497c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800497c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800497e:	f013 0f01 	tst.w	r3, #1
 8004982:	d006      	beq.n	8004992 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004984:	6802      	ldr	r2, [r0, #0]
 8004986:	6853      	ldr	r3, [r2, #4]
 8004988:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800498c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800498e:	430b      	orrs	r3, r1
 8004990:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004992:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004994:	f013 0f02 	tst.w	r3, #2
 8004998:	d006      	beq.n	80049a8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800499a:	6802      	ldr	r2, [r0, #0]
 800499c:	6853      	ldr	r3, [r2, #4]
 800499e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049aa:	f013 0f04 	tst.w	r3, #4
 80049ae:	d006      	beq.n	80049be <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b0:	6802      	ldr	r2, [r0, #0]
 80049b2:	6853      	ldr	r3, [r2, #4]
 80049b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80049ba:	430b      	orrs	r3, r1
 80049bc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049c0:	f013 0f08 	tst.w	r3, #8
 80049c4:	d006      	beq.n	80049d4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c6:	6802      	ldr	r2, [r0, #0]
 80049c8:	6853      	ldr	r3, [r2, #4]
 80049ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049ce:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049d6:	f013 0f10 	tst.w	r3, #16
 80049da:	d006      	beq.n	80049ea <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049dc:	6802      	ldr	r2, [r0, #0]
 80049de:	6893      	ldr	r3, [r2, #8]
 80049e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80049e6:	430b      	orrs	r3, r1
 80049e8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049ec:	f013 0f20 	tst.w	r3, #32
 80049f0:	d006      	beq.n	8004a00 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049f2:	6802      	ldr	r2, [r0, #0]
 80049f4:	6893      	ldr	r3, [r2, #8]
 80049f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049fa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a02:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a06:	d00a      	beq.n	8004a1e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a08:	6802      	ldr	r2, [r0, #0]
 8004a0a:	6853      	ldr	r3, [r2, #4]
 8004a0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a10:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1c:	d00b      	beq.n	8004a36 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a24:	d006      	beq.n	8004a34 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a26:	6802      	ldr	r2, [r0, #0]
 8004a28:	6853      	ldr	r3, [r2, #4]
 8004a2a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004a2e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6053      	str	r3, [r2, #4]
}
 8004a34:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a36:	6802      	ldr	r2, [r0, #0]
 8004a38:	6853      	ldr	r3, [r2, #4]
 8004a3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a3e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6053      	str	r3, [r2, #4]
 8004a44:	e7eb      	b.n	8004a1e <UART_AdvFeatureConfig+0xa2>

08004a46 <UART_WaitOnFlagUntilTimeout>:
{
 8004a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	460f      	mov	r7, r1
 8004a4e:	4616      	mov	r6, r2
 8004a50:	4698      	mov	r8, r3
 8004a52:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	ea37 0303 	bics.w	r3, r7, r3
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	42b3      	cmp	r3, r6
 8004a64:	d11c      	bne.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004a6a:	d0f3      	beq.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6c:	f7fb fde2 	bl	8000634 <HAL_GetTick>
 8004a70:	eba0 0008 	sub.w	r0, r0, r8
 8004a74:	42a0      	cmp	r0, r4
 8004a76:	d801      	bhi.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x36>
 8004a78:	2c00      	cmp	r4, #0
 8004a7a:	d1eb      	bne.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a7c:	682a      	ldr	r2, [r5, #0]
 8004a7e:	6813      	ldr	r3, [r2, #0]
 8004a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a84:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a86:	682a      	ldr	r2, [r5, #0]
 8004a88:	6893      	ldr	r3, [r2, #8]
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004a90:	2320      	movs	r3, #32
 8004a92:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a94:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004a96:	2300      	movs	r3, #0
 8004a98:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8004a9c:	2003      	movs	r0, #3
 8004a9e:	e000      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8004aa0:	2000      	movs	r0, #0
}
 8004aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004aa6 <UART_CheckIdleState>:
{
 8004aa6:	b530      	push	{r4, r5, lr}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004ab0:	f7fb fdc0 	bl	8000634 <HAL_GetTick>
 8004ab4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f013 0f08 	tst.w	r3, #8
 8004abe:	d10c      	bne.n	8004ada <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f013 0f04 	tst.w	r3, #4
 8004ac8:	d115      	bne.n	8004af6 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8004aca:	2320      	movs	r3, #32
 8004acc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ace:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8004ad6:	b003      	add	sp, #12
 8004ad8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ada:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7ff ffac 	bl	8004a46 <UART_WaitOnFlagUntilTimeout>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d0e6      	beq.n	8004ac0 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004af2:	2003      	movs	r0, #3
 8004af4:	e7ef      	b.n	8004ad6 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	462b      	mov	r3, r5
 8004afe:	2200      	movs	r2, #0
 8004b00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b04:	4620      	mov	r0, r4
 8004b06:	f7ff ff9e 	bl	8004a46 <UART_WaitOnFlagUntilTimeout>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d0dd      	beq.n	8004aca <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8004b0e:	2003      	movs	r0, #3
 8004b10:	e7e1      	b.n	8004ad6 <UART_CheckIdleState+0x30>

08004b12 <HAL_UART_Init>:
  if (huart == NULL)
 8004b12:	b368      	cbz	r0, 8004b70 <HAL_UART_Init+0x5e>
{
 8004b14:	b510      	push	{r4, lr}
 8004b16:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b18:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004b1a:	b303      	cbz	r3, 8004b5e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	2324      	movs	r3, #36	; 0x24
 8004b1e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f7ff fd14 	bl	8004558 <UART_SetConfig>
 8004b30:	2801      	cmp	r0, #1
 8004b32:	d013      	beq.n	8004b5c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b36:	b9bb      	cbnz	r3, 8004b68 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	6853      	ldr	r3, [r2, #4]
 8004b3c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004b40:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	6893      	ldr	r3, [r2, #8]
 8004b46:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004b4a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004b4c:	6822      	ldr	r2, [r4, #0]
 8004b4e:	6813      	ldr	r3, [r2, #0]
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7ff ffa5 	bl	8004aa6 <UART_CheckIdleState>
}
 8004b5c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004b5e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004b62:	f001 fe97 	bl	8006894 <HAL_UART_MspInit>
 8004b66:	e7d9      	b.n	8004b1c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff ff07 	bl	800497c <UART_AdvFeatureConfig>
 8004b6e:	e7e3      	b.n	8004b38 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8004b70:	2001      	movs	r0, #1
}
 8004b72:	4770      	bx	lr

08004b74 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b74:	4770      	bx	lr
	...

08004b78 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 8004b78:	b470      	push	{r4, r5, r6}
#if defined(FMC_BCRx_NBLSET)
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
#endif /* FMC_BCRx_NBLSET */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004b7a:	680a      	ldr	r2, [r1, #0]
 8004b7c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8004b88:	688b      	ldr	r3, [r1, #8]
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d030      	beq.n	8004bf0 <FMC_NORSRAM_Init+0x78>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004b8e:	2600      	movs	r6, #0
  }

  MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (flashaccess              |
 8004b90:	680c      	ldr	r4, [r1, #0]
 8004b92:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8004b96:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <FMC_NORSRAM_Init+0x90>)
 8004b98:	402a      	ands	r2, r5
 8004b9a:	684d      	ldr	r5, [r1, #4]
 8004b9c:	4335      	orrs	r5, r6
 8004b9e:	432b      	orrs	r3, r5
 8004ba0:	68cd      	ldr	r5, [r1, #12]
 8004ba2:	432b      	orrs	r3, r5
 8004ba4:	690d      	ldr	r5, [r1, #16]
 8004ba6:	432b      	orrs	r3, r5
 8004ba8:	694d      	ldr	r5, [r1, #20]
 8004baa:	432b      	orrs	r3, r5
 8004bac:	698d      	ldr	r5, [r1, #24]
 8004bae:	432b      	orrs	r3, r5
 8004bb0:	69cd      	ldr	r5, [r1, #28]
 8004bb2:	432b      	orrs	r3, r5
 8004bb4:	6a0d      	ldr	r5, [r1, #32]
 8004bb6:	432b      	orrs	r3, r5
 8004bb8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8004bba:	432b      	orrs	r3, r5
 8004bbc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8004bbe:	432b      	orrs	r3, r5
 8004bc0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8004bc2:	432b      	orrs	r3, r5
 8004bc4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8004bc6:	432b      	orrs	r3, r5
 8004bc8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004bca:	432b      	orrs	r3, r5
 8004bcc:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8004bce:	432b      	orrs	r3, r5
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
                                                          Init->NBLSetupTime       |
#endif /* FMC_BCRx_NBLSET */
                                                          Init->PageSize));

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004bd6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bdc:	d00a      	beq.n	8004bf4 <FMC_NORSRAM_Init+0x7c>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

#if defined(FMC_BCR1_WFDIS)
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8004bde:	680b      	ldr	r3, [r1, #0]
 8004be0:	b11b      	cbz	r3, 8004bea <FMC_NORSRAM_Init+0x72>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8004be2:	6803      	ldr	r3, [r0, #0]
 8004be4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004be6:	4313      	orrs	r3, r2
 8004be8:	6003      	str	r3, [r0, #0]
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
}
 8004bea:	2000      	movs	r0, #0
 8004bec:	bc70      	pop	{r4, r5, r6}
 8004bee:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004bf0:	2640      	movs	r6, #64	; 0x40
 8004bf2:	e7cd      	b.n	8004b90 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004bf4:	680a      	ldr	r2, [r1, #0]
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	d0f1      	beq.n	8004bde <FMC_NORSRAM_Init+0x66>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8004bfa:	6802      	ldr	r2, [r0, #0]
 8004bfc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004c00:	4313      	orrs	r3, r2
 8004c02:	6003      	str	r3, [r0, #0]
 8004c04:	e7eb      	b.n	8004bde <FMC_NORSRAM_Init+0x66>
 8004c06:	bf00      	nop
 8004c08:	ffc00480 	.word	0xffc00480

08004c0c <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004c0c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                             |
 8004c0e:	3201      	adds	r2, #1
 8004c10:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8004c14:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8004c18:	680b      	ldr	r3, [r1, #0]
 8004c1a:	684d      	ldr	r5, [r1, #4]
 8004c1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004c20:	688d      	ldr	r5, [r1, #8]
 8004c22:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004c26:	68cd      	ldr	r5, [r1, #12]
 8004c28:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004c2c:	690d      	ldr	r5, [r1, #16]
 8004c2e:	3d01      	subs	r5, #1
 8004c30:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8004c34:	694d      	ldr	r5, [r1, #20]
 8004c36:	3d02      	subs	r5, #2
 8004c38:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004c3c:	698d      	ldr	r5, [r1, #24]
 8004c3e:	432b      	orrs	r3, r5
 8004c40:	4323      	orrs	r3, r4
 8004c42:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                        (((Timing->CLKDivision) - 1)      << FMC_BTRx_CLKDIV_Pos)        |
                        (((Timing->DataLatency) - 2)      << FMC_BTRx_DATLAT_Pos)        |
                        (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004c46:	6803      	ldr	r3, [r0, #0]
 8004c48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004c4c:	d00b      	beq.n	8004c66 <FMC_NORSRAM_Timing_Init+0x5a>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 8004c4e:	6843      	ldr	r3, [r0, #4]
 8004c50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1) << FMC_BTRx_CLKDIV_Pos);
 8004c54:	690a      	ldr	r2, [r1, #16]
 8004c56:	3a01      	subs	r2, #1
 8004c58:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1], FMC_BTRx_CLKDIV, tmpr);
 8004c5c:	6843      	ldr	r3, [r0, #4]
 8004c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c62:	4313      	orrs	r3, r2
 8004c64:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 8004c66:	2000      	movs	r0, #0
 8004c68:	bc30      	pop	{r4, r5}
 8004c6a:	4770      	bx	lr

08004c6c <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8004c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c70:	d005      	beq.n	8004c7e <FMC_NORSRAM_Extended_Timing_Init+0x12>
                          Timing->AccessMode                                          |
                          ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004c72:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004c76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	4770      	bx	lr
{
 8004c7e:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                              |
 8004c80:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8004c84:	4c09      	ldr	r4, [pc, #36]	; (8004cac <FMC_NORSRAM_Extended_Timing_Init+0x40>)
 8004c86:	401c      	ands	r4, r3
 8004c88:	680b      	ldr	r3, [r1, #0]
 8004c8a:	684d      	ldr	r5, [r1, #4]
 8004c8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004c90:	688d      	ldr	r5, [r1, #8]
 8004c92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004c96:	698d      	ldr	r5, [r1, #24]
 8004c98:	432b      	orrs	r3, r5
 8004c9a:	68c9      	ldr	r1, [r1, #12]
 8004c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004ca0:	4323      	orrs	r3, r4
 8004ca2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	bc30      	pop	{r4, r5}
 8004caa:	4770      	bx	lr
 8004cac:	cff00000 	.word	0xcff00000

08004cb0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <SDMMC_GetCmdError+0x30>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <SDMMC_GetCmdError+0x34>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	0a5a      	lsrs	r2, r3, #9
 8004cbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cc0:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8004cc4:	1e5a      	subs	r2, r3, #1
 8004cc6:	b143      	cbz	r3, 8004cda <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004cc8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004cca:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004ccc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004cd0:	d0f8      	beq.n	8004cc4 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004cd2:	23c5      	movs	r3, #197	; 0xc5
 8004cd4:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004cda:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004cde:	4770      	bx	lr
 8004ce0:	20000008 	.word	0x20000008
 8004ce4:	10624dd3 	.word	0x10624dd3

08004ce8 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ce8:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <SDMMC_GetCmdResp2+0x58>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <SDMMC_GetCmdResp2+0x5c>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0a5a      	lsrs	r2, r3, #9
 8004cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cf8:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8004cfc:	1e5a      	subs	r2, r3, #1
 8004cfe:	b1db      	cbz	r3, 8004d38 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004d00:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004d02:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d04:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004d08:	d0f8      	beq.n	8004cfc <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d0a:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8004d0e:	d1f5      	bne.n	8004cfc <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d12:	f013 0f04 	tst.w	r3, #4
 8004d16:	d107      	bne.n	8004d28 <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004d18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d1a:	f013 0f01 	tst.w	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d20:	23c5      	movs	r3, #197	; 0xc5
 8004d22:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004d24:	2000      	movs	r0, #0
 8004d26:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d28:	2304      	movs	r3, #4
 8004d2a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004d30:	2301      	movs	r3, #1
 8004d32:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d34:	4618      	mov	r0, r3
 8004d36:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004d38:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000008 	.word	0x20000008
 8004d44:	10624dd3 	.word	0x10624dd3

08004d48 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d48:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <SDMMC_GetCmdResp3+0x48>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <SDMMC_GetCmdResp3+0x4c>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	0a5a      	lsrs	r2, r3, #9
 8004d54:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d58:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8004d5c:	1e5a      	subs	r2, r3, #1
 8004d5e:	b19b      	cbz	r3, 8004d88 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004d60:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004d62:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d64:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004d68:	d0f8      	beq.n	8004d5c <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d6a:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8004d6e:	d1f5      	bne.n	8004d5c <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d72:	f013 0f04 	tst.w	r3, #4
 8004d76:	d103      	bne.n	8004d80 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d78:	23c5      	movs	r3, #197	; 0xc5
 8004d7a:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d80:	2304      	movs	r3, #4
 8004d82:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d84:	4618      	mov	r0, r3
 8004d86:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004d88:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000008 	.word	0x20000008
 8004d94:	10624dd3 	.word	0x10624dd3

08004d98 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d98:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <SDMMC_GetCmdResp7+0x64>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <SDMMC_GetCmdResp7+0x68>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	0a5a      	lsrs	r2, r3, #9
 8004da4:	f241 3388 	movw	r3, #5000	; 0x1388
 8004da8:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8004dac:	1e5a      	subs	r2, r3, #1
 8004dae:	b1fb      	cbz	r3, 8004df0 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8004db0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004db2:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004db4:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004db8:	d0f8      	beq.n	8004dac <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004dba:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8004dbe:	d1f5      	bne.n	8004dac <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004dc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dc2:	f013 0f04 	tst.w	r3, #4
 8004dc6:	d10b      	bne.n	8004de0 <SDMMC_GetCmdResp7+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004dc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dca:	f013 0f01 	tst.w	r3, #1
 8004dce:	d10b      	bne.n	8004de8 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004dd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004dd6:	d00e      	beq.n	8004df6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004ddc:	2000      	movs	r0, #0
 8004dde:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004de0:	2304      	movs	r3, #4
 8004de2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004de4:	4618      	mov	r0, r3
 8004de6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004de8:	2301      	movs	r3, #1
 8004dea:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dec:	4618      	mov	r0, r3
 8004dee:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004df0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004df4:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8004df6:	2000      	movs	r0, #0

}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000008 	.word	0x20000008
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <SDMMC_Init>:
{
 8004e04:	b084      	sub	sp, #16
 8004e06:	b410      	push	{r4}
 8004e08:	ac02      	add	r4, sp, #8
 8004e0a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8004e0e:	460b      	mov	r3, r1
 8004e10:	9a04      	ldr	r2, [sp, #16]
 8004e12:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8004e14:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8004e16:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8004e18:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8004e1a:	4313      	orrs	r3, r2
             Init.ClockDiv
 8004e1c:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8004e1e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e20:	9a03      	ldr	r2, [sp, #12]
 8004e22:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004e24:	6842      	ldr	r2, [r0, #4]
 8004e26:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8004e2a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	6042      	str	r2, [r0, #4]
}
 8004e32:	2000      	movs	r0, #0
 8004e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e38:	b004      	add	sp, #16
 8004e3a:	4770      	bx	lr

08004e3c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8004e3c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8004e40:	4770      	bx	lr

08004e42 <SDMMC_PowerState_ON>:
{
 8004e42:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004e44:	2303      	movs	r3, #3
 8004e46:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8004e48:	2002      	movs	r0, #2
 8004e4a:	f7fb fbf9 	bl	8000640 <HAL_Delay>
}
 8004e4e:	2000      	movs	r0, #0
 8004e50:	bd08      	pop	{r3, pc}

08004e52 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004e52:	6800      	ldr	r0, [r0, #0]
}
 8004e54:	f000 0003 	and.w	r0, r0, #3
 8004e58:	4770      	bx	lr

08004e5a <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8004e5a:	680b      	ldr	r3, [r1, #0]
 8004e5c:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e5e:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8004e60:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e62:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8004e64:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8004e66:	4313      	orrs	r3, r2
                       Command->CPSM);
 8004e68:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8004e6a:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004e6c:	68c2      	ldr	r2, [r0, #12]
 8004e6e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004e72:	f022 020f 	bic.w	r2, r2, #15
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60c3      	str	r3, [r0, #12]
}
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	4770      	bx	lr

08004e7e <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8004e7e:	6900      	ldr	r0, [r0, #16]
}
 8004e80:	b2c0      	uxtb	r0, r0
 8004e82:	4770      	bx	lr

08004e84 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004e84:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8004e86:	5840      	ldr	r0, [r0, r1]
}
 8004e88:	4770      	bx	lr
	...

08004e8c <SDMMC_GetCmdResp1>:
{
 8004e8c:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004e8e:	4b52      	ldr	r3, [pc, #328]	; (8004fd8 <SDMMC_GetCmdResp1+0x14c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4c52      	ldr	r4, [pc, #328]	; (8004fdc <SDMMC_GetCmdResp1+0x150>)
 8004e94:	fba4 4303 	umull	r4, r3, r4, r3
 8004e98:	0a5b      	lsrs	r3, r3, #9
 8004e9a:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8004e9e:	1e53      	subs	r3, r2, #1
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	d060      	beq.n	8004f66 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDMMCx->STA;
 8004ea4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004ea6:	461a      	mov	r2, r3
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004ea8:	f014 0f45 	tst.w	r4, #69	; 0x45
 8004eac:	d0f7      	beq.n	8004e9e <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004eae:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8004eb2:	d1f4      	bne.n	8004e9e <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004eb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004eb6:	f013 0f04 	tst.w	r3, #4
 8004eba:	d107      	bne.n	8004ecc <SDMMC_GetCmdResp1+0x40>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004ebc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ebe:	f013 0f01 	tst.w	r3, #1
 8004ec2:	d007      	beq.n	8004ed4 <SDMMC_GetCmdResp1+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ec8:	4618      	mov	r0, r3
 8004eca:	e04e      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ecc:	2304      	movs	r3, #4
 8004ece:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	e04a      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
 8004ed4:	460d      	mov	r5, r1
 8004ed6:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ed8:	23c5      	movs	r3, #197	; 0xc5
 8004eda:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004edc:	f7ff ffcf 	bl	8004e7e <SDMMC_GetCommandResponse>
 8004ee0:	42a8      	cmp	r0, r5
 8004ee2:	d001      	beq.n	8004ee8 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	e040      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7ff ffca 	bl	8004e84 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004ef0:	4b3b      	ldr	r3, [pc, #236]	; (8004fe0 <SDMMC_GetCmdResp1+0x154>)
 8004ef2:	4003      	ands	r3, r0
 8004ef4:	b3d3      	cbz	r3, 8004f6c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	db3a      	blt.n	8004f70 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004efa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004efe:	d13a      	bne.n	8004f76 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004f00:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8004f04:	d139      	bne.n	8004f7a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004f06:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8004f0a:	d138      	bne.n	8004f7e <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f0c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8004f10:	d138      	bne.n	8004f84 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f12:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8004f16:	d138      	bne.n	8004f8a <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f18:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8004f1c:	d138      	bne.n	8004f90 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004f1e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8004f22:	d138      	bne.n	8004f96 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f24:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8004f28:	d138      	bne.n	8004f9c <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004f2a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8004f2e:	d138      	bne.n	8004fa2 <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004f30:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8004f34:	d138      	bne.n	8004fa8 <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004f36:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8004f3a:	d138      	bne.n	8004fae <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004f3c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8004f40:	d138      	bne.n	8004fb4 <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004f42:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8004f46:	d138      	bne.n	8004fba <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004f48:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004f4c:	d138      	bne.n	8004fc0 <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004f4e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8004f52:	d138      	bne.n	8004fc6 <SDMMC_GetCmdResp1+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004f54:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8004f58:	d138      	bne.n	8004fcc <SDMMC_GetCmdResp1+0x140>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004f5a:	f010 0f08 	tst.w	r0, #8
 8004f5e:	d038      	beq.n	8004fd2 <SDMMC_GetCmdResp1+0x146>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004f60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004f64:	e001      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8004f66:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e7fc      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004f70:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004f74:	e7f9      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004f76:	2040      	movs	r0, #64	; 0x40
 8004f78:	e7f7      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004f7a:	2080      	movs	r0, #128	; 0x80
 8004f7c:	e7f5      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004f7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f82:	e7f2      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004f84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004f88:	e7ef      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004f8a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004f8e:	e7ec      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004f90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f94:	e7e9      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f9a:	e7e6      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fa0:	e7e3      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004fa2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004fa6:	e7e0      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8004fa8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004fac:	e7dd      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004fae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004fb2:	e7da      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004fb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004fb8:	e7d7      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004fba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fbe:	e7d4      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004fc0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004fc4:	e7d1      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004fc6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004fca:	e7ce      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8004fcc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004fd0:	e7cb      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fd2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004fd6:	e7c8      	b.n	8004f6a <SDMMC_GetCmdResp1+0xde>
 8004fd8:	20000008 	.word	0x20000008
 8004fdc:	10624dd3 	.word	0x10624dd3
 8004fe0:	fdffe008 	.word	0xfdffe008

08004fe4 <SDMMC_GetCmdResp6>:
{
 8004fe4:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <SDMMC_GetCmdResp6+0x9c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4c26      	ldr	r4, [pc, #152]	; (8005084 <SDMMC_GetCmdResp6+0xa0>)
 8004fec:	fba4 4303 	umull	r4, r3, r4, r3
 8004ff0:	0a5c      	lsrs	r4, r3, #9
 8004ff2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ff6:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8004ffa:	1e5c      	subs	r4, r3, #1
 8004ffc:	b3b3      	cbz	r3, 800506c <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 8004ffe:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005000:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005002:	f015 0f45 	tst.w	r5, #69	; 0x45
 8005006:	d0f8      	beq.n	8004ffa <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005008:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800500c:	d1f5      	bne.n	8004ffa <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800500e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005010:	f013 0f04 	tst.w	r3, #4
 8005014:	d107      	bne.n	8005026 <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005016:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005018:	f013 0f01 	tst.w	r3, #1
 800501c:	d007      	beq.n	800502e <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800501e:	2301      	movs	r3, #1
 8005020:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005022:	4618      	mov	r0, r3
 8005024:	e024      	b.n	8005070 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005026:	2304      	movs	r3, #4
 8005028:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800502a:	4618      	mov	r0, r3
 800502c:	e020      	b.n	8005070 <SDMMC_GetCmdResp6+0x8c>
 800502e:	4616      	mov	r6, r2
 8005030:	460d      	mov	r5, r1
 8005032:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005034:	f7ff ff23 	bl	8004e7e <SDMMC_GetCommandResponse>
 8005038:	42a8      	cmp	r0, r5
 800503a:	d001      	beq.n	8005040 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800503c:	2001      	movs	r0, #1
 800503e:	e017      	b.n	8005070 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005040:	23c5      	movs	r3, #197	; 0xc5
 8005042:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005044:	2100      	movs	r1, #0
 8005046:	4620      	mov	r0, r4
 8005048:	f7ff ff1c 	bl	8004e84 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800504c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8005050:	d008      	beq.n	8005064 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005052:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8005056:	d10c      	bne.n	8005072 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005058:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800505c:	d00c      	beq.n	8005078 <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800505e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005062:	e005      	b.n	8005070 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005064:	0c00      	lsrs	r0, r0, #16
 8005066:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8005068:	2000      	movs	r0, #0
 800506a:	e001      	b.n	8005070 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 800506c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005070:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005072:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005076:	e7fb      	b.n	8005070 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005078:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800507c:	e7f8      	b.n	8005070 <SDMMC_GetCmdResp6+0x8c>
 800507e:	bf00      	nop
 8005080:	20000008 	.word	0x20000008
 8005084:	10624dd3 	.word	0x10624dd3

08005088 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005088:	680b      	ldr	r3, [r1, #0]
 800508a:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800508c:	684b      	ldr	r3, [r1, #4]
 800508e:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005090:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8005092:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005094:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8005096:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8005098:	4313      	orrs	r3, r2
                       Data->DPSM);
 800509a:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 800509c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800509e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80050a0:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80050a4:	4313      	orrs	r3, r2
 80050a6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80050a8:	2000      	movs	r0, #0
 80050aa:	4770      	bx	lr

080050ac <SDMMC_CmdBlockLength>:
{
 80050ac:	b530      	push	{r4, r5, lr}
 80050ae:	b087      	sub	sp, #28
 80050b0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80050b2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80050b4:	2410      	movs	r4, #16
 80050b6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050bc:	2300      	movs	r3, #0
 80050be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050c6:	a901      	add	r1, sp, #4
 80050c8:	f7ff fec7 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80050cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d0:	4621      	mov	r1, r4
 80050d2:	4628      	mov	r0, r5
 80050d4:	f7ff feda 	bl	8004e8c <SDMMC_GetCmdResp1>
}
 80050d8:	b007      	add	sp, #28
 80050da:	bd30      	pop	{r4, r5, pc}

080050dc <SDMMC_CmdSelDesel>:
{
 80050dc:	b530      	push	{r4, r5, lr}
 80050de:	b087      	sub	sp, #28
 80050e0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80050e2:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80050e4:	2407      	movs	r4, #7
 80050e6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050ec:	2300      	movs	r3, #0
 80050ee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050f6:	a901      	add	r1, sp, #4
 80050f8:	f7ff feaf 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80050fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005100:	4621      	mov	r1, r4
 8005102:	4628      	mov	r0, r5
 8005104:	f7ff fec2 	bl	8004e8c <SDMMC_GetCmdResp1>
}
 8005108:	b007      	add	sp, #28
 800510a:	bd30      	pop	{r4, r5, pc}

0800510c <SDMMC_CmdGoIdleState>:
{
 800510c:	b510      	push	{r4, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005116:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005118:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800511a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800511c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005120:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005122:	a901      	add	r1, sp, #4
 8005124:	f7ff fe99 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005128:	4620      	mov	r0, r4
 800512a:	f7ff fdc1 	bl	8004cb0 <SDMMC_GetCmdError>
}
 800512e:	b006      	add	sp, #24
 8005130:	bd10      	pop	{r4, pc}

08005132 <SDMMC_CmdOperCond>:
{
 8005132:	b510      	push	{r4, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005138:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800513c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800513e:	2308      	movs	r3, #8
 8005140:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005142:	2340      	movs	r3, #64	; 0x40
 8005144:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005146:	2300      	movs	r3, #0
 8005148:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800514a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005150:	a901      	add	r1, sp, #4
 8005152:	f7ff fe82 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005156:	4620      	mov	r0, r4
 8005158:	f7ff fe1e 	bl	8004d98 <SDMMC_GetCmdResp7>
}
 800515c:	b006      	add	sp, #24
 800515e:	bd10      	pop	{r4, pc}

08005160 <SDMMC_CmdAppCommand>:
{
 8005160:	b530      	push	{r4, r5, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005166:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005168:	2437      	movs	r4, #55	; 0x37
 800516a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800516c:	2340      	movs	r3, #64	; 0x40
 800516e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005170:	2300      	movs	r3, #0
 8005172:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005178:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800517a:	a901      	add	r1, sp, #4
 800517c:	f7ff fe6d 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4621      	mov	r1, r4
 8005186:	4628      	mov	r0, r5
 8005188:	f7ff fe80 	bl	8004e8c <SDMMC_GetCmdResp1>
}
 800518c:	b007      	add	sp, #28
 800518e:	bd30      	pop	{r4, r5, pc}

08005190 <SDMMC_CmdAppOperCommand>:
{
 8005190:	b510      	push	{r4, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005196:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800519a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800519e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80051a0:	2329      	movs	r3, #41	; 0x29
 80051a2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051a8:	2300      	movs	r3, #0
 80051aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051b2:	a901      	add	r1, sp, #4
 80051b4:	f7ff fe51 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7ff fdc5 	bl	8004d48 <SDMMC_GetCmdResp3>
}
 80051be:	b006      	add	sp, #24
 80051c0:	bd10      	pop	{r4, pc}

080051c2 <SDMMC_CmdBusWidth>:
{
 80051c2:	b530      	push	{r4, r5, lr}
 80051c4:	b087      	sub	sp, #28
 80051c6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80051c8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80051ca:	2406      	movs	r4, #6
 80051cc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051ce:	2340      	movs	r3, #64	; 0x40
 80051d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051d2:	2300      	movs	r3, #0
 80051d4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051dc:	a901      	add	r1, sp, #4
 80051de:	f7ff fe3c 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f7ff fe4f 	bl	8004e8c <SDMMC_GetCmdResp1>
}
 80051ee:	b007      	add	sp, #28
 80051f0:	bd30      	pop	{r4, r5, pc}

080051f2 <SDMMC_CmdSendSCR>:
{
 80051f2:	b530      	push	{r4, r5, lr}
 80051f4:	b087      	sub	sp, #28
 80051f6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80051fc:	2433      	movs	r4, #51	; 0x33
 80051fe:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005200:	2240      	movs	r2, #64	; 0x40
 8005202:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005204:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800520a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800520c:	a901      	add	r1, sp, #4
 800520e:	f7ff fe24 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005212:	f241 3288 	movw	r2, #5000	; 0x1388
 8005216:	4621      	mov	r1, r4
 8005218:	4628      	mov	r0, r5
 800521a:	f7ff fe37 	bl	8004e8c <SDMMC_GetCmdResp1>
}
 800521e:	b007      	add	sp, #28
 8005220:	bd30      	pop	{r4, r5, pc}

08005222 <SDMMC_CmdSendCID>:
{
 8005222:	b510      	push	{r4, lr}
 8005224:	b086      	sub	sp, #24
 8005226:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800522c:	2202      	movs	r2, #2
 800522e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005230:	22c0      	movs	r2, #192	; 0xc0
 8005232:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005234:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800523a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800523c:	a901      	add	r1, sp, #4
 800523e:	f7ff fe0c 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff fd50 	bl	8004ce8 <SDMMC_GetCmdResp2>
}
 8005248:	b006      	add	sp, #24
 800524a:	bd10      	pop	{r4, pc}

0800524c <SDMMC_CmdSendCSD>:
{
 800524c:	b510      	push	{r4, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8005252:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005254:	2309      	movs	r3, #9
 8005256:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005258:	23c0      	movs	r3, #192	; 0xc0
 800525a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800525c:	2300      	movs	r3, #0
 800525e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005264:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005266:	a901      	add	r1, sp, #4
 8005268:	f7ff fdf7 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800526c:	4620      	mov	r0, r4
 800526e:	f7ff fd3b 	bl	8004ce8 <SDMMC_GetCmdResp2>
}
 8005272:	b006      	add	sp, #24
 8005274:	bd10      	pop	{r4, pc}

08005276 <SDMMC_CmdSetRelAdd>:
{
 8005276:	b570      	push	{r4, r5, r6, lr}
 8005278:	b086      	sub	sp, #24
 800527a:	4605      	mov	r5, r0
 800527c:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005282:	2403      	movs	r4, #3
 8005284:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005286:	2240      	movs	r2, #64	; 0x40
 8005288:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800528a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800528c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005290:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005292:	a901      	add	r1, sp, #4
 8005294:	f7ff fde1 	bl	8004e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005298:	4632      	mov	r2, r6
 800529a:	4621      	mov	r1, r4
 800529c:	4628      	mov	r0, r5
 800529e:	f7ff fea1 	bl	8004fe4 <SDMMC_GetCmdResp6>
}
 80052a2:	b006      	add	sp, #24
 80052a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080052a8 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80052a8:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052aa:	3301      	adds	r3, #1
 80052ac:	4a0c      	ldr	r2, [pc, #48]	; (80052e0 <USB_CoreReset+0x38>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d811      	bhi.n	80052d6 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b2:	6902      	ldr	r2, [r0, #16]
 80052b4:	2a00      	cmp	r2, #0
 80052b6:	daf8      	bge.n	80052aa <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052b8:	6903      	ldr	r3, [r0, #16]
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6103      	str	r3, [r0, #16]
  count = 0U;
 80052c0:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a06      	ldr	r2, [pc, #24]	; (80052e0 <USB_CoreReset+0x38>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d807      	bhi.n	80052da <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052ca:	6902      	ldr	r2, [r0, #16]
 80052cc:	f012 0f01 	tst.w	r2, #1
 80052d0:	d1f7      	bne.n	80052c2 <USB_CoreReset+0x1a>

  return HAL_OK;
 80052d2:	2000      	movs	r0, #0
 80052d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80052d6:	2003      	movs	r0, #3
 80052d8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80052da:	2003      	movs	r0, #3
}
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	00030d40 	.word	0x00030d40

080052e4 <USB_CoreInit>:
{
 80052e4:	b084      	sub	sp, #16
 80052e6:	b510      	push	{r4, lr}
 80052e8:	4604      	mov	r4, r0
 80052ea:	a803      	add	r0, sp, #12
 80052ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052f0:	9b08      	ldr	r3, [sp, #32]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d11c      	bne.n	8005330 <USB_CoreInit+0x4c>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052fe:	68e3      	ldr	r3, [r4, #12]
 8005300:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005308:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005310:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8005312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d006      	beq.n	8005326 <USB_CoreInit+0x42>
    ret = USB_CoreReset(USBx);
 8005318:	4620      	mov	r0, r4
 800531a:	f7ff ffc5 	bl	80052a8 <USB_CoreReset>
}
 800531e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005322:	b004      	add	sp, #16
 8005324:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532c:	60e3      	str	r3, [r4, #12]
 800532e:	e7f3      	b.n	8005318 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005330:	68e3      	ldr	r3, [r4, #12]
 8005332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005336:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8005338:	4620      	mov	r0, r4
 800533a:	f7ff ffb5 	bl	80052a8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800533e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005340:	b123      	cbz	r3, 800534c <USB_CoreInit+0x68>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005342:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005348:	63a3      	str	r3, [r4, #56]	; 0x38
 800534a:	e7e8      	b.n	800531e <USB_CoreInit+0x3a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800534c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800534e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005352:	63a3      	str	r3, [r4, #56]	; 0x38
 8005354:	e7e3      	b.n	800531e <USB_CoreInit+0x3a>

08005356 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005356:	6883      	ldr	r3, [r0, #8]
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6083      	str	r3, [r0, #8]
}
 800535e:	2000      	movs	r0, #0
 8005360:	4770      	bx	lr

08005362 <USB_SetCurrentMode>:
{
 8005362:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005364:	68c3      	ldr	r3, [r0, #12]
 8005366:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800536a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800536c:	2901      	cmp	r1, #1
 800536e:	d009      	beq.n	8005384 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8005370:	b969      	cbnz	r1, 800538e <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005372:	68c3      	ldr	r3, [r0, #12]
 8005374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005378:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800537a:	2032      	movs	r0, #50	; 0x32
 800537c:	f7fb f960 	bl	8000640 <HAL_Delay>
  return HAL_OK;
 8005380:	2000      	movs	r0, #0
}
 8005382:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005384:	68c3      	ldr	r3, [r0, #12]
 8005386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800538a:	60c3      	str	r3, [r0, #12]
 800538c:	e7f5      	b.n	800537a <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 800538e:	2001      	movs	r0, #1
 8005390:	e7f7      	b.n	8005382 <USB_SetCurrentMode+0x20>
	...

08005394 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005394:	0189      	lsls	r1, r1, #6
 8005396:	f041 0120 	orr.w	r1, r1, #32
 800539a:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800539c:	2300      	movs	r3, #0
    if (++count > 200000U)
 800539e:	3301      	adds	r3, #1
 80053a0:	4a05      	ldr	r2, [pc, #20]	; (80053b8 <USB_FlushTxFifo+0x24>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d805      	bhi.n	80053b2 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053a6:	6902      	ldr	r2, [r0, #16]
 80053a8:	f012 0f20 	tst.w	r2, #32
 80053ac:	d1f7      	bne.n	800539e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80053ae:	2000      	movs	r0, #0
 80053b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80053b2:	2003      	movs	r0, #3
}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	00030d40 	.word	0x00030d40

080053bc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053bc:	2310      	movs	r3, #16
 80053be:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 80053c0:	2300      	movs	r3, #0
    if (++count > 200000U)
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a05      	ldr	r2, [pc, #20]	; (80053dc <USB_FlushRxFifo+0x20>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d805      	bhi.n	80053d6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053ca:	6902      	ldr	r2, [r0, #16]
 80053cc:	f012 0f10 	tst.w	r2, #16
 80053d0:	d1f7      	bne.n	80053c2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80053d2:	2000      	movs	r0, #0
 80053d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80053d6:	2003      	movs	r0, #3
}
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	00030d40 	.word	0x00030d40

080053e0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80053e0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80053e4:	4319      	orrs	r1, r3
 80053e6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80053ea:	2000      	movs	r0, #0
 80053ec:	4770      	bx	lr
	...

080053f0 <USB_DevInit>:
{
 80053f0:	b084      	sub	sp, #16
 80053f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f6:	4604      	mov	r4, r0
 80053f8:	a807      	add	r0, sp, #28
 80053fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8005400:	2300      	movs	r3, #0
 8005402:	e006      	b.n	8005412 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8005404:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005408:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800540c:	2100      	movs	r1, #0
 800540e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8005410:	3301      	adds	r3, #1
 8005412:	2b0e      	cmp	r3, #14
 8005414:	d9f6      	bls.n	8005404 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8005416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005418:	bb5b      	cbnz	r3, 8005472 <USB_DevInit+0x82>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800541a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800541c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005420:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005428:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005438:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 800543c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8005440:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005444:	2103      	movs	r1, #3
 8005446:	4620      	mov	r0, r4
 8005448:	f7ff ffca 	bl	80053e0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800544c:	2110      	movs	r1, #16
 800544e:	4620      	mov	r0, r4
 8005450:	f7ff ffa0 	bl	8005394 <USB_FlushTxFifo>
 8005454:	4680      	mov	r8, r0
 8005456:	b108      	cbz	r0, 800545c <USB_DevInit+0x6c>
    ret = HAL_ERROR;
 8005458:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800545c:	4620      	mov	r0, r4
 800545e:	f7ff ffad 	bl	80053bc <USB_FlushRxFifo>
 8005462:	b108      	cbz	r0, 8005468 <USB_DevInit+0x78>
    ret = HAL_ERROR;
 8005464:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800546c:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800546e:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005470:	e00f      	b.n	8005492 <USB_DevInit+0xa2>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005478:	63a3      	str	r3, [r4, #56]	; 0x38
 800547a:	e7da      	b.n	8005432 <USB_DevInit+0x42>
      if (i == 0U)
 800547c:	b9c3      	cbnz	r3, 80054b0 <USB_DevInit+0xc0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800547e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005482:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005486:	2200      	movs	r2, #0
 8005488:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800548a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800548e:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005490:	3301      	adds	r3, #1
 8005492:	9907      	ldr	r1, [sp, #28]
 8005494:	4299      	cmp	r1, r3
 8005496:	d910      	bls.n	80054ba <USB_DevInit+0xca>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005498:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800549c:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80054a0:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80054a4:	2800      	cmp	r0, #0
 80054a6:	dbe9      	blt.n	800547c <USB_DevInit+0x8c>
      USBx_INEP(i)->DIEPCTL = 0U;
 80054a8:	2000      	movs	r0, #0
 80054aa:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80054ae:	e7ea      	b.n	8005486 <USB_DevInit+0x96>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054b4:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80054b8:	e7e5      	b.n	8005486 <USB_DevInit+0x96>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	e00a      	b.n	80054d4 <USB_DevInit+0xe4>
      if (i == 0U)
 80054be:	b1bb      	cbz	r3, 80054f0 <USB_DevInit+0x100>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054c0:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 80054c4:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054c8:	2200      	movs	r2, #0
 80054ca:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054cc:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80054d0:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d2:	3301      	adds	r3, #1
 80054d4:	4299      	cmp	r1, r3
 80054d6:	d910      	bls.n	80054fa <USB_DevInit+0x10a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054d8:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80054dc:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 80054e0:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 80054e4:	2f00      	cmp	r7, #0
 80054e6:	dbea      	blt.n	80054be <USB_DevInit+0xce>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054e8:	2700      	movs	r7, #0
 80054ea:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 80054ee:	e7eb      	b.n	80054c8 <USB_DevInit+0xd8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054f0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 80054f4:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 80054f8:	e7e6      	b.n	80054c8 <USB_DevInit+0xd8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054fa:	6933      	ldr	r3, [r6, #16]
 80054fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005500:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005506:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800550a:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800550c:	69a3      	ldr	r3, [r4, #24]
 800550e:	f043 0310 	orr.w	r3, r3, #16
 8005512:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005514:	69a2      	ldr	r2, [r4, #24]
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <USB_DevInit+0x158>)
 8005518:	4313      	orrs	r3, r2
 800551a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800551c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800551e:	b11b      	cbz	r3, 8005528 <USB_DevInit+0x138>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005520:	69a3      	ldr	r3, [r4, #24]
 8005522:	f043 0308 	orr.w	r3, r3, #8
 8005526:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8005528:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800552a:	2b01      	cmp	r3, #1
 800552c:	d004      	beq.n	8005538 <USB_DevInit+0x148>
}
 800552e:	4640      	mov	r0, r8
 8005530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005534:	b004      	add	sp, #16
 8005536:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005538:	69a3      	ldr	r3, [r4, #24]
 800553a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800553e:	f043 0304 	orr.w	r3, r3, #4
 8005542:	61a3      	str	r3, [r4, #24]
 8005544:	e7f3      	b.n	800552e <USB_DevInit+0x13e>
 8005546:	bf00      	nop
 8005548:	803c3800 	.word	0x803c3800

0800554c <USB_DevDisconnect>:
{
 800554c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800554e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005552:	f043 0302 	orr.w	r3, r3, #2
 8005556:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800555a:	2003      	movs	r0, #3
 800555c:	f7fb f870 	bl	8000640 <HAL_Delay>
}
 8005560:	2000      	movs	r0, #0
 8005562:	bd08      	pop	{r3, pc}

08005564 <mmf_init>:

void		mmf_bubble_sort(mmf_t* self, size_t elementIndex);

void 		mmf_init(mmf_t* self, mmf_data_element_t* elementArray, size_t arrayLength, mmf_data_t initializerElement)
{
	self->elementArray 	= elementArray;
 8005564:	6001      	str	r1, [r0, #0]
	self->arrayLength 	= arrayLength;
 8005566:	6042      	str	r2, [r0, #4]
	self->oldestElement	= 0;
 8005568:	2300      	movs	r3, #0
 800556a:	6083      	str	r3, [r0, #8]
	self->median_p		= &(self->elementArray[(self->arrayLength / 2)].data);
 800556c:	0852      	lsrs	r2, r2, #1
 800556e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005572:	6101      	str	r1, [r0, #16]
	for (size_t i = 0; i < self->arrayLength; i++)
 8005574:	6842      	ldr	r2, [r0, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d912      	bls.n	80055a0 <mmf_init+0x3c>
{
 800557a:	b410      	push	{r4}
	{
		self->elementArray[i].data 	= initializerElement;
 800557c:	6801      	ldr	r1, [r0, #0]
 800557e:	00dc      	lsls	r4, r3, #3
 8005580:	4421      	add	r1, r4
 8005582:	ed81 0a00 	vstr	s0, [r1]
		self->elementArray[i].index	= self->newestIndex++;
 8005586:	7b41      	ldrb	r1, [r0, #13]
 8005588:	1c4a      	adds	r2, r1, #1
 800558a:	7342      	strb	r2, [r0, #13]
 800558c:	6802      	ldr	r2, [r0, #0]
 800558e:	4422      	add	r2, r4
 8005590:	7111      	strb	r1, [r2, #4]
	for (size_t i = 0; i < self->arrayLength; i++)
 8005592:	3301      	adds	r3, #1
 8005594:	6842      	ldr	r2, [r0, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d8f0      	bhi.n	800557c <mmf_init+0x18>
	}
}
 800559a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	4770      	bx	lr

080055a2 <mmf_swap>:
	/* Return middle element */
	return *(self->median_p);
}

void		mmf_swap(mmf_data_element_t* p1, mmf_data_element_t* p2)
{
 80055a2:	b410      	push	{r4}
 80055a4:	b083      	sub	sp, #12
 80055a6:	4604      	mov	r4, r0
 80055a8:	460b      	mov	r3, r1
	mmf_data_element_t temp;
	temp = *p1;
 80055aa:	466a      	mov	r2, sp
 80055ac:	e9d0 0100 	ldrd	r0, r1, [r0]
 80055b0:	e882 0003 	stmia.w	r2, {r0, r1}
	*p1 = *p2;
 80055b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80055b8:	e884 0003 	stmia.w	r4, {r0, r1}
	*p2 = temp;
 80055bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055c0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80055c4:	b003      	add	sp, #12
 80055c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <mmf_bubble_sort>:

void		mmf_bubble_sort(mmf_t* self, size_t elementIndex)
{
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	4605      	mov	r5, r0
	if (elementIndex != 0)
 80055d0:	460c      	mov	r4, r1
 80055d2:	b389      	cbz	r1, 8005638 <mmf_bubble_sort+0x6c>
	{
		/* Bubble sort to left */
		if (self->elementArray[elementIndex].data < self->elementArray[elementIndex - 1].data)
 80055d4:	6803      	ldr	r3, [r0, #0]
 80055d6:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80055da:	ed92 7a00 	vldr	s14, [r2]
 80055de:	f101 5200 	add.w	r2, r1, #536870912	; 0x20000000
 80055e2:	3a01      	subs	r2, #1
 80055e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f4:	d520      	bpl.n	8005638 <mmf_bubble_sort+0x6c>
		{
			do
			{
				mmf_swap(&self->elementArray[elementIndex], &self->elementArray[elementIndex - 1]);
 80055f6:	6828      	ldr	r0, [r5, #0]
 80055f8:	f104 5100 	add.w	r1, r4, #536870912	; 0x20000000
 80055fc:	3901      	subs	r1, #1
 80055fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005602:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005606:	f7ff ffcc 	bl	80055a2 <mmf_swap>
				elementIndex--;
 800560a:	1e62      	subs	r2, r4, #1
			}
			while (	(self->elementArray[elementIndex].data < self->elementArray[elementIndex - 1].data)
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8005612:	ed91 7a00 	vldr	s14, [r1]
 8005616:	f104 5400 	add.w	r4, r4, #536870912	; 0x20000000
 800561a:	3c02      	subs	r4, #2
 800561c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005620:	edd3 7a00 	vldr	s15, [r3]
					&& (elementIndex != 0) );
 8005624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562c:	d503      	bpl.n	8005636 <mmf_bubble_sort+0x6a>
				elementIndex--;
 800562e:	4614      	mov	r4, r2
					&& (elementIndex != 0) );
 8005630:	2a00      	cmp	r2, #0
 8005632:	d1e0      	bne.n	80055f6 <mmf_bubble_sort+0x2a>
 8005634:	e000      	b.n	8005638 <mmf_bubble_sort+0x6c>
				elementIndex--;
 8005636:	4614      	mov	r4, r2
		}
	}
	if (elementIndex != (self->arrayLength - 1))
 8005638:	686b      	ldr	r3, [r5, #4]
 800563a:	3b01      	subs	r3, #1
 800563c:	42a3      	cmp	r3, r4
 800563e:	d029      	beq.n	8005694 <mmf_bubble_sort+0xc8>
	{
		/* Bubble sort to right */
		if (self->elementArray[elementIndex].data > self->elementArray[elementIndex + 1].data)
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 8005646:	ed92 7a00 	vldr	s14, [r2]
 800564a:	1c62      	adds	r2, r4, #1
 800564c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005650:	edd3 7a00 	vldr	s15, [r3]
 8005654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565c:	dd1a      	ble.n	8005694 <mmf_bubble_sort+0xc8>
		{
			do
			{
				mmf_swap(&self->elementArray[elementIndex], &self->elementArray[elementIndex + 1]);
 800565e:	6828      	ldr	r0, [r5, #0]
 8005660:	1c67      	adds	r7, r4, #1
 8005662:	00fe      	lsls	r6, r7, #3
 8005664:	1981      	adds	r1, r0, r6
 8005666:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800566a:	f7ff ff9a 	bl	80055a2 <mmf_swap>
				elementIndex++;
			}
			while (	(self->elementArray[elementIndex].data > self->elementArray[elementIndex + 1].data)
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	441e      	add	r6, r3
 8005672:	ed96 7a00 	vldr	s14, [r6]
 8005676:	3402      	adds	r4, #2
 8005678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800567c:	edd3 7a00 	vldr	s15, [r3]
					&& (elementIndex != (self->arrayLength - 1)) );
 8005680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005688:	dd04      	ble.n	8005694 <mmf_bubble_sort+0xc8>
 800568a:	686b      	ldr	r3, [r5, #4]
 800568c:	3b01      	subs	r3, #1
				elementIndex++;
 800568e:	463c      	mov	r4, r7
					&& (elementIndex != (self->arrayLength - 1)) );
 8005690:	429f      	cmp	r7, r3
 8005692:	d1e4      	bne.n	800565e <mmf_bubble_sort+0x92>
		}
	}
}
 8005694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005696 <mmf_calculate>:
{
 8005696:	b538      	push	{r3, r4, r5, lr}
 8005698:	4604      	mov	r4, r0
	for (size_t i = 0; i < self->arrayLength; i++)
 800569a:	2100      	movs	r1, #0
 800569c:	6863      	ldr	r3, [r4, #4]
 800569e:	428b      	cmp	r3, r1
 80056a0:	d916      	bls.n	80056d0 <mmf_calculate+0x3a>
		if (self->elementArray[i].index == self->oldestIndex)
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	00ca      	lsls	r2, r1, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	791d      	ldrb	r5, [r3, #4]
 80056aa:	7b20      	ldrb	r0, [r4, #12]
 80056ac:	4285      	cmp	r5, r0
 80056ae:	d001      	beq.n	80056b4 <mmf_calculate+0x1e>
	for (size_t i = 0; i < self->arrayLength; i++)
 80056b0:	3101      	adds	r1, #1
 80056b2:	e7f3      	b.n	800569c <mmf_calculate+0x6>
			self->elementArray[i].data 	= newElement;
 80056b4:	ed83 0a00 	vstr	s0, [r3]
			self->elementArray[i].index = self->newestIndex++;
 80056b8:	7b60      	ldrb	r0, [r4, #13]
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	7363      	strb	r3, [r4, #13]
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	441a      	add	r2, r3
 80056c2:	7110      	strb	r0, [r2, #4]
			self->oldestIndex++;
 80056c4:	7b23      	ldrb	r3, [r4, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	7323      	strb	r3, [r4, #12]
			mmf_bubble_sort(self, i);
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7ff ff7e 	bl	80055cc <mmf_bubble_sort>
	return *(self->median_p);
 80056d0:	6923      	ldr	r3, [r4, #16]
}
 80056d2:	ed93 0a00 	vldr	s0, [r3]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}

080056d8 <rsam_init>:
void rsam_push_window_rbfr(rsam_algorithm_t* self, int16_t* audiodata_p);

void rsam_calculate(rsam_algorithm_t* self);

void rsam_init(rsam_algorithm_t* self, DFSDM_Filter_HandleTypeDef* hdfsdm_filter, float overmag, float a, float b)
{
 80056d8:	b508      	push	{r3, lr}
	self->hdfsdm_filter = hdfsdm_filter;
 80056da:	6341      	str	r1, [r0, #52]	; 0x34
	self->overmag = overmag;
 80056dc:	ed80 0a09 	vstr	s0, [r0, #36]	; 0x24
	self->a	= a;
 80056e0:	edc0 0a0a 	vstr	s1, [r0, #40]	; 0x28
	self->b	= b;
 80056e4:	ed80 1a0b 	vstr	s2, [r0, #44]	; 0x2c
	arm_rfft_fast_init_f32(&self->hrfft, RSAM_FFT_LENGTH);
 80056e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056ec:	f001 fc66 	bl	8006fbc <arm_rfft_fast_init_f32>
	//ring_buffer_init(&self->hrbfr, self->workdata.audio);
}
 80056f0:	bd08      	pop	{r3, pc}

080056f2 <rsam_start>:

void rsam_start(rsam_algorithm_t* self)
{
 80056f2:	b508      	push	{r3, lr}
	HAL_DFSDM_FilterRegularStart_DMA(self->hdfsdm_filter, (int32_t*)self->workdata.rawaudio, (RSAM_WINDOW_INC * 2));
 80056f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056f8:	f100 0138 	add.w	r1, r0, #56	; 0x38
 80056fc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80056fe:	f7fb fe3d 	bl	800137c <HAL_DFSDM_FilterRegularStart_DMA>
}
 8005702:	bd08      	pop	{r3, pc}

08005704 <rsam_stop>:

void rsam_stop(rsam_algorithm_t* self)
{
 8005704:	b508      	push	{r3, lr}
	HAL_DFSDM_FilterRegularStop_DMA(self->hdfsdm_filter);
 8005706:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005708:	f7fb fe8e 	bl	8001428 <HAL_DFSDM_FilterRegularStop_DMA>
}
 800570c:	bd08      	pop	{r3, pc}

0800570e <rsam_push_window>:

void rsam_push_window(rsam_algorithm_t* self, int16_t* audiodata_p)
{
 800570e:	b500      	push	{lr}
 8005710:	b083      	sub	sp, #12
	volatile int i;
	/* Shift data to left by RSAM_WINDOW_INC parameter */
	for (i = 0; i < (RSAM_FFT_LENGTH - RSAM_WINDOW_INC); i++)
 8005712:	2300      	movs	r3, #0
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	e00e      	b.n	8005736 <rsam_push_window+0x28>
	{
		self->workdata.audio[i] = self->workdata.audio[i + RSAM_WINDOW_INC];
 8005718:	9a01      	ldr	r2, [sp, #4]
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	f202 420e 	addw	r2, r2, #1038	; 0x40e
 8005720:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	f203 230e 	addw	r3, r3, #526	; 0x20e
 800572a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800572e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (RSAM_FFT_LENGTH - RSAM_WINDOW_INC); i++)
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	3301      	adds	r3, #1
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	9b01      	ldr	r3, [sp, #4]
 8005738:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800573c:	dbec      	blt.n	8005718 <rsam_push_window+0xa>
	}
	/* Put new data to array with conversion to float */
	for (i = (RSAM_FFT_LENGTH - RSAM_WINDOW_INC); i < RSAM_FFT_LENGTH; i++)
 800573e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	e014      	b.n	8005770 <rsam_push_window+0x62>
	{
		/* This data contains offset at 0 frequency from regular
		 * conversion channel but this has no effetct on algorithm */
		self->workdata.audio[i] = (float) (audiodata_p[i - (RSAM_FFT_LENGTH - RSAM_WINDOW_INC)]);
 8005746:	9b01      	ldr	r3, [sp, #4]
 8005748:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800574c:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8005750:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	9b01      	ldr	r3, [sp, #4]
 800575a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800575e:	f203 230e 	addw	r3, r3, #526	; 0x20e
 8005762:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005766:	edc3 7a00 	vstr	s15, [r3]
	for (i = (RSAM_FFT_LENGTH - RSAM_WINDOW_INC); i < RSAM_FFT_LENGTH; i++)
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	3301      	adds	r3, #1
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	9b01      	ldr	r3, [sp, #4]
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005776:	dbe6      	blt.n	8005746 <rsam_push_window+0x38>
	}
	/* Copy ready buffer to FFT workdata buffer */
	memcpy(self->workdata.audio_fft, self->workdata.audio, RSAM_FFT_LENGTH * sizeof(self->workdata.audio_fft[0]));
 8005778:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800577c:	f600 0138 	addw	r1, r0, #2104	; 0x838
 8005780:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
 8005784:	3038      	adds	r0, #56	; 0x38
 8005786:	f002 fc69 	bl	800805c <memcpy>
}
 800578a:	b003      	add	sp, #12
 800578c:	f85d fb04 	ldr.w	pc, [sp], #4

08005790 <rsam_calculate>:
	ring_buffer_push_convert(&self->hrbfr, audiodata_p);
	ring_buffer_cpy_to(&self->hrbfr, self->workdata.audio_fft);
}

void rsam_calculate(rsam_algorithm_t* self)
{
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4604      	mov	r4, r0
	int i;
	self->workdata.peak_idx = -0xFFFF;
 8005794:	f500 358b 	add.w	r5, r0, #71168	; 0x11600
 8005798:	4b27      	ldr	r3, [pc, #156]	; (8005838 <rsam_calculate+0xa8>)
 800579a:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
	/* Calculate FFT */
	arm_rfft_fast_f32(&self->hrfft, self->workdata.audio_fft, self->workdata.fft, FFT_FORWARD);
 800579e:	2300      	movs	r3, #0
 80057a0:	f500 4208 	add.w	r2, r0, #34816	; 0x8800
 80057a4:	3238      	adds	r2, #56	; 0x38
 80057a6:	f500 4190 	add.w	r1, r0, #18432	; 0x4800
 80057aa:	3138      	adds	r1, #56	; 0x38
 80057ac:	f001 fc8a 	bl	80070c4 <arm_rfft_fast_f32>
	/* Calculate magnitude squared from 500 Hz to 12 kHz */
	/* This corresponds to bins 43 (couting from 0) to 1024 */
	arm_cmplx_mag_squared_f32(self->workdata.fft + 2*43, self->workdata.mag, (1024 - 43));
 80057b0:	f504 3684 	add.w	r6, r4, #67584	; 0x10800
 80057b4:	3638      	adds	r6, #56	; 0x38
 80057b6:	f240 32d5 	movw	r2, #981	; 0x3d5
 80057ba:	4631      	mov	r1, r6
 80057bc:	f504 4009 	add.w	r0, r4, #35072	; 0x8900
 80057c0:	3090      	adds	r0, #144	; 0x90
 80057c2:	f002 f8ed 	bl	80079a0 <arm_cmplx_mag_squared_f32>
	/* Calculate maximum magnitude in this frequency interval */
	/* POWINNO BYĆ W ROZMIARZE + 1 !!!!!!!! ???? ???? */
	arm_max_f32(self->workdata.mag, (1024 - 43), &self->workdata.maxmag, &self->workdata.maxmag_idx);
 80057c6:	f505 73c8 	add.w	r3, r5, #400	; 0x190
 80057ca:	f505 72c6 	add.w	r2, r5, #396	; 0x18c
 80057ce:	f240 31d5 	movw	r1, #981	; 0x3d5
 80057d2:	4630      	mov	r0, r6
 80057d4:	f001 fb8a 	bl	8006eec <arm_max_f32>
	/* Calculate minimum considered magnitude */
	self->workdata.overmag_limit = self->overmag * self->workdata.maxmag;
 80057d8:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80057dc:	edd5 7a63 	vldr	s15, [r5, #396]	; 0x18c
 80057e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057e4:	ed85 7a66 	vstr	s14, [r5, #408]	; 0x198
	/* Find first peak over considered limit from this frequency interval */
	for (i = 0; i < (1024 - 43); i++)
 80057e8:	2200      	movs	r2, #0
 80057ea:	f5b2 7f75 	cmp.w	r2, #980	; 0x3d4
 80057ee:	dc11      	bgt.n	8005814 <rsam_calculate+0x84>
	{
		if (self->workdata.mag[i] >= self->workdata.overmag_limit)
 80057f0:	f502 4384 	add.w	r3, r2, #16896	; 0x4200
 80057f4:	330e      	adds	r3, #14
 80057f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057fa:	edd3 7a00 	vldr	s15, [r3]
 80057fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005806:	d901      	bls.n	800580c <rsam_calculate+0x7c>
	for (i = 0; i < (1024 - 43); i++)
 8005808:	3201      	adds	r2, #1
 800580a:	e7ee      	b.n	80057ea <rsam_calculate+0x5a>
		{
			self->workdata.peak_idx = i;
 800580c:	f504 338b 	add.w	r3, r4, #71168	; 0x11600
 8005810:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
			break;
		}
	}
	/* Calculate resulting rotating speed based on calibration data */
	self->result = self->a * self->workdata.peak_idx + self->b;
 8005814:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8005818:	f504 338b 	add.w	r3, r4, #71168	; 0x11600
 800581c:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8005820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005828:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800582c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005830:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	bf00      	nop
 8005838:	ffff0001 	.word	0xffff0001

0800583c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800583c:	b530      	push	{r4, r5, lr}
 800583e:	b083      	sub	sp, #12
	volatile uint32_t calculationTime;
	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
	calculationTime = HAL_GetTick();
 8005840:	f7fa fef8 	bl	8000634 <HAL_GetTick>
 8005844:	9001      	str	r0, [sp, #4]
	//tick = SysTick->VAL;
	HAL_GPIO_WritePin(STMOD_SCOPE10_GPIO_Port, STMOD_SCOPE10_Pin, GPIO_PIN_SET);
 8005846:	4d0f      	ldr	r5, [pc, #60]	; (8005884 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48>)
 8005848:	2201      	movs	r2, #1
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	4628      	mov	r0, r5
 800584e:	f7fc f871 	bl	8001934 <HAL_GPIO_WritePin>
	/* First half of buffer */
	rsam_push_window((rsam_algorithm_t*)&hrsam, (int16_t*)hrsam.workdata.rawaudio);
 8005852:	490d      	ldr	r1, [pc, #52]	; (8005888 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4c>)
 8005854:	f1a1 0438 	sub.w	r4, r1, #56	; 0x38
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff ff58 	bl	800570e <rsam_push_window>
	rsam_calculate((rsam_algorithm_t*)&hrsam);
 800585e:	4620      	mov	r0, r4
 8005860:	f7ff ff96 	bl	8005790 <rsam_calculate>
	rsam_callback((rsam_algorithm_t*)&hrsam);
 8005864:	4620      	mov	r0, r4
 8005866:	f000 fc31 	bl	80060cc <rsam_callback>
	HAL_GPIO_WritePin(STMOD_SCOPE10_GPIO_Port, STMOD_SCOPE10_Pin, GPIO_PIN_RESET);
 800586a:	2200      	movs	r2, #0
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	4628      	mov	r0, r5
 8005870:	f7fc f860 	bl	8001934 <HAL_GPIO_WritePin>
	//tick = SysTick->VAL - tick;
	calculationTime = HAL_GetTick() - calculationTime;
 8005874:	f7fa fede 	bl	8000634 <HAL_GetTick>
 8005878:	9b01      	ldr	r3, [sp, #4]
 800587a:	1ac0      	subs	r0, r0, r3
 800587c:	9001      	str	r0, [sp, #4]
}
 800587e:	b003      	add	sp, #12
 8005880:	bd30      	pop	{r4, r5, pc}
 8005882:	bf00      	nop
 8005884:	48000400 	.word	0x48000400
 8005888:	200000c4 	.word	0x200000c4

0800588c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800588c:	b538      	push	{r3, r4, r5, lr}
	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STMOD_SCOPE10_GPIO_Port, STMOD_SCOPE10_Pin, GPIO_PIN_SET);
 800588e:	4d0c      	ldr	r5, [pc, #48]	; (80058c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 8005890:	2201      	movs	r2, #1
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	4628      	mov	r0, r5
 8005896:	f7fc f84d 	bl	8001934 <HAL_GPIO_WritePin>
	/* Second half of buffer */
	rsam_push_window((rsam_algorithm_t*)&hrsam, (int16_t*)(hrsam.workdata.rawaudio + RSAM_WINDOW_INC));
 800589a:	490a      	ldr	r1, [pc, #40]	; (80058c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>)
 800589c:	f5a1 6487 	sub.w	r4, r1, #1080	; 0x438
 80058a0:	4620      	mov	r0, r4
 80058a2:	f7ff ff34 	bl	800570e <rsam_push_window>
	rsam_calculate((rsam_algorithm_t*)&hrsam);
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff ff72 	bl	8005790 <rsam_calculate>
	rsam_callback((rsam_algorithm_t*)&hrsam);
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fc0d 	bl	80060cc <rsam_callback>
	HAL_GPIO_WritePin(STMOD_SCOPE10_GPIO_Port, STMOD_SCOPE10_Pin, GPIO_PIN_RESET);
 80058b2:	2200      	movs	r2, #0
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	4628      	mov	r0, r5
 80058b8:	f7fc f83c 	bl	8001934 <HAL_GPIO_WritePin>
}
 80058bc:	bd38      	pop	{r3, r4, r5, pc}
 80058be:	bf00      	nop
 80058c0:	48000400 	.word	0x48000400
 80058c4:	200004c4 	.word	0x200004c4

080058c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80058c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ce:	2400      	movs	r4, #0
 80058d0:	9409      	str	r4, [sp, #36]	; 0x24
 80058d2:	940a      	str	r4, [sp, #40]	; 0x28
 80058d4:	940b      	str	r4, [sp, #44]	; 0x2c
 80058d6:	940c      	str	r4, [sp, #48]	; 0x30
 80058d8:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80058da:	4d90      	ldr	r5, [pc, #576]	; (8005b1c <MX_GPIO_Init+0x254>)
 80058dc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80058e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80058f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80058f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005900:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005902:	f043 0310 	orr.w	r3, r3, #16
 8005906:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005908:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	9302      	str	r3, [sp, #8]
 8005910:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005912:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005914:	f043 0302 	orr.w	r3, r3, #2
 8005918:	64eb      	str	r3, [r5, #76]	; 0x4c
 800591a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	9303      	str	r3, [sp, #12]
 8005922:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005924:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800592c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	9304      	str	r3, [sp, #16]
 8005934:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005936:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800593e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	9305      	str	r3, [sp, #20]
 8005946:	9b05      	ldr	r3, [sp, #20]
  HAL_PWREx_EnableVddIO2();
 8005948:	f7fc f9bc 	bl	8001cc4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800594c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800594e:	f043 0308 	orr.w	r3, r3, #8
 8005952:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005954:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	9306      	str	r3, [sp, #24]
 800595c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800595e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005960:	f043 0304 	orr.w	r3, r3, #4
 8005964:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005966:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	9307      	str	r3, [sp, #28]
 800596e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005970:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005972:	f043 0320 	orr.w	r3, r3, #32
 8005976:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005978:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	9308      	str	r3, [sp, #32]
 8005980:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8005982:	4f67      	ldr	r7, [pc, #412]	; (8005b20 <MX_GPIO_Init+0x258>)
 8005984:	4622      	mov	r2, r4
 8005986:	2101      	movs	r1, #1
 8005988:	4638      	mov	r0, r7
 800598a:	f7fb ffd3 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STMOD_SCOPE10_Pin|LED1_Pin, GPIO_PIN_RESET);
 800598e:	4622      	mov	r2, r4
 8005990:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8005994:	4863      	ldr	r0, [pc, #396]	; (8005b24 <MX_GPIO_Init+0x25c>)
 8005996:	f7fb ffcd 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800599a:	4622      	mov	r2, r4
 800599c:	2143      	movs	r1, #67	; 0x43
 800599e:	4862      	ldr	r0, [pc, #392]	; (8005b28 <MX_GPIO_Init+0x260>)
 80059a0:	f7fb ffc8 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80059a4:	4622      	mov	r2, r4
 80059a6:	2140      	movs	r1, #64	; 0x40
 80059a8:	4860      	ldr	r0, [pc, #384]	; (8005b2c <MX_GPIO_Init+0x264>)
 80059aa:	f7fb ffc3 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 80059ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80059b2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059b4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80059b6:	2502      	movs	r5, #2
 80059b8:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80059ba:	a909      	add	r1, sp, #36	; 0x24
 80059bc:	4638      	mov	r0, r7
 80059be:	f7fb fedd 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80059c2:	f04f 0804 	mov.w	r8, #4
 80059c6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80059ca:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8005b38 <MX_GPIO_Init+0x270>
 80059ce:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80059d4:	a909      	add	r1, sp, #36	; 0x24
 80059d6:	4854      	ldr	r0, [pc, #336]	; (8005b28 <MX_GPIO_Init+0x260>)
 80059d8:	f7fb fed0 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80059dc:	2601      	movs	r6, #1
 80059de:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80059e6:	a909      	add	r1, sp, #36	; 0x24
 80059e8:	4638      	mov	r0, r7
 80059ea:	f7fb fec7 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80059ee:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80059f2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059fa:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80059fc:	f04f 0a03 	mov.w	sl, #3
 8005a00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8005a04:	a909      	add	r1, sp, #36	; 0x24
 8005a06:	4638      	mov	r0, r7
 8005a08:	f7fb feb8 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8005a0c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005a10:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a12:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a14:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a16:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005a18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005a1c:	a909      	add	r1, sp, #36	; 0x24
 8005a1e:	4842      	ldr	r0, [pc, #264]	; (8005b28 <MX_GPIO_Init+0x260>)
 8005a20:	f7fb feac 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8005a24:	f44f 7780 	mov.w	r7, #256	; 0x100
 8005a28:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a2a:	2312      	movs	r3, #18
 8005a2c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a2e:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a30:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a34:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8005a38:	a909      	add	r1, sp, #36	; 0x24
 8005a3a:	483a      	ldr	r0, [pc, #232]	; (8005b24 <MX_GPIO_Init+0x25c>)
 8005a3c:	f7fb fe9e 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8005a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a46:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a4a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005a4c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8005a4e:	a909      	add	r1, sp, #36	; 0x24
 8005a50:	4834      	ldr	r0, [pc, #208]	; (8005b24 <MX_GPIO_Init+0x25c>)
 8005a52:	f7fb fe93 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_SCOPE10_Pin */
  GPIO_InitStruct.Pin = STMOD_SCOPE10_Pin;
 8005a56:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8005a5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a5e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a60:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a62:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(STMOD_SCOPE10_GPIO_Port, &GPIO_InitStruct);
 8005a64:	a909      	add	r1, sp, #36	; 0x24
 8005a66:	482f      	ldr	r0, [pc, #188]	; (8005b24 <MX_GPIO_Init+0x25c>)
 8005a68:	f7fb fe88 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8005a6c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a70:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a72:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8005a74:	a909      	add	r1, sp, #36	; 0x24
 8005a76:	482c      	ldr	r0, [pc, #176]	; (8005b28 <MX_GPIO_Init+0x260>)
 8005a78:	f7fb fe80 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8005a7c:	2343      	movs	r3, #67	; 0x43
 8005a7e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a80:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a82:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a84:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005a86:	a909      	add	r1, sp, #36	; 0x24
 8005a88:	4827      	ldr	r0, [pc, #156]	; (8005b28 <MX_GPIO_Init+0x260>)
 8005a8a:	f7fb fe77 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8005a8e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a92:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a94:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a96:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8005a98:	a909      	add	r1, sp, #36	; 0x24
 8005a9a:	4824      	ldr	r0, [pc, #144]	; (8005b2c <MX_GPIO_Init+0x264>)
 8005a9c:	f7fb fe6e 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8005aa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005aa4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005aa6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aaa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8005aac:	a909      	add	r1, sp, #36	; 0x24
 8005aae:	4820      	ldr	r0, [pc, #128]	; (8005b30 <MX_GPIO_Init+0x268>)
 8005ab0:	f7fb fe64 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8005ab4:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aba:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8005abc:	230e      	movs	r3, #14
 8005abe:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8005ac0:	a909      	add	r1, sp, #36	; 0x24
 8005ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ac6:	f7fb fe59 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8005aca:	2320      	movs	r3, #32
 8005acc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ace:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8005ad4:	a909      	add	r1, sp, #36	; 0x24
 8005ad6:	4815      	ldr	r0, [pc, #84]	; (8005b2c <MX_GPIO_Init+0x264>)
 8005ad8:	f7fb fe50 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8005adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ae0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ae2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ae4:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8005ae6:	a909      	add	r1, sp, #36	; 0x24
 8005ae8:	4812      	ldr	r0, [pc, #72]	; (8005b34 <MX_GPIO_Init+0x26c>)
 8005aea:	f7fb fe47 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8005aee:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005af2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8005af6:	a909      	add	r1, sp, #36	; 0x24
 8005af8:	480a      	ldr	r0, [pc, #40]	; (8005b24 <MX_GPIO_Init+0x25c>)
 8005afa:	f7fb fe3f 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8005afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b02:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005b04:	2311      	movs	r3, #17
 8005b06:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b08:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b0a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8005b0c:	a909      	add	r1, sp, #36	; 0x24
 8005b0e:	4805      	ldr	r0, [pc, #20]	; (8005b24 <MX_GPIO_Init+0x25c>)
 8005b10:	f7fb fe34 	bl	800177c <HAL_GPIO_Init>

}
 8005b14:	b00f      	add	sp, #60	; 0x3c
 8005b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	48002000 	.word	0x48002000
 8005b24:	48000400 	.word	0x48000400
 8005b28:	48001c00 	.word	0x48001c00
 8005b2c:	48000800 	.word	0x48000800
 8005b30:	48001800 	.word	0x48001800
 8005b34:	48001400 	.word	0x48001400
 8005b38:	10110000 	.word	0x10110000

08005b3c <MX_DMA_Init>:
{
 8005b3c:	b500      	push	{lr}
 8005b3e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <MX_DMA_Init+0x40>)
 8005b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b44:	f042 0201 	orr.w	r2, r2, #1
 8005b48:	649a      	str	r2, [r3, #72]	; 0x48
 8005b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 8005b54:	2200      	movs	r2, #0
 8005b56:	2101      	movs	r1, #1
 8005b58:	200e      	movs	r0, #14
 8005b5a:	f7fb f991 	bl	8000e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005b5e:	200e      	movs	r0, #14
 8005b60:	f7fb f9c2 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8005b64:	2200      	movs	r2, #0
 8005b66:	2102      	movs	r1, #2
 8005b68:	2011      	movs	r0, #17
 8005b6a:	f7fb f989 	bl	8000e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005b6e:	2011      	movs	r0, #17
 8005b70:	f7fb f9ba 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
}
 8005b74:	b003      	add	sp, #12
 8005b76:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b7a:	bf00      	nop
 8005b7c:	40021000 	.word	0x40021000

08005b80 <MX_ADC1_Init>:
{
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8005b84:	2400      	movs	r4, #0
 8005b86:	9407      	str	r4, [sp, #28]
 8005b88:	9408      	str	r4, [sp, #32]
 8005b8a:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8005b8c:	9401      	str	r4, [sp, #4]
 8005b8e:	9402      	str	r4, [sp, #8]
 8005b90:	9403      	str	r4, [sp, #12]
 8005b92:	9404      	str	r4, [sp, #16]
 8005b94:	9405      	str	r4, [sp, #20]
 8005b96:	9406      	str	r4, [sp, #24]
  hadc1.Instance = ADC1;
 8005b98:	4d17      	ldr	r5, [pc, #92]	; (8005bf8 <MX_ADC1_Init+0x78>)
 8005b9a:	4b18      	ldr	r3, [pc, #96]	; (8005bfc <MX_ADC1_Init+0x7c>)
 8005b9c:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005b9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ba2:	606b      	str	r3, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ba4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ba6:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005ba8:	612c      	str	r4, [r5, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005baa:	2604      	movs	r6, #4
 8005bac:	616e      	str	r6, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005bae:	762c      	strb	r4, [r5, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005bb0:	766c      	strb	r4, [r5, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005bb6:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005bba:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005bbc:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005bbe:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005bc2:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005bc4:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f7fa fd4d 	bl	8000668 <HAL_ADC_Init>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005bce:	9407      	str	r4, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005bd0:	a907      	add	r1, sp, #28
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f7fb f89e 	bl	8000d14 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <MX_ADC1_Init+0x80>)
 8005bda:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005bdc:	2306      	movs	r3, #6
 8005bde:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005be0:	9403      	str	r4, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005be2:	237f      	movs	r3, #127	; 0x7f
 8005be4:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005be6:	9605      	str	r6, [sp, #20]
  sConfig.Offset = 0;
 8005be8:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bea:	eb0d 0106 	add.w	r1, sp, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f7fa fe48 	bl	8000884 <HAL_ADC_ConfigChannel>
}
 8005bf4:	b00a      	add	sp, #40	; 0x28
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	20011fb4 	.word	0x20011fb4
 8005bfc:	50040000 	.word	0x50040000
 8005c00:	10c00010 	.word	0x10c00010

08005c04 <MX_ADC2_Init>:
{
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	b086      	sub	sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8005c08:	2400      	movs	r4, #0
 8005c0a:	9400      	str	r4, [sp, #0]
 8005c0c:	9401      	str	r4, [sp, #4]
 8005c0e:	9402      	str	r4, [sp, #8]
 8005c10:	9403      	str	r4, [sp, #12]
 8005c12:	9404      	str	r4, [sp, #16]
 8005c14:	9405      	str	r4, [sp, #20]
  hadc2.Instance = ADC2;
 8005c16:	4d15      	ldr	r5, [pc, #84]	; (8005c6c <MX_ADC2_Init+0x68>)
 8005c18:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <MX_ADC2_Init+0x6c>)
 8005c1a:	602b      	str	r3, [r5, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005c1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c20:	606b      	str	r3, [r5, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005c22:	60ac      	str	r4, [r5, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c24:	60ec      	str	r4, [r5, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c26:	612c      	str	r4, [r5, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c28:	2604      	movs	r6, #4
 8005c2a:	616e      	str	r6, [r5, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005c2c:	762c      	strb	r4, [r5, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005c2e:	766c      	strb	r4, [r5, #25]
  hadc2.Init.NbrOfConversion = 1;
 8005c30:	2301      	movs	r3, #1
 8005c32:	61eb      	str	r3, [r5, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005c34:	f885 4020 	strb.w	r4, [r5, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c38:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c3a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005c3c:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005c40:	636c      	str	r4, [r5, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005c42:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005c46:	4628      	mov	r0, r5
 8005c48:	f7fa fd0e 	bl	8000668 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_9;
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <MX_ADC2_Init+0x70>)
 8005c4e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005c50:	2306      	movs	r3, #6
 8005c52:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005c54:	9402      	str	r4, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005c56:	237f      	movs	r3, #127	; 0x7f
 8005c58:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005c5a:	9604      	str	r6, [sp, #16]
  sConfig.Offset = 0;
 8005c5c:	9405      	str	r4, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c5e:	4669      	mov	r1, sp
 8005c60:	4628      	mov	r0, r5
 8005c62:	f7fa fe0f 	bl	8000884 <HAL_ADC_ConfigChannel>
}
 8005c66:	b006      	add	sp, #24
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2001188c 	.word	0x2001188c
 8005c70:	50040100 	.word	0x50040100
 8005c74:	25b00200 	.word	0x25b00200

08005c78 <MX_ADC3_Init>:
{
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	b086      	sub	sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8005c7c:	2400      	movs	r4, #0
 8005c7e:	9400      	str	r4, [sp, #0]
 8005c80:	9401      	str	r4, [sp, #4]
 8005c82:	9402      	str	r4, [sp, #8]
 8005c84:	9403      	str	r4, [sp, #12]
 8005c86:	9404      	str	r4, [sp, #16]
 8005c88:	9405      	str	r4, [sp, #20]
  hadc3.Instance = ADC3;
 8005c8a:	4d15      	ldr	r5, [pc, #84]	; (8005ce0 <MX_ADC3_Init+0x68>)
 8005c8c:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <MX_ADC3_Init+0x6c>)
 8005c8e:	602b      	str	r3, [r5, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c94:	606b      	str	r3, [r5, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005c96:	60ac      	str	r4, [r5, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c98:	60ec      	str	r4, [r5, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c9a:	612c      	str	r4, [r5, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c9c:	2604      	movs	r6, #4
 8005c9e:	616e      	str	r6, [r5, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8005ca0:	762c      	strb	r4, [r5, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005ca2:	766c      	strb	r4, [r5, #25]
  hadc3.Init.NbrOfConversion = 1;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	61eb      	str	r3, [r5, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005ca8:	f885 4020 	strb.w	r4, [r5, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005cac:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005cae:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005cb0:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005cb4:	636c      	str	r4, [r5, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8005cb6:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f7fa fcd4 	bl	8000668 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_13;
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <MX_ADC3_Init+0x70>)
 8005cc2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005cc4:	2306      	movs	r3, #6
 8005cc6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005cc8:	9402      	str	r4, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005cca:	237f      	movs	r3, #127	; 0x7f
 8005ccc:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005cce:	9604      	str	r6, [sp, #16]
  sConfig.Offset = 0;
 8005cd0:	9405      	str	r4, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005cd2:	4669      	mov	r1, sp
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f7fa fdd5 	bl	8000884 <HAL_ADC_ConfigChannel>
}
 8005cda:	b006      	add	sp, #24
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	bf00      	nop
 8005ce0:	2001201c 	.word	0x2001201c
 8005ce4:	50040200 	.word	0x50040200
 8005ce8:	36902000 	.word	0x36902000

08005cec <MX_DCMI_Init>:
{
 8005cec:	b508      	push	{r3, lr}
  hdcmi.Instance = DCMI;
 8005cee:	4809      	ldr	r0, [pc, #36]	; (8005d14 <MX_DCMI_Init+0x28>)
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <MX_DCMI_Init+0x2c>)
 8005cf2:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8005cf8:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8005cfa:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8005cfc:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8005cfe:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8005d00:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8005d02:	6203      	str	r3, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8005d04:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8005d06:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8005d08:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8005d0a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8005d0c:	f7fb f90e 	bl	8000f2c <HAL_DCMI_Init>
}
 8005d10:	bd08      	pop	{r3, pc}
 8005d12:	bf00      	nop
 8005d14:	200120cc 	.word	0x200120cc
 8005d18:	50050000 	.word	0x50050000

08005d1c <MX_DFSDM1_Init>:
{
 8005d1c:	b570      	push	{r4, r5, r6, lr}
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8005d1e:	4c15      	ldr	r4, [pc, #84]	; (8005d74 <MX_DFSDM1_Init+0x58>)
 8005d20:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <MX_DFSDM1_Init+0x5c>)
 8005d22:	6023      	str	r3, [r4, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8005d24:	2500      	movs	r5, #0
 8005d26:	6065      	str	r5, [r4, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8005d28:	2601      	movs	r6, #1
 8005d2a:	7226      	strb	r6, [r4, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8005d2c:	7266      	strb	r6, [r4, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8005d2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d32:	61e3      	str	r3, [r4, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8005d34:	2340      	movs	r3, #64	; 0x40
 8005d36:	6223      	str	r3, [r4, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8005d38:	6266      	str	r6, [r4, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7fb fa62 	bl	8001204 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8005d40:	480e      	ldr	r0, [pc, #56]	; (8005d7c <MX_DFSDM1_Init+0x60>)
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <MX_DFSDM1_Init+0x64>)
 8005d44:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8005d46:	7106      	strb	r6, [r0, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8005d48:	6085      	str	r5, [r0, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 25;
 8005d4a:	2319      	movs	r3, #25
 8005d4c:	60c3      	str	r3, [r0, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8005d4e:	6105      	str	r5, [r0, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8005d50:	6145      	str	r5, [r0, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8005d52:	6185      	str	r5, [r0, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8005d54:	61c5      	str	r5, [r0, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8005d56:	2304      	movs	r3, #4
 8005d58:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8005d5a:	6245      	str	r5, [r0, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8005d5c:	6286      	str	r6, [r0, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8005d5e:	62c5      	str	r5, [r0, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x02;
 8005d60:	2302      	movs	r3, #2
 8005d62:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8005d64:	f7fb f9ca 	bl	80010fc <HAL_DFSDM_ChannelInit>
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8005d68:	4632      	mov	r2, r6
 8005d6a:	4906      	ldr	r1, [pc, #24]	; (8005d84 <MX_DFSDM1_Init+0x68>)
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7fb fadd 	bl	800132c <HAL_DFSDM_FilterConfigRegChannel>
}
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	20011d48 	.word	0x20011d48
 8005d78:	40016100 	.word	0x40016100
 8005d7c:	20011e2c 	.word	0x20011e2c
 8005d80:	40016060 	.word	0x40016060
 8005d84:	00030008 	.word	0x00030008

08005d88 <MX_FMC_Init>:
{
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	b088      	sub	sp, #32
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8005d8e:	2400      	movs	r4, #0
 8005d90:	9407      	str	r4, [sp, #28]
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8005d92:	4827      	ldr	r0, [pc, #156]	; (8005e30 <MX_FMC_Init+0xa8>)
 8005d94:	f04f 4a20 	mov.w	sl, #2684354560	; 0xa0000000
 8005d98:	f8c0 a000 	str.w	sl, [r0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8005d9c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8005e38 <MX_FMC_Init+0xb0>
 8005da0:	f8c0 9004 	str.w	r9, [r0, #4]
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8005da4:	2302      	movs	r3, #2
 8005da6:	6083      	str	r3, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8005da8:	60c4      	str	r4, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8005daa:	6104      	str	r4, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8005dac:	2610      	movs	r6, #16
 8005dae:	6146      	str	r6, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8005db0:	6184      	str	r4, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8005db2:	61c4      	str	r4, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8005db4:	6204      	str	r4, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8005db6:	6244      	str	r4, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8005db8:	6284      	str	r4, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8005dba:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8005dbc:	6304      	str	r4, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8005dbe:	6344      	str	r4, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8005dc0:	6384      	str	r4, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8005dc2:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8005dc4:	6404      	str	r4, [r0, #64]	; 0x40
  Timing.AddressSetupTime = 15;
 8005dc6:	250f      	movs	r5, #15
 8005dc8:	9501      	str	r5, [sp, #4]
  Timing.AddressHoldTime = 15;
 8005dca:	9502      	str	r5, [sp, #8]
  Timing.DataSetupTime = 255;
 8005dcc:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8005dd0:	f8cd 800c 	str.w	r8, [sp, #12]
  Timing.BusTurnAroundDuration = 15;
 8005dd4:	9504      	str	r5, [sp, #16]
  Timing.CLKDivision = 16;
 8005dd6:	9605      	str	r6, [sp, #20]
  Timing.DataLatency = 17;
 8005dd8:	2711      	movs	r7, #17
 8005dda:	9706      	str	r7, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8005ddc:	4622      	mov	r2, r4
 8005dde:	a901      	add	r1, sp, #4
 8005de0:	f7fe f94e 	bl	8004080 <HAL_SRAM_Init>
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8005de4:	4813      	ldr	r0, [pc, #76]	; (8005e34 <MX_FMC_Init+0xac>)
 8005de6:	f8c0 a000 	str.w	sl, [r0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8005dea:	f8c0 9004 	str.w	r9, [r0, #4]
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8005dee:	6084      	str	r4, [r0, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8005df0:	60c4      	str	r4, [r0, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8005df2:	6104      	str	r4, [r0, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8005df4:	6146      	str	r6, [r0, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8005df6:	6184      	str	r4, [r0, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8005df8:	61c4      	str	r4, [r0, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8005dfa:	6204      	str	r4, [r0, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8005dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e00:	6243      	str	r3, [r0, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8005e02:	6284      	str	r4, [r0, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8005e04:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8005e06:	6304      	str	r4, [r0, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8005e08:	6344      	str	r4, [r0, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8005e0a:	6384      	str	r4, [r0, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8005e0c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8005e0e:	6404      	str	r4, [r0, #64]	; 0x40
  Timing.AddressSetupTime = 15;
 8005e10:	9501      	str	r5, [sp, #4]
  Timing.AddressHoldTime = 15;
 8005e12:	9502      	str	r5, [sp, #8]
  Timing.DataSetupTime = 255;
 8005e14:	f8cd 800c 	str.w	r8, [sp, #12]
  Timing.BusTurnAroundDuration = 15;
 8005e18:	9504      	str	r5, [sp, #16]
  Timing.CLKDivision = 16;
 8005e1a:	9605      	str	r6, [sp, #20]
  Timing.DataLatency = 17;
 8005e1c:	9706      	str	r7, [sp, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8005e1e:	9407      	str	r4, [sp, #28]
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8005e20:	4622      	mov	r2, r4
 8005e22:	a901      	add	r1, sp, #4
 8005e24:	f7fe f92c 	bl	8004080 <HAL_SRAM_Init>
}
 8005e28:	b008      	add	sp, #32
 8005e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2e:	bf00      	nop
 8005e30:	20011e64 	.word	0x20011e64
 8005e34:	20012200 	.word	0x20012200
 8005e38:	a0000104 	.word	0xa0000104

08005e3c <MX_I2C2_Init>:
{
 8005e3c:	b538      	push	{r3, r4, r5, lr}
  hi2c2.Instance = I2C2;
 8005e3e:	4c0f      	ldr	r4, [pc, #60]	; (8005e7c <MX_I2C2_Init+0x40>)
 8005e40:	4b0f      	ldr	r3, [pc, #60]	; (8005e80 <MX_I2C2_Init+0x44>)
 8005e42:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x109096E2;
 8005e44:	f1a3 533d 	sub.w	r3, r3, #792723456	; 0x2f400000
 8005e48:	f5a3 133f 	sub.w	r3, r3, #3129344	; 0x2fc000
 8005e4c:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8005e50:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005e52:	2500      	movs	r5, #0
 8005e54:	60a5      	str	r5, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e56:	2301      	movs	r3, #1
 8005e58:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e5a:	6125      	str	r5, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005e5c:	6165      	str	r5, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005e5e:	61a5      	str	r5, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e60:	61e5      	str	r5, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e62:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7fb fd6a 	bl	800193e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f7fb fdc4 	bl	80019fa <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005e72:	4629      	mov	r1, r5
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7fb fdee 	bl	8001a56 <HAL_I2CEx_ConfigDigitalFilter>
}
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20011cfc 	.word	0x20011cfc
 8005e80:	40005800 	.word	0x40005800

08005e84 <MX_LPUART1_UART_Init>:
{
 8005e84:	b508      	push	{r3, lr}
  hlpuart1.Instance = LPUART1;
 8005e86:	4809      	ldr	r0, [pc, #36]	; (8005eac <MX_LPUART1_UART_Init+0x28>)
 8005e88:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <MX_LPUART1_UART_Init+0x2c>)
 8005e8a:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <MX_LPUART1_UART_Init+0x30>)
 8005e8e:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8005e90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e94:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005e9a:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005e9c:	220c      	movs	r2, #12
 8005e9e:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ea0:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ea2:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ea4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005ea6:	f7fe fe34 	bl	8004b12 <HAL_UART_Init>
}
 8005eaa:	bd08      	pop	{r3, pc}
 8005eac:	20011eb0 	.word	0x20011eb0
 8005eb0:	40008000 	.word	0x40008000
 8005eb4:	00033324 	.word	0x00033324

08005eb8 <MX_USART1_UART_Init>:
{
 8005eb8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8005eba:	480a      	ldr	r0, [pc, #40]	; (8005ee4 <MX_USART1_UART_Init+0x2c>)
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <MX_USART1_UART_Init+0x30>)
 8005ebe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8005ec0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005ec4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005eca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ecc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ece:	220c      	movs	r2, #12
 8005ed0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8005ed2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005ed6:	6182      	str	r2, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ed8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eda:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005edc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ede:	f7fe fe18 	bl	8004b12 <HAL_UART_Init>
}
 8005ee2:	bd08      	pop	{r3, pc}
 8005ee4:	20012124 	.word	0x20012124
 8005ee8:	40013800 	.word	0x40013800

08005eec <MX_USART2_UART_Init>:
{
 8005eec:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8005eee:	4809      	ldr	r0, [pc, #36]	; (8005f14 <MX_USART2_UART_Init+0x28>)
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <MX_USART2_UART_Init+0x2c>)
 8005ef2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8005ef4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005ef8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005efa:	2300      	movs	r3, #0
 8005efc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005efe:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f00:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f02:	220c      	movs	r2, #12
 8005f04:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f06:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f08:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f0a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f0c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f0e:	f7fe fe00 	bl	8004b12 <HAL_UART_Init>
}
 8005f12:	bd08      	pop	{r3, pc}
 8005f14:	20012334 	.word	0x20012334
 8005f18:	40004400 	.word	0x40004400

08005f1c <MX_QUADSPI_Init>:
{
 8005f1c:	b508      	push	{r3, lr}
  hqspi.Instance = QUADSPI;
 8005f1e:	4808      	ldr	r0, [pc, #32]	; (8005f40 <MX_QUADSPI_Init+0x24>)
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <MX_QUADSPI_Init+0x28>)
 8005f22:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 255;
 8005f24:	23ff      	movs	r3, #255	; 0xff
 8005f26:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8005f28:	2201      	movs	r2, #1
 8005f2a:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8005f30:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8005f32:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8005f34:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8005f36:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8005f38:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8005f3a:	f7fb fef3 	bl	8001d24 <HAL_QSPI_Init>
}
 8005f3e:	bd08      	pop	{r3, pc}
 8005f40:	200125ec 	.word	0x200125ec
 8005f44:	a0001000 	.word	0xa0001000

08005f48 <MX_SAI1_Init>:
{
 8005f48:	b570      	push	{r4, r5, r6, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 8005f4a:	481f      	ldr	r0, [pc, #124]	; (8005fc8 <MX_SAI1_Init+0x80>)
 8005f4c:	4b1f      	ldr	r3, [pc, #124]	; (8005fcc <MX_SAI1_Init+0x84>)
 8005f4e:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8005f50:	2400      	movs	r4, #0
 8005f52:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8005f54:	6044      	str	r4, [r0, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8005f56:	2640      	movs	r6, #64	; 0x40
 8005f58:	6346      	str	r6, [r0, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005f5a:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005f5c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8005f5e:	6084      	str	r4, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005f60:	6104      	str	r4, [r0, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005f62:	6144      	str	r4, [r0, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8005f64:	6184      	str	r4, [r0, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8005f66:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <MX_SAI1_Init+0x88>)
 8005f68:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005f6a:	60c4      	str	r4, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8005f6c:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8005f6e:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005f70:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8005f72:	2308      	movs	r3, #8
 8005f74:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8005f76:	2501      	movs	r5, #1
 8005f78:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8005f7a:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005f7c:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8005f7e:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8005f80:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005f82:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8005f84:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8005f86:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8005f88:	f7fd fbec 	bl	8003764 <HAL_SAI_Init>
  hsai_BlockB1.Instance = SAI1_Block_B;
 8005f8c:	4811      	ldr	r0, [pc, #68]	; (8005fd4 <MX_SAI1_Init+0x8c>)
 8005f8e:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <MX_SAI1_Init+0x90>)
 8005f90:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8005f92:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8005f94:	2303      	movs	r3, #3
 8005f96:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8005f98:	6346      	str	r6, [r0, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005f9a:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005f9c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8005f9e:	6085      	str	r5, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005fa0:	6104      	str	r4, [r0, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8005fa2:	6184      	str	r4, [r0, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005fa4:	60c4      	str	r4, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8005fa6:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8005fa8:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005faa:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 8005fac:	2318      	movs	r3, #24
 8005fae:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8005fb0:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8005fb2:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005fb4:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8005fb6:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8005fb8:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005fba:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8005fbc:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8005fbe:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8005fc0:	f7fd fbd0 	bl	8003764 <HAL_SAI_Init>
}
 8005fc4:	bd70      	pop	{r4, r5, r6, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200122b0 	.word	0x200122b0
 8005fcc:	40015404 	.word	0x40015404
 8005fd0:	0002ee00 	.word	0x0002ee00
 8005fd4:	20011f30 	.word	0x20011f30
 8005fd8:	40015424 	.word	0x40015424

08005fdc <MX_SDMMC1_SD_Init>:
{
 8005fdc:	b510      	push	{r4, lr}
  hsd1.Instance = SDMMC1;
 8005fde:	4c09      	ldr	r4, [pc, #36]	; (8006004 <MX_SDMMC1_SD_Init+0x28>)
 8005fe0:	4b09      	ldr	r3, [pc, #36]	; (8006008 <MX_SDMMC1_SD_Init+0x2c>)
 8005fe2:	6023      	str	r3, [r4, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	6063      	str	r3, [r4, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8005fe8:	60a3      	str	r3, [r4, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005fea:	60e3      	str	r3, [r4, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8005fec:	6123      	str	r3, [r4, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005fee:	6163      	str	r3, [r4, #20]
  hsd1.Init.ClockDiv = 0;
 8005ff0:	61a3      	str	r3, [r4, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f7fd ff7b 	bl	8003eee <HAL_SD_Init>
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f7fd ff95 	bl	8003f2c <HAL_SD_ConfigWideBusOperation>
}
 8006002:	bd10      	pop	{r4, pc}
 8006004:	20011da8 	.word	0x20011da8
 8006008:	40012800 	.word	0x40012800

0800600c <MX_SPI1_Init>:
{
 800600c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800600e:	480e      	ldr	r0, [pc, #56]	; (8006048 <MX_SPI1_Init+0x3c>)
 8006010:	4b0e      	ldr	r3, [pc, #56]	; (800604c <MX_SPI1_Init+0x40>)
 8006012:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006014:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006018:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800601a:	2300      	movs	r3, #0
 800601c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800601e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006022:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006024:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006026:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8006028:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800602c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800602e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006030:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006032:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006034:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006036:	2207      	movs	r2, #7
 8006038:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800603a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800603c:	2308      	movs	r3, #8
 800603e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006040:	f7fd ffc6 	bl	8003fd0 <HAL_SPI_Init>
}
 8006044:	bd08      	pop	{r3, pc}
 8006046:	bf00      	nop
 8006048:	2001224c 	.word	0x2001224c
 800604c:	40013000 	.word	0x40013000

08006050 <MX_SPI2_Init>:
{
 8006050:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8006052:	480e      	ldr	r0, [pc, #56]	; (800608c <MX_SPI2_Init+0x3c>)
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <MX_SPI2_Init+0x40>)
 8006056:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006058:	f44f 7382 	mov.w	r3, #260	; 0x104
 800605c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800605e:	2300      	movs	r3, #0
 8006060:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8006062:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006066:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006068:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800606a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800606c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006070:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006072:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006074:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006076:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006078:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800607a:	2207      	movs	r2, #7
 800607c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800607e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006080:	2308      	movs	r3, #8
 8006082:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006084:	f7fd ffa4 	bl	8003fd0 <HAL_SPI_Init>
}
 8006088:	bd08      	pop	{r3, pc}
 800608a:	bf00      	nop
 800608c:	20011828 	.word	0x20011828
 8006090:	40003800 	.word	0x40003800

08006094 <MX_USB_OTG_FS_PCD_Init>:
{
 8006094:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006096:	4809      	ldr	r0, [pc, #36]	; (80060bc <MX_USB_OTG_FS_PCD_Init+0x28>)
 8006098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800609c:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800609e:	2306      	movs	r3, #6
 80060a0:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80060a2:	2302      	movs	r3, #2
 80060a4:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80060a6:	6183      	str	r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80060ac:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80060ae:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80060b0:	6283      	str	r3, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80060b2:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80060b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80060b6:	f7fb fcfa 	bl	8001aae <HAL_PCD_Init>
}
 80060ba:	bd08      	pop	{r3, pc}
 80060bc:	200118f4 	.word	0x200118f4

080060c0 <HAL_UART_RxCpltCallback>:
	uart_rx_complete = 1;
 80060c0:	4b01      	ldr	r3, [pc, #4]	; (80060c8 <HAL_UART_RxCpltCallback+0x8>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
}
 80060c6:	4770      	bx	lr
 80060c8:	20000064 	.word	0x20000064

080060cc <rsam_callback>:
{
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4604      	mov	r4, r0
	sendbfr[1] = mmf_calculate(&hmmf, self->result);
 80060d0:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80060d4:	4820      	ldr	r0, [pc, #128]	; (8006158 <rsam_callback+0x8c>)
 80060d6:	f7ff fade 	bl	8005696 <mmf_calculate>
 80060da:	4920      	ldr	r1, [pc, #128]	; (800615c <rsam_callback+0x90>)
 80060dc:	ed81 0a01 	vstr	s0, [r1, #4]
	sendbfr[0] = self->result;
 80060e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060e2:	600b      	str	r3, [r1, #0]
	result[0] = sendbfr[1];
 80060e4:	684b      	ldr	r3, [r1, #4]
 80060e6:	4c1e      	ldr	r4, [pc, #120]	; (8006160 <rsam_callback+0x94>)
 80060e8:	6023      	str	r3, [r4, #0]
	y[0] = b[0] * result[0] + b[1] * result[1] + b[2] * result[2] + a[0] * y[1] + a[1] * y[2];
 80060ea:	edd4 7a00 	vldr	s15, [r4]
 80060ee:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8006164 <rsam_callback+0x98>
 80060f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80060f6:	edd4 6a01 	vldr	s13, [r4, #4]
 80060fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006168 <rsam_callback+0x9c>
 80060fe:	ee66 6a87 	vmul.f32	s13, s13, s14
 8006102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006106:	ed94 7a02 	vldr	s14, [r4, #8]
 800610a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800610e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006112:	4d16      	ldr	r5, [pc, #88]	; (800616c <rsam_callback+0xa0>)
 8006114:	ed95 7a01 	vldr	s14, [r5, #4]
 8006118:	eddf 6a15 	vldr	s13, [pc, #84]	; 8006170 <rsam_callback+0xa4>
 800611c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006124:	ed95 7a02 	vldr	s14, [r5, #8]
 8006128:	eddf 6a12 	vldr	s13, [pc, #72]	; 8006174 <rsam_callback+0xa8>
 800612c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006134:	edc5 7a00 	vstr	s15, [r5]
	sendbfr[2] = y[0];
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	608b      	str	r3, [r1, #8]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)sendbfr, 3 * sizeof(sendbfr[0]));
 800613c:	220c      	movs	r2, #12
 800613e:	480e      	ldr	r0, [pc, #56]	; (8006178 <rsam_callback+0xac>)
 8006140:	f7fe f848 	bl	80041d4 <HAL_UART_Transmit_DMA>
	y[2] = y[1];
 8006144:	686b      	ldr	r3, [r5, #4]
 8006146:	60ab      	str	r3, [r5, #8]
	y[1] = y[0];
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	606b      	str	r3, [r5, #4]
	result[2] = result[1];
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	60a3      	str	r3, [r4, #8]
	result[1] = result[0];
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	6063      	str	r3, [r4, #4]
}
 8006154:	bd38      	pop	{r3, r4, r5, pc}
 8006156:	bf00      	nop
 8006158:	200121a4 	.word	0x200121a4
 800615c:	20000058 	.word	0x20000058
 8006160:	2000004c 	.word	0x2000004c
 8006164:	3b6bedfa 	.word	0x3b6bedfa
 8006168:	3bebedfa 	.word	0x3bebedfa
 800616c:	20000068 	.word	0x20000068
 8006170:	3fe94e3c 	.word	0x3fe94e3c
 8006174:	bf5652bd 	.word	0xbf5652bd
 8006178:	20012334 	.word	0x20012334

0800617c <SystemClock_Config>:
{
 800617c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617e:	b0bb      	sub	sp, #236	; 0xec
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006180:	2244      	movs	r2, #68	; 0x44
 8006182:	2100      	movs	r1, #0
 8006184:	a829      	add	r0, sp, #164	; 0xa4
 8006186:	f001 ff74 	bl	8008072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800618a:	2400      	movs	r4, #0
 800618c:	9424      	str	r4, [sp, #144]	; 0x90
 800618e:	9425      	str	r4, [sp, #148]	; 0x94
 8006190:	9426      	str	r4, [sp, #152]	; 0x98
 8006192:	9427      	str	r4, [sp, #156]	; 0x9c
 8006194:	9428      	str	r4, [sp, #160]	; 0xa0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006196:	228c      	movs	r2, #140	; 0x8c
 8006198:	4621      	mov	r1, r4
 800619a:	a801      	add	r0, sp, #4
 800619c:	f001 ff69 	bl	8008072 <memset>
  HAL_PWR_EnableBkUpAccess();
 80061a0:	f7fb fd30 	bl	8001c04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80061a4:	4a26      	ldr	r2, [pc, #152]	; (8006240 <SystemClock_Config+0xc4>)
 80061a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80061aa:	f023 0318 	bic.w	r3, r3, #24
 80061ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80061b2:	2314      	movs	r3, #20
 80061b4:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80061b6:	2601      	movs	r6, #1
 80061b8:	962b      	str	r6, [sp, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80061ba:	962f      	str	r6, [sp, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80061bc:	9430      	str	r4, [sp, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80061be:	23a0      	movs	r3, #160	; 0xa0
 80061c0:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061c2:	2302      	movs	r3, #2
 80061c4:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80061c6:	9634      	str	r6, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 80061c8:	2705      	movs	r7, #5
 80061ca:	9735      	str	r7, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 48;
 80061cc:	2230      	movs	r2, #48	; 0x30
 80061ce:	9236      	str	r2, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80061d0:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80061d2:	9338      	str	r3, [sp, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80061d4:	2504      	movs	r5, #4
 80061d6:	9539      	str	r5, [sp, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061d8:	a829      	add	r0, sp, #164	; 0xa4
 80061da:	f7fb fea9 	bl	8001f30 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061de:	230f      	movs	r3, #15
 80061e0:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80061e2:	2303      	movs	r3, #3
 80061e4:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061e6:	9426      	str	r4, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80061e8:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061ea:	9428      	str	r4, [sp, #160]	; 0xa0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80061ec:	4629      	mov	r1, r5
 80061ee:	a824      	add	r0, sp, #144	; 0x90
 80061f0:	f7fc f9bc 	bl	800256c <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80061f4:	4b13      	ldr	r3, [pc, #76]	; (8006244 <SystemClock_Config+0xc8>)
 80061f6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80061f8:	940f      	str	r4, [sp, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80061fa:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80061fc:	9414      	str	r4, [sp, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80061fe:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8006200:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006206:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 8006208:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800620c:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800620e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006212:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8006214:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006216:	9602      	str	r6, [sp, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8006218:	9703      	str	r7, [sp, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 30;
 800621a:	231e      	movs	r3, #30
 800621c:	9304      	str	r3, [sp, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV4;
 800621e:	9505      	str	r5, [sp, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8006220:	9506      	str	r5, [sp, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8006222:	9507      	str	r5, [sp, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8006224:	4b08      	ldr	r3, [pc, #32]	; (8006248 <SystemClock_Config+0xcc>)
 8006226:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006228:	eb0d 0005 	add.w	r0, sp, r5
 800622c:	f7fc fc5e 	bl	8002aec <HAL_RCCEx_PeriphCLKConfig>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006230:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006234:	f7fb fcf6 	bl	8001c24 <HAL_PWREx_ControlVoltageScaling>
  HAL_RCCEx_EnableMSIPLLMode();
 8006238:	f7fd fa6a 	bl	8003710 <HAL_RCCEx_EnableMSIPLLMode>
}
 800623c:	b03b      	add	sp, #236	; 0xec
 800623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006240:	40021000 	.word	0x40021000
 8006244:	000968a3 	.word	0x000968a3
 8006248:	01110000 	.word	0x01110000

0800624c <main>:
{
 800624c:	b508      	push	{r3, lr}
  HAL_Init();
 800624e:	f7fa f9d5 	bl	80005fc <HAL_Init>
  SystemClock_Config();
 8006252:	f7ff ff93 	bl	800617c <SystemClock_Config>
  MX_GPIO_Init();
 8006256:	f7ff fb37 	bl	80058c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800625a:	f7ff fc6f 	bl	8005b3c <MX_DMA_Init>
  MX_ADC1_Init();
 800625e:	f7ff fc8f 	bl	8005b80 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006262:	f7ff fccf 	bl	8005c04 <MX_ADC2_Init>
  MX_ADC3_Init();
 8006266:	f7ff fd07 	bl	8005c78 <MX_ADC3_Init>
  MX_DCMI_Init();
 800626a:	f7ff fd3f 	bl	8005cec <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800626e:	f7ff fd55 	bl	8005d1c <MX_DFSDM1_Init>
  MX_FMC_Init();
 8006272:	f7ff fd89 	bl	8005d88 <MX_FMC_Init>
  MX_I2C2_Init();
 8006276:	f7ff fde1 	bl	8005e3c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800627a:	f7ff fe03 	bl	8005e84 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800627e:	f7ff fe1b 	bl	8005eb8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006282:	f7ff fe33 	bl	8005eec <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8006286:	f7ff fe49 	bl	8005f1c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800628a:	f7ff fe5d 	bl	8005f48 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800628e:	f7ff fea5 	bl	8005fdc <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8006292:	f7ff febb 	bl	800600c <MX_SPI1_Init>
  MX_SPI2_Init();
 8006296:	f7ff fedb 	bl	8006050 <MX_SPI2_Init>
  MX_USB_OTG_FS_PCD_Init();
 800629a:	f7ff fefb 	bl	8006094 <MX_USB_OTG_FS_PCD_Init>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800629e:	2201      	movs	r2, #1
 80062a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062a4:	4824      	ldr	r0, [pc, #144]	; (8006338 <main+0xec>)
 80062a6:	f7fb fb45 	bl	8001934 <HAL_GPIO_WritePin>
  rsam_init((rsam_algorithm_t*)&hrsam, &hdfsdm1_filter0, RSAM_OVERMAG, RSAM_A, RSAM_B);
 80062aa:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800633c <main+0xf0>
 80062ae:	eddf 0a24 	vldr	s1, [pc, #144]	; 8006340 <main+0xf4>
 80062b2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80062b6:	4923      	ldr	r1, [pc, #140]	; (8006344 <main+0xf8>)
 80062b8:	4823      	ldr	r0, [pc, #140]	; (8006348 <main+0xfc>)
 80062ba:	f7ff fa0d 	bl	80056d8 <rsam_init>
  mmf_init(&hmmf, mmf_data_array, MEDIAN_KERNEL, MEDIAN_INIT);
 80062be:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800634c <main+0x100>
 80062c2:	2215      	movs	r2, #21
 80062c4:	4922      	ldr	r1, [pc, #136]	; (8006350 <main+0x104>)
 80062c6:	4823      	ldr	r0, [pc, #140]	; (8006354 <main+0x108>)
 80062c8:	f7ff f94c 	bl	8005564 <mmf_init>
  HAL_GPIO_WritePin(MIC_VDD_GPIO_Port, MIC_VDD_Pin, GPIO_PIN_SET);
 80062cc:	2201      	movs	r2, #1
 80062ce:	2102      	movs	r1, #2
 80062d0:	4821      	ldr	r0, [pc, #132]	; (8006358 <main+0x10c>)
 80062d2:	f7fb fb2f 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rxbuf, 2);
 80062d6:	2202      	movs	r2, #2
 80062d8:	4920      	ldr	r1, [pc, #128]	; (800635c <main+0x110>)
 80062da:	4821      	ldr	r0, [pc, #132]	; (8006360 <main+0x114>)
 80062dc:	f7fd ff10 	bl	8004100 <HAL_UART_Receive_IT>
 80062e0:	e011      	b.n	8006306 <main+0xba>
			  rsam_start((rsam_algorithm_t*)&hrsam);
 80062e2:	4819      	ldr	r0, [pc, #100]	; (8006348 <main+0xfc>)
 80062e4:	f7ff fa05 	bl	80056f2 <rsam_start>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80062e8:	2200      	movs	r2, #0
 80062ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062ee:	4812      	ldr	r0, [pc, #72]	; (8006338 <main+0xec>)
 80062f0:	f7fb fb20 	bl	8001934 <HAL_GPIO_WritePin>
 80062f4:	e010      	b.n	8006318 <main+0xcc>
		  uart_rx_complete = 0;
 80062f6:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <main+0x118>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rxbuf, 2);
 80062fc:	2202      	movs	r2, #2
 80062fe:	4917      	ldr	r1, [pc, #92]	; (800635c <main+0x110>)
 8006300:	4817      	ldr	r0, [pc, #92]	; (8006360 <main+0x114>)
 8006302:	f7fd fefd 	bl	8004100 <HAL_UART_Receive_IT>
	  if (uart_rx_complete)
 8006306:	4b17      	ldr	r3, [pc, #92]	; (8006364 <main+0x118>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0fb      	beq.n	8006306 <main+0xba>
		  if (uart_rxbuf[0] == '1')
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <main+0x110>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b31      	cmp	r3, #49	; 0x31
 8006316:	d0e4      	beq.n	80062e2 <main+0x96>
		  if (uart_rxbuf[0] == '0')
 8006318:	4b10      	ldr	r3, [pc, #64]	; (800635c <main+0x110>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b30      	cmp	r3, #48	; 0x30
 8006320:	d1e9      	bne.n	80062f6 <main+0xaa>
			  rsam_stop((rsam_algorithm_t*)&hrsam);
 8006322:	4809      	ldr	r0, [pc, #36]	; (8006348 <main+0xfc>)
 8006324:	f7ff f9ee 	bl	8005704 <rsam_stop>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8006328:	2201      	movs	r2, #1
 800632a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800632e:	4802      	ldr	r0, [pc, #8]	; (8006338 <main+0xec>)
 8006330:	f7fb fb00 	bl	8001934 <HAL_GPIO_WritePin>
 8006334:	e7df      	b.n	80062f6 <main+0xaa>
 8006336:	bf00      	nop
 8006338:	48000400 	.word	0x48000400
 800633c:	422c95ea 	.word	0x422c95ea
 8006340:	3f781d7e 	.word	0x3f781d7e
 8006344:	20011d48 	.word	0x20011d48
 8006348:	2000008c 	.word	0x2000008c
 800634c:	00000000 	.word	0x00000000
 8006350:	200123f4 	.word	0x200123f4
 8006354:	200121a4 	.word	0x200121a4
 8006358:	48001c00 	.word	0x48001c00
 800635c:	200123b4 	.word	0x200123b4
 8006360:	20012334 	.word	0x20012334
 8006364:	20000064 	.word	0x20000064

08006368 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006368:	4770      	bx	lr
	...

0800636c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800636c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006370:	2300      	movs	r3, #0
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	9302      	str	r3, [sp, #8]
 8006376:	9303      	str	r3, [sp, #12]
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800637c:	4b20      	ldr	r3, [pc, #128]	; (8006400 <HAL_FMC_MspInit+0x94>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	b10b      	cbz	r3, 8006386 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006382:	b007      	add	sp, #28
 8006384:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8006386:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <HAL_FMC_MspInit+0x94>)
 8006388:	2201      	movs	r2, #1
 800638a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800638c:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <HAL_FMC_MspInit+0x98>)
 800638e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006390:	f042 0201 	orr.w	r2, r2, #1
 8006394:	651a      	str	r2, [r3, #80]	; 0x50
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 80063a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80063a4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a6:	2602      	movs	r6, #2
 80063a8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063aa:	2503      	movs	r5, #3
 80063ac:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80063ae:	240c      	movs	r4, #12
 80063b0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063b2:	a901      	add	r1, sp, #4
 80063b4:	4814      	ldr	r0, [pc, #80]	; (8006408 <HAL_FMC_MspInit+0x9c>)
 80063b6:	f7fb f9e1 	bl	800177c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 80063ba:	f240 233f 	movw	r3, #575	; 0x23f
 80063be:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063c0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c2:	2700      	movs	r7, #0
 80063c4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80063c8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80063ca:	a901      	add	r1, sp, #4
 80063cc:	480f      	ldr	r0, [pc, #60]	; (800640c <HAL_FMC_MspInit+0xa0>)
 80063ce:	f7fb f9d5 	bl	800177c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 80063d2:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80063d6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063da:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063dc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80063de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063e0:	a901      	add	r1, sp, #4
 80063e2:	480b      	ldr	r0, [pc, #44]	; (8006410 <HAL_FMC_MspInit+0xa4>)
 80063e4:	f7fb f9ca 	bl	800177c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 80063e8:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80063ec:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ee:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80063f4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80063f6:	a901      	add	r1, sp, #4
 80063f8:	4806      	ldr	r0, [pc, #24]	; (8006414 <HAL_FMC_MspInit+0xa8>)
 80063fa:	f7fb f9bf 	bl	800177c <HAL_GPIO_Init>
 80063fe:	e7c0      	b.n	8006382 <HAL_FMC_MspInit+0x16>
 8006400:	20000078 	.word	0x20000078
 8006404:	40021000 	.word	0x40021000
 8006408:	48001000 	.word	0x48001000
 800640c:	48001800 	.word	0x48001800
 8006410:	48000c00 	.word	0x48000c00
 8006414:	48001400 	.word	0x48001400

08006418 <HAL_MspInit>:
{
 8006418:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <HAL_MspInit+0x2c>)
 800641c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	661a      	str	r2, [r3, #96]	; 0x60
 8006424:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006426:	f002 0201 	and.w	r2, r2, #1
 800642a:	9200      	str	r2, [sp, #0]
 800642c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800642e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006430:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006434:	659a      	str	r2, [r3, #88]	; 0x58
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	9b01      	ldr	r3, [sp, #4]
}
 8006440:	b002      	add	sp, #8
 8006442:	4770      	bx	lr
 8006444:	40021000 	.word	0x40021000

08006448 <HAL_ADC_MspInit>:
{
 8006448:	b510      	push	{r4, lr}
 800644a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800644c:	2300      	movs	r3, #0
 800644e:	9307      	str	r3, [sp, #28]
 8006450:	9308      	str	r3, [sp, #32]
 8006452:	9309      	str	r3, [sp, #36]	; 0x24
 8006454:	930a      	str	r3, [sp, #40]	; 0x28
 8006456:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hadc->Instance==ADC1)
 8006458:	6803      	ldr	r3, [r0, #0]
 800645a:	4a45      	ldr	r2, [pc, #276]	; (8006570 <HAL_ADC_MspInit+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d007      	beq.n	8006470 <HAL_ADC_MspInit+0x28>
  else if(hadc->Instance==ADC2)
 8006460:	4a44      	ldr	r2, [pc, #272]	; (8006574 <HAL_ADC_MspInit+0x12c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d028      	beq.n	80064b8 <HAL_ADC_MspInit+0x70>
  else if(hadc->Instance==ADC3)
 8006466:	4a44      	ldr	r2, [pc, #272]	; (8006578 <HAL_ADC_MspInit+0x130>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d05c      	beq.n	8006526 <HAL_ADC_MspInit+0xde>
}
 800646c:	b00c      	add	sp, #48	; 0x30
 800646e:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC_CLK_ENABLED++;
 8006470:	4a42      	ldr	r2, [pc, #264]	; (800657c <HAL_ADC_MspInit+0x134>)
 8006472:	6813      	ldr	r3, [r2, #0]
 8006474:	3301      	adds	r3, #1
 8006476:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006478:	2b01      	cmp	r3, #1
 800647a:	d012      	beq.n	80064a2 <HAL_ADC_MspInit+0x5a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800647c:	4b40      	ldr	r3, [pc, #256]	; (8006580 <HAL_ADC_MspInit+0x138>)
 800647e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006480:	f042 0204 	orr.w	r2, r2, #4
 8006484:	64da      	str	r2, [r3, #76]	; 0x4c
 8006486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8006490:	2318      	movs	r3, #24
 8006492:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006494:	230b      	movs	r3, #11
 8006496:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006498:	a907      	add	r1, sp, #28
 800649a:	483a      	ldr	r0, [pc, #232]	; (8006584 <HAL_ADC_MspInit+0x13c>)
 800649c:	f7fb f96e 	bl	800177c <HAL_GPIO_Init>
 80064a0:	e7e4      	b.n	800646c <HAL_ADC_MspInit+0x24>
      __HAL_RCC_ADC_CLK_ENABLE();
 80064a2:	4b37      	ldr	r3, [pc, #220]	; (8006580 <HAL_ADC_MspInit+0x138>)
 80064a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80064ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	9b00      	ldr	r3, [sp, #0]
 80064b6:	e7e1      	b.n	800647c <HAL_ADC_MspInit+0x34>
    HAL_RCC_ADC_CLK_ENABLED++;
 80064b8:	4a30      	ldr	r2, [pc, #192]	; (800657c <HAL_ADC_MspInit+0x134>)
 80064ba:	6813      	ldr	r3, [r2, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d025      	beq.n	8006510 <HAL_ADC_MspInit+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064c4:	4b2e      	ldr	r3, [pc, #184]	; (8006580 <HAL_ADC_MspInit+0x138>)
 80064c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064c8:	f042 0204 	orr.w	r2, r2, #4
 80064cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80064ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064d0:	f002 0204 	and.w	r2, r2, #4
 80064d4:	9203      	str	r2, [sp, #12]
 80064d6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	64da      	str	r2, [r3, #76]	; 0x4c
 80064e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80064ea:	2303      	movs	r3, #3
 80064ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80064ee:	240b      	movs	r4, #11
 80064f0:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064f2:	a907      	add	r1, sp, #28
 80064f4:	4823      	ldr	r0, [pc, #140]	; (8006584 <HAL_ADC_MspInit+0x13c>)
 80064f6:	f7fb f941 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 80064fa:	2312      	movs	r3, #18
 80064fc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80064fe:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006500:	2300      	movs	r3, #0
 8006502:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006504:	a907      	add	r1, sp, #28
 8006506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800650a:	f7fb f937 	bl	800177c <HAL_GPIO_Init>
 800650e:	e7ad      	b.n	800646c <HAL_ADC_MspInit+0x24>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006510:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <HAL_ADC_MspInit+0x138>)
 8006512:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006518:	64da      	str	r2, [r3, #76]	; 0x4c
 800651a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006520:	9302      	str	r3, [sp, #8]
 8006522:	9b02      	ldr	r3, [sp, #8]
 8006524:	e7ce      	b.n	80064c4 <HAL_ADC_MspInit+0x7c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006526:	4a15      	ldr	r2, [pc, #84]	; (800657c <HAL_ADC_MspInit+0x134>)
 8006528:	6813      	ldr	r3, [r2, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800652e:	2b01      	cmp	r3, #1
 8006530:	d013      	beq.n	800655a <HAL_ADC_MspInit+0x112>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006532:	4b13      	ldr	r3, [pc, #76]	; (8006580 <HAL_ADC_MspInit+0x138>)
 8006534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006536:	f042 0220 	orr.w	r2, r2, #32
 800653a:	64da      	str	r2, [r3, #76]	; 0x4c
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	9306      	str	r3, [sp, #24]
 8006544:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8006546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800654a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800654c:	230b      	movs	r3, #11
 800654e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8006550:	a907      	add	r1, sp, #28
 8006552:	480d      	ldr	r0, [pc, #52]	; (8006588 <HAL_ADC_MspInit+0x140>)
 8006554:	f7fb f912 	bl	800177c <HAL_GPIO_Init>
}
 8006558:	e788      	b.n	800646c <HAL_ADC_MspInit+0x24>
      __HAL_RCC_ADC_CLK_ENABLE();
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <HAL_ADC_MspInit+0x138>)
 800655c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800655e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006562:	64da      	str	r2, [r3, #76]	; 0x4c
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800656a:	9305      	str	r3, [sp, #20]
 800656c:	9b05      	ldr	r3, [sp, #20]
 800656e:	e7e0      	b.n	8006532 <HAL_ADC_MspInit+0xea>
 8006570:	50040000 	.word	0x50040000
 8006574:	50040100 	.word	0x50040100
 8006578:	50040200 	.word	0x50040200
 800657c:	2000007c 	.word	0x2000007c
 8006580:	40021000 	.word	0x40021000
 8006584:	48000800 	.word	0x48000800
 8006588:	48001400 	.word	0x48001400

0800658c <HAL_DCMI_MspInit>:
{
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006590:	2300      	movs	r3, #0
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	9306      	str	r3, [sp, #24]
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	9308      	str	r3, [sp, #32]
 800659a:	9309      	str	r3, [sp, #36]	; 0x24
  if(hdcmi->Instance==DCMI)
 800659c:	6802      	ldr	r2, [r0, #0]
 800659e:	4b27      	ldr	r3, [pc, #156]	; (800663c <HAL_DCMI_MspInit+0xb0>)
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d001      	beq.n	80065a8 <HAL_DCMI_MspInit+0x1c>
}
 80065a4:	b00a      	add	sp, #40	; 0x28
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 80065a8:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80065ac:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80065b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80065b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80065be:	9201      	str	r2, [sp, #4]
 80065c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80065c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80065ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80065d0:	9202      	str	r2, [sp, #8]
 80065d2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80065d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065da:	64da      	str	r2, [r3, #76]	; 0x4c
 80065dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065de:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80065e2:	9203      	str	r2, [sp, #12]
 80065e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80065e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065e8:	f042 0210 	orr.w	r2, r2, #16
 80065ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80065ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 80065f8:	f645 7320 	movw	r3, #24352	; 0x5f20
 80065fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065fe:	2602      	movs	r6, #2
 8006600:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8006602:	250a      	movs	r5, #10
 8006604:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006606:	a905      	add	r1, sp, #20
 8006608:	480d      	ldr	r0, [pc, #52]	; (8006640 <HAL_DCMI_MspInit+0xb4>)
 800660a:	f7fb f8b7 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800660e:	23b0      	movs	r3, #176	; 0xb0
 8006610:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006612:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006614:	2400      	movs	r4, #0
 8006616:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006618:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800661a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800661c:	a905      	add	r1, sp, #20
 800661e:	4809      	ldr	r0, [pc, #36]	; (8006644 <HAL_DCMI_MspInit+0xb8>)
 8006620:	f7fb f8ac 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8006624:	2320      	movs	r3, #32
 8006626:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006628:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800662e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8006630:	a905      	add	r1, sp, #20
 8006632:	4805      	ldr	r0, [pc, #20]	; (8006648 <HAL_DCMI_MspInit+0xbc>)
 8006634:	f7fb f8a2 	bl	800177c <HAL_GPIO_Init>
}
 8006638:	e7b4      	b.n	80065a4 <HAL_DCMI_MspInit+0x18>
 800663a:	bf00      	nop
 800663c:	50050000 	.word	0x50050000
 8006640:	48001c00 	.word	0x48001c00
 8006644:	48002000 	.word	0x48002000
 8006648:	48001000 	.word	0x48001000

0800664c <HAL_DFSDM_FilterMspInit>:
{
 800664c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664e:	b089      	sub	sp, #36	; 0x24
 8006650:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006652:	2300      	movs	r3, #0
 8006654:	9303      	str	r3, [sp, #12]
 8006656:	9304      	str	r3, [sp, #16]
 8006658:	9305      	str	r3, [sp, #20]
 800665a:	9306      	str	r3, [sp, #24]
 800665c:	9307      	str	r3, [sp, #28]
  if(DFSDM1_Init == 0)
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <HAL_DFSDM_FilterMspInit+0xe0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d130      	bne.n	80066c8 <HAL_DFSDM_FilterMspInit+0x7c>
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8006666:	4a32      	ldr	r2, [pc, #200]	; (8006730 <HAL_DFSDM_FilterMspInit+0xe4>)
 8006668:	6813      	ldr	r3, [r2, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800666e:	2b01      	cmp	r3, #1
 8006670:	d030      	beq.n	80066d4 <HAL_DFSDM_FilterMspInit+0x88>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006672:	4b30      	ldr	r3, [pc, #192]	; (8006734 <HAL_DFSDM_FilterMspInit+0xe8>)
 8006674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006676:	f042 0204 	orr.w	r2, r2, #4
 800667a:	64da      	str	r2, [r3, #76]	; 0x4c
 800667c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800667e:	f002 0204 	and.w	r2, r2, #4
 8006682:	9201      	str	r2, [sp, #4]
 8006684:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006688:	f042 0202 	orr.w	r2, r2, #2
 800668c:	64da      	str	r2, [r3, #76]	; 0x4c
 800668e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	9302      	str	r3, [sp, #8]
 8006696:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8006698:	2384      	movs	r3, #132	; 0x84
 800669a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669c:	2702      	movs	r7, #2
 800669e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a0:	2603      	movs	r6, #3
 80066a2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80066a4:	2506      	movs	r5, #6
 80066a6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066a8:	a903      	add	r1, sp, #12
 80066aa:	4823      	ldr	r0, [pc, #140]	; (8006738 <HAL_DFSDM_FilterMspInit+0xec>)
 80066ac:	f7fb f866 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80066b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066bc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80066be:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80066c0:	a903      	add	r1, sp, #12
 80066c2:	481e      	ldr	r0, [pc, #120]	; (800673c <HAL_DFSDM_FilterMspInit+0xf0>)
 80066c4:	f7fb f85a 	bl	800177c <HAL_GPIO_Init>
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	4b1d      	ldr	r3, [pc, #116]	; (8006740 <HAL_DFSDM_FilterMspInit+0xf4>)
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d00c      	beq.n	80066ea <HAL_DFSDM_FilterMspInit+0x9e>
}
 80066d0:	b009      	add	sp, #36	; 0x24
 80066d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80066d4:	4b17      	ldr	r3, [pc, #92]	; (8006734 <HAL_DFSDM_FilterMspInit+0xe8>)
 80066d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80066dc:	661a      	str	r2, [r3, #96]	; 0x60
 80066de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	9b00      	ldr	r3, [sp, #0]
 80066e8:	e7c3      	b.n	8006672 <HAL_DFSDM_FilterMspInit+0x26>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80066ea:	4816      	ldr	r0, [pc, #88]	; (8006744 <HAL_DFSDM_FilterMspInit+0xf8>)
 80066ec:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
 80066f0:	3344      	adds	r3, #68	; 0x44
 80066f2:	6003      	str	r3, [r0, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	6043      	str	r3, [r0, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066f8:	6083      	str	r3, [r0, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80066fa:	60c3      	str	r3, [r0, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	6103      	str	r3, [r0, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006704:	6143      	str	r3, [r0, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800670a:	6183      	str	r3, [r0, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800670c:	2320      	movs	r3, #32
 800670e:	61c3      	str	r3, [r0, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006710:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006714:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8006716:	f7fa fecb 	bl	80014b0 <HAL_DMA_Init>
 800671a:	b920      	cbnz	r0, 8006726 <HAL_DFSDM_FilterMspInit+0xda>
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <HAL_DFSDM_FilterMspInit+0xf8>)
 800671e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8006720:	62a3      	str	r3, [r4, #40]	; 0x28
 8006722:	629c      	str	r4, [r3, #40]	; 0x28
}
 8006724:	e7d4      	b.n	80066d0 <HAL_DFSDM_FilterMspInit+0x84>
      Error_Handler();
 8006726:	f7ff fe1f 	bl	8006368 <Error_Handler>
 800672a:	e7f7      	b.n	800671c <HAL_DFSDM_FilterMspInit+0xd0>
 800672c:	20000074 	.word	0x20000074
 8006730:	20000080 	.word	0x20000080
 8006734:	40021000 	.word	0x40021000
 8006738:	48000800 	.word	0x48000800
 800673c:	48000400 	.word	0x48000400
 8006740:	40016100 	.word	0x40016100
 8006744:	200121b8 	.word	0x200121b8

08006748 <HAL_DFSDM_ChannelMspInit>:
{
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800674c:	2300      	movs	r3, #0
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	9305      	str	r3, [sp, #20]
 8006754:	9306      	str	r3, [sp, #24]
 8006756:	9307      	str	r3, [sp, #28]
  if(DFSDM1_Init == 0)
 8006758:	4b20      	ldr	r3, [pc, #128]	; (80067dc <HAL_DFSDM_ChannelMspInit+0x94>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d130      	bne.n	80067c2 <HAL_DFSDM_ChannelMspInit+0x7a>
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8006760:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <HAL_DFSDM_ChannelMspInit+0x98>)
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8006768:	2b01      	cmp	r3, #1
 800676a:	d02c      	beq.n	80067c6 <HAL_DFSDM_ChannelMspInit+0x7e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800676c:	4b1d      	ldr	r3, [pc, #116]	; (80067e4 <HAL_DFSDM_ChannelMspInit+0x9c>)
 800676e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006770:	f042 0204 	orr.w	r2, r2, #4
 8006774:	64da      	str	r2, [r3, #76]	; 0x4c
 8006776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006778:	f002 0204 	and.w	r2, r2, #4
 800677c:	9201      	str	r2, [sp, #4]
 800677e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006782:	f042 0202 	orr.w	r2, r2, #2
 8006786:	64da      	str	r2, [r3, #76]	; 0x4c
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	9302      	str	r3, [sp, #8]
 8006790:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8006792:	2384      	movs	r3, #132	; 0x84
 8006794:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006796:	2602      	movs	r6, #2
 8006798:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800679a:	2503      	movs	r5, #3
 800679c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800679e:	2406      	movs	r4, #6
 80067a0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067a2:	a903      	add	r1, sp, #12
 80067a4:	4810      	ldr	r0, [pc, #64]	; (80067e8 <HAL_DFSDM_ChannelMspInit+0xa0>)
 80067a6:	f7fa ffe9 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80067aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067b6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80067b8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80067ba:	a903      	add	r1, sp, #12
 80067bc:	480b      	ldr	r0, [pc, #44]	; (80067ec <HAL_DFSDM_ChannelMspInit+0xa4>)
 80067be:	f7fa ffdd 	bl	800177c <HAL_GPIO_Init>
}
 80067c2:	b008      	add	sp, #32
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <HAL_DFSDM_ChannelMspInit+0x9c>)
 80067c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80067ce:	661a      	str	r2, [r3, #96]	; 0x60
 80067d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	9b00      	ldr	r3, [sp, #0]
 80067da:	e7c7      	b.n	800676c <HAL_DFSDM_ChannelMspInit+0x24>
 80067dc:	20000074 	.word	0x20000074
 80067e0:	20000080 	.word	0x20000080
 80067e4:	40021000 	.word	0x40021000
 80067e8:	48000800 	.word	0x48000800
 80067ec:	48000400 	.word	0x48000400

080067f0 <HAL_I2C_MspInit>:
{
 80067f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f6:	2300      	movs	r3, #0
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	9305      	str	r3, [sp, #20]
 80067fe:	9306      	str	r3, [sp, #24]
 8006800:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8006802:	6802      	ldr	r2, [r0, #0]
 8006804:	4b1f      	ldr	r3, [pc, #124]	; (8006884 <HAL_I2C_MspInit+0x94>)
 8006806:	429a      	cmp	r2, r3
 8006808:	d002      	beq.n	8006810 <HAL_I2C_MspInit+0x20>
}
 800680a:	b008      	add	sp, #32
 800680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006810:	4c1d      	ldr	r4, [pc, #116]	; (8006888 <HAL_I2C_MspInit+0x98>)
 8006812:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	64e3      	str	r3, [r4, #76]	; 0x4c
 800681a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800681c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006824:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006826:	f043 0302 	orr.w	r3, r3, #2
 800682a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800682c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8006836:	2310      	movs	r3, #16
 8006838:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800683a:	f04f 0812 	mov.w	r8, #18
 800683e:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006842:	2701      	movs	r7, #1
 8006844:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006846:	2603      	movs	r6, #3
 8006848:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800684a:	2504      	movs	r5, #4
 800684c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800684e:	a903      	add	r1, sp, #12
 8006850:	480e      	ldr	r0, [pc, #56]	; (800688c <HAL_I2C_MspInit+0x9c>)
 8006852:	f7fa ff93 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8006856:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800685a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800685c:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006860:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006862:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006864:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8006866:	a903      	add	r1, sp, #12
 8006868:	4809      	ldr	r0, [pc, #36]	; (8006890 <HAL_I2C_MspInit+0xa0>)
 800686a:	f7fa ff87 	bl	800177c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800686e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006874:	65a3      	str	r3, [r4, #88]	; 0x58
 8006876:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800687c:	9302      	str	r3, [sp, #8]
 800687e:	9b02      	ldr	r3, [sp, #8]
}
 8006880:	e7c3      	b.n	800680a <HAL_I2C_MspInit+0x1a>
 8006882:	bf00      	nop
 8006884:	40005800 	.word	0x40005800
 8006888:	40021000 	.word	0x40021000
 800688c:	48001c00 	.word	0x48001c00
 8006890:	48000400 	.word	0x48000400

08006894 <HAL_UART_MspInit>:
{
 8006894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006898:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800689a:	2300      	movs	r3, #0
 800689c:	9309      	str	r3, [sp, #36]	; 0x24
 800689e:	930a      	str	r3, [sp, #40]	; 0x28
 80068a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a2:	930c      	str	r3, [sp, #48]	; 0x30
 80068a4:	930d      	str	r3, [sp, #52]	; 0x34
  if(huart->Instance==LPUART1)
 80068a6:	6803      	ldr	r3, [r0, #0]
 80068a8:	4a60      	ldr	r2, [pc, #384]	; (8006a2c <HAL_UART_MspInit+0x198>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d009      	beq.n	80068c2 <HAL_UART_MspInit+0x2e>
 80068ae:	4604      	mov	r4, r0
  else if(huart->Instance==USART1)
 80068b0:	4a5f      	ldr	r2, [pc, #380]	; (8006a30 <HAL_UART_MspInit+0x19c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d02a      	beq.n	800690c <HAL_UART_MspInit+0x78>
  else if(huart->Instance==USART2)
 80068b6:	4a5f      	ldr	r2, [pc, #380]	; (8006a34 <HAL_UART_MspInit+0x1a0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d05f      	beq.n	800697c <HAL_UART_MspInit+0xe8>
}
 80068bc:	b00e      	add	sp, #56	; 0x38
 80068be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80068c2:	4b5d      	ldr	r3, [pc, #372]	; (8006a38 <HAL_UART_MspInit+0x1a4>)
 80068c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80068cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068ce:	f002 0201 	and.w	r2, r2, #1
 80068d2:	9201      	str	r2, [sp, #4]
 80068d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80068d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80068de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e4:	9302      	str	r3, [sp, #8]
 80068e6:	9b02      	ldr	r3, [sp, #8]
    HAL_PWREx_EnableVddIO2();
 80068e8:	f7fb f9ec 	bl	8001cc4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80068ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80068f0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f2:	2302      	movs	r3, #2
 80068f4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068fa:	2303      	movs	r3, #3
 80068fc:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80068fe:	2308      	movs	r3, #8
 8006900:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006902:	a909      	add	r1, sp, #36	; 0x24
 8006904:	484d      	ldr	r0, [pc, #308]	; (8006a3c <HAL_UART_MspInit+0x1a8>)
 8006906:	f7fa ff39 	bl	800177c <HAL_GPIO_Init>
 800690a:	e7d7      	b.n	80068bc <HAL_UART_MspInit+0x28>
    __HAL_RCC_USART1_CLK_ENABLE();
 800690c:	4b4a      	ldr	r3, [pc, #296]	; (8006a38 <HAL_UART_MspInit+0x1a4>)
 800690e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006914:	661a      	str	r2, [r3, #96]	; 0x60
 8006916:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006918:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800691c:	9203      	str	r2, [sp, #12]
 800691e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006922:	f042 0202 	orr.w	r2, r2, #2
 8006926:	64da      	str	r2, [r3, #76]	; 0x4c
 8006928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800692a:	f002 0202 	and.w	r2, r2, #2
 800692e:	9204      	str	r2, [sp, #16]
 8006930:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006938:	64da      	str	r2, [r3, #76]	; 0x4c
 800693a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	9305      	str	r3, [sp, #20]
 8006942:	9b05      	ldr	r3, [sp, #20]
    HAL_PWREx_EnableVddIO2();
 8006944:	f7fb f9be 	bl	8001cc4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8006948:	2340      	movs	r3, #64	; 0x40
 800694a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800694c:	2702      	movs	r7, #2
 800694e:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006950:	2600      	movs	r6, #0
 8006952:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006954:	2503      	movs	r5, #3
 8006956:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006958:	2407      	movs	r4, #7
 800695a:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800695c:	a909      	add	r1, sp, #36	; 0x24
 800695e:	4838      	ldr	r0, [pc, #224]	; (8006a40 <HAL_UART_MspInit+0x1ac>)
 8006960:	f7fa ff0c 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8006964:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006968:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800696a:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800696e:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006970:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006972:	a909      	add	r1, sp, #36	; 0x24
 8006974:	4831      	ldr	r0, [pc, #196]	; (8006a3c <HAL_UART_MspInit+0x1a8>)
 8006976:	f7fa ff01 	bl	800177c <HAL_GPIO_Init>
 800697a:	e79f      	b.n	80068bc <HAL_UART_MspInit+0x28>
    __HAL_RCC_USART2_CLK_ENABLE();
 800697c:	4b2e      	ldr	r3, [pc, #184]	; (8006a38 <HAL_UART_MspInit+0x1a4>)
 800697e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006980:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006984:	659a      	str	r2, [r3, #88]	; 0x58
 8006986:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006988:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800698c:	9206      	str	r2, [sp, #24]
 800698e:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006992:	f042 0208 	orr.w	r2, r2, #8
 8006996:	64da      	str	r2, [r3, #76]	; 0x4c
 8006998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800699a:	f002 0208 	and.w	r2, r2, #8
 800699e:	9207      	str	r2, [sp, #28]
 80069a0:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80069aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	9308      	str	r3, [sp, #32]
 80069b2:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80069b4:	2340      	movs	r3, #64	; 0x40
 80069b6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b8:	2602      	movs	r6, #2
 80069ba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069bc:	f04f 0803 	mov.w	r8, #3
 80069c0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80069c4:	2707      	movs	r7, #7
 80069c6:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80069c8:	a909      	add	r1, sp, #36	; 0x24
 80069ca:	481e      	ldr	r0, [pc, #120]	; (8006a44 <HAL_UART_MspInit+0x1b0>)
 80069cc:	f7fa fed6 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80069d0:	2304      	movs	r3, #4
 80069d2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d6:	2500      	movs	r5, #0
 80069d8:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069da:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80069de:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80069e0:	a909      	add	r1, sp, #36	; 0x24
 80069e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069e6:	f7fa fec9 	bl	800177c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80069ea:	4817      	ldr	r0, [pc, #92]	; (8006a48 <HAL_UART_MspInit+0x1b4>)
 80069ec:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <HAL_UART_MspInit+0x1b8>)
 80069ee:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80069f0:	6046      	str	r6, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069f2:	2310      	movs	r3, #16
 80069f4:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069f6:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069f8:	2380      	movs	r3, #128	; 0x80
 80069fa:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069fc:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069fe:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006a00:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a06:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006a08:	f7fa fd52 	bl	80014b0 <HAL_DMA_Init>
 8006a0c:	b958      	cbnz	r0, 8006a26 <HAL_UART_MspInit+0x192>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006a0e:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <HAL_UART_MspInit+0x1b4>)
 8006a10:	66a3      	str	r3, [r4, #104]	; 0x68
 8006a12:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006a14:	2200      	movs	r2, #0
 8006a16:	4611      	mov	r1, r2
 8006a18:	2026      	movs	r0, #38	; 0x26
 8006a1a:	f7fa fa31 	bl	8000e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006a1e:	2026      	movs	r0, #38	; 0x26
 8006a20:	f7fa fa62 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
}
 8006a24:	e74a      	b.n	80068bc <HAL_UART_MspInit+0x28>
      Error_Handler();
 8006a26:	f7ff fc9f 	bl	8006368 <Error_Handler>
 8006a2a:	e7f0      	b.n	8006a0e <HAL_UART_MspInit+0x17a>
 8006a2c:	40008000 	.word	0x40008000
 8006a30:	40013800 	.word	0x40013800
 8006a34:	40004400 	.word	0x40004400
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	48001800 	.word	0x48001800
 8006a40:	48000400 	.word	0x48000400
 8006a44:	48000c00 	.word	0x48000c00
 8006a48:	20012084 	.word	0x20012084
 8006a4c:	40020080 	.word	0x40020080

08006a50 <HAL_QSPI_MspInit>:
{
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a54:	2300      	movs	r3, #0
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	9305      	str	r3, [sp, #20]
 8006a5c:	9306      	str	r3, [sp, #24]
 8006a5e:	9307      	str	r3, [sp, #28]
  if(hqspi->Instance==QUADSPI)
 8006a60:	6802      	ldr	r2, [r0, #0]
 8006a62:	4b1f      	ldr	r3, [pc, #124]	; (8006ae0 <HAL_QSPI_MspInit+0x90>)
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d001      	beq.n	8006a6c <HAL_QSPI_MspInit+0x1c>
}
 8006a68:	b008      	add	sp, #32
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006a6c:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8006a70:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006a74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a7a:	651a      	str	r2, [r3, #80]	; 0x50
 8006a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a7e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006a82:	9200      	str	r2, [sp, #0]
 8006a84:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a88:	f042 0202 	orr.w	r2, r2, #2
 8006a8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8006a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a90:	f002 0202 	and.w	r2, r2, #2
 8006a94:	9201      	str	r2, [sp, #4]
 8006a96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	9302      	str	r3, [sp, #8]
 8006aa8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8006aaa:	f640 0303 	movw	r3, #2051	; 0x803
 8006aae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ab0:	2602      	movs	r6, #2
 8006ab2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ab4:	2503      	movs	r5, #3
 8006ab6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006ab8:	240a      	movs	r4, #10
 8006aba:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006abc:	a903      	add	r1, sp, #12
 8006abe:	4809      	ldr	r0, [pc, #36]	; (8006ae4 <HAL_QSPI_MspInit+0x94>)
 8006ac0:	f7fa fe5c 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8006ac4:	23c8      	movs	r3, #200	; 0xc8
 8006ac6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ac8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ace:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006ad0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ad2:	a903      	add	r1, sp, #12
 8006ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ad8:	f7fa fe50 	bl	800177c <HAL_GPIO_Init>
}
 8006adc:	e7c4      	b.n	8006a68 <HAL_QSPI_MspInit+0x18>
 8006ade:	bf00      	nop
 8006ae0:	a0001000 	.word	0xa0001000
 8006ae4:	48000400 	.word	0x48000400

08006ae8 <HAL_SD_MspInit>:
{
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aec:	2300      	movs	r3, #0
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	9305      	str	r3, [sp, #20]
 8006af4:	9306      	str	r3, [sp, #24]
 8006af6:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDMMC1)
 8006af8:	6802      	ldr	r2, [r0, #0]
 8006afa:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <HAL_SD_MspInit+0x8c>)
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_SD_MspInit+0x1c>
}
 8006b00:	b008      	add	sp, #32
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006b04:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8006b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b0e:	661a      	str	r2, [r3, #96]	; 0x60
 8006b10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b12:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8006b16:	9200      	str	r2, [sp, #0]
 8006b18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b1c:	f042 0208 	orr.w	r2, r2, #8
 8006b20:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b24:	f002 0208 	and.w	r2, r2, #8
 8006b28:	9201      	str	r2, [sp, #4]
 8006b2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b2e:	f042 0204 	orr.w	r2, r2, #4
 8006b32:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	9302      	str	r3, [sp, #8]
 8006b3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8006b3e:	2304      	movs	r3, #4
 8006b40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b42:	2602      	movs	r6, #2
 8006b44:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b46:	2503      	movs	r5, #3
 8006b48:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006b4a:	240c      	movs	r4, #12
 8006b4c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8006b4e:	eb0d 0104 	add.w	r1, sp, r4
 8006b52:	4809      	ldr	r0, [pc, #36]	; (8006b78 <HAL_SD_MspInit+0x90>)
 8006b54:	f7fa fe12 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 8006b58:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006b5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b5e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b64:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006b66:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b68:	eb0d 0104 	add.w	r1, sp, r4
 8006b6c:	4803      	ldr	r0, [pc, #12]	; (8006b7c <HAL_SD_MspInit+0x94>)
 8006b6e:	f7fa fe05 	bl	800177c <HAL_GPIO_Init>
}
 8006b72:	e7c5      	b.n	8006b00 <HAL_SD_MspInit+0x18>
 8006b74:	40012800 	.word	0x40012800
 8006b78:	48000c00 	.word	0x48000c00
 8006b7c:	48000800 	.word	0x48000800

08006b80 <HAL_SPI_MspInit>:
{
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b84:	2300      	movs	r3, #0
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	9308      	str	r3, [sp, #32]
 8006b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b8e:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hspi->Instance==SPI1)
 8006b90:	6803      	ldr	r3, [r0, #0]
 8006b92:	4a39      	ldr	r2, [pc, #228]	; (8006c78 <HAL_SPI_MspInit+0xf8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d004      	beq.n	8006ba2 <HAL_SPI_MspInit+0x22>
  else if(hspi->Instance==SPI2)
 8006b98:	4a38      	ldr	r2, [pc, #224]	; (8006c7c <HAL_SPI_MspInit+0xfc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d037      	beq.n	8006c0e <HAL_SPI_MspInit+0x8e>
}
 8006b9e:	b00c      	add	sp, #48	; 0x30
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ba2:	4b37      	ldr	r3, [pc, #220]	; (8006c80 <HAL_SPI_MspInit+0x100>)
 8006ba4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ba6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006baa:	661a      	str	r2, [r3, #96]	; 0x60
 8006bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006bae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006bb2:	9201      	str	r2, [sp, #4]
 8006bb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bb8:	f042 0202 	orr.w	r2, r2, #2
 8006bbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8006bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc0:	f002 0202 	and.w	r2, r2, #2
 8006bc4:	9202      	str	r2, [sp, #8]
 8006bc6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	64da      	str	r2, [r3, #76]	; 0x4c
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8006bda:	2330      	movs	r3, #48	; 0x30
 8006bdc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bde:	2602      	movs	r6, #2
 8006be0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006be2:	2503      	movs	r5, #3
 8006be4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006be6:	2405      	movs	r4, #5
 8006be8:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bea:	a907      	add	r1, sp, #28
 8006bec:	4825      	ldr	r0, [pc, #148]	; (8006c84 <HAL_SPI_MspInit+0x104>)
 8006bee:	f7fa fdc5 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8006bf2:	f248 0320 	movw	r3, #32800	; 0x8020
 8006bf6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bfe:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006c00:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c02:	a907      	add	r1, sp, #28
 8006c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c08:	f7fa fdb8 	bl	800177c <HAL_GPIO_Init>
 8006c0c:	e7c7      	b.n	8006b9e <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c0e:	4b1c      	ldr	r3, [pc, #112]	; (8006c80 <HAL_SPI_MspInit+0x100>)
 8006c10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c16:	659a      	str	r2, [r3, #88]	; 0x58
 8006c18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c1a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006c1e:	9204      	str	r2, [sp, #16]
 8006c20:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c28:	64da      	str	r2, [r3, #76]	; 0x4c
 8006c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c2c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006c30:	9205      	str	r2, [sp, #20]
 8006c32:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c36:	f042 0202 	orr.w	r2, r2, #2
 8006c3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	9306      	str	r3, [sp, #24]
 8006c44:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8006c46:	2306      	movs	r3, #6
 8006c48:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4a:	2602      	movs	r6, #2
 8006c4c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4e:	2503      	movs	r5, #3
 8006c50:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c52:	2405      	movs	r4, #5
 8006c54:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006c56:	a907      	add	r1, sp, #28
 8006c58:	480b      	ldr	r0, [pc, #44]	; (8006c88 <HAL_SPI_MspInit+0x108>)
 8006c5a:	f7fa fd8f 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8006c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c62:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c64:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c6a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c6c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8006c6e:	a907      	add	r1, sp, #28
 8006c70:	4804      	ldr	r0, [pc, #16]	; (8006c84 <HAL_SPI_MspInit+0x104>)
 8006c72:	f7fa fd83 	bl	800177c <HAL_GPIO_Init>
}
 8006c76:	e792      	b.n	8006b9e <HAL_SPI_MspInit+0x1e>
 8006c78:	40013000 	.word	0x40013000
 8006c7c:	40003800 	.word	0x40003800
 8006c80:	40021000 	.word	0x40021000
 8006c84:	48000400 	.word	0x48000400
 8006c88:	48002000 	.word	0x48002000

08006c8c <HAL_PCD_MspInit>:
{
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c90:	2300      	movs	r3, #0
 8006c92:	9303      	str	r3, [sp, #12]
 8006c94:	9304      	str	r3, [sp, #16]
 8006c96:	9305      	str	r3, [sp, #20]
 8006c98:	9306      	str	r3, [sp, #24]
 8006c9a:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 8006c9c:	6803      	ldr	r3, [r0, #0]
 8006c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ca2:	d001      	beq.n	8006ca8 <HAL_PCD_MspInit+0x1c>
}
 8006ca4:	b008      	add	sp, #32
 8006ca6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ca8:	4c1b      	ldr	r4, [pc, #108]	; (8006d18 <HAL_PCD_MspInit+0x8c>)
 8006caa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006cb2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8006cbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006cc0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006cca:	230a      	movs	r3, #10
 8006ccc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cce:	a903      	add	r1, sp, #12
 8006cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cd4:	f7fa fd52 	bl	800177c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006cd8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006cda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cde:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006ce0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	9b01      	ldr	r3, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006cf0:	d002      	beq.n	8006cf8 <HAL_PCD_MspInit+0x6c>
      HAL_PWREx_EnableVddUSB();
 8006cf2:	f7fa ffdf 	bl	8001cb4 <HAL_PWREx_EnableVddUSB>
}
 8006cf6:	e7d5      	b.n	8006ca4 <HAL_PCD_MspInit+0x18>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d06:	9302      	str	r3, [sp, #8]
 8006d08:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8006d0a:	f7fa ffd3 	bl	8001cb4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d14:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d16:	e7c5      	b.n	8006ca4 <HAL_PCD_MspInit+0x18>
 8006d18:	40021000 	.word	0x40021000

08006d1c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8006d1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006d1e:	f7ff fb25 	bl	800636c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8006d22:	bd08      	pop	{r3, pc}

08006d24 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8006d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d26:	b089      	sub	sp, #36	; 0x24
 8006d28:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8006d2a:	6802      	ldr	r2, [r0, #0]
 8006d2c:	4b27      	ldr	r3, [pc, #156]	; (8006dcc <HAL_SAI_MspInit+0xa8>)
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d005      	beq.n	8006d3e <HAL_SAI_MspInit+0x1a>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI1_Block_B)
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	4b26      	ldr	r3, [pc, #152]	; (8006dd0 <HAL_SAI_MspInit+0xac>)
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d02a      	beq.n	8006d90 <HAL_SAI_MspInit+0x6c>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);

    }
}
 8006d3a:	b009      	add	sp, #36	; 0x24
 8006d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 8006d3e:	4b25      	ldr	r3, [pc, #148]	; (8006dd4 <HAL_SAI_MspInit+0xb0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	b94b      	cbnz	r3, 8006d58 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006d44:	4a24      	ldr	r2, [pc, #144]	; (8006dd8 <HAL_SAI_MspInit+0xb4>)
 8006d46:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8006d48:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8006d4c:	6611      	str	r1, [r2, #96]	; 0x60
 8006d4e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006d50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006d54:	9201      	str	r2, [sp, #4]
 8006d56:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 8006d58:	3301      	adds	r3, #1
 8006d5a:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <HAL_SAI_MspInit+0xb0>)
 8006d5c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8006d5e:	2354      	movs	r3, #84	; 0x54
 8006d60:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d62:	2702      	movs	r7, #2
 8006d64:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d66:	2500      	movs	r5, #0
 8006d68:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d6a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8006d6c:	260d      	movs	r6, #13
 8006d6e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d70:	a903      	add	r1, sp, #12
 8006d72:	481a      	ldr	r0, [pc, #104]	; (8006ddc <HAL_SAI_MspInit+0xb8>)
 8006d74:	f7fa fd02 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d7e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d80:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d82:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8006d84:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d86:	a903      	add	r1, sp, #12
 8006d88:	4815      	ldr	r0, [pc, #84]	; (8006de0 <HAL_SAI_MspInit+0xbc>)
 8006d8a:	f7fa fcf7 	bl	800177c <HAL_GPIO_Init>
 8006d8e:	e7d0      	b.n	8006d32 <HAL_SAI_MspInit+0xe>
      if (SAI1_client == 0)
 8006d90:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <HAL_SAI_MspInit+0xb0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	b94b      	cbnz	r3, 8006daa <HAL_SAI_MspInit+0x86>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006d96:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <HAL_SAI_MspInit+0xb4>)
 8006d98:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8006d9a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8006d9e:	6611      	str	r1, [r2, #96]	; 0x60
 8006da0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006da2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006da6:	9202      	str	r2, [sp, #8]
 8006da8:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 8006daa:	3301      	adds	r3, #1
 8006dac:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <HAL_SAI_MspInit+0xb0>)
 8006dae:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8006db0:	2308      	movs	r3, #8
 8006db2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db4:	2302      	movs	r3, #2
 8006db6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dbc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8006dbe:	230d      	movs	r3, #13
 8006dc0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8006dc2:	a903      	add	r1, sp, #12
 8006dc4:	4805      	ldr	r0, [pc, #20]	; (8006ddc <HAL_SAI_MspInit+0xb8>)
 8006dc6:	f7fa fcd9 	bl	800177c <HAL_GPIO_Init>
}
 8006dca:	e7b6      	b.n	8006d3a <HAL_SAI_MspInit+0x16>
 8006dcc:	40015404 	.word	0x40015404
 8006dd0:	40015424 	.word	0x40015424
 8006dd4:	20000084 	.word	0x20000084
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	48001000 	.word	0x48001000
 8006de0:	48000400 	.word	0x48000400

08006de4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006de4:	4770      	bx	lr
	...

08006de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006de8:	b082      	sub	sp, #8
  /* USER CODE BEGIN HardFault_IRQn 0 */

	volatile uint32_t REASON_REGISTER = SCB->SHCSR;
 8006dea:	4b02      	ldr	r3, [pc, #8]	; (8006df4 <HardFault_Handler+0xc>)
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	e7fe      	b.n	8006df0 <HardFault_Handler+0x8>
 8006df2:	bf00      	nop
 8006df4:	e000ed00 	.word	0xe000ed00

08006df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006df8:	e7fe      	b.n	8006df8 <MemManage_Handler>

08006dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dfa:	e7fe      	b.n	8006dfa <BusFault_Handler>

08006dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006dfc:	e7fe      	b.n	8006dfc <UsageFault_Handler>

08006dfe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006dfe:	4770      	bx	lr

08006e00 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e00:	4770      	bx	lr

08006e02 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e02:	4770      	bx	lr

08006e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e06:	f7f9 fc09 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e0a:	bd08      	pop	{r3, pc}

08006e0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006e0c:	b500      	push	{lr}
 8006e0e:	b083      	sub	sp, #12
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
  volatile uint32_t calculationTime;
  calculationTime = HAL_GetTick();
 8006e10:	f7f9 fc10 	bl	8000634 <HAL_GetTick>
 8006e14:	9001      	str	r0, [sp, #4]
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8006e16:	4805      	ldr	r0, [pc, #20]	; (8006e2c <DMA1_Channel4_IRQHandler+0x20>)
 8006e18:	f7fa fc4e 	bl	80016b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
  calculationTime = HAL_GetTick() - calculationTime;
 8006e1c:	f7f9 fc0a 	bl	8000634 <HAL_GetTick>
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	1ac0      	subs	r0, r0, r3
 8006e24:	9001      	str	r0, [sp, #4]
  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006e26:	b003      	add	sp, #12
 8006e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e2c:	200121b8 	.word	0x200121b8

08006e30 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006e30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006e32:	4802      	ldr	r0, [pc, #8]	; (8006e3c <DMA1_Channel7_IRQHandler+0xc>)
 8006e34:	f7fa fc40 	bl	80016b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006e38:	bd08      	pop	{r3, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20012084 	.word	0x20012084

08006e40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006e40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006e42:	4802      	ldr	r0, [pc, #8]	; (8006e4c <USART2_IRQHandler+0xc>)
 8006e44:	f7fd fad0 	bl	80043e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006e48:	bd08      	pop	{r3, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20012334 	.word	0x20012334

08006e50 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e50:	490f      	ldr	r1, [pc, #60]	; (8006e90 <SystemInit+0x40>)
 8006e52:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006e56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <SystemInit+0x44>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006e68:	2000      	movs	r0, #0
 8006e6a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8006e72:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006e76:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006e78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e84:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006e86:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e8c:	608b      	str	r3, [r1, #8]
#endif
}
 8006e8e:	4770      	bx	lr
 8006e90:	e000ed00 	.word	0xe000ed00
 8006e94:	40021000 	.word	0x40021000

08006e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ed0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006e9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006e9e:	e003      	b.n	8006ea8 <LoopCopyDataInit>

08006ea0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006ea2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006ea4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006ea6:	3104      	adds	r1, #4

08006ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006ea8:	480b      	ldr	r0, [pc, #44]	; (8006ed8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <LoopForever+0xe>)
	adds	r2, r0, r1
 8006eac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006eae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006eb0:	d3f6      	bcc.n	8006ea0 <CopyDataInit>
	ldr	r2, =_sbss
 8006eb2:	4a0b      	ldr	r2, [pc, #44]	; (8006ee0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006eb4:	e002      	b.n	8006ebc <LoopFillZerobss>

08006eb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006eb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006eb8:	f842 3b04 	str.w	r3, [r2], #4

08006ebc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006ebc:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <LoopForever+0x16>)
	cmp	r2, r3
 8006ebe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006ec0:	d3f9      	bcc.n	8006eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ec2:	f7ff ffc5 	bl	8006e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ec6:	f001 f8a5 	bl	8008014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006eca:	f7ff f9bf 	bl	800624c <main>

08006ece <LoopForever>:

LoopForever:
    b LoopForever
 8006ece:	e7fe      	b.n	8006ece <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006ed0:	2004ffff 	.word	0x2004ffff
	ldr	r3, =_sidata
 8006ed4:	0801b54c 	.word	0x0801b54c
	ldr	r0, =_sdata
 8006ed8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006edc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8006ee0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8006ee4:	20012638 	.word	0x20012638

08006ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006ee8:	e7fe      	b.n	8006ee8 <ADC1_2_IRQHandler>
	...

08006eec <arm_max_f32>:
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	1e4f      	subs	r7, r1, #1
 8006ef2:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8006ef6:	f100 0e04 	add.w	lr, r0, #4
 8006efa:	edd0 7a00 	vldr	s15, [r0]
 8006efe:	d058      	beq.n	8006fb2 <arm_max_f32+0xc6>
 8006f00:	3014      	adds	r0, #20
 8006f02:	46c4      	mov	ip, r8
 8006f04:	2604      	movs	r6, #4
 8006f06:	2400      	movs	r4, #0
 8006f08:	ed10 6a04 	vldr	s12, [r0, #-16]
 8006f0c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8006f10:	ed10 7a02 	vldr	s14, [r0, #-8]
 8006f14:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006f18:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8006f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f20:	bfc8      	it	gt
 8006f22:	eef0 7a46 	vmovgt.f32	s15, s12
 8006f26:	f1a6 0503 	sub.w	r5, r6, #3
 8006f2a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006f2e:	bfc8      	it	gt
 8006f30:	462c      	movgt	r4, r5
 8006f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f36:	bf48      	it	mi
 8006f38:	eef0 7a66 	vmovmi.f32	s15, s13
 8006f3c:	f1a6 0502 	sub.w	r5, r6, #2
 8006f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f44:	bf48      	it	mi
 8006f46:	462c      	movmi	r4, r5
 8006f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4c:	bf48      	it	mi
 8006f4e:	eef0 7a47 	vmovmi.f32	s15, s14
 8006f52:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006f56:	eef4 7ae5 	vcmpe.f32	s15, s11
 8006f5a:	bf48      	it	mi
 8006f5c:	462c      	movmi	r4, r5
 8006f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f62:	bf48      	it	mi
 8006f64:	4634      	movmi	r4, r6
 8006f66:	bf48      	it	mi
 8006f68:	eef0 7a65 	vmovmi.f32	s15, s11
 8006f6c:	f1bc 0c01 	subs.w	ip, ip, #1
 8006f70:	f106 0604 	add.w	r6, r6, #4
 8006f74:	f100 0010 	add.w	r0, r0, #16
 8006f78:	d1c6      	bne.n	8006f08 <arm_max_f32+0x1c>
 8006f7a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8006f7e:	f017 0003 	ands.w	r0, r7, #3
 8006f82:	d018      	beq.n	8006fb6 <arm_max_f32+0xca>
 8006f84:	1a08      	subs	r0, r1, r0
 8006f86:	ecbe 7a01 	vldmia	lr!, {s14}
 8006f8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f92:	bfc8      	it	gt
 8006f94:	4604      	movgt	r4, r0
 8006f96:	f100 0001 	add.w	r0, r0, #1
 8006f9a:	bfd8      	it	le
 8006f9c:	eeb0 7a67 	vmovle.f32	s14, s15
 8006fa0:	4288      	cmp	r0, r1
 8006fa2:	eef0 7a47 	vmov.f32	s15, s14
 8006fa6:	d1ee      	bne.n	8006f86 <arm_max_f32+0x9a>
 8006fa8:	ed82 7a00 	vstr	s14, [r2]
 8006fac:	601c      	str	r4, [r3, #0]
 8006fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb2:	4644      	mov	r4, r8
 8006fb4:	e7e3      	b.n	8006f7e <arm_max_f32+0x92>
 8006fb6:	eeb0 7a67 	vmov.f32	s14, s15
 8006fba:	e7f5      	b.n	8006fa8 <arm_max_f32+0xbc>

08006fbc <arm_rfft_fast_init_f32>:
 8006fbc:	084b      	lsrs	r3, r1, #1
 8006fbe:	2b80      	cmp	r3, #128	; 0x80
 8006fc0:	b410      	push	{r4}
 8006fc2:	8201      	strh	r1, [r0, #16]
 8006fc4:	8003      	strh	r3, [r0, #0]
 8006fc6:	d047      	beq.n	8007058 <arm_rfft_fast_init_f32+0x9c>
 8006fc8:	d917      	bls.n	8006ffa <arm_rfft_fast_init_f32+0x3e>
 8006fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fce:	d03d      	beq.n	800704c <arm_rfft_fast_init_f32+0x90>
 8006fd0:	d929      	bls.n	8007026 <arm_rfft_fast_init_f32+0x6a>
 8006fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd6:	d020      	beq.n	800701a <arm_rfft_fast_init_f32+0x5e>
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fdc:	d113      	bne.n	8007006 <arm_rfft_fast_init_f32+0x4a>
 8006fde:	4921      	ldr	r1, [pc, #132]	; (8007064 <arm_rfft_fast_init_f32+0xa8>)
 8006fe0:	4a21      	ldr	r2, [pc, #132]	; (8007068 <arm_rfft_fast_init_f32+0xac>)
 8006fe2:	4b22      	ldr	r3, [pc, #136]	; (800706c <arm_rfft_fast_init_f32+0xb0>)
 8006fe4:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8006fe8:	8184      	strh	r4, [r0, #12]
 8006fea:	6081      	str	r1, [r0, #8]
 8006fec:	6042      	str	r2, [r0, #4]
 8006fee:	6143      	str	r3, [r0, #20]
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	b240      	sxtb	r0, r0
 8006ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d01c      	beq.n	8007038 <arm_rfft_fast_init_f32+0x7c>
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d006      	beq.n	8007010 <arm_rfft_fast_init_f32+0x54>
 8007002:	2b10      	cmp	r3, #16
 8007004:	d01d      	beq.n	8007042 <arm_rfft_fast_init_f32+0x86>
 8007006:	20ff      	movs	r0, #255	; 0xff
 8007008:	b240      	sxtb	r0, r0
 800700a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	2438      	movs	r4, #56	; 0x38
 8007012:	4917      	ldr	r1, [pc, #92]	; (8007070 <arm_rfft_fast_init_f32+0xb4>)
 8007014:	4a17      	ldr	r2, [pc, #92]	; (8007074 <arm_rfft_fast_init_f32+0xb8>)
 8007016:	4b18      	ldr	r3, [pc, #96]	; (8007078 <arm_rfft_fast_init_f32+0xbc>)
 8007018:	e7e6      	b.n	8006fe8 <arm_rfft_fast_init_f32+0x2c>
 800701a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800701e:	4917      	ldr	r1, [pc, #92]	; (800707c <arm_rfft_fast_init_f32+0xc0>)
 8007020:	4a17      	ldr	r2, [pc, #92]	; (8007080 <arm_rfft_fast_init_f32+0xc4>)
 8007022:	4b18      	ldr	r3, [pc, #96]	; (8007084 <arm_rfft_fast_init_f32+0xc8>)
 8007024:	e7e0      	b.n	8006fe8 <arm_rfft_fast_init_f32+0x2c>
 8007026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800702a:	d1ec      	bne.n	8007006 <arm_rfft_fast_init_f32+0x4a>
 800702c:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8007030:	4915      	ldr	r1, [pc, #84]	; (8007088 <arm_rfft_fast_init_f32+0xcc>)
 8007032:	4a16      	ldr	r2, [pc, #88]	; (800708c <arm_rfft_fast_init_f32+0xd0>)
 8007034:	4b16      	ldr	r3, [pc, #88]	; (8007090 <arm_rfft_fast_init_f32+0xd4>)
 8007036:	e7d7      	b.n	8006fe8 <arm_rfft_fast_init_f32+0x2c>
 8007038:	2430      	movs	r4, #48	; 0x30
 800703a:	4916      	ldr	r1, [pc, #88]	; (8007094 <arm_rfft_fast_init_f32+0xd8>)
 800703c:	4a16      	ldr	r2, [pc, #88]	; (8007098 <arm_rfft_fast_init_f32+0xdc>)
 800703e:	4b17      	ldr	r3, [pc, #92]	; (800709c <arm_rfft_fast_init_f32+0xe0>)
 8007040:	e7d2      	b.n	8006fe8 <arm_rfft_fast_init_f32+0x2c>
 8007042:	2414      	movs	r4, #20
 8007044:	4916      	ldr	r1, [pc, #88]	; (80070a0 <arm_rfft_fast_init_f32+0xe4>)
 8007046:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <arm_rfft_fast_init_f32+0xe8>)
 8007048:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <arm_rfft_fast_init_f32+0xec>)
 800704a:	e7cd      	b.n	8006fe8 <arm_rfft_fast_init_f32+0x2c>
 800704c:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8007050:	4916      	ldr	r1, [pc, #88]	; (80070ac <arm_rfft_fast_init_f32+0xf0>)
 8007052:	4a17      	ldr	r2, [pc, #92]	; (80070b0 <arm_rfft_fast_init_f32+0xf4>)
 8007054:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <arm_rfft_fast_init_f32+0xf8>)
 8007056:	e7c7      	b.n	8006fe8 <arm_rfft_fast_init_f32+0x2c>
 8007058:	24d0      	movs	r4, #208	; 0xd0
 800705a:	4917      	ldr	r1, [pc, #92]	; (80070b8 <arm_rfft_fast_init_f32+0xfc>)
 800705c:	4a17      	ldr	r2, [pc, #92]	; (80070bc <arm_rfft_fast_init_f32+0x100>)
 800705e:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <arm_rfft_fast_init_f32+0x104>)
 8007060:	e7c2      	b.n	8006fe8 <arm_rfft_fast_init_f32+0x2c>
 8007062:	bf00      	nop
 8007064:	08016eec 	.word	0x08016eec
 8007068:	080080e4 	.word	0x080080e4
 800706c:	0800e254 	.word	0x0800e254
 8007070:	0800c1e4 	.word	0x0800c1e4
 8007074:	08018cac 	.word	0x08018cac
 8007078:	0801b19c 	.word	0x0801b19c
 800707c:	08014bd4 	.word	0x08014bd4
 8007080:	08012ad4 	.word	0x08012ad4
 8007084:	0800c254 	.word	0x0800c254
 8007088:	0801ae2c 	.word	0x0801ae2c
 800708c:	08012254 	.word	0x08012254
 8007090:	08018eac 	.word	0x08018eac
 8007094:	08015a8c 	.word	0x08015a8c
 8007098:	08014ad4 	.word	0x08014ad4
 800709c:	0800c0e4 	.word	0x0800c0e4
 80070a0:	080159e4 	.word	0x080159e4
 80070a4:	08012a54 	.word	0x08012a54
 80070a8:	08015a0c 	.word	0x08015a0c
 80070ac:	080196ac 	.word	0x080196ac
 80070b0:	08015eec 	.word	0x08015eec
 80070b4:	08019a2c 	.word	0x08019a2c
 80070b8:	0801b39c 	.word	0x0801b39c
 80070bc:	08015aec 	.word	0x08015aec
 80070c0:	0801aa2c 	.word	0x0801aa2c

080070c4 <arm_rfft_fast_f32>:
 80070c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c8:	8a06      	ldrh	r6, [r0, #16]
 80070ca:	0876      	lsrs	r6, r6, #1
 80070cc:	4607      	mov	r7, r0
 80070ce:	4615      	mov	r5, r2
 80070d0:	8006      	strh	r6, [r0, #0]
 80070d2:	460c      	mov	r4, r1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d15c      	bne.n	8007192 <arm_rfft_fast_f32+0xce>
 80070d8:	461a      	mov	r2, r3
 80070da:	2301      	movs	r3, #1
 80070dc:	f000 fbe6 	bl	80078ac <arm_cfft_f32>
 80070e0:	edd4 7a00 	vldr	s15, [r4]
 80070e4:	ed94 7a01 	vldr	s14, [r4, #4]
 80070e8:	883e      	ldrh	r6, [r7, #0]
 80070ea:	6978      	ldr	r0, [r7, #20]
 80070ec:	ee37 7a07 	vadd.f32	s14, s14, s14
 80070f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80070f4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80070f8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80070fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007100:	3e01      	subs	r6, #1
 8007102:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8007106:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800710a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800710e:	ed85 7a00 	vstr	s14, [r5]
 8007112:	edc5 7a01 	vstr	s15, [r5, #4]
 8007116:	3010      	adds	r0, #16
 8007118:	f105 0210 	add.w	r2, r5, #16
 800711c:	3b08      	subs	r3, #8
 800711e:	f104 0110 	add.w	r1, r4, #16
 8007122:	ed51 4a02 	vldr	s9, [r1, #-8]
 8007126:	ed93 5a02 	vldr	s10, [r3, #8]
 800712a:	ed11 7a01 	vldr	s14, [r1, #-4]
 800712e:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007132:	edd3 5a03 	vldr	s11, [r3, #12]
 8007136:	ed50 6a01 	vldr	s13, [r0, #-4]
 800713a:	ee75 7a64 	vsub.f32	s15, s10, s9
 800713e:	ee35 4a87 	vadd.f32	s8, s11, s14
 8007142:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007146:	ee77 5a65 	vsub.f32	s11, s14, s11
 800714a:	ee66 4a27 	vmul.f32	s9, s12, s15
 800714e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8007152:	ee34 5a85 	vadd.f32	s10, s9, s10
 8007156:	ee26 6a04 	vmul.f32	s12, s12, s8
 800715a:	ee66 6a84 	vmul.f32	s13, s13, s8
 800715e:	ee77 7a25 	vadd.f32	s15, s14, s11
 8007162:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007166:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800716a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800716e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007172:	3e01      	subs	r6, #1
 8007174:	ed42 6a02 	vstr	s13, [r2, #-8]
 8007178:	ed42 7a01 	vstr	s15, [r2, #-4]
 800717c:	f1a3 0308 	sub.w	r3, r3, #8
 8007180:	f101 0108 	add.w	r1, r1, #8
 8007184:	f100 0008 	add.w	r0, r0, #8
 8007188:	f102 0208 	add.w	r2, r2, #8
 800718c:	d1c9      	bne.n	8007122 <arm_rfft_fast_f32+0x5e>
 800718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007192:	edd1 7a00 	vldr	s15, [r1]
 8007196:	edd1 6a01 	vldr	s13, [r1, #4]
 800719a:	6941      	ldr	r1, [r0, #20]
 800719c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80071a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071a4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80071a8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80071ac:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80071b0:	3e01      	subs	r6, #1
 80071b2:	ed82 7a00 	vstr	s14, [r2]
 80071b6:	edc2 7a01 	vstr	s15, [r2, #4]
 80071ba:	00f0      	lsls	r0, r6, #3
 80071bc:	b3ee      	cbz	r6, 800723a <arm_rfft_fast_f32+0x176>
 80071be:	3808      	subs	r0, #8
 80071c0:	f101 0e10 	add.w	lr, r1, #16
 80071c4:	4420      	add	r0, r4
 80071c6:	f104 0110 	add.w	r1, r4, #16
 80071ca:	f102 0c10 	add.w	ip, r2, #16
 80071ce:	ed90 7a02 	vldr	s14, [r0, #8]
 80071d2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80071d6:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80071da:	ed90 4a03 	vldr	s8, [r0, #12]
 80071de:	ed11 5a01 	vldr	s10, [r1, #-4]
 80071e2:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80071e6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80071ea:	ee74 4a05 	vadd.f32	s9, s8, s10
 80071ee:	ee26 3a27 	vmul.f32	s6, s12, s15
 80071f2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80071f6:	ee35 5a44 	vsub.f32	s10, s10, s8
 80071fa:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80071fe:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007202:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007206:	ee26 6a24 	vmul.f32	s12, s12, s9
 800720a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800720e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007212:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8007216:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800721a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800721e:	3e01      	subs	r6, #1
 8007220:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8007224:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8007228:	f1a0 0008 	sub.w	r0, r0, #8
 800722c:	f101 0108 	add.w	r1, r1, #8
 8007230:	f10e 0e08 	add.w	lr, lr, #8
 8007234:	f10c 0c08 	add.w	ip, ip, #8
 8007238:	d1c9      	bne.n	80071ce <arm_rfft_fast_f32+0x10a>
 800723a:	4638      	mov	r0, r7
 800723c:	4629      	mov	r1, r5
 800723e:	461a      	mov	r2, r3
 8007240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	2301      	movs	r3, #1
 8007246:	f000 bb31 	b.w	80078ac <arm_cfft_f32>
 800724a:	bf00      	nop

0800724c <arm_cfft_radix8by2_f32>:
 800724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007250:	ed2d 8b08 	vpush	{d8-d11}
 8007254:	f8b0 e000 	ldrh.w	lr, [r0]
 8007258:	6842      	ldr	r2, [r0, #4]
 800725a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800725e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8007262:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8007266:	4607      	mov	r7, r0
 8007268:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800726c:	f000 80af 	beq.w	80073ce <arm_cfft_radix8by2_f32+0x182>
 8007270:	3310      	adds	r3, #16
 8007272:	18ce      	adds	r6, r1, r3
 8007274:	3210      	adds	r2, #16
 8007276:	4443      	add	r3, r8
 8007278:	f101 0510 	add.w	r5, r1, #16
 800727c:	f108 0410 	add.w	r4, r8, #16
 8007280:	ed54 1a04 	vldr	s3, [r4, #-16]
 8007284:	ed13 4a04 	vldr	s8, [r3, #-16]
 8007288:	ed53 3a03 	vldr	s7, [r3, #-12]
 800728c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8007290:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007294:	ed54 6a03 	vldr	s13, [r4, #-12]
 8007298:	ed14 0a02 	vldr	s0, [r4, #-8]
 800729c:	ed16 2a04 	vldr	s4, [r6, #-16]
 80072a0:	ed56 2a03 	vldr	s5, [r6, #-12]
 80072a4:	ed15 6a03 	vldr	s12, [r5, #-12]
 80072a8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80072ac:	ed15 3a04 	vldr	s6, [r5, #-16]
 80072b0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80072b4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80072b8:	ed16 1a01 	vldr	s2, [r6, #-4]
 80072bc:	ed55 4a02 	vldr	s9, [r5, #-8]
 80072c0:	ee73 ba21 	vadd.f32	s23, s6, s3
 80072c4:	ee36 ba26 	vadd.f32	s22, s12, s13
 80072c8:	ee37 aa27 	vadd.f32	s20, s14, s15
 80072cc:	ee72 9a04 	vadd.f32	s19, s4, s8
 80072d0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80072d4:	ee31 8a05 	vadd.f32	s16, s2, s10
 80072d8:	ee74 aa80 	vadd.f32	s21, s9, s0
 80072dc:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80072e0:	ed45 ba04 	vstr	s23, [r5, #-16]
 80072e4:	ed05 ba03 	vstr	s22, [r5, #-12]
 80072e8:	ed45 aa02 	vstr	s21, [r5, #-8]
 80072ec:	ed05 aa01 	vstr	s20, [r5, #-4]
 80072f0:	ed06 8a01 	vstr	s16, [r6, #-4]
 80072f4:	ed46 9a04 	vstr	s19, [r6, #-16]
 80072f8:	ed06 9a03 	vstr	s18, [r6, #-12]
 80072fc:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007300:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007304:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007308:	ed12 6a03 	vldr	s12, [r2, #-12]
 800730c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8007310:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007314:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007318:	ee26 8a86 	vmul.f32	s16, s13, s12
 800731c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8007320:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007324:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007328:	ee23 3a06 	vmul.f32	s6, s6, s12
 800732c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8007330:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007334:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007338:	ee36 6a04 	vadd.f32	s12, s12, s8
 800733c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007340:	ee72 3a63 	vsub.f32	s7, s4, s7
 8007344:	ee71 2a88 	vadd.f32	s5, s3, s16
 8007348:	ed44 6a03 	vstr	s13, [r4, #-12]
 800734c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8007350:	ed43 3a04 	vstr	s7, [r3, #-16]
 8007354:	ed03 6a03 	vstr	s12, [r3, #-12]
 8007358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800735c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8007360:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007364:	ed52 5a02 	vldr	s11, [r2, #-8]
 8007368:	ee35 6a41 	vsub.f32	s12, s10, s2
 800736c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007370:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007374:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007378:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800737c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007380:	ee64 4a87 	vmul.f32	s9, s9, s14
 8007384:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007388:	ee26 7a07 	vmul.f32	s14, s12, s14
 800738c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007390:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007394:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007398:	ee35 6a46 	vsub.f32	s12, s10, s12
 800739c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80073a0:	f1be 0e01 	subs.w	lr, lr, #1
 80073a4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80073a8:	f105 0510 	add.w	r5, r5, #16
 80073ac:	ed44 7a01 	vstr	s15, [r4, #-4]
 80073b0:	f106 0610 	add.w	r6, r6, #16
 80073b4:	ed03 6a02 	vstr	s12, [r3, #-8]
 80073b8:	ed03 7a01 	vstr	s14, [r3, #-4]
 80073bc:	f102 0210 	add.w	r2, r2, #16
 80073c0:	f104 0410 	add.w	r4, r4, #16
 80073c4:	f103 0310 	add.w	r3, r3, #16
 80073c8:	f47f af5a 	bne.w	8007280 <arm_cfft_radix8by2_f32+0x34>
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	fa1f f48c 	uxth.w	r4, ip
 80073d2:	4608      	mov	r0, r1
 80073d4:	2302      	movs	r3, #2
 80073d6:	4621      	mov	r1, r4
 80073d8:	f000 fb3a 	bl	8007a50 <arm_radix8_butterfly_f32>
 80073dc:	ecbd 8b08 	vpop	{d8-d11}
 80073e0:	4640      	mov	r0, r8
 80073e2:	4621      	mov	r1, r4
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	2302      	movs	r3, #2
 80073e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ec:	f000 bb30 	b.w	8007a50 <arm_radix8_butterfly_f32>

080073f0 <arm_cfft_radix8by4_f32>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	ed2d 8b0a 	vpush	{d8-d12}
 80073f8:	8802      	ldrh	r2, [r0, #0]
 80073fa:	ed91 6a00 	vldr	s12, [r1]
 80073fe:	b08f      	sub	sp, #60	; 0x3c
 8007400:	460f      	mov	r7, r1
 8007402:	0852      	lsrs	r2, r2, #1
 8007404:	0093      	lsls	r3, r2, #2
 8007406:	900c      	str	r0, [sp, #48]	; 0x30
 8007408:	9103      	str	r1, [sp, #12]
 800740a:	6841      	ldr	r1, [r0, #4]
 800740c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007410:	4638      	mov	r0, r7
 8007412:	4418      	add	r0, r3
 8007414:	4606      	mov	r6, r0
 8007416:	9009      	str	r0, [sp, #36]	; 0x24
 8007418:	4418      	add	r0, r3
 800741a:	edd0 6a00 	vldr	s13, [r0]
 800741e:	edd6 3a00 	vldr	s7, [r6]
 8007422:	edd6 2a01 	vldr	s5, [r6, #4]
 8007426:	edd0 7a01 	vldr	s15, [r0, #4]
 800742a:	900a      	str	r0, [sp, #40]	; 0x28
 800742c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007430:	4604      	mov	r4, r0
 8007432:	4625      	mov	r5, r4
 8007434:	441c      	add	r4, r3
 8007436:	ed94 4a00 	vldr	s8, [r4]
 800743a:	ed94 5a01 	vldr	s10, [r4, #4]
 800743e:	9401      	str	r4, [sp, #4]
 8007440:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8007444:	4630      	mov	r0, r6
 8007446:	ee74 4a24 	vadd.f32	s9, s8, s9
 800744a:	463e      	mov	r6, r7
 800744c:	ee14 ea90 	vmov	lr, s9
 8007450:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007454:	f846 eb08 	str.w	lr, [r6], #8
 8007458:	ee37 6a27 	vadd.f32	s12, s14, s15
 800745c:	edd0 4a01 	vldr	s9, [r0, #4]
 8007460:	9604      	str	r6, [sp, #16]
 8007462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007466:	9e01      	ldr	r6, [sp, #4]
 8007468:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800746c:	ed96 2a01 	vldr	s4, [r6, #4]
 8007470:	ee36 7a24 	vadd.f32	s14, s12, s9
 8007474:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8007478:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800747c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8007480:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007484:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007488:	ee73 3a45 	vsub.f32	s7, s6, s10
 800748c:	4604      	mov	r4, r0
 800748e:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007492:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007496:	46a3      	mov	fp, r4
 8007498:	ee37 7a02 	vadd.f32	s14, s14, s4
 800749c:	ee34 5a84 	vadd.f32	s10, s9, s8
 80074a0:	ee13 8a90 	vmov	r8, s7
 80074a4:	46a4      	mov	ip, r4
 80074a6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80074aa:	ed87 7a01 	vstr	s14, [r7, #4]
 80074ae:	f84b 8b08 	str.w	r8, [fp], #8
 80074b2:	f1ac 0704 	sub.w	r7, ip, #4
 80074b6:	ed8c 5a01 	vstr	s10, [ip, #4]
 80074ba:	f101 0c08 	add.w	ip, r1, #8
 80074be:	462c      	mov	r4, r5
 80074c0:	f8cd c014 	str.w	ip, [sp, #20]
 80074c4:	ee15 ca90 	vmov	ip, s11
 80074c8:	f844 cb08 	str.w	ip, [r4], #8
 80074cc:	9407      	str	r4, [sp, #28]
 80074ce:	f101 0410 	add.w	r4, r1, #16
 80074d2:	ed85 6a01 	vstr	s12, [r5, #4]
 80074d6:	0852      	lsrs	r2, r2, #1
 80074d8:	9402      	str	r4, [sp, #8]
 80074da:	462c      	mov	r4, r5
 80074dc:	f101 0518 	add.w	r5, r1, #24
 80074e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80074e2:	46b2      	mov	sl, r6
 80074e4:	9506      	str	r5, [sp, #24]
 80074e6:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80074ea:	3a02      	subs	r2, #2
 80074ec:	ee16 5a90 	vmov	r5, s13
 80074f0:	46b6      	mov	lr, r6
 80074f2:	4630      	mov	r0, r6
 80074f4:	0852      	lsrs	r2, r2, #1
 80074f6:	f84a 5b08 	str.w	r5, [sl], #8
 80074fa:	f1a0 0604 	sub.w	r6, r0, #4
 80074fe:	edce 7a01 	vstr	s15, [lr, #4]
 8007502:	9208      	str	r2, [sp, #32]
 8007504:	f000 8130 	beq.w	8007768 <arm_cfft_radix8by4_f32+0x378>
 8007508:	4691      	mov	r9, r2
 800750a:	9a03      	ldr	r2, [sp, #12]
 800750c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007510:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007514:	3b08      	subs	r3, #8
 8007516:	f102 0510 	add.w	r5, r2, #16
 800751a:	f101 0c20 	add.w	ip, r1, #32
 800751e:	f1a4 020c 	sub.w	r2, r4, #12
 8007522:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007526:	4433      	add	r3, r6
 8007528:	3410      	adds	r4, #16
 800752a:	4650      	mov	r0, sl
 800752c:	4659      	mov	r1, fp
 800752e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8007532:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007536:	ed91 7a00 	vldr	s14, [r1]
 800753a:	edd0 7a00 	vldr	s15, [r0]
 800753e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8007542:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007546:	edd0 6a01 	vldr	s13, [r0, #4]
 800754a:	ed91 6a01 	vldr	s12, [r1, #4]
 800754e:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007552:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007556:	ee78 4a07 	vadd.f32	s9, s16, s14
 800755a:	ee74 5a65 	vsub.f32	s11, s8, s11
 800755e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8007562:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007566:	ed45 4a02 	vstr	s9, [r5, #-8]
 800756a:	edd1 4a01 	vldr	s9, [r1, #4]
 800756e:	ed90 4a01 	vldr	s8, [r0, #4]
 8007572:	ee70 4a24 	vadd.f32	s9, s0, s9
 8007576:	ee76 aa05 	vadd.f32	s21, s12, s10
 800757a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800757e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8007582:	ed45 4a01 	vstr	s9, [r5, #-4]
 8007586:	edd6 1a00 	vldr	s3, [r6]
 800758a:	edd7 0a00 	vldr	s1, [r7]
 800758e:	ed92 4a02 	vldr	s8, [r2, #8]
 8007592:	edd3 3a02 	vldr	s7, [r3, #8]
 8007596:	ed93 2a01 	vldr	s4, [r3, #4]
 800759a:	ed16 1a01 	vldr	s2, [r6, #-4]
 800759e:	edd2 2a01 	vldr	s5, [r2, #4]
 80075a2:	ed57 9a01 	vldr	s19, [r7, #-4]
 80075a6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80075aa:	ee39 3a81 	vadd.f32	s6, s19, s2
 80075ae:	ee74 8a84 	vadd.f32	s17, s9, s8
 80075b2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80075b6:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80075ba:	ee7a aae6 	vsub.f32	s21, s21, s13
 80075be:	ee18 aa90 	vmov	sl, s17
 80075c2:	f847 a908 	str.w	sl, [r7], #-8
 80075c6:	edd2 8a01 	vldr	s17, [r2, #4]
 80075ca:	ed93 9a01 	vldr	s18, [r3, #4]
 80075ce:	ee73 8a28 	vadd.f32	s17, s6, s17
 80075d2:	ee3a aa27 	vadd.f32	s20, s20, s15
 80075d6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80075da:	ee74 0a63 	vsub.f32	s1, s8, s7
 80075de:	edc7 8a01 	vstr	s17, [r7, #4]
 80075e2:	ed18 ba02 	vldr	s22, [r8, #-8]
 80075e6:	ed58 8a01 	vldr	s17, [r8, #-4]
 80075ea:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80075ee:	ee6a ba28 	vmul.f32	s23, s20, s17
 80075f2:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80075f6:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80075fa:	ee30 9a81 	vadd.f32	s18, s1, s2
 80075fe:	ee79 9a82 	vadd.f32	s19, s19, s4
 8007602:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007606:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800760a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800760e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8007612:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007616:	ee69 8a28 	vmul.f32	s17, s18, s17
 800761a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800761e:	ee1c aa10 	vmov	sl, s24
 8007622:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007626:	f841 ab08 	str.w	sl, [r1], #8
 800762a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800762e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8007632:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007636:	ee33 3a62 	vsub.f32	s6, s6, s5
 800763a:	ed01 aa01 	vstr	s20, [r1, #-4]
 800763e:	edc2 8a01 	vstr	s17, [r2, #4]
 8007642:	ed82 ba02 	vstr	s22, [r2, #8]
 8007646:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800764a:	ee74 3a63 	vsub.f32	s7, s8, s7
 800764e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8007652:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007656:	ee30 0a46 	vsub.f32	s0, s0, s12
 800765a:	ee33 3a42 	vsub.f32	s6, s6, s4
 800765e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007662:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007666:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800766a:	ee63 8a04 	vmul.f32	s17, s6, s8
 800766e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8007672:	ee60 9a04 	vmul.f32	s19, s0, s8
 8007676:	ee28 8a04 	vmul.f32	s16, s16, s8
 800767a:	ee20 0a24 	vmul.f32	s0, s0, s9
 800767e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8007682:	ee39 4a68 	vsub.f32	s8, s18, s17
 8007686:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800768a:	ee14 aa10 	vmov	sl, s8
 800768e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007692:	ee63 4a24 	vmul.f32	s9, s6, s9
 8007696:	ed44 9a02 	vstr	s19, [r4, #-8]
 800769a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800769e:	ed04 0a01 	vstr	s0, [r4, #-4]
 80076a2:	f846 a908 	str.w	sl, [r6], #-8
 80076a6:	ee35 6a46 	vsub.f32	s12, s10, s12
 80076aa:	ee35 7a87 	vadd.f32	s14, s11, s14
 80076ae:	edc6 3a01 	vstr	s7, [r6, #4]
 80076b2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80076b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ba:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80076be:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80076c2:	ee67 5a86 	vmul.f32	s11, s15, s12
 80076c6:	ee26 5a87 	vmul.f32	s10, s13, s14
 80076ca:	ee72 2a62 	vsub.f32	s5, s4, s5
 80076ce:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80076d2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80076d6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80076da:	ee62 0a86 	vmul.f32	s1, s5, s12
 80076de:	ee66 6a86 	vmul.f32	s13, s13, s12
 80076e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076e6:	ee21 6a06 	vmul.f32	s12, s2, s12
 80076ea:	ee62 2a87 	vmul.f32	s5, s5, s14
 80076ee:	ee21 1a07 	vmul.f32	s2, s2, s14
 80076f2:	ee15 aa90 	vmov	sl, s11
 80076f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076fa:	f840 ab08 	str.w	sl, [r0], #8
 80076fe:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007702:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007706:	f1b9 0901 	subs.w	r9, r9, #1
 800770a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800770e:	f105 0508 	add.w	r5, r5, #8
 8007712:	ed83 1a02 	vstr	s2, [r3, #8]
 8007716:	edc3 2a01 	vstr	s5, [r3, #4]
 800771a:	f108 0808 	add.w	r8, r8, #8
 800771e:	f1a2 0208 	sub.w	r2, r2, #8
 8007722:	f10c 0c10 	add.w	ip, ip, #16
 8007726:	f104 0408 	add.w	r4, r4, #8
 800772a:	f10e 0e18 	add.w	lr, lr, #24
 800772e:	f1a3 0308 	sub.w	r3, r3, #8
 8007732:	f47f aefc 	bne.w	800752e <arm_cfft_radix8by4_f32+0x13e>
 8007736:	9908      	ldr	r1, [sp, #32]
 8007738:	9802      	ldr	r0, [sp, #8]
 800773a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800773e:	00cb      	lsls	r3, r1, #3
 8007740:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007744:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007748:	9102      	str	r1, [sp, #8]
 800774a:	9904      	ldr	r1, [sp, #16]
 800774c:	4419      	add	r1, r3
 800774e:	9104      	str	r1, [sp, #16]
 8007750:	9905      	ldr	r1, [sp, #20]
 8007752:	4419      	add	r1, r3
 8007754:	9105      	str	r1, [sp, #20]
 8007756:	9907      	ldr	r1, [sp, #28]
 8007758:	449b      	add	fp, r3
 800775a:	4419      	add	r1, r3
 800775c:	449a      	add	sl, r3
 800775e:	9b06      	ldr	r3, [sp, #24]
 8007760:	9107      	str	r1, [sp, #28]
 8007762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007766:	9306      	str	r3, [sp, #24]
 8007768:	9a04      	ldr	r2, [sp, #16]
 800776a:	9807      	ldr	r0, [sp, #28]
 800776c:	edd2 3a00 	vldr	s7, [r2]
 8007770:	ed90 4a00 	vldr	s8, [r0]
 8007774:	eddb 7a00 	vldr	s15, [fp]
 8007778:	ed9a 3a00 	vldr	s6, [sl]
 800777c:	edd2 4a01 	vldr	s9, [r2, #4]
 8007780:	ed90 7a01 	vldr	s14, [r0, #4]
 8007784:	ed9b 2a01 	vldr	s4, [fp, #4]
 8007788:	edda 5a01 	vldr	s11, [sl, #4]
 800778c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8007790:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007792:	ee73 6a84 	vadd.f32	s13, s7, s8
 8007796:	ee34 6a87 	vadd.f32	s12, s9, s14
 800779a:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800779e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80077a2:	ee33 5a05 	vadd.f32	s10, s6, s10
 80077a6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80077aa:	ed82 5a00 	vstr	s10, [r2]
 80077ae:	ed9b 5a01 	vldr	s10, [fp, #4]
 80077b2:	edda 4a01 	vldr	s9, [sl, #4]
 80077b6:	ee36 5a05 	vadd.f32	s10, s12, s10
 80077ba:	ee72 3a04 	vadd.f32	s7, s4, s8
 80077be:	ee35 5a24 	vadd.f32	s10, s10, s9
 80077c2:	ee77 4a67 	vsub.f32	s9, s14, s15
 80077c6:	ed82 5a01 	vstr	s10, [r2, #4]
 80077ca:	9a05      	ldr	r2, [sp, #20]
 80077cc:	ee34 5a83 	vadd.f32	s10, s9, s6
 80077d0:	edd2 1a00 	vldr	s3, [r2]
 80077d4:	edd2 2a01 	vldr	s5, [r2, #4]
 80077d8:	9a02      	ldr	r2, [sp, #8]
 80077da:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80077de:	ee36 6a42 	vsub.f32	s12, s12, s4
 80077e2:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80077e6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80077ea:	ee65 2a22 	vmul.f32	s5, s10, s5
 80077ee:	ee25 5a21 	vmul.f32	s10, s10, s3
 80077f2:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80077f6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80077fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80077fe:	edcb 2a00 	vstr	s5, [fp]
 8007802:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007806:	edd2 3a01 	vldr	s7, [r2, #4]
 800780a:	ed92 5a00 	vldr	s10, [r2]
 800780e:	9a06      	ldr	r2, [sp, #24]
 8007810:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007814:	ee36 6a65 	vsub.f32	s12, s12, s11
 8007818:	ee66 4a85 	vmul.f32	s9, s13, s10
 800781c:	ee26 5a05 	vmul.f32	s10, s12, s10
 8007820:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007824:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007828:	ee75 6a66 	vsub.f32	s13, s10, s13
 800782c:	ee34 6a86 	vadd.f32	s12, s9, s12
 8007830:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007838:	edc0 6a01 	vstr	s13, [r0, #4]
 800783c:	ed80 6a00 	vstr	s12, [r0]
 8007840:	ed92 6a01 	vldr	s12, [r2, #4]
 8007844:	9803      	ldr	r0, [sp, #12]
 8007846:	ee77 7a43 	vsub.f32	s15, s14, s6
 800784a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800784e:	ed92 7a00 	vldr	s14, [r2]
 8007852:	ee65 6a87 	vmul.f32	s13, s11, s14
 8007856:	ee27 7a87 	vmul.f32	s14, s15, s14
 800785a:	ee65 5a86 	vmul.f32	s11, s11, s12
 800785e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007862:	ee77 5a65 	vsub.f32	s11, s14, s11
 8007866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786a:	edca 5a01 	vstr	s11, [sl, #4]
 800786e:	edca 7a00 	vstr	s15, [sl]
 8007872:	6872      	ldr	r2, [r6, #4]
 8007874:	4621      	mov	r1, r4
 8007876:	2304      	movs	r3, #4
 8007878:	f000 f8ea 	bl	8007a50 <arm_radix8_butterfly_f32>
 800787c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800787e:	6872      	ldr	r2, [r6, #4]
 8007880:	4621      	mov	r1, r4
 8007882:	2304      	movs	r3, #4
 8007884:	f000 f8e4 	bl	8007a50 <arm_radix8_butterfly_f32>
 8007888:	980a      	ldr	r0, [sp, #40]	; 0x28
 800788a:	6872      	ldr	r2, [r6, #4]
 800788c:	4621      	mov	r1, r4
 800788e:	2304      	movs	r3, #4
 8007890:	f000 f8de 	bl	8007a50 <arm_radix8_butterfly_f32>
 8007894:	9801      	ldr	r0, [sp, #4]
 8007896:	6872      	ldr	r2, [r6, #4]
 8007898:	4621      	mov	r1, r4
 800789a:	2304      	movs	r3, #4
 800789c:	b00f      	add	sp, #60	; 0x3c
 800789e:	ecbd 8b0a 	vpop	{d8-d12}
 80078a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a6:	f000 b8d3 	b.w	8007a50 <arm_radix8_butterfly_f32>
 80078aa:	bf00      	nop

080078ac <arm_cfft_f32>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	2a01      	cmp	r2, #1
 80078b2:	4606      	mov	r6, r0
 80078b4:	4617      	mov	r7, r2
 80078b6:	460c      	mov	r4, r1
 80078b8:	4698      	mov	r8, r3
 80078ba:	8805      	ldrh	r5, [r0, #0]
 80078bc:	d054      	beq.n	8007968 <arm_cfft_f32+0xbc>
 80078be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80078c2:	d04c      	beq.n	800795e <arm_cfft_f32+0xb2>
 80078c4:	d916      	bls.n	80078f4 <arm_cfft_f32+0x48>
 80078c6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80078ca:	d01a      	beq.n	8007902 <arm_cfft_f32+0x56>
 80078cc:	d95c      	bls.n	8007988 <arm_cfft_f32+0xdc>
 80078ce:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80078d2:	d044      	beq.n	800795e <arm_cfft_f32+0xb2>
 80078d4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80078d8:	d105      	bne.n	80078e6 <arm_cfft_f32+0x3a>
 80078da:	4620      	mov	r0, r4
 80078dc:	4629      	mov	r1, r5
 80078de:	6872      	ldr	r2, [r6, #4]
 80078e0:	2301      	movs	r3, #1
 80078e2:	f000 f8b5 	bl	8007a50 <arm_radix8_butterfly_f32>
 80078e6:	f1b8 0f00 	cmp.w	r8, #0
 80078ea:	d111      	bne.n	8007910 <arm_cfft_f32+0x64>
 80078ec:	2f01      	cmp	r7, #1
 80078ee:	d016      	beq.n	800791e <arm_cfft_f32+0x72>
 80078f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f4:	2d20      	cmp	r5, #32
 80078f6:	d032      	beq.n	800795e <arm_cfft_f32+0xb2>
 80078f8:	d94a      	bls.n	8007990 <arm_cfft_f32+0xe4>
 80078fa:	2d40      	cmp	r5, #64	; 0x40
 80078fc:	d0ed      	beq.n	80078da <arm_cfft_f32+0x2e>
 80078fe:	2d80      	cmp	r5, #128	; 0x80
 8007900:	d1f1      	bne.n	80078e6 <arm_cfft_f32+0x3a>
 8007902:	4630      	mov	r0, r6
 8007904:	4621      	mov	r1, r4
 8007906:	f7ff fca1 	bl	800724c <arm_cfft_radix8by2_f32>
 800790a:	f1b8 0f00 	cmp.w	r8, #0
 800790e:	d0ed      	beq.n	80078ec <arm_cfft_f32+0x40>
 8007910:	4620      	mov	r0, r4
 8007912:	89b1      	ldrh	r1, [r6, #12]
 8007914:	68b2      	ldr	r2, [r6, #8]
 8007916:	f7f8 fc69 	bl	80001ec <arm_bitreversal_32>
 800791a:	2f01      	cmp	r7, #1
 800791c:	d1e8      	bne.n	80078f0 <arm_cfft_f32+0x44>
 800791e:	ee07 5a90 	vmov	s15, r5
 8007922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007926:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800792a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800792e:	2d00      	cmp	r5, #0
 8007930:	d0de      	beq.n	80078f0 <arm_cfft_f32+0x44>
 8007932:	f104 0108 	add.w	r1, r4, #8
 8007936:	2300      	movs	r3, #0
 8007938:	3301      	adds	r3, #1
 800793a:	429d      	cmp	r5, r3
 800793c:	f101 0108 	add.w	r1, r1, #8
 8007940:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007944:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007948:	ee27 7a26 	vmul.f32	s14, s14, s13
 800794c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007950:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007954:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007958:	d1ee      	bne.n	8007938 <arm_cfft_f32+0x8c>
 800795a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795e:	4630      	mov	r0, r6
 8007960:	4621      	mov	r1, r4
 8007962:	f7ff fd45 	bl	80073f0 <arm_cfft_radix8by4_f32>
 8007966:	e7be      	b.n	80078e6 <arm_cfft_f32+0x3a>
 8007968:	b1ad      	cbz	r5, 8007996 <arm_cfft_f32+0xea>
 800796a:	f101 030c 	add.w	r3, r1, #12
 800796e:	2200      	movs	r2, #0
 8007970:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007974:	3201      	adds	r2, #1
 8007976:	eef1 7a67 	vneg.f32	s15, s15
 800797a:	4295      	cmp	r5, r2
 800797c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007980:	f103 0308 	add.w	r3, r3, #8
 8007984:	d1f4      	bne.n	8007970 <arm_cfft_f32+0xc4>
 8007986:	e79a      	b.n	80078be <arm_cfft_f32+0x12>
 8007988:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800798c:	d0a5      	beq.n	80078da <arm_cfft_f32+0x2e>
 800798e:	e7aa      	b.n	80078e6 <arm_cfft_f32+0x3a>
 8007990:	2d10      	cmp	r5, #16
 8007992:	d0b6      	beq.n	8007902 <arm_cfft_f32+0x56>
 8007994:	e7a7      	b.n	80078e6 <arm_cfft_f32+0x3a>
 8007996:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800799a:	d894      	bhi.n	80078c6 <arm_cfft_f32+0x1a>
 800799c:	e7aa      	b.n	80078f4 <arm_cfft_f32+0x48>
 800799e:	bf00      	nop

080079a0 <arm_cmplx_mag_squared_f32>:
 80079a0:	b470      	push	{r4, r5, r6}
 80079a2:	0896      	lsrs	r6, r2, #2
 80079a4:	d03e      	beq.n	8007a24 <arm_cmplx_mag_squared_f32+0x84>
 80079a6:	f100 0320 	add.w	r3, r0, #32
 80079aa:	f101 0410 	add.w	r4, r1, #16
 80079ae:	4635      	mov	r5, r6
 80079b0:	ed13 6a08 	vldr	s12, [r3, #-32]	; 0xffffffe0
 80079b4:	ed13 4a07 	vldr	s8, [r3, #-28]	; 0xffffffe4
 80079b8:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80079bc:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
 80079c0:	ed13 7a04 	vldr	s14, [r3, #-16]
 80079c4:	ed13 5a03 	vldr	s10, [r3, #-12]
 80079c8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80079cc:	ed53 5a01 	vldr	s11, [r3, #-4]
 80079d0:	ee26 6a06 	vmul.f32	s12, s12, s12
 80079d4:	ee24 4a04 	vmul.f32	s8, s8, s8
 80079d8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80079dc:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80079e0:	ee27 7a07 	vmul.f32	s14, s14, s14
 80079e4:	ee25 5a05 	vmul.f32	s10, s10, s10
 80079e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80079ec:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80079f0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80079f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80079f8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80079fc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007a00:	3d01      	subs	r5, #1
 8007a02:	ed04 6a04 	vstr	s12, [r4, #-16]
 8007a06:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007a0a:	ed04 7a02 	vstr	s14, [r4, #-8]
 8007a0e:	ed44 7a01 	vstr	s15, [r4, #-4]
 8007a12:	f103 0320 	add.w	r3, r3, #32
 8007a16:	f104 0410 	add.w	r4, r4, #16
 8007a1a:	d1c9      	bne.n	80079b0 <arm_cmplx_mag_squared_f32+0x10>
 8007a1c:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8007a20:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8007a24:	f012 0203 	ands.w	r2, r2, #3
 8007a28:	d010      	beq.n	8007a4c <arm_cmplx_mag_squared_f32+0xac>
 8007a2a:	3008      	adds	r0, #8
 8007a2c:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007a30:	ed10 7a01 	vldr	s14, [r0, #-4]
 8007a34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007a38:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007a3c:	3a01      	subs	r2, #1
 8007a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a42:	f100 0008 	add.w	r0, r0, #8
 8007a46:	ece1 7a01 	vstmia	r1!, {s15}
 8007a4a:	d1ef      	bne.n	8007a2c <arm_cmplx_mag_squared_f32+0x8c>
 8007a4c:	bc70      	pop	{r4, r5, r6}
 8007a4e:	4770      	bx	lr

08007a50 <arm_radix8_butterfly_f32>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	ed2d 8b10 	vpush	{d8-d15}
 8007a58:	b09d      	sub	sp, #116	; 0x74
 8007a5a:	461c      	mov	r4, r3
 8007a5c:	ed9f bac8 	vldr	s22, [pc, #800]	; 8007d80 <arm_radix8_butterfly_f32+0x330>
 8007a60:	921a      	str	r2, [sp, #104]	; 0x68
 8007a62:	1d03      	adds	r3, r0, #4
 8007a64:	4682      	mov	sl, r0
 8007a66:	4689      	mov	r9, r1
 8007a68:	468b      	mov	fp, r1
 8007a6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a6c:	9400      	str	r4, [sp, #0]
 8007a6e:	469e      	mov	lr, r3
 8007a70:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8007a74:	005a      	lsls	r2, r3, #1
 8007a76:	18d6      	adds	r6, r2, r3
 8007a78:	18f5      	adds	r5, r6, r3
 8007a7a:	9203      	str	r2, [sp, #12]
 8007a7c:	195a      	adds	r2, r3, r5
 8007a7e:	18d0      	adds	r0, r2, r3
 8007a80:	00df      	lsls	r7, r3, #3
 8007a82:	1819      	adds	r1, r3, r0
 8007a84:	463c      	mov	r4, r7
 8007a86:	9701      	str	r7, [sp, #4]
 8007a88:	4457      	add	r7, sl
 8007a8a:	930c      	str	r3, [sp, #48]	; 0x30
 8007a8c:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8007a96:	eb07 0c04 	add.w	ip, r7, r4
 8007a9a:	9c00      	ldr	r4, [sp, #0]
 8007a9c:	9302      	str	r3, [sp, #8]
 8007a9e:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8007aa2:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8007aa6:	3204      	adds	r2, #4
 8007aa8:	3104      	adds	r1, #4
 8007aaa:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8007aae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ab2:	f04f 0800 	mov.w	r8, #0
 8007ab6:	eddc 7a00 	vldr	s15, [ip]
 8007aba:	edd7 6a00 	vldr	s13, [r7]
 8007abe:	edd6 3a00 	vldr	s7, [r6]
 8007ac2:	ed5e aa01 	vldr	s21, [lr, #-4]
 8007ac6:	edd5 4a00 	vldr	s9, [r5]
 8007aca:	ed90 2a00 	vldr	s4, [r0]
 8007ace:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007ad2:	ed51 0a01 	vldr	s1, [r1, #-4]
 8007ad6:	ee77 8a82 	vadd.f32	s17, s15, s4
 8007ada:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8007ade:	ee76 1a87 	vadd.f32	s3, s13, s14
 8007ae2:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8007ae6:	ee31 6a84 	vadd.f32	s12, s3, s8
 8007aea:	ee33 5a28 	vadd.f32	s10, s6, s17
 8007aee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007af2:	ee75 6a06 	vadd.f32	s13, s10, s12
 8007af6:	ee35 5a46 	vsub.f32	s10, s10, s12
 8007afa:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8007afe:	ed85 5a00 	vstr	s10, [r5]
 8007b02:	ed96 1a01 	vldr	s2, [r6, #4]
 8007b06:	edd7 5a01 	vldr	s11, [r7, #4]
 8007b0a:	ed92 aa00 	vldr	s20, [r2]
 8007b0e:	ed91 6a00 	vldr	s12, [r1]
 8007b12:	ed9e 9a00 	vldr	s18, [lr]
 8007b16:	ed95 5a01 	vldr	s10, [r5, #4]
 8007b1a:	eddc 6a01 	vldr	s13, [ip, #4]
 8007b1e:	edd0 9a01 	vldr	s19, [r0, #4]
 8007b22:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8007b26:	ee71 2a46 	vsub.f32	s5, s2, s12
 8007b2a:	ee75 3aca 	vsub.f32	s7, s11, s20
 8007b2e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8007b32:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8007b36:	ee37 7a20 	vadd.f32	s14, s14, s1
 8007b3a:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8007b3e:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8007b42:	ee79 3a05 	vadd.f32	s7, s18, s10
 8007b46:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8007b4a:	ee39 5a45 	vsub.f32	s10, s18, s10
 8007b4e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8007b52:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8007b56:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8007b5a:	ee31 6a06 	vadd.f32	s12, s2, s12
 8007b5e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8007b62:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8007b66:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8007b6a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8007b6e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8007b72:	ee36 0a88 	vadd.f32	s0, s13, s16
 8007b76:	ee75 8a86 	vadd.f32	s17, s11, s12
 8007b7a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8007b7e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8007b82:	ee75 6a62 	vsub.f32	s13, s10, s5
 8007b86:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8007b8a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007b8e:	ee33 1a89 	vadd.f32	s2, s7, s18
 8007b92:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8007b96:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8007b9a:	ee75 4a22 	vadd.f32	s9, s10, s5
 8007b9e:	ee32 5a27 	vadd.f32	s10, s4, s15
 8007ba2:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007ba6:	ee33 8a06 	vadd.f32	s16, s6, s12
 8007baa:	ee75 2a87 	vadd.f32	s5, s11, s14
 8007bae:	ee31 9a28 	vadd.f32	s18, s2, s17
 8007bb2:	ee33 6a46 	vsub.f32	s12, s6, s12
 8007bb6:	ee74 0a61 	vsub.f32	s1, s8, s3
 8007bba:	ee33 2a80 	vadd.f32	s4, s7, s0
 8007bbe:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007bc2:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8007bc6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007bca:	ee31 1a68 	vsub.f32	s2, s2, s17
 8007bce:	ee34 4a21 	vadd.f32	s8, s8, s3
 8007bd2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8007bd6:	ee74 4a85 	vadd.f32	s9, s9, s10
 8007bda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007bde:	44d8      	add	r8, fp
 8007be0:	45c1      	cmp	r9, r8
 8007be2:	ed8e 9a00 	vstr	s18, [lr]
 8007be6:	ed85 1a01 	vstr	s2, [r5, #4]
 8007bea:	449e      	add	lr, r3
 8007bec:	ed8c 8a00 	vstr	s16, [ip]
 8007bf0:	441d      	add	r5, r3
 8007bf2:	ed80 6a00 	vstr	s12, [r0]
 8007bf6:	edcc 0a01 	vstr	s1, [ip, #4]
 8007bfa:	ed80 4a01 	vstr	s8, [r0, #4]
 8007bfe:	449c      	add	ip, r3
 8007c00:	ed87 2a00 	vstr	s4, [r7]
 8007c04:	4418      	add	r0, r3
 8007c06:	ed41 3a01 	vstr	s7, [r1, #-4]
 8007c0a:	ed42 2a01 	vstr	s5, [r2, #-4]
 8007c0e:	ed86 7a00 	vstr	s14, [r6]
 8007c12:	ed87 3a01 	vstr	s6, [r7, #4]
 8007c16:	edc1 4a00 	vstr	s9, [r1]
 8007c1a:	441f      	add	r7, r3
 8007c1c:	edc2 5a00 	vstr	s11, [r2]
 8007c20:	4419      	add	r1, r3
 8007c22:	edc6 6a01 	vstr	s13, [r6, #4]
 8007c26:	441a      	add	r2, r3
 8007c28:	441e      	add	r6, r3
 8007c2a:	f63f af44 	bhi.w	8007ab6 <arm_radix8_butterfly_f32+0x66>
 8007c2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c30:	2907      	cmp	r1, #7
 8007c32:	4620      	mov	r0, r4
 8007c34:	f240 81e9 	bls.w	800800a <arm_radix8_butterfly_f32+0x5ba>
 8007c38:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8007c3c:	193e      	adds	r6, r7, r4
 8007c3e:	1935      	adds	r5, r6, r4
 8007c40:	9c03      	ldr	r4, [sp, #12]
 8007c42:	9000      	str	r0, [sp, #0]
 8007c44:	4622      	mov	r2, r4
 8007c46:	3201      	adds	r2, #1
 8007c48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007c4c:	9900      	ldr	r1, [sp, #0]
 8007c4e:	1828      	adds	r0, r5, r0
 8007c50:	eb00 0e01 	add.w	lr, r0, r1
 8007c54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c56:	440a      	add	r2, r1
 8007c58:	eb04 0c01 	add.w	ip, r4, r1
 8007c5c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8007c60:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8007c64:	9a00      	ldr	r2, [sp, #0]
 8007c66:	940f      	str	r4, [sp, #60]	; 0x3c
 8007c68:	00ed      	lsls	r5, r5, #3
 8007c6a:	9511      	str	r5, [sp, #68]	; 0x44
 8007c6c:	00d5      	lsls	r5, r2, #3
 8007c6e:	950d      	str	r5, [sp, #52]	; 0x34
 8007c70:	9d01      	ldr	r5, [sp, #4]
 8007c72:	3508      	adds	r5, #8
 8007c74:	9516      	str	r5, [sp, #88]	; 0x58
 8007c76:	9d02      	ldr	r5, [sp, #8]
 8007c78:	3508      	adds	r5, #8
 8007c7a:	0114      	lsls	r4, r2, #4
 8007c7c:	9517      	str	r5, [sp, #92]	; 0x5c
 8007c7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c80:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007c82:	940e      	str	r4, [sp, #56]	; 0x38
 8007c84:	00c0      	lsls	r0, r0, #3
 8007c86:	9010      	str	r0, [sp, #64]	; 0x40
 8007c88:	18aa      	adds	r2, r5, r2
 8007c8a:	9207      	str	r2, [sp, #28]
 8007c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007c90:	18aa      	adds	r2, r5, r2
 8007c92:	9208      	str	r2, [sp, #32]
 8007c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007c96:	18aa      	adds	r2, r5, r2
 8007c98:	9209      	str	r2, [sp, #36]	; 0x24
 8007c9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007c9e:	f10e 0204 	add.w	r2, lr, #4
 8007ca2:	920a      	str	r2, [sp, #40]	; 0x28
 8007ca4:	00c9      	lsls	r1, r1, #3
 8007ca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ca8:	310c      	adds	r1, #12
 8007caa:	00f6      	lsls	r6, r6, #3
 8007cac:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8007cb0:	9114      	str	r1, [sp, #80]	; 0x50
 8007cb2:	18a9      	adds	r1, r5, r2
 8007cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cb6:	9612      	str	r6, [sp, #72]	; 0x48
 8007cb8:	00ff      	lsls	r7, r7, #3
 8007cba:	19ae      	adds	r6, r5, r6
 8007cbc:	3008      	adds	r0, #8
 8007cbe:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8007cc2:	9606      	str	r6, [sp, #24]
 8007cc4:	9019      	str	r0, [sp, #100]	; 0x64
 8007cc6:	18aa      	adds	r2, r5, r2
 8007cc8:	0164      	lsls	r4, r4, #5
 8007cca:	19ee      	adds	r6, r5, r7
 8007ccc:	f10c 000c 	add.w	r0, ip, #12
 8007cd0:	9713      	str	r7, [sp, #76]	; 0x4c
 8007cd2:	9604      	str	r6, [sp, #16]
 8007cd4:	9015      	str	r0, [sp, #84]	; 0x54
 8007cd6:	9103      	str	r1, [sp, #12]
 8007cd8:	9205      	str	r2, [sp, #20]
 8007cda:	f104 0208 	add.w	r2, r4, #8
 8007cde:	9218      	str	r2, [sp, #96]	; 0x60
 8007ce0:	f04f 0801 	mov.w	r8, #1
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f102 0108 	add.w	r1, r2, #8
 8007cea:	460f      	mov	r7, r1
 8007cec:	910b      	str	r1, [sp, #44]	; 0x2c
 8007cee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cf0:	188e      	adds	r6, r1, r2
 8007cf2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007cf4:	188d      	adds	r5, r1, r2
 8007cf6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007cf8:	188c      	adds	r4, r1, r2
 8007cfa:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007cfc:	1888      	adds	r0, r1, r2
 8007cfe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007d00:	eb01 0c02 	add.w	ip, r1, r2
 8007d04:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007d06:	440a      	add	r2, r1
 8007d08:	9903      	ldr	r1, [sp, #12]
 8007d0a:	edd1 fa00 	vldr	s31, [r1]
 8007d0e:	9905      	ldr	r1, [sp, #20]
 8007d10:	ed91 fa00 	vldr	s30, [r1]
 8007d14:	9904      	ldr	r1, [sp, #16]
 8007d16:	edd1 ea00 	vldr	s29, [r1]
 8007d1a:	9906      	ldr	r1, [sp, #24]
 8007d1c:	ed91 ea00 	vldr	s28, [r1]
 8007d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d22:	edd1 da00 	vldr	s27, [r1]
 8007d26:	9908      	ldr	r1, [sp, #32]
 8007d28:	ed91 da00 	vldr	s26, [r1]
 8007d2c:	9907      	ldr	r1, [sp, #28]
 8007d2e:	edd1 ca00 	vldr	s25, [r1]
 8007d32:	9903      	ldr	r1, [sp, #12]
 8007d34:	ed91 ca01 	vldr	s24, [r1, #4]
 8007d38:	9905      	ldr	r1, [sp, #20]
 8007d3a:	edd1 ba01 	vldr	s23, [r1, #4]
 8007d3e:	9904      	ldr	r1, [sp, #16]
 8007d40:	edd1 aa01 	vldr	s21, [r1, #4]
 8007d44:	9906      	ldr	r1, [sp, #24]
 8007d46:	ed91 aa01 	vldr	s20, [r1, #4]
 8007d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4c:	edd1 7a01 	vldr	s15, [r1, #4]
 8007d50:	9908      	ldr	r1, [sp, #32]
 8007d52:	edcd 7a00 	vstr	s15, [sp]
 8007d56:	edd1 7a01 	vldr	s15, [r1, #4]
 8007d5a:	9907      	ldr	r1, [sp, #28]
 8007d5c:	edcd 7a01 	vstr	s15, [sp, #4]
 8007d60:	edd1 7a01 	vldr	s15, [r1, #4]
 8007d64:	eb0a 0e07 	add.w	lr, sl, r7
 8007d68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007d6a:	edcd 7a02 	vstr	s15, [sp, #8]
 8007d6e:	eb0c 010a 	add.w	r1, ip, sl
 8007d72:	4456      	add	r6, sl
 8007d74:	4455      	add	r5, sl
 8007d76:	4454      	add	r4, sl
 8007d78:	4450      	add	r0, sl
 8007d7a:	4452      	add	r2, sl
 8007d7c:	46c4      	mov	ip, r8
 8007d7e:	e001      	b.n	8007d84 <arm_radix8_butterfly_f32+0x334>
 8007d80:	3f3504f3 	.word	0x3f3504f3
 8007d84:	ed96 5a00 	vldr	s10, [r6]
 8007d88:	ed52 9a01 	vldr	s19, [r2, #-4]
 8007d8c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8007d90:	edd0 7a00 	vldr	s15, [r0]
 8007d94:	ed17 7a01 	vldr	s14, [r7, #-4]
 8007d98:	edde 3a00 	vldr	s7, [lr]
 8007d9c:	ed94 3a00 	vldr	s6, [r4]
 8007da0:	ed95 2a00 	vldr	s4, [r5]
 8007da4:	ed9e 0a01 	vldr	s0, [lr, #4]
 8007da8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007dac:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007db0:	ee33 4a29 	vadd.f32	s8, s6, s19
 8007db4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007db8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007dbc:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007dc0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007dc4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dcc:	ed8e 6a00 	vstr	s12, [lr]
 8007dd0:	edd0 8a01 	vldr	s17, [r0, #4]
 8007dd4:	ed95 9a01 	vldr	s18, [r5, #4]
 8007dd8:	edd1 2a00 	vldr	s5, [r1]
 8007ddc:	ed97 7a00 	vldr	s14, [r7]
 8007de0:	edd4 0a01 	vldr	s1, [r4, #4]
 8007de4:	ed96 6a01 	vldr	s12, [r6, #4]
 8007de8:	edd2 5a00 	vldr	s11, [r2]
 8007dec:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007df0:	ee33 3a69 	vsub.f32	s6, s6, s19
 8007df4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007df8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8007dfc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007e00:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007e04:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007e08:	ee79 2a22 	vadd.f32	s5, s18, s5
 8007e0c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8007e10:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007e14:	ee35 5a29 	vadd.f32	s10, s10, s19
 8007e18:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007e1c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007e20:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8007e24:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007e28:	ee32 9a08 	vadd.f32	s18, s4, s16
 8007e2c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007e30:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007e34:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007e38:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007e3c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8007e40:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007e44:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007e48:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007e4c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8007e50:	ee36 0a28 	vadd.f32	s0, s12, s17
 8007e54:	ee33 3a69 	vsub.f32	s6, s6, s19
 8007e58:	ee32 7a64 	vsub.f32	s14, s4, s9
 8007e5c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8007e60:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007e64:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007e68:	ee75 8a85 	vadd.f32	s17, s11, s10
 8007e6c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8007e70:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8007e74:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007e78:	ee79 1a41 	vsub.f32	s3, s18, s2
 8007e7c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8007e80:	ee76 5a43 	vsub.f32	s11, s12, s6
 8007e84:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007e88:	ee72 4a24 	vadd.f32	s9, s4, s9
 8007e8c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8007e90:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8007e94:	ee30 0a20 	vadd.f32	s0, s0, s1
 8007e98:	ee77 9a85 	vadd.f32	s19, s15, s10
 8007e9c:	ee36 6a03 	vadd.f32	s12, s12, s6
 8007ea0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007ea4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8007ea8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8007eac:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8007eb0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8007eb4:	ee39 1a01 	vadd.f32	s2, s18, s2
 8007eb8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8007ebc:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8007ec0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8007ec4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8007ec8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8007ecc:	ee35 3a03 	vadd.f32	s6, s10, s6
 8007ed0:	ee72 6a66 	vsub.f32	s13, s4, s13
 8007ed4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8007ed8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8007edc:	ed9d 4a02 	vldr	s8, [sp, #8]
 8007ee0:	ed8e 1a01 	vstr	s2, [lr, #4]
 8007ee4:	ee77 3a63 	vsub.f32	s7, s14, s7
 8007ee8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007eec:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007ef0:	ed86 3a00 	vstr	s6, [r6]
 8007ef4:	ee30 9a89 	vadd.f32	s18, s1, s18
 8007ef8:	ee32 2a05 	vadd.f32	s4, s4, s10
 8007efc:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8007f00:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8007f04:	ee67 2a22 	vmul.f32	s5, s14, s5
 8007f08:	ee64 1a00 	vmul.f32	s3, s8, s0
 8007f0c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007f10:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8007f14:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8007f18:	ee64 8a28 	vmul.f32	s17, s8, s17
 8007f1c:	ed9d 4a00 	vldr	s8, [sp]
 8007f20:	edc6 6a01 	vstr	s13, [r6, #4]
 8007f24:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007f28:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8007f2c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8007f30:	ee24 4a25 	vmul.f32	s8, s8, s11
 8007f34:	ee30 7a87 	vadd.f32	s14, s1, s14
 8007f38:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007f3c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8007f40:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8007f44:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8007f48:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8007f4c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8007f50:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8007f54:	ee75 1a21 	vadd.f32	s3, s10, s3
 8007f58:	ee30 0a68 	vsub.f32	s0, s0, s17
 8007f5c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8007f60:	ee70 0a84 	vadd.f32	s1, s1, s8
 8007f64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007f68:	44dc      	add	ip, fp
 8007f6a:	45e1      	cmp	r9, ip
 8007f6c:	ed84 9a00 	vstr	s18, [r4]
 8007f70:	edc4 3a01 	vstr	s7, [r4, #4]
 8007f74:	449e      	add	lr, r3
 8007f76:	ed02 7a01 	vstr	s14, [r2, #-4]
 8007f7a:	edc2 2a00 	vstr	s5, [r2]
 8007f7e:	441e      	add	r6, r3
 8007f80:	ed85 2a00 	vstr	s4, [r5]
 8007f84:	ed85 8a01 	vstr	s16, [r5, #4]
 8007f88:	441c      	add	r4, r3
 8007f8a:	ed47 1a01 	vstr	s3, [r7, #-4]
 8007f8e:	ed87 0a00 	vstr	s0, [r7]
 8007f92:	441a      	add	r2, r3
 8007f94:	ed41 4a01 	vstr	s9, [r1, #-4]
 8007f98:	edc1 9a00 	vstr	s19, [r1]
 8007f9c:	441d      	add	r5, r3
 8007f9e:	edc0 0a00 	vstr	s1, [r0]
 8007fa2:	441f      	add	r7, r3
 8007fa4:	ed80 6a01 	vstr	s12, [r0, #4]
 8007fa8:	4419      	add	r1, r3
 8007faa:	4418      	add	r0, r3
 8007fac:	f63f aeea 	bhi.w	8007d84 <arm_radix8_butterfly_f32+0x334>
 8007fb0:	9a03      	ldr	r2, [sp, #12]
 8007fb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fb4:	440a      	add	r2, r1
 8007fb6:	9203      	str	r2, [sp, #12]
 8007fb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007fba:	9a05      	ldr	r2, [sp, #20]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	9205      	str	r2, [sp, #20]
 8007fc0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fc2:	9a04      	ldr	r2, [sp, #16]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	9204      	str	r2, [sp, #16]
 8007fc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007fca:	9a06      	ldr	r2, [sp, #24]
 8007fcc:	440a      	add	r2, r1
 8007fce:	9206      	str	r2, [sp, #24]
 8007fd0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fd4:	440a      	add	r2, r1
 8007fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8007fd8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007fda:	9a08      	ldr	r2, [sp, #32]
 8007fdc:	440a      	add	r2, r1
 8007fde:	9208      	str	r2, [sp, #32]
 8007fe0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fe2:	9a07      	ldr	r2, [sp, #28]
 8007fe4:	440a      	add	r2, r1
 8007fe6:	9207      	str	r2, [sp, #28]
 8007fe8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fec:	f108 0801 	add.w	r8, r8, #1
 8007ff0:	3208      	adds	r2, #8
 8007ff2:	4588      	cmp	r8, r1
 8007ff4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ff8:	f47f ae75 	bne.w	8007ce6 <arm_radix8_butterfly_f32+0x296>
 8007ffc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	46c3      	mov	fp, r8
 8008004:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8008008:	e532      	b.n	8007a70 <arm_radix8_butterfly_f32+0x20>
 800800a:	b01d      	add	sp, #116	; 0x74
 800800c:	ecbd 8b10 	vpop	{d8-d15}
 8008010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008014 <__libc_init_array>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	4e0d      	ldr	r6, [pc, #52]	; (800804c <__libc_init_array+0x38>)
 8008018:	4c0d      	ldr	r4, [pc, #52]	; (8008050 <__libc_init_array+0x3c>)
 800801a:	1ba4      	subs	r4, r4, r6
 800801c:	10a4      	asrs	r4, r4, #2
 800801e:	2500      	movs	r5, #0
 8008020:	42a5      	cmp	r5, r4
 8008022:	d109      	bne.n	8008038 <__libc_init_array+0x24>
 8008024:	4e0b      	ldr	r6, [pc, #44]	; (8008054 <__libc_init_array+0x40>)
 8008026:	4c0c      	ldr	r4, [pc, #48]	; (8008058 <__libc_init_array+0x44>)
 8008028:	f000 f82c 	bl	8008084 <_init>
 800802c:	1ba4      	subs	r4, r4, r6
 800802e:	10a4      	asrs	r4, r4, #2
 8008030:	2500      	movs	r5, #0
 8008032:	42a5      	cmp	r5, r4
 8008034:	d105      	bne.n	8008042 <__libc_init_array+0x2e>
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800803c:	4798      	blx	r3
 800803e:	3501      	adds	r5, #1
 8008040:	e7ee      	b.n	8008020 <__libc_init_array+0xc>
 8008042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008046:	4798      	blx	r3
 8008048:	3501      	adds	r5, #1
 800804a:	e7f2      	b.n	8008032 <__libc_init_array+0x1e>
 800804c:	0801b544 	.word	0x0801b544
 8008050:	0801b544 	.word	0x0801b544
 8008054:	0801b544 	.word	0x0801b544
 8008058:	0801b548 	.word	0x0801b548

0800805c <memcpy>:
 800805c:	b510      	push	{r4, lr}
 800805e:	1e43      	subs	r3, r0, #1
 8008060:	440a      	add	r2, r1
 8008062:	4291      	cmp	r1, r2
 8008064:	d100      	bne.n	8008068 <memcpy+0xc>
 8008066:	bd10      	pop	{r4, pc}
 8008068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800806c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008070:	e7f7      	b.n	8008062 <memcpy+0x6>

08008072 <memset>:
 8008072:	4402      	add	r2, r0
 8008074:	4603      	mov	r3, r0
 8008076:	4293      	cmp	r3, r2
 8008078:	d100      	bne.n	800807c <memset+0xa>
 800807a:	4770      	bx	lr
 800807c:	f803 1b01 	strb.w	r1, [r3], #1
 8008080:	e7f9      	b.n	8008076 <memset+0x4>
	...

08008084 <_init>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	bf00      	nop
 8008088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808a:	bc08      	pop	{r3}
 800808c:	469e      	mov	lr, r3
 800808e:	4770      	bx	lr

08008090 <_fini>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr
